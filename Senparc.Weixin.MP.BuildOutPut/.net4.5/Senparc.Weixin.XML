<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Senparc.Weixin</name>
    </assembly>
    <members>
        <member name="T:Senparc.Weixin.Cache.IContainerItemCollection">
            <summary>
            IContainerItemCollection，对某个Container下的缓存值ContainerBag进行封装
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Cache.IContainerItemCollection.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Cache.IContainerItemCollection.Item(System.String)">
            <summary>
            索引器
            </summary>
            <param name="key">缓存键（通常为AppId，值和IBaseContainerBag.Key相等）</param>
            <returns></returns>
        </member>
        <member name="T:Senparc.Weixin.Cache.ContainerItemCollection">
            <summary>
            储存某个Container下所有ContainerBag的字典集合
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Cache.ContainerItemCollection.Item(System.String)">
            <summary>
            索引器
            </summary>
            <param name="key">缓存键（通常为AppId，值和IBaseContainerBag.Key相等）</param>
            <returns></returns>
        </member>
        <member name="P:Senparc.Weixin.Cache.ContainerItemCollection.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Cache.IContainerCacheStragegy">
            <summary>
            容器缓存策略接口
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Cache.IContainerCacheStragegy.UpdateContainerBag(System.String,Senparc.Weixin.Containers.IBaseContainerBag)">
            <summary>
            更新ContainerBag
            </summary>
            <param name="key"></param>
            <param name="containerBag"></param>
        </member>
        <member name="T:Senparc.Weixin.Cache.LocalCacheHelper">
            <summary>
            全局静态数据源帮助类
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Cache.LocalCacheHelper.LocalCache">
            <summary>
            所有数据集合的列表
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Cache.LocalContainerCacheStrategy">
            <summary>
            本地容器缓存策略
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Cache.LocalContainerCacheStrategy.#ctor">
            <summary>
            LocalCacheStrategy的构造函数
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Cache.IBaseCacheStrategy.CacheSetKey">
            <summary>
            整个Cache集合的Key
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Cache.IBaseCacheStrategy`2">
            <summary>
            公共缓存策略接口
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Cache.IBaseCacheStrategy`2.InsertToCache(`0,`1)">
            <summary>
            添加指定ID的对象
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
        </member>
        <member name="M:Senparc.Weixin.Cache.IBaseCacheStrategy`2.RemoveFromCache(`0)">
            <summary>
            移除指定缓存键的对象
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Senparc.Weixin.Cache.IBaseCacheStrategy`2.Get(`0)">
            <summary>
            返回指定缓存键的对象
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Cache.IBaseCacheStrategy`2.GetAll">
            <summary>
            获取所有缓存信息集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Cache.IBaseCacheStrategy`2.CheckExisted(`0)">
            <summary>
            检查是否存在Key及对象
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Cache.IBaseCacheStrategy`2.GetCount">
            <summary>
            获取缓存集合总数（注意：每个缓存框架的计数对象不一定一致！）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Cache.IBaseCacheStrategy`2.Update(`0,`1)">
            <summary>
            更新缓存
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
        </member>
        <member name="T:Senparc.Weixin.Config">
            <summary>
            全局设置
            </summary>
        </member>
        <member name="F:Senparc.Weixin.Config.TIME_OUT">
            <summary>
            请求超时设置（以毫秒为单位），默认为10秒。
            说明：此处常量专为提供给方法的参数的默认值，不是方法内所有请求的默认超时时间。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Config.IsDebug">
            <summary>
            指定是否是Debug状态，如果是，系统会自动输出日志
            </summary>
        </member>
        <member name="F:Senparc.Weixin.Config.MaxJsonLength">
            <summary>JavaScriptSerializer 类接受的 JSON 字符串的最大长度
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Containers.IBaseContainer">
            <summary>
            IBaseContainer
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Containers.IBaseContainer`1">
            <summary>
            带IBaseContainerBag泛型的IBaseContainer
            </summary>
            <typeparam name="TBag"></typeparam>
        </member>
        <member name="T:Senparc.Weixin.Containers.BaseContainer`1">
            <summary>
            微信容器接口（如Ticket、AccessToken）
            </summary>
            <typeparam name="TBag"></typeparam>
        </member>
        <member name="P:Senparc.Weixin.Containers.BaseContainer`1.Cache">
            <summary>
            获取符合当前缓存策略配置的缓存的操作对象实例
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Containers.BaseContainer`1.ItemCollection">
            <summary>
            获取当前容器的数据项集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Containers.BaseContainer`1.GetCacheKey">
            <summary>
            获取缓存Key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Containers.BaseContainer`1.GetAllItems">
            <summary>
            获取所有容器内已经注册的项目
            （此方法将会遍历Dictionary，当数据项很多的时候效率会明显降低）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Containers.BaseContainer`1.TryGetItem(System.String)">
            <summary>
            尝试获取某一项Bag
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Containers.BaseContainer`1.TryGetItem``1(System.String,System.Func{`0,``0})">
            <summary>
            尝试获取某一项Bag中的具体某个属性
            </summary>
            <param name="key"></param>
            <param name="property">具体某个属性</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Containers.BaseContainer`1.Update(System.String,`0)">
            <summary>
            更新数据项
            </summary>
            <param name="key"></param>
            <param name="bag">为null时删除该项</param>
        </member>
        <member name="M:Senparc.Weixin.Containers.BaseContainer`1.Update(System.String,System.Action{`0})">
            <summary>
            更新数据项
            </summary>
            <param name="key"></param>
            <param name="partialUpdate">为null时删除该项</param>
        </member>
        <member name="M:Senparc.Weixin.Containers.BaseContainer`1.CheckRegistered(System.String)">
            <summary>
            检查Key是否已经注册
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.Weixin.Containers.IBaseContainerBag">
            <summary>
            IBaseContainerBag
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Containers.IBaseContainerBag.Key">
            <summary>
            缓存键
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Containers.IBaseContainerBag.CacheTime">
            <summary>
            当前对象被缓存的时间
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Containers.BaseContainerBag">
            <summary>
            BaseContainer容器中的Value类型
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Containers.BaseContainerBag.Key">
            <summary>
            通常为AppId
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Containers.BaseContainerBag.CacheTime">
            <summary>
            缓存时间，不使用属性变化监听
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Containers.BaseContainerBag.SetContainerProperty``1(``0@,``0,System.String)">
            <summary>
            设置Container属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="storage"></param>
            <param name="value"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Senparc.Weixin.Context.MessageContainer`1.MaxRecordCount">
            <summary>
            最大记录条数（保留尾部），如果小于等于0则不限制
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Context.IMessageContext`2">
            <summary>
            微信消息上下文（单个用户）接口
            </summary>
            <typeparam name="TRequest">请求消息类型</typeparam>
            <typeparam name="TResponse">响应消息类型</typeparam>
        </member>
        <member name="P:Senparc.Weixin.Context.IMessageContext`2.UserName">
            <summary>
            用户名（OpenID）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.IMessageContext`2.LastActiveTime">
            <summary>
            最后一次活动时间（用户主动发送Resquest请求的时间）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.IMessageContext`2.RequestMessages">
            <summary>
            接收消息记录
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.IMessageContext`2.ResponseMessages">
            <summary>
            响应消息记录
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.IMessageContext`2.MaxRecordCount">
            <summary>
            最大储存容量（分别针对RequestMessages和ResponseMessages）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.IMessageContext`2.StorageData">
            <summary>
            临时储存数据，如用户状态等，出于保持.net 3.5版本，这里暂不使用dynamic
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.IMessageContext`2.ExpireMinutes">
            <summary>
            用于覆盖WeixinContext所设置的默认过期时间
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.IMessageContext`2.AppStoreState">
            <summary>
            AppStore状态，系统属性，请勿操作
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Context.MessageContext`2">
            <summary>
            微信消息上下文（单个用户）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.MessageContext`2.AppStoreState">
            <summary>
            AppStore状态，系统属性，请勿操作
            </summary>
        </member>
        <member name="E:Senparc.Weixin.Context.MessageContext`2.MessageContextRemoved">
            <summary>
            当MessageContext被删除时触发的事件
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Context.MessageContext`2.OnMessageContextRemoved(Senparc.Weixin.Context.WeixinContextRemovedEventArgs{`0,`1})">
            <summary>
            执行上下文被移除的事件
            注意：此事件不是实时触发的，而是等过期后任意一个人发过来的下一条消息执行之前触发。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Senparc.Weixin.Context.MessageContext`2.#ctor">
            <summary>
            
            </summary>
            <param name="maxRecordCount">maxRecordCount如果小于等于0，则不限制</param>
        </member>
        <member name="M:Senparc.Weixin.Context.MessageContext`2.OnRemoved">
            <summary>
            此上下文被清除的时候触发
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Context.MessageQueue`3">
            <summary>
            微信消息列队（针对单个账号的往来消息）
            </summary>
            <typeparam name="TM"></typeparam>
        </member>
        <member name="F:Senparc.Weixin.Context.WeixinContextGlobal.UseWeixinContext">
            <summary>
            是否开启上下文记录
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Context.WeixinContext`3">
            <summary>
            微信消息上下文（全局）
            默认过期时间：90分钟
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.WeixinContext`3.MessageCollection">
            <summary>
            所有MessageContext集合，不要直接操作此对象
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.WeixinContext`3.MessageQueue">
            <summary>
            MessageContext列队（LastActiveTime升序排列）,不要直接操作此对象
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.WeixinContext`3.ExpireMinutes">
            <summary>
            每一个MessageContext过期时间
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.WeixinContext`3.MaxRecordCount">
            <summary>
            最大储存上下文数量（分别针对请求和响应信息）
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.Restore">
            <summary>
            重置所有上下文参数，所有记录将被清空
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.GetMessageContext(System.String)">
            <summary>
            获取MessageContext，如果不存在，返回null
            这个方法的更重要意义在于操作TM队列，及时移除过期信息，并将最新活动的对象移到尾部
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.GetMessageContext(System.String,System.Boolean)">
            <summary>
            获取MessageContext
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <param name="createIfNotExists">True：如果用户不存在，则创建一个实例，并返回这个最新的实例
            False：用户储存在，则返回null</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.GetMessageContext(`1)">
            <summary>
            获取MessageContext，如果不存在，使用requestMessage信息初始化一个，并返回原始实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.GetMessageContext(`2)">
            <summary>
            获取MessageContext，如果不存在，使用requestMessage信息初始化一个，并返回原始实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.InsertMessage(`1)">
            <summary>
            记录请求信息
            </summary>
            <param name="requestMessage">请求信息</param>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.InsertMessage(`2)">
            <summary>
            记录响应信息
            </summary>
            <param name="responseMessage">响应信息</param>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.GetLastRequestMessage(System.String)">
            <summary>
            获取最新一条请求数据，如果不存在，则返回Null
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.GetLastResponseMessage(System.String)">
            <summary>
            获取最新一条响应数据，如果不存在，则返回Null
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="T:Senparc.Weixin.Context.WeixinContextRemovedEventArgs`2">
            <summary>
            对话上下文被删除时触发事件的事件数据
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.WeixinContextRemovedEventArgs`2.OpenId">
            <summary>
            该用户的OpenId
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.WeixinContextRemovedEventArgs`2.LastActiveTime">
            <summary>
            最后一次响应时间
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.WeixinContextRemovedEventArgs`2.MessageContext">
            <summary>
            上下文对象
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Entities.BindableBase">
            <summary>
            用于实现INotifyPropertyChanged
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Entities.BindableBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            设置属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="storage"></param>
            <param name="value"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.Weixin.Entities.IEntityBase">
            <summary>
            所有微信自定义实体的基础接口
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Entities.IJsonIgnoreNull">
            <summary>
            生成JSON时忽略NULL对象
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Entities.QyJsonResult">
            <summary>
            企业号JSON返回结果
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Entities.QyJsonResult.P2PData">
            <summary>
            为P2P返回结果做准备
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Entities.MessageBase">
            <summary>
            所有Request和Response消息的基类
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Entities.IResponseMessageNoResponse">
            <summary>
            当MessageHandler接收到IResponseNothing的返回类型参数时，只会向微信服务器返回空字符串，等同于return null
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Entities.WxJsonResult">
            <summary>
            公众号JSON返回结果（用于菜单接口等）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Entities.WxJsonResult.P2PData">
            <summary>
            为P2P返回结果做准备
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Entities.RequestMessageBase">
            <summary>
            接收到请求的消息
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Entities.ResponseMessageBase">
            <summary>
            响应回复消息
            </summary>
        </member>
        <member name="T:Senparc.Weixin.IEncryptPostModel">
            <summary>
            接收解密信息统一接口
            </summary>
        </member>
        <member name="T:Senparc.Weixin.EncryptPostModel">
            <summary>
            接收加密信息统一基类
            </summary>
        </member>
        <member name="M:Senparc.Weixin.EncryptPostModel.SetSecretInfo(System.String,System.String)">
            <summary>
            设置服务器内部保密信息
            </summary>
            <param name="token"></param>
            <param name="encodingAESKey"></param>
            <param name="appId"></param>
        </member>
        <member name="T:Senparc.Weixin.CommonJsonSendType">
            <summary>
            CommonJsonSend中的http提交类型
            </summary>
        </member>
        <member name="T:Senparc.Weixin.ReturnCode">
            <summary>
            公众号返回码（JSON）
            应该更名为ReturnCode_MP，但为减少项目中的修改，此处依旧用ReturnCode命名
            </summary>
        </member>
        <member name="F:Senparc.Weixin.ReturnCode.客服帐号名长度超过限制">
            <summary>
            客服帐号名长度超过限制(仅允许10个英文字符，不包括@及@后的公众号的微信号)(invalid kf_acount length)
            </summary>
        </member>
        <member name="F:Senparc.Weixin.ReturnCode.客服帐号名包含非法字符">
            <summary>
            客服帐号名包含非法字符(仅允许英文+数字)(illegal character in kf_account)
            </summary>
        </member>
        <member name="F:Senparc.Weixin.ReturnCode.客服帐号个数超过限制">
            <summary>
             	客服帐号个数超过限制(10个客服账号)(kf_account count exceeded)
            </summary>
        </member>
        <member name="T:Senparc.Weixin.ReturnCode_QY">
            <summary>
            企业号返回码
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Language">
            <summary>
            语言
            </summary>
        </member>
        <member name="F:Senparc.Weixin.Language.zh_CN">
            <summary>
            中文简体
            </summary>
        </member>
        <member name="F:Senparc.Weixin.Language.zh_TW">
            <summary>
            中文繁体
            </summary>
        </member>
        <member name="F:Senparc.Weixin.Language.en">
            <summary>
            英文
            </summary>
        </member>
        <member name="T:Senparc.Weixin.AppStoreState">
            <summary>
            AppStore状态
            </summary>
        </member>
        <member name="F:Senparc.Weixin.AppStoreState.None">
            <summary>
            无状态
            </summary>
        </member>
        <member name="F:Senparc.Weixin.AppStoreState.Enter">
            <summary>
            已进入应用状态
            </summary>
        </member>
        <member name="F:Senparc.Weixin.AppStoreState.Exit">
            <summary>
            退出App状态（临时传输状态，退出后即为None）
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Exceptions.ErrorJsonResultException">
            <summary>
            JSON返回错误代码（比如token_access相关操作中使用）。
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Exceptions.ErrorJsonResultException.#ctor(System.String,System.Exception,Senparc.Weixin.Entities.WxJsonResult,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
            <param name="jsonResult"></param>
            <param name="url"></param>
        </member>
        <member name="T:Senparc.Weixin.Exceptions.UnknownRequestMsgTypeException">
            <summary>
            未知请求类型。
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Exceptions.WeixinException">
            <summary>
            微信自定义异常基类
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Helpers.ContainerHelper.GetCacheKey(System.Type)">
            <summary>
            获取缓存Key
            </summary>
            <returns></returns>
        </member>
        <member name="T:Senparc.Weixin.Helpers.ExpandoJsonConverter">
            <summary>
            Allows JSON serialization of Expando objects into expected results (e.g., "x: 1, y: 2") instead of the default dictionary serialization.
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Helpers.DateTimeHelper.GetDateTimeFromXml(System.Int64)">
            <summary>
            转换微信DateTime时间到C#时间
            </summary>
            <param name="dateTimeFromXml">微信DateTime</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Helpers.DateTimeHelper.GetDateTimeFromXml(System.String)">
            <summary>
            转换微信DateTime时间到C#时间
            </summary>
            <param name="dateTimeFromXml">微信DateTime</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Helpers.DateTimeHelper.GetWeixinDateTime(System.DateTime)">
            <summary>
            获取微信DateTime（UNIX时间戳）
            </summary>
            <param name="dateTime">时间</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Helpers.FileHelper.GetFileStream(System.String)">
            <summary>
            根据完整文件路径获取FileStream
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Senparc.Weixin.Helpers.IDictionaryExtensions" -->
        <member name="M:Senparc.Weixin.Helpers.IDictionaryExtensions.ToExpando(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Extension method that turns a dictionary of string and object to an ExpandoObject
            Snagged from http://theburningmonk.com/2011/05/idictionarystring-object-to-expandoobject-extension-method/
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Helpers.SerializerHelper">
            <summary>
            序列化帮助类
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Helpers.SerializerHelper.DecodeUnicode(System.Text.RegularExpressions.Match)">
            <summary>
            unicode解码
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Helpers.SerializerHelper.GetJsonString(System.Object,Senparc.Weixin.Helpers.JsonSetting)">
            <summary>
            将对象转为JSON字符串
            </summary>
            <param name="data">需要生成JSON字符串的数据</param>
            <param name="jsonSetting">JSON输出设置</param>
            <returns></returns>
        </member>
        <member name="T:Senparc.Weixin.Helpers.JsonSetting">
            <summary>
            JSON输出设置
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Helpers.JsonSetting.IgnoreNulls">
            <summary>
            是否忽略当前类型以及具有IJsonIgnoreNull接口，且为Null值的属性。如果为true，符合此条件的属性将不会出现在Json字符串中
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Helpers.JsonSetting.PropertiesToIgnore">
            <summary>
            需要特殊忽略null值的属性名称
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Helpers.JsonSetting.TypesToIgnore">
            <summary>
            指定类型（Class，非Interface）下的为null属性不生成到Json中
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Helpers.JsonSetting.#ctor(System.Boolean,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Type})">
            <summary>
            JSON输出设置 构造函数
            </summary>
            <param name="ignoreNulls">是否忽略当前类型以及具有IJsonIgnoreNull接口，且为Null值的属性。如果为true，符合此条件的属性将不会出现在Json字符串中</param>
            <param name="propertiesToIgnore">需要特殊忽略null值的属性名称</param>
            <param name="typesToIgnore">指定类型（Class，非Interface）下的为null属性不生成到Json中</param>
        </member>
        <member name="T:Senparc.Weixin.Helpers.WeixinJsonConventer">
            <summary>
            微信JSON转换器
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MessageQueue.SenparcMessageQueue">
            <summary>
            消息列队
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MessageQueue.SenparcMessageQueue.MessageQueueDictionary">
            <summary>
            列队数据集合
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MessageQueue.SenparcMessageQueue.MessageQueueSyncLock">
            <summary>
            同步执行锁
            </summary>
        </member>
        <member name="F:Senparc.Weixin.MessageQueue.SenparcMessageQueue.FlushCacheLock">
            <summary>
            立即同步所有缓存执行锁（给OperateQueue()使用）
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MessageQueue.SenparcMessageQueue.GenerateKey(System.String,System.Type,System.String,System.String)">
            <summary>
            生成Key
            </summary>
            <param name="name">列队应用名称，如“ContainerBag”</param>
            <param name="senderType">操作对象类型</param>
            <param name="identityKey">对象唯一标识Key</param>
            <param name="actionName">操作名称，如“UpdateContainerBag”</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MessageQueue.SenparcMessageQueue.OperateQueue">
            <summary>
            操作列队
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MessageQueue.SenparcMessageQueue.GetCurrentKey">
            <summary>
            获取当前等待执行的Key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MessageQueue.SenparcMessageQueue.GetItem(System.String)">
            <summary>
            获取SenparcMessageQueueItem
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.MessageQueue.SenparcMessageQueue.Add(System.String,System.Action)">
            <summary>
            添加列队成员
            </summary>
            <param name="key"></param>
            <param name="action"></param>
        </member>
        <member name="M:Senparc.Weixin.MessageQueue.SenparcMessageQueue.Remove(System.String)">
            <summary>
            移除列队成员
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Senparc.Weixin.MessageQueue.SenparcMessageQueue.GetCount">
            <summary>
            获得当前列队数量
            </summary>
            <returns></returns>
        </member>
        <member name="T:Senparc.Weixin.MessageQueue.SenparcMessageQueueItem">
            <summary>
            SenparcMessageQueue消息列队项
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageQueue.SenparcMessageQueueItem.Key">
            <summary>
            列队项唯一标识
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageQueue.SenparcMessageQueueItem.Action">
            <summary>
            列队项目命中触发时执行的委托
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageQueue.SenparcMessageQueueItem.AddTime">
            <summary>
            此实例对象的创建时间
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageQueue.SenparcMessageQueueItem.Description">
            <summary>
            项目说明（主要用于调试）
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MessageQueue.SenparcMessageQueueItem.#ctor(System.String,System.Action,System.String)">
            <summary>
            初始化SenparcMessageQueue消息列队项
            </summary>
            <param name="key"></param>
            <param name="action"></param>
            <param name="description"></param>
        </member>
        <member name="T:Senparc.Weixin.Threads.SenparcMessageQueueThreadUtility">
            <summary>
            SenparcMessageQueue线程自动处理
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Threads.SenparcMessageQueueThreadUtility.Finalize">
            <summary>
            析构函数，将未处理的列队处理掉
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Threads.SenparcMessageQueueThreadUtility.Run">
            <summary>
            启动线程轮询
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Threads.ThreadUtility">
            <summary>
            线程处理类
            </summary>
        </member>
        <member name="F:Senparc.Weixin.Threads.ThreadUtility.AsynThreadCollection">
            <summary>
            异步线程容器
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Threads.ThreadUtility.Register">
            <summary>
            注册线程
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:Senparc.Weixin.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:Senparc.Weixin.Annotations.ItemNotNullAttribute">
            <summary>
            Indicates that collection or enumerable value does not contain null elements.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.ItemCanBeNullAttribute">
            <summary>
            Indicates that collection or enumerable value can contain null elements.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:Senparc.Weixin.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:Senparc.Weixin.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:Senparc.Weixin.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:Senparc.Weixin.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:Senparc.Weixin.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:Senparc.Weixin.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:Senparc.Weixin.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:Senparc.Weixin.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:Senparc.Weixin.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:Senparc.Weixin.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:Senparc.Weixin.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Senparc.Weixin.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:Senparc.Weixin.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:Senparc.Weixin.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:Senparc.Weixin.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:Senparc.Weixin.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:Senparc.Weixin.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:Senparc.Weixin.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Senparc.Weixin.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:Senparc.Weixin.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:Senparc.Weixin.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:Senparc.Weixin.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:Senparc.Weixin.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:Senparc.Weixin.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:Senparc.Weixin.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:Senparc.Weixin.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:Senparc.Weixin.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:Senparc.Weixin.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:Senparc.Weixin.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method invocation affects content of the collection.
            </summary>
        </member>
        <member name="F:Senparc.Weixin.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:Senparc.Weixin.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:Senparc.Weixin.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:Senparc.Weixin.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:Senparc.Weixin.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:Senparc.Weixin.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:Senparc.Weixin.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:Senparc.Weixin.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:Senparc.Weixin.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:Senparc.Weixin.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attibute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:Senparc.Weixin.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:Senparc.Weixin.Annotations.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="M:Senparc.Weixin.BrowserUtility.BroswerUtility.SideInWeixinBroswer(System.Web.HttpContextBase)">
            <summary>
            判断是否在微信内置浏览器中
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.Weixin.CommonAPIs.CommonJsonSend">
            <summary>
            CommonJsonSend
            </summary>
        </member>
        <member name="M:Senparc.Weixin.CommonAPIs.CommonJsonSend.Send(System.String,System.String,System.Object,Senparc.Weixin.CommonJsonSendType,System.Int32,System.Boolean,Senparc.Weixin.Helpers.JsonSetting)">
            <summary>
            向需要AccessToken的API发送消息的公共方法
            </summary>
            <param name="accessToken">这里的AccessToken是通用接口的AccessToken，非OAuth的。如果不需要，可以为null，此时urlFormat不要提供{0}参数</param>
            <param name="urlFormat"></param>
            <param name="data">如果是Get方式，可以为null</param>
            <param name="sendType"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <param name="jsonSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.CommonAPIs.CommonJsonSend.Send``1(System.String,System.String,System.Object,Senparc.Weixin.CommonJsonSendType,System.Int32,System.Boolean,Senparc.Weixin.Helpers.JsonSetting)">
            <summary>
            向需要AccessToken的API发送消息的公共方法
            </summary>
            <param name="accessToken">这里的AccessToken是通用接口的AccessToken，非OAuth的。如果不需要，可以为null，此时urlFormat不要提供{0}参数</param>
            <param name="urlFormat">用accessToken参数填充{0}</param>
            <param name="data">如果是Get方式，可以为null</param>
            <param name="sendType"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <param name="checkValidationResult"></param>
            <param name="jsonSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.CommonAPIs.CommonJsonSend.SendAsync(System.String,System.String,System.Object,Senparc.Weixin.CommonJsonSendType,System.Int32)">
            <summary>
            向需要AccessToken的API发送消息的公共方法
            </summary>
            <param name="accessToken">这里的AccessToken是通用接口的AccessToken，非OAuth的。如果不需要，可以为null，此时urlFormat不要提供{0}参数</param>
            <param name="urlFormat"></param>
            <param name="data">如果是Get方式，可以为null</param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.CommonAPIs.CommonJsonSend.SendAsync``1(System.String,System.String,System.Object,Senparc.Weixin.CommonJsonSendType,System.Int32,System.Boolean,Senparc.Weixin.Helpers.JsonSetting)">
            <summary>
            向需要AccessToken的API发送消息的公共方法
            </summary>
            <param name="accessToken">这里的AccessToken是通用接口的AccessToken，非OAuth的。如果不需要，可以为null，此时urlFormat不要提供{0}参数</param>
            <param name="urlFormat"></param>
            <param name="data">如果是Get方式，可以为null。在POST方式中将被转为JSON字符串提交</param>
            <param name="sendType">发送类型，POST或GET，默认为POST</param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <param name="checkValidationResult">验证服务器证书回调自动验证</param>
            <param name="jsonSetting">JSON字符串生成设置</param>
            <returns></returns>
        </member>
        <member name="T:Senparc.Weixin.CacheUtility.CacheUtility">
            <summary>
            缓存工具类
            </summary>
        </member>
        <member name="T:Senparc.Weixin.CacheUtility.FlushCache">
            <summary>
            缓存立即生效方法
            </summary>
        </member>
        <member name="P:Senparc.Weixin.CacheUtility.FlushCache.DoFlush">
            <summary>
            是否立即个更新到缓存
            </summary>
        </member>
        <member name="M:Senparc.Weixin.CacheUtility.FlushCache.#ctor(System.Boolean)">
             <summary>
            
             </summary>
             <param name="doFlush">是否立即更新到缓存</param>
        </member>
        <member name="M:Senparc.Weixin.CacheUtility.FlushCache.Dispose">
            <summary>
            释放，开始立即更新所有缓存
            </summary>
        </member>
        <member name="M:Senparc.Weixin.CacheUtility.FlushCache.CreateInstance(System.Boolean)">
            <summary>
            创建一个FlushCache实例
            </summary>
            <param name="doFlush">是否立即更新到缓存</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Utilities.WeixinUtility.ApiUtility.IsAppId(System.String)">
            <summary>
            判断accessTokenOrAppId参数是否是AppId
            </summary>
            <param name="accessTokenOrAppId"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.XmlUtility.XmlUtility.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="type">类型</param>
            <param name="xml">XML字符串</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.XmlUtility.XmlUtility.Deserialize``1(System.IO.Stream)">
            <summary>
            反序列化
            </summary>
            <param name="type"></param>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.XmlUtility.XmlUtility.Serializer``1(``0)">
            <summary>
            序列化
            说明：此方法序列化复杂类，如果没有声明XmlInclude等特性，可能会引发“使用 XmlInclude 或 SoapInclude 特性静态指定非已知的类型。”的错误。
            </summary>
            <param name="type">类型</param>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.XmlUtility.XmlUtility.Convert(System.IO.Stream)">
            <summary>
            序列化将流转成XML字符串
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.Weixin.HttpUtility.Get">
            <summary>
            Get请求处理
            </summary>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.Get.GetJson``1(System.String,System.Text.Encoding,System.Nullable{System.Int32})">
            <summary>
            GET方式请求URL，并返回T类型
            </summary>
            <typeparam name="T">接收JSON的数据类型</typeparam>
            <param name="url"></param>
            <param name="encoding"></param>
            <param name="maxJsonLength">允许最大JSON长度</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.Get.Download(System.String,System.IO.Stream)">
            <summary>
            从Url下载
            </summary>
            <param name="url"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.Get.GetJsonAsync``1(System.String,System.Text.Encoding,System.Nullable{System.Int32})">
            <summary>
            异步GetJsonA
            </summary>
            <param name="url"></param>
            <param name="encoding"></param>
            <param name="maxJsonLength">允许最大JSON长度</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:Senparc.Weixin.Exceptions.ErrorJsonResultException"></exception>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.Get.DownloadAsync(System.String,System.IO.Stream)">
            <summary>
            异步从Url下载
            </summary>
            <param name="url"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.Post.GetResult``1(System.String)">
            <summary>
            获取Post结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="returnText"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.Post.PostFileGetJson``1(System.String,System.Net.CookieContainer,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding,System.Int32)">
            <summary>
            发起Post请求
            </summary>
            <typeparam name="T">返回数据类型（Json对应的实体）</typeparam>
            <param name="url">请求Url</param>
            <param name="cookieContainer">CookieContainer，如果不需要则设为null</param>
            <param name="encoding"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <param name="fileDictionary"></param>
            <param name="postDataDictionary"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.Post.PostGetJson``1(System.String,System.Net.CookieContainer,System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            发起Post请求
            </summary>
            <typeparam name="T">返回数据类型（Json对应的实体）</typeparam>
            <param name="url">请求Url</param>
            <param name="cookieContainer">CookieContainer，如果不需要则设为null</param>
            <param name="fileStream">文件流</param>
            <param name="encoding"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <param name="checkValidationResult">验证服务器证书回调自动验证</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.Post.PostGetJson``1(System.String,System.Net.CookieContainer,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding,System.Int32)">
            <summary>
            PostGetJson
            </summary>
            <param name="url"></param>
            <param name="cookieContainer"></param>
            <param name="formData"></param>
            <param name="encoding"></param>
            <param name="timeOut"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.Post.Download(System.String,System.String,System.IO.Stream)">
            <summary>
            使用Post方法上传数据并下载文件或结果
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.Post.PostFileGetJsonAsync``1(System.String,System.Net.CookieContainer,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding,System.Int32)">
            <summary>
            PostFileGetJson的异步版本
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="cookieContainer"></param>
            <param name="fileDictionary"></param>
            <param name="encoding"></param>
            <param name="timeOut"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.Post.PostGetJsonAsync``1(System.String,System.Net.CookieContainer,System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            PostGetJson的异步版本
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="cookieContainer"></param>
            <param name="fileStream"></param>
            <param name="encoding"></param>
            <param name="timeOut"></param>
            <param name="checkValidationResult"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.Post.PostGetJsonAsync``1(System.String,System.Net.CookieContainer,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding,System.Int32)">
            <summary>
            PostGetJson的异步版本
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="cookieContainer"></param>
            <param name="formData"></param>
            <param name="encoding"></param>
            <param name="timeOut"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.Post.DownloadAsync(System.String,System.String,System.IO.Stream)">
            <summary>
            使用Post方法上传数据并下载文件或结果
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.SetHttpProxy(System.String,System.String,System.String,System.String)">
            <summary>
            设置Web代理
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.RemoveHttpProxy">
            <summary>
            清除Web代理状态
            </summary>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.HttpGet(System.String,System.Text.Encoding)">
            <summary>
            使用Get方法获取字符串结果（没有加入Cookie）
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.HttpGet(System.String,System.Net.CookieContainer,System.Text.Encoding,System.Int32)">
            <summary>
            使用Get方法获取字符串结果（加入Cookie）
            </summary>
            <param name="url"></param>
            <param name="cookieContainer"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.HttpPost(System.String,System.Net.CookieContainer,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding,System.Int32)">
            <summary>
            使用Post方法获取字符串结果，常规提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.HttpPost(System.String,System.Net.CookieContainer,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            使用Post方法获取字符串结果
            </summary>
            <param name="url"></param>
            <param name="cookieContainer"></param>
            <param name="postStream"></param>
            <param name="fileDictionary">需要上传的文件，Key：对应要上传的Name，Value：本地文件名</param>
            <param name="encoding"></param>
            <param name="timeOut"></param>
            <param name="checkValidationResult">验证服务器证书回调自动验证</param>
            <param name="refererUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            验证服务器证书
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.HttpGetAsync(System.String,System.Text.Encoding)">
            <summary>
            使用Get方法获取字符串结果（没有加入Cookie）
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.HttpGetAsync(System.String,System.Net.CookieContainer,System.Text.Encoding,System.Int32)">
            <summary>
            使用Get方法获取字符串结果（加入Cookie）
            </summary>
            <param name="url"></param>
            <param name="cookieContainer"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.HttpPostAsync(System.String,System.Net.CookieContainer,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding,System.Int32)">
            <summary>
            使用Post方法获取字符串结果，常规提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.HttpPostAsync(System.String,System.Net.CookieContainer,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            使用Post方法获取字符串结果
            </summary>
            <param name="url"></param>
            <param name="cookieContainer"></param>
            <param name="postStream"></param>
            <param name="fileDictionary">需要上传的文件，Key：对应要上传的Name，Value：本地文件名</param>
            <param name="timeOut"></param>
            <param name="checkValidationResult">验证服务器证书回调自动验证</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.FillFormDataStreamAsync(System.Collections.Generic.Dictionary{System.String,System.String},System.IO.Stream)">
            <summary>
            填充表单信息的Stream
            </summary>
            <param name="formData"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.IsWeixinClientRequest(System.Web.HttpContext)">
            <summary>
            请求是否发起自微信客户端的浏览器
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.GetQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            组装QueryString的方法
            参数之间用&amp;连接，首位没有符号，如：a=1&amp;b=2&amp;c=3
            </summary>
            <param name="formData"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.FillFormDataStream(System.Collections.Generic.Dictionary{System.String,System.String},System.IO.Stream)">
            <summary>
            填充表单信息的Stream
            </summary>
            <param name="formData"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.HtmlEncode(System.String)">
            <summary>
            封装System.Web.HttpUtility.HtmlEncode
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.HtmlDecode(System.String)">
            <summary>
            封装System.Web.HttpUtility.HtmlDecode
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.UrlEncode(System.String)">
            <summary>
            封装System.Web.HttpUtility.UrlEncode
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.UrlDecode(System.String)">
            <summary>
            封装System.Web.HttpUtility.UrlDecode
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Senparc.Weixin.HttpUtility.RequestUtility.AsUrlData(System.String)" -->
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandler`2.WeixinOpenId">
            <summary>
            发送者用户名（OpenId）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandler`2.CancelExcute">
            <summary>
            取消执行Execute()方法。一般在OnExecuting()中用于临时阻止执行Execute()。
            默认为False。
            如果在执行OnExecuting()执行前设为True，则所有OnExecuting()、Execute()、OnExecuted()代码都不会被执行。
            如果在执行OnExecuting()执行过程中设为True，则后续Execute()及OnExecuted()代码不会被执行。
            建议在设为True的时候，给ResponseMessage赋值，以返回友好信息。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandler`2.RequestMessage">
            <summary>
            请求实体
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandler`2.ResponseMessage">
            <summary>
            响应实体
            只有当执行Execute()方法后才可能有值
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandler`2.UsedMessageAgent">
            <summary>
            是否使用了MessageAgent代理
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandler`2.OmitRepeatedMessage">
            <summary>
            忽略重复发送的同一条消息（通常因为微信服务器没有收到及时的响应）
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MessageHandlers.IMessageHandler`2.OnExecuting">
            <summary>
            执行微信请求前触发
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MessageHandlers.IMessageHandler`2.Execute">
            <summary>
            执行微信请求
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MessageHandlers.IMessageHandler`2.OnExecuted">
            <summary>
            执行微信请求后触发
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MessageHandlers.IMessageHandlerDocument">
            <summary>
            为IMessageHandler单独提供XDocument类型的属性接口（主要是ResponseDocument）。
            分离这个接口的目的是为了在MvcExtension中对IMessageHandler解耦，使用IMessageHandlerDocument接口直接操作XML。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandlerDocument.RequestDocument">
            <summary>
            在构造函数中转换得到原始XML数据
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandlerDocument.ResponseDocument">
            <summary>
            根据ResponseMessageBase获得转换后的ResponseDocument
            注意：这里每次请求都会根据当前的ResponseMessageBase生成一次，如需重用此数据，建议使用缓存或局部变量
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandlerDocument.FinalResponseDocument">
            <summary>
            最后返回的ResponseDocument。
             如果是Senparc.Weixin.MP引用，并且未设置未加密，则应当和ResponseDocument一致；除此以外（Senparc.Weixin.QY或已加密），则应当在ResponseDocument基础上进行加密
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandlerDocument.TextResponseMessage">
            <summary>
            文字返回信息。使用规则：当TextResponseMessage不为null时（""!=null），才获取ResponseDocument。
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MessageHandlers.MessageHandler`3">
            <summary>
            微信请求的集中处理方法
            此方法中所有过程，都基于Senparc.Weixin的基础功能，只为简化代码而设。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.WeixinContext">
            <summary>
            全局消息上下文
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.CurrentMessageContext">
            <summary>
            当前用户消息上下文
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.WeixinOpenId">
            <summary>
            发送者用户名（OpenId）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.CancelExcute">
            <summary>
            取消执行Execute()方法。一般在OnExecuting()中用于临时阻止执行Execute()。
            默认为False。
            如果在执行OnExecuting()执行前设为True，则所有OnExecuting()、Execute()、OnExecuted()代码都不会被执行。
            如果在执行OnExecuting()执行过程中设为True，则后续Execute()及OnExecuted()代码不会被执行。
            建议在设为True的时候，给ResponseMessage赋值，以返回友好信息。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.RequestDocument">
            <summary>
            在构造函数中转换得到原始XML数据
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.ResponseDocument">
            <summary>
            根据ResponseMessageBase获得转换后的ResponseDocument
            注意：这里每次请求都会根据当前的ResponseMessageBase生成一次，如需重用此数据，建议使用缓存或局部变量
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.FinalResponseDocument">
            <summary>
            最后返回的ResponseDocument。
            如果是Senparc.Weixin.QY，则应当和ResponseDocument一致；如果是Senparc.Weixin.QY，则应当在ResponseDocument基础上进行加密
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.RequestMessage">
            <summary>
            请求实体
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.ResponseMessage">
            <summary>
            响应实体
            正常情况下只有当执行Execute()方法后才可能有值。
            也可以结合Cancel，提前给ResponseMessage赋值。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.UsedMessageAgent">
            <summary>
            是否使用了MessageAgent代理
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.OmitRepeatedMessage">
            <summary>
            忽略重复发送的同一条消息（通常因为微信服务器没有收到及时的响应）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.TextResponseMessage">
            <summary>
            文字类型返回消息
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MessageHandlers.MessageHandler`3.CommonInitialize(System.Xml.Linq.XDocument,System.Int32,System.Object)">
            <summary>
            构造函数公用的初始化方法
            </summary>
            <param name="postDataDocument"></param>
            <param name="maxRecordCount"></param>
            <param name="postData"></param>
        </member>
        <member name="M:Senparc.Weixin.MessageHandlers.MessageHandler`3.#ctor(System.IO.Stream,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="inputStream"></param>
            <param name="maxRecordCount"></param>
            <param name="postData">需要传入到Init的参数</param>
        </member>
        <member name="M:Senparc.Weixin.MessageHandlers.MessageHandler`3.#ctor(System.Xml.Linq.XDocument,System.Int32,System.Object)">
            <summary>
            使用postDataDocument的构造函数
            </summary>
            <param name="postDataDocument"></param>
            <param name="maxRecordCount"></param>
            <param name="postData">需要传入到Init的参数</param>
        </member>
        <member name="M:Senparc.Weixin.MessageHandlers.MessageHandler`3.#ctor(Senparc.Weixin.Entities.RequestMessageBase,System.Int32,System.Object)">
            <summary>
            使用requestMessageBase的构造函数
            </summary>
            <param name="requestMessageBase"></param>
            <param name="maxRecordCount"></param>
            <param name="postData">需要传入到Init的参数</param>
        </member>
        <member name="M:Senparc.Weixin.MessageHandlers.MessageHandler`3.Init(System.Xml.Linq.XDocument,System.Object)">
            <summary>
            初始化，获取RequestDocument。
            Init中需要对上下文添加当前消息（如果使用上下文）
            </summary>
            <param name="requestDocument"></param>
        </member>
        <member name="M:Senparc.Weixin.MessageHandlers.MessageHandler`3.Execute">
            <summary>
            执行微信请求
            </summary>
        </member>
        <member name="M:Senparc.Weixin.StreamUtility.StreamUtility.GetBase64String(System.IO.Stream)">
            <summary>
            获取Stream的Base64字符串
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.StreamUtility.StreamUtility.GetStreamFromBase64String(System.String,System.String)">
            <summary>
            将base64String反序列化到流，或保存成文件
            </summary>
            <param name="base64String"></param>
            <param name="savePath">如果为null则不保存</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.StreamUtility.StreamUtility.SaveFileFromStream(System.IO.MemoryStream,System.String)">
            <summary>
            将memoryStream保存到文件
            </summary>
            <param name="memoryStream"></param>
            <param name="savePath"></param>
        </member>
        <member name="M:Senparc.Weixin.StreamUtility.StreamUtility.GetBase64StringAsync(System.IO.Stream)">
            <summary>
            获取Stream的Base64字符串
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.StreamUtility.StreamUtility.GetStreamFromBase64StringAsync(System.String,System.String)">
            <summary>
            将base64String反序列化到流，或保存成文件
            </summary>
            <param name="base64String"></param>
            <param name="savePath">如果为null则不保存</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.StreamUtility.StreamUtility.SaveFileFromStreamAsync(System.IO.MemoryStream,System.String)">
            <summary>
            将memoryStream保存到文件
            </summary>
            <param name="memoryStream"></param>
            <param name="savePath"></param>
        </member>
        <member name="T:Senparc.Weixin.WeixinTrace">
            <summary>
            微信日志跟踪
            </summary>
        </member>
        <member name="F:Senparc.Weixin.WeixinTrace.OnErrorJsonResultExceptionFunc">
            <summary>
            记录ErrorJsonResultException日志时需要执行的任务
            </summary>
        </member>
        <member name="F:Senparc.Weixin.WeixinTrace.OnLogFunc">
            <summary>
            执行所有日志记录操作时执行的任务（发生在Senparc.Weixin记录日志之后）
            </summary>
        </member>
        <member name="M:Senparc.Weixin.WeixinTrace.TimeLog">
            <summary>
            统一时间格式
            </summary>
        </member>
        <member name="M:Senparc.Weixin.WeixinTrace.Log(System.String)">
            <summary>
            记录日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Senparc.Weixin.WeixinTrace.SendLog(System.String,System.String)">
            <summary>
            API请求日志
            </summary>
            <param name="url"></param>
            <param name="returnText"></param>
        </member>
        <member name="M:Senparc.Weixin.WeixinTrace.ErrorJsonResultExceptionLog(Senparc.Weixin.Exceptions.ErrorJsonResultException)">
            <summary>
            ErrorJsonResultException 日志
            </summary>
            <param name="ex"></param>
        </member>
    </members>
</doc>
