<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Senparc.Weixin</name>
    </assembly>
    <members>
        <member name="T:Senparc.Weixin.Config">
            <summary>
            全局设置
            </summary>
        </member>
        <member name="F:Senparc.Weixin.Config.TIME_OUT">
            <summary>
            请求超时设置（以毫秒为单位），默认为10秒。
            说明：此处常量专为提供给方法的参数的默认值，不是方法内所有请求的默认超时时间。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.MessageContainer`1.MaxRecordCount">
            <summary>
            最大记录条数（保留尾部），如果小于等于0则不限制
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Context.IMessageContext`2">
            <summary>
            微信消息上下文（单个用户）接口
            </summary>
            <typeparam name="TRequest">请求消息类型</typeparam>
            <typeparam name="TResponse">响应消息类型</typeparam>
        </member>
        <member name="P:Senparc.Weixin.Context.IMessageContext`2.UserName">
            <summary>
            用户名（OpenID）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.IMessageContext`2.LastActiveTime">
            <summary>
            最后一次活动时间（用户主动发送Resquest请求的时间）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.IMessageContext`2.RequestMessages">
            <summary>
            接收消息记录
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.IMessageContext`2.ResponseMessages">
            <summary>
            响应消息记录
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.IMessageContext`2.MaxRecordCount">
            <summary>
            最大储存容量（分别针对RequestMessages和ResponseMessages）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.IMessageContext`2.StorageData">
            <summary>
            临时储存数据，如用户状态等，出于保持.net 3.5版本，这里暂不使用dynamic
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.IMessageContext`2.ExpireMinutes">
            <summary>
            用于覆盖WeixinContext所设置的默认过期时间
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.IMessageContext`2.AppStoreState">
            <summary>
            AppStore状态，系统属性，请勿操作
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Context.MessageContext`2">
            <summary>
            微信消息上下文（单个用户）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.MessageContext`2.AppStoreState">
            <summary>
            AppStore状态，系统属性，请勿操作
            </summary>
        </member>
        <member name="E:Senparc.Weixin.Context.MessageContext`2.MessageContextRemoved">
            <summary>
            当MessageContext被删除时触发的事件
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Context.MessageContext`2.OnMessageContextRemoved(Senparc.Weixin.Context.WeixinContextRemovedEventArgs{`0,`1})">
            <summary>
            执行上下文被移除的事件
            注意：此事件不是实时触发的，而是等过期后任意一个人发过来的下一条消息执行之前触发。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Senparc.Weixin.Context.MessageContext`2.#ctor">
            <summary>
            
            </summary>
            <param name="maxRecordCount">maxRecordCount如果小于等于0，则不限制</param>
        </member>
        <member name="M:Senparc.Weixin.Context.MessageContext`2.OnRemoved">
            <summary>
            此上下文被清除的时候触发
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Context.MessageQueue`3">
            <summary>
            微信消息列队（针对单个账号的往来消息）
            </summary>
            <typeparam name="TM"></typeparam>
        </member>
        <member name="F:Senparc.Weixin.Context.WeixinContextGlobal.UseWeixinContext">
            <summary>
            是否开启上下文记录
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Context.WeixinContext`3">
            <summary>
            微信消息上下文（全局）
            默认过期时间：90分钟
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.WeixinContext`3.MessageCollection">
            <summary>
            所有MessageContext集合，不要直接操作此对象
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.WeixinContext`3.MessageQueue">
            <summary>
            MessageContext列队（LastActiveTime升序排列）,不要直接操作此对象
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.WeixinContext`3.ExpireMinutes">
            <summary>
            每一个MessageContext过期时间
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.WeixinContext`3.MaxRecordCount">
            <summary>
            最大储存上下文数量（分别针对请求和响应信息）
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.Restore">
            <summary>
            重置所有上下文参数，所有记录将被清空
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.GetMessageContext(System.String)">
            <summary>
            获取MessageContext，如果不存在，返回null
            这个方法的更重要意义在于操作TM队列，及时移除过期信息，并将最新活动的对象移到尾部
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.GetMessageContext(System.String,System.Boolean)">
            <summary>
            获取MessageContext
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <param name="createIfNotExists">True：如果用户不存在，则创建一个实例，并返回这个最新的实例
            False：用户储存在，则返回null</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.GetMessageContext(`1)">
            <summary>
            获取MessageContext，如果不存在，使用requestMessage信息初始化一个，并返回原始实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.GetMessageContext(`2)">
            <summary>
            获取MessageContext，如果不存在，使用requestMessage信息初始化一个，并返回原始实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.InsertMessage(`1)">
            <summary>
            记录请求信息
            </summary>
            <param name="requestMessage">请求信息</param>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.InsertMessage(`2)">
            <summary>
            记录响应信息
            </summary>
            <param name="responseMessage">响应信息</param>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.GetLastRequestMessage(System.String)">
            <summary>
            获取最新一条请求数据，如果不存在，则返回Null
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Context.WeixinContext`3.GetLastResponseMessage(System.String)">
            <summary>
            获取最新一条响应数据，如果不存在，则返回Null
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="T:Senparc.Weixin.Context.WeixinContextRemovedEventArgs`2">
            <summary>
            对话上下文被删除时触发事件的事件数据
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.WeixinContextRemovedEventArgs`2.OpenId">
            <summary>
            该用户的OpenId
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.WeixinContextRemovedEventArgs`2.LastActiveTime">
            <summary>
            最后一次响应时间
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Context.WeixinContextRemovedEventArgs`2.MessageContext">
            <summary>
            上下文对象
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Entities.MessageBase">
            <summary>
            所有Request和Response消息的基类
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Entities.WxJsonResult">
            <summary>
            公众号JSON返回结果（用于菜单接口等）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Entities.WxJsonResult.P2PData">
            <summary>
            为P2P返回结果做准备
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Entities.QyJsonResult">
            <summary>
            企业号JSON返回结果
            </summary>
        </member>
        <member name="P:Senparc.Weixin.Entities.QyJsonResult.P2PData">
            <summary>
            为P2P返回结果做准备
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Entities.RequestMessageBase">
            <summary>
            接收到请求的消息
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Entities.ResponseMessageBase">
            <summary>
            响应回复消息
            </summary>
        </member>
        <member name="T:Senparc.Weixin.IEncryptPostModel">
            <summary>
            接收解密信息统一接口
            </summary>
        </member>
        <member name="T:Senparc.Weixin.EncryptPostModel">
            <summary>
            接收加密信息统一基类
            </summary>
        </member>
        <member name="M:Senparc.Weixin.EncryptPostModel.SetSecretInfo(System.String,System.String)">
            <summary>
            设置服务器内部保密信息
            </summary>
            <param name="token"></param>
            <param name="encodingAESKey"></param>
            <param name="appId"></param>
        </member>
        <member name="T:Senparc.Weixin.QyRequestMsgType">
            <summary>
            企业接收消息类型
            </summary>
        </member>
        <member name="T:Senparc.Weixin.ReturnCode">
            <summary>
            公众号返回码（JSON）
            应该更名为ReturnCode_MP，但为减少项目中的修改，此处依旧用ReturnCode命名
            </summary>
        </member>
        <member name="F:Senparc.Weixin.ReturnCode.客服帐号名长度超过限制">
            <summary>
            客服帐号名长度超过限制(仅允许10个英文字符，不包括@及@后的公众号的微信号)(invalid kf_acount length) 
            </summary>
        </member>
        <member name="F:Senparc.Weixin.ReturnCode.客服帐号名包含非法字符">
            <summary>
            客服帐号名包含非法字符(仅允许英文+数字)(illegal character in kf_account) 
            </summary>
        </member>
        <member name="F:Senparc.Weixin.ReturnCode.客服帐号个数超过限制">
            <summary>
             	客服帐号个数超过限制(10个客服账号)(kf_account count exceeded) 
            </summary>
        </member>
        <member name="T:Senparc.Weixin.ReturnCode_QY">
            <summary>
            企业号返回码
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Language">
            <summary>
            语言
            </summary>
        </member>
        <member name="F:Senparc.Weixin.Language.zh_CN">
            <summary>
            中文简体
            </summary>
        </member>
        <member name="F:Senparc.Weixin.Language.zh_TW">
            <summary>
            中文繁体
            </summary>
        </member>
        <member name="F:Senparc.Weixin.Language.en">
            <summary>
            英文
            </summary>
        </member>
        <member name="T:Senparc.Weixin.AppStoreState">
            <summary>
            AppStore状态
            </summary>
        </member>
        <member name="F:Senparc.Weixin.AppStoreState.None">
            <summary>
            无状态
            </summary>
        </member>
        <member name="F:Senparc.Weixin.AppStoreState.Enter">
            <summary>
            已进入应用状态
            </summary>
        </member>
        <member name="F:Senparc.Weixin.AppStoreState.Exit">
            <summary>
            退出App状态（临时传输状态，退出后即为None）
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Exceptions.ErrorJsonResultException">
            <summary>
            JSON返回错误代码（比如token_access相关操作中使用）。
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Exceptions.UnknownRequestMsgTypeException">
            <summary>
            未知请求类型。
            </summary>
        </member>
        <member name="T:Senparc.Weixin.Exceptions.WeixinException">
            <summary>
            微信自定义异常基类
            </summary>
        </member>
        <member name="M:Senparc.Weixin.Helpers.DateTimeHelper.GetDateTimeFromXml(System.Int64)">
            <summary>
            转换微信DateTime时间到C#时间
            </summary>
            <param name="dateTimeFromXml">微信DateTime</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Helpers.DateTimeHelper.GetDateTimeFromXml(System.String)">
            <summary>
            转换微信DateTime时间到C#时间
            </summary>
            <param name="dateTimeFromXml">微信DateTime</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Helpers.DateTimeHelper.GetWeixinDateTime(System.DateTime)">
            <summary>
            获取微信DateTime（UNIX时间戳）
            </summary>
            <param name="dateTime">时间</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Helpers.FileHelper.GetFileStream(System.String)">
            <summary>
            根据完整文件路径获取FileStream
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Helpers.SerializerHelper.DecodeUnicode(System.Text.RegularExpressions.Match)">
            <summary>
            unicode解码
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.BrowserUtility.BroswerUtility.SideInWeixinBroswer(System.Web.HttpContextBase)">
            <summary>
            判断是否在微信内置浏览器中
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.Utilities.WeixinUtility.ApiUtility.IsAppId(System.String)">
            <summary>
            判断accessTokenOrAppId参数是否是AppId
            </summary>
            <param name="accessTokenOrAppId"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.XmlUtility.XmlUtility.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="type">类型</param>
            <param name="xml">XML字符串</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.XmlUtility.XmlUtility.Deserialize``1(System.IO.Stream)">
            <summary>
            反序列化
            </summary>
            <param name="type"></param>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.XmlUtility.XmlUtility.Serializer``1(``0)">
            <summary>
            序列化
            说明：此方法序列化复杂类，如果没有声明XmlInclude等特性，可能会引发“使用 XmlInclude 或 SoapInclude 特性静态指定非已知的类型。”的错误。
            </summary>
            <param name="type">类型</param>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.XmlUtility.XmlUtility.Convert(System.IO.Stream)">
            <summary>
            序列化将流转成XML字符串
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.Post.GetResult``1(System.String)">
            <summary>
            获取Post结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="returnText"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.Post.PostFileGetJson``1(System.String,System.Net.CookieContainer,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding,System.Int32)">
            <summary>
            发起Post请求
            </summary>
            <typeparam name="T">返回数据类型（Json对应的实体）</typeparam>
            <param name="url">请求Url</param>
            <param name="cookieContainer">CookieContainer，如果不需要则设为null</param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.Post.PostGetJson``1(System.String,System.Net.CookieContainer,System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            发起Post请求
            </summary>
            <typeparam name="T">返回数据类型（Json对应的实体）</typeparam>
            <param name="url">请求Url</param>
            <param name="cookieContainer">CookieContainer，如果不需要则设为null</param>
            <param name="fileStream">文件流</param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <param name="checkValidationResult">验证服务器证书回调自动验证</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.Post.Download(System.String,System.String,System.IO.Stream)">
            <summary>
            使用Post方法上传数据并下载文件或结果
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.HttpGet(System.String,System.Text.Encoding)">
            <summary>
            使用Get方法获取字符串结果（没有加入Cookie）
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.HttpGet(System.String,System.Net.CookieContainer,System.Text.Encoding,System.Int32)">
            <summary>
            使用Get方法获取字符串结果（加入Cookie）
            </summary>
            <param name="url"></param>
            <param name="cookieContainer"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.HttpPost(System.String,System.Net.CookieContainer,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding,System.Int32)">
            <summary>
            使用Post方法获取字符串结果，常规提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.HttpPost(System.String,System.Net.CookieContainer,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            使用Post方法获取字符串结果
            </summary>
            <param name="url"></param>
            <param name="cookieContainer"></param>
            <param name="postStream"></param>
            <param name="fileDictionary">需要上传的文件，Key：对应要上传的Name，Value：本地文件名</param>
            <param name="timeOut"></param>
            <param name="checkValidationResult">验证服务器证书回调自动验证</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            验证服务器证书
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.IsWeixinClientRequest(System.Web.HttpContext)">
            <summary>
            请求是否发起自微信客户端的浏览器
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Senparc.Weixin.HttpUtility.RequestUtility.GetQueryString(System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.FillFormDataStream(System.Collections.Generic.Dictionary{System.String,System.String},System.IO.Stream)">
            <summary>
            填充表单信息的Stream
            </summary>
            <param name="formData"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.HtmlEncode(System.String)">
            <summary>
            封装System.Web.HttpUtility.HtmlEncode
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.HtmlDecode(System.String)">
            <summary>
            封装System.Web.HttpUtility.HtmlDecode
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.UrlEncode(System.String)">
            <summary>
            封装System.Web.HttpUtility.UrlEncode
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.HttpUtility.RequestUtility.UrlDecode(System.String)">
            <summary>
            封装System.Web.HttpUtility.UrlDecode
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandler`2.WeixinOpenId">
            <summary>
            发送者用户名（OpenId）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandler`2.CancelExcute">
            <summary>
            取消执行Execute()方法。一般在OnExecuting()中用于临时阻止执行Execute()。
            默认为False。
            如果在执行OnExecuting()执行前设为True，则所有OnExecuting()、Execute()、OnExecuted()代码都不会被执行。
            如果在执行OnExecuting()执行过程中设为True，则后续Execute()及OnExecuted()代码不会被执行。
            建议在设为True的时候，给ResponseMessage赋值，以返回友好信息。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandler`2.RequestMessage">
            <summary>
            请求实体
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandler`2.ResponseMessage">
            <summary>
            响应实体
            只有当执行Execute()方法后才可能有值
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandler`2.UsedMessageAgent">
            <summary>
            是否使用了MessageAgent代理
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandler`2.OmitRepeatedMessage">
            <summary>
            忽略重复发送的同一条消息（通常因为微信服务器没有收到及时的响应）
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MessageHandlers.IMessageHandler`2.Execute">
            <summary>
            执行微信请求
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MessageHandlers.IMessageHandlerDocument">
            <summary>
            为IMessageHandler单独提供XDocument类型的属性接口（主要是ResponseDocument）。
            分离这个接口的目的是为了在MvcExtension中对IMessageHandler解耦，使用IMessageHandlerDocument接口直接操作XML。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandlerDocument.RequestDocument">
            <summary>
            在构造函数中转换得到原始XML数据
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandlerDocument.ResponseDocument">
            <summary>
            根据ResponseMessageBase获得转换后的ResponseDocument
            注意：这里每次请求都会根据当前的ResponseMessageBase生成一次，如需重用此数据，建议使用缓存或局部变量
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandlerDocument.FinalResponseDocument">
            <summary>
            最后返回的ResponseDocument。
             如果是Senparc.Weixin.MP引用，并且未设置未加密，则应当和ResponseDocument一致；除此以外（Senparc.Weixin.QY或已加密），则应当在ResponseDocument基础上进行加密
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.IMessageHandlerDocument.TextResponseMessage">
            <summary>
            文字返回信息。当TextResponseMessage不为null时，才获取ResponseDocument
            </summary>
        </member>
        <member name="T:Senparc.Weixin.MessageHandlers.MessageHandler`3">
            <summary>
            微信请求的集中处理方法
            此方法中所有过程，都基于Senparc.Weixin的基础功能，只为简化代码而设。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.WeixinContext">
            <summary>
            全局消息上下文
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.CurrentMessageContext">
            <summary>
            当前用户消息上下文
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.WeixinOpenId">
            <summary>
            发送者用户名（OpenId）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.CancelExcute">
            <summary>
            取消执行Execute()方法。一般在OnExecuting()中用于临时阻止执行Execute()。
            默认为False。
            如果在执行OnExecuting()执行前设为True，则所有OnExecuting()、Execute()、OnExecuted()代码都不会被执行。
            如果在执行OnExecuting()执行过程中设为True，则后续Execute()及OnExecuted()代码不会被执行。
            建议在设为True的时候，给ResponseMessage赋值，以返回友好信息。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.RequestDocument">
            <summary>
            在构造函数中转换得到原始XML数据
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.ResponseDocument">
            <summary>
            根据ResponseMessageBase获得转换后的ResponseDocument
            注意：这里每次请求都会根据当前的ResponseMessageBase生成一次，如需重用此数据，建议使用缓存或局部变量
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.FinalResponseDocument">
            <summary>
            最后返回的ResponseDocument。
            如果是Senparc.Weixin.QY，则应当和ResponseDocument一致；如果是Senparc.Weixin.QY，则应当在ResponseDocument基础上进行加密
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.RequestMessage">
            <summary>
            请求实体
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.ResponseMessage">
            <summary>
            响应实体
            正常情况下只有当执行Execute()方法后才可能有值。
            也可以结合Cancel，提前给ResponseMessage赋值。
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.UsedMessageAgent">
            <summary>
            是否使用了MessageAgent代理
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.OmitRepeatedMessage">
            <summary>
            忽略重复发送的同一条消息（通常因为微信服务器没有收到及时的响应）
            </summary>
        </member>
        <member name="P:Senparc.Weixin.MessageHandlers.MessageHandler`3.TextResponseMessage">
            <summary>
            文字类型返回消息
            </summary>
        </member>
        <member name="M:Senparc.Weixin.MessageHandlers.MessageHandler`3.CommonInitialize(System.Xml.Linq.XDocument,System.Int32,System.Object)">
            <summary>
            构造函数公用的初始化方法
            </summary>
            <param name="postDataDocument"></param>
            <param name="maxRecordCount"></param>
            <param name="postData"></param>
        </member>
        <member name="M:Senparc.Weixin.MessageHandlers.MessageHandler`3.#ctor(System.IO.Stream,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="inputStream"></param>
            <param name="maxRecordCount"></param>
            <param name="postData">需要传入到Init的参数</param>
        </member>
        <member name="M:Senparc.Weixin.MessageHandlers.MessageHandler`3.#ctor(System.Xml.Linq.XDocument,System.Int32,System.Object)">
            <summary>
            使用postDataDocument的构造函数
            </summary>
            <param name="postDataDocument"></param>
            <param name="maxRecordCount"></param>
            <param name="postData">需要传入到Init的参数</param>
        </member>
        <member name="M:Senparc.Weixin.MessageHandlers.MessageHandler`3.#ctor(Senparc.Weixin.Entities.RequestMessageBase,System.Int32,System.Object)">
            <summary>
            使用requestMessageBase的构造函数
            </summary>
            <param name="postDataDocument"></param>
            <param name="maxRecordCount"></param>
            <param name="postData">需要传入到Init的参数</param>
        </member>
        <member name="M:Senparc.Weixin.MessageHandlers.MessageHandler`3.Init(System.Xml.Linq.XDocument,System.Object)">
            <summary>
            初始化，获取RequestDocument。
            Init中需要对上下文添加当前消息（如果使用上下文）
            </summary>
            <param name="requestDocument"></param>
        </member>
        <member name="M:Senparc.Weixin.MessageHandlers.MessageHandler`3.Execute">
            <summary>
            执行微信请求
            </summary>
        </member>
        <member name="M:Senparc.Weixin.StreamUtility.StreamUtility.GetBase64String(System.IO.Stream)">
            <summary>
            获取Stream的Base64字符串
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.StreamUtility.StreamUtility.GetStreamFromBase64String(System.String,System.String)">
            <summary>
            将base64String反序列化到流，或保存成文件
            </summary>
            <param name="base64String"></param>
            <param name="savePath">如果为null则不保存</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.Weixin.StreamUtility.StreamUtility.SaveFileFromStream(System.IO.MemoryStream,System.String)">
            <summary>
            将memoryStream保存到文件
            </summary>
            <param name="memoryStream"></param>
            <param name="savePath"></param>
        </member>
    </members>
</doc>
