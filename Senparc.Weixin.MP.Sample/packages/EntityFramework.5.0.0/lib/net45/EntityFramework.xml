<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntityFramework</name>
    </assembly>
    <members>
        <member name="T:System.Data.Entity.Edm.EdmDataModelType">
            <summary>
                The base for all all Entity Data Model (EDM) types that represent a type from the EDM type system.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmNamespaceItem">
            <summary>
                Represents an item in an Entity Data Model (EDM) <see cref="T:System.Data.Entity.Edm.EdmNamespace"/> .
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmQualifiedNameMetadataItem">
            <summary>
                The base for all all Entity Data Model (EDM) item types that with a Name property that represents a qualified (can be dotted) name.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmNamedMetadataItem">
            <summary>
                The base for all all Entity Data Model (EDM) item types that with a <see cref="P:System.Data.Entity.Edm.EdmNamedMetadataItem.Name"/> property.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmMetadataItem">
            <summary>
                The base for all all Entity Data Model (EDM) types that support annotation using <see cref="T:System.Data.Entity.Edm.Common.DataModelAnnotation"/> .
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmDataModelItem">
            <summary>
                EdmDataModelItem is the base for all types in the Entity Data Model (EDM) metadata construction and modification API.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Common.DataModelItem">
            <summary>
                DataModelItem is the base for all types in the EDM metadata reflection, construction and modification API.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmDataModelItem.ItemKind">
            <summary>
                Gets an <see cref="T:System.Data.Entity.Edm.EdmItemKind"/> value indicating which Entity Data Model (EDM) concept is represented by this item.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Common.IAnnotatedDataModelItem">
            <summary>
                IAnnotatedDataModelItem is implemented by model-specific base types for all types with an <see cref="P:System.Data.Entity.Edm.Common.IAnnotatedDataModelItem.Annotations"/> property. <seealso cref="T:System.Data.Entity.Edm.EdmDataModelItem"/>
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Common.IAnnotatedDataModelItem.Annotations">
            <summary>
                Gets or sets the currently assigned annotations.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmMetadataItem.Annotations">
            <summary>
                Gets or sets the currently assigned annotations.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmMetadataItem.ChildItems">
            <summary>
                Returns all EdmItem children directly contained by this EdmItem.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Common.INamedDataModelItem">
            <summary>
                INamedDataModelItem is implemented by model-specific base types for all types with a <see cref="P:System.Data.Entity.Edm.Common.INamedDataModelItem.Name"/> property. <seealso cref="T:System.Data.Entity.Edm.EdmNamedMetadataItem"/>
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Common.INamedDataModelItem.Name">
            <summary>
                Gets or sets the currently assigned name.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmNamedMetadataItem.Name">
            <summary>
                Gets or sets the currently assigned name.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmDataModelType.IsAbstract">
            <summary>
                Gets a value indicating whether this type is abstract.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmDataModelType.BaseType">
            <summary>
                Gets the optional base type of this type.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmStructuralMember">
            <summary>
                EdmStructuralMember is the base for all types that represent members of structural items in the Entity Data Model (EDM) metadata construction and modification API.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
            <summary>
                Represents information about a database connection.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
            <summary>
                Creates a new instance of DbConnectionInfo representing a connection that is specified in the application configuration file.
            </summary>
            <param name = "connectionName">The name of the connection string in the application configuration.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of DbConnectionInfo based on a connection string.
            </summary>
            <param name = "connectionString">The connection string to use for the connection.</param>
            <param name = "providerInvariantName">The name of the provider to use for the connection. Use 'System.Data.SqlClient' for SQL Server.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetConnectionString(System.Data.Entity.Internal.AppConfig)">
            <summary>
                Gets the connection information represented by this instance.
            </summary>
            <param name = "config">Configuration to use if connection comes from the configuration file.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
            <summary>
                Instances of this class are used to create DbConnection objects for
                SQL Server LocalDb based on a given database name or connection string.
            </summary>
            <remarks>
                An instance of this class can be set on the <see cref="T:System.Data.Entity.Database"/> class or in the
                app.config/web.config for the application to cause all DbContexts created with no
                connection information or just a database name to use SQL Server LocalDb by default.
                This class is immutable since multiple threads may access instances simultaneously
                when creating connections.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
            <summary>
                Implementations of this interface are used to create DbConnection objects for
                a type of database server based on a given database name.  
                An Instance is set on the <see cref="T:System.Data.Entity.Database"/> class to
                cause all DbContexts created with no connection information or just a database
                name or connection string to use a certain type of database server by default.
                Two implementations of this interface are provided: <see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory"/>
                is used to create connections to Microsoft SQL Server, including EXPRESS editions.
                <see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory"/> is used to create connections to Microsoft SQL
                Server Compact Editions.
                Other implementations for other database servers can be added as needed.
                Note that implementations should be thread safe or immutable since they may
                be accessed by multiple threads at the same time.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
            <summary>
                Creates a connection based on the given database name or connection string.
            </summary>
            <param name = "nameOrConnectionString">The database name or connection string.</param>
            <returns>An initialized DbConnection.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
            <summary>
                Creates a new instance of the connection factory for the given version of LocalDb.
                For SQL Server 2012 LocalDb use "v11.0".
            </summary>
            <param name="localDbVersion">The LocalDb version to use.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of the connection factory for the given version of LocalDb.
                For SQL Server 2012 LocalDb use "v11.0".
                
            </summary>
            <param name="localDbVersion">The LocalDb version to use.</param>
            <param name = "baseConnectionString">
                The connection string to use for options to the database other than the 'Initial Catalog',
                'Data Source', and 'AttachDbFilename'.
                The 'Initial Catalog' and 'AttachDbFilename' will be prepended to this string based on the
                database name when CreateConnection is called.
                The 'Data Source' will be set based on the LocalDbVersion argument.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
            <summary>
                Creates a connection for SQL Server LocalDb based on the given database name or connection string.
                If the given string contains an '=' character then it is treated as a full connection string,
                otherwise it is treated as a database name only.
            </summary>
            <param name = "nameOrConnectionString">The database name or connection string.</param>
            <returns>An initialized DbConnection.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
            <summary>
                The connection string to use for options to the database other than the 'Initial Catalog',
                'Data Source', and 'AttachDbFilename'.
                The 'Initial Catalog' and 'AttachDbFilename' will be prepended to this string based on the
                database name when CreateConnection is called.
                The 'Data Source' will be set based on the LocalDbVersion argument.
                The default is 'Integrated Security=True; MultipleActiveResultSets=True;'.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.ClonedObjectContext">
            <summary>
            Encapsulates a cloned <see cref="P:System.Data.Entity.Internal.ClonedObjectContext.ObjectContext"/> and store <see cref="T:System.Data.Common.DbConnection"/>. Note that these
            objects are disposable and should be used in a using block to ensure both the cloned context and the
            cloned connection are disposed.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.ClonedObjectContext.#ctor">
            <summary>
            For mocking.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.ClonedObjectContext.#ctor(System.Data.Entity.Internal.MockingProxies.ObjectContextProxy,System.String,System.Boolean)">
            <summary>
            Creates a clone of the given <see cref="P:System.Data.Entity.Internal.ClonedObjectContext.ObjectContext"/>. The underlying <see cref="T:System.Data.Common.DbConnection"/> of
            the context is also cloned and the given connection string is used for the connection string of
            the cloned connection.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.ClonedObjectContext.TransferLoadedAssemblies(System.Data.Entity.Internal.MockingProxies.ObjectContextProxy)">
            <summary>
                Finds the assemblies that were used for loading o-space types in the source context
                and loads those assemblies in the cloned context.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.ClonedObjectContext.Dispose">
            <summary>
            Disposes both the underlying ObjectContext and its store connection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.ClonedObjectContext.ObjectContext">
            <summary>
            The cloned context.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.ClonedObjectContext.Connection">
            <summary>
            This is always the store connection of the underlying ObjectContext.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.ConfigFile.DatabaseInitializerElement">
            <summary>
                Represents setting the database initializer for a specific context type
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.ConfigFile.ParameterElement">
            <summary>
                Represents a parameter to be passed to a method
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.ConfigFile.ParameterCollection">
            <summary>
                Represents a series of parameters to pass to a method
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.ConfigFile.ParameterCollection.NewElement">
            <summary>
                Adds a new parameter to the collection
                Used for unit testing
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.ConfigFile.ContextCollection">
            <summary>
                Represents the configuration for a series of contexts
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.ConfigFile.ContextCollection.NewElement(System.String)">
            <summary>
                Adds a new context to the collection
                Used for unit testing
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.ConfigFile.ContextElement">
            <summary>
                Represents the configuration for a specific context type
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.ConfigFile.DefaultConnectionFactoryElement">
            <summary>
                Represents setting the default connection factory
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection">
            <summary>
                Represents all Entity Framework related configuration
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.DatabaseCreator">
            <summary>
                Handles creating databases either using the core provider or the Migrations pipeline.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(System.Data.Entity.Internal.InternalContext,System.Func{System.Data.Entity.Migrations.DbMigrationsConfiguration,System.Data.Entity.DbContext,System.Data.Entity.Migrations.DbMigrator},System.Data.Objects.ObjectContext)">
            <summary>
                Creates a database using the core provider (i.e. ObjectContext.CreateDatabase) or
                by using Code First Migrations <see cref="T:System.Data.Entity.Migrations.DbMigrator"/> to create an empty database
                and the perform an automatic migration to the current model.
                Migrations is used if Code First is being used and the EF provider is for SQL Server
                or SQL Compact. The core is used for non-Code First models and for other providers even
                when using Code First.
            </summary>
        </member>
        <member name="T:System.Data.Entity.DbContext">
            <summary>
                A DbContext instance represents a combination of the Unit Of Work and Repository patterns such that
                it can be used to query from a database and group together changes that will then be written
                back to the store as a unit.
                DbContext is conceptually similar to ObjectContext.
            </summary>
            <remarks>
                DbContext is usually used with a derived type that contains <see cref="T:System.Data.Entity.DbSet`1"/> properties for
                the root entities of the model. These sets are automatically initialized when the
                instance of the derived class is created.  This behavior can be modified by applying the
                <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute"/>  attribute to either the entire derived context
                class, or to individual properties on the class.
            
                The Entity Data Model backing the context can be specified in several ways.  When using the Code First
                approach, the <see cref="T:System.Data.Entity.DbSet`1"/> properties on the derived context are used to build a model
                by convention.  The protected OnModelCreating method can be overridden to tweak this model.  More
                control over the model used for the Model First approach can be obtained by creating a <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel"/>
                explicitly from a <see cref="T:System.Data.Entity.DbModelBuilder"/> and passing this model to one of the DbContext constructors.
            
                When using the Database First or Model First approach the Entity Data Model can be created using the
                Entity Designer (or manually through creation of an EDMX file) and then this model can be specified using
                entity connection string or an <see cref="T:System.Data.EntityClient.EntityConnection"/> object.
            
                The connection to the database (including the name of the database) can be specified in several ways.
                If the parameterless DbContext constructor is called from a derived context, then the name of the derived context
                is used to find a connection string in the app.config or web.config file.  If no connection string is found, then
                the name is passed to the DefaultConnectionFactory registered on the <see cref="T:System.Data.Entity.Database"/> class.  The connection
                factory then uses the context name as the database name in a default connection string.  (This default connection
                string points to .\SQLEXPRESS on the local machine unless a different DefaultConnectionFactory is registered.)
            
                Instead of using the derived context name, the connection/database name can also be specified explicitly by
                passing the name to one of the DbContext constructors that takes a string.  The name can also be passed in
                the form "name=myname", in which case the name must be found in the config file or an exception will be thrown.
            
                Note that the connection found in the app.config or web.config file can be a normal database connection
                string (not a special Entity Framework connection string) in which case the DbContext will use Code First.
                However, if the connection found in the config file is a special Entity Framework connection string, then the
                DbContext will use Database/Model First and the model specified in the connection string will be used.
            
                An existing or explicitly created DbConnection can also be used instead of the database/connection name.
            
                A <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute"/> can be applied to a class derived from DbContext to set the
                version of conventions used by the context when it creates a model. If no attribute is applied then the
                latest version of conventions will be used.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
            <summary>
                Interface implemented by objects that can provide an <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext"/> instance.
                The <see cref="T:System.Data.Entity.DbContext"/> class implements this interface to provide access to the underlying
                ObjectContext.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
            <summary>
                Gets the object context.
            </summary>
            <value>The object context.</value>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor">
            <summary>
                Constructs a new context instance using conventions to create the name of the database to
                which a connection will be made.  The by-convention name is the full name (namespace + class name)
                of the derived context class.
                See the class remarks for how this is used to create a connection.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
            <summary>
                Constructs a new context instance using conventions to create the name of the database to
                which a connection will be made, and initializes it from the given model.
                The by-convention name is the full name (namespace + class name) of the derived context class.
                See the class remarks for how this is used to create a connection.
            </summary>
            <param name = "model">The model that will back this context.</param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
            <summary>
                Constructs a new context instance using the given string as the name or connection string for the
                database to which a connection will be made.
                See the class remarks for how this is used to create a connection.
            </summary>
            <param name = "nameOrConnectionString">Either the database name or a connection string.</param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
            <summary>
                Constructs a new context instance using the given string as the name or connection string for the
                database to which a connection will be made, and initializes it from the given model.
                See the class remarks for how this is used to create a connection.
            </summary>
            <param name = "nameOrConnectionString">Either the database name or a connection string.</param>
            <param name = "model">The model that will back this context.</param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
                Constructs a new context instance using the existing connection to connect to a database.
                The connection will not be disposed when the context is disposed.
            </summary>
            <param name = "existingConnection">An existing connection to use for the new context.</param>
            <param name = "contextOwnsConnection">If set to <c>true</c> the connection is disposed when
                the context is disposed, otherwise the caller must dispose the connection.</param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
            <summary>
                Constructs a new context instance using the existing connection to connect to a database,
                and initializes it from the given model.
                The connection will not be disposed when the context is disposed.
                <param name = "existingConnection">An existing connection to use for the new context.</param>
                <param name = "model">The model that will back this context.</param>
                <param name = "contextOwnsConnection">If set to <c>true</c> the connection is disposed when
                    the context is disposed, otherwise the caller must dispose the connection.</param>
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Objects.ObjectContext,System.Boolean)">
            <summary>
                Constructs a new context instance around an existing ObjectContext.
                <param name = "objectContext">An existing ObjectContext to wrap with the new context.</param>
                <param name = "dbContextOwnsObjectContext">If set to <c>true</c> the ObjectContext is disposed when
                    the DbContext is disposed, otherwise the caller must dispose the connection.</param>
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContext.InitializeLazyInternalContext(System.Data.Entity.Internal.IInternalConnection,System.Data.Entity.Infrastructure.DbCompiledModel)">
            <summary>
                Initializes the internal context, discovers and initializes sets, and initializes from a model if one is provided.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContext.DiscoverAndInitializeSets">
            <summary>
                Discovers DbSets and initializes them.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
                This method is called when the model for a derived context has been initialized, but
                before the model has been locked down and used to initialize the context.  The default
                implementation of this method does nothing, but it can be overridden in a derived class
                such that the model can be further configured before it is locked down.
            </summary>
            <remarks>
                Typically, this method is called only once when the first instance of a derived context
                is created.  The model for that context is then cached and is for all further instances of
                the context in the app domain.  This caching can be disabled by setting the ModelCaching
                property on the given ModelBuidler, but note that this can seriously degrade performance.
                More control over caching is provided through use of the DbModelBuilder and DbContextFactory
                classes directly.
            </remarks>
            <param name = "modelBuilder">The builder that defines the model for the context being created.</param>
        </member>
        <member name="M:System.Data.Entity.DbContext.CallOnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
                Internal method used to make the call to the real OnModelCreating method.
            </summary>
            <param name = "modelBuilder">The model builder.</param>
        </member>
        <member name="M:System.Data.Entity.DbContext.Set``1">
            <summary>
                Returns a DbSet instance for access to entities of the given type in the context,
                the ObjectStateManager, and the underlying store.
            </summary>
            <remarks>
                See the DbSet class for more details.
            </remarks>
            <typeparam name = "TEntity">The type entity for which a set should be returned.</typeparam>
            <returns>A set for the given entity type.</returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
            <summary>
                Returns a non-generic DbSet instance for access to entities of the given type in the context,
                the ObjectStateManager, and the underlying store.
            </summary>
            <param name = "entityType">The type of entity for which a set should be returned.</param>
            <returns>A set for the given entity type.</returns>
            <remarks>
                See the DbSet class for more details.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbContext.SaveChanges">
            <summary>
                Saves all changes made in this context to the underlying database.
            </summary>
            <returns>The number of objects written to the underlying database.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
            <summary>
                Validates tracked entities and returns a Collection of <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult"/> containing validation results.
            </summary>
            <returns>
                Collection of validation results for invalid entities. The collection is never null and must not contain null 
                values or results for valid entities.
            </returns>
            <remarks>
                1. This method calls DetectChanges() to determine states of the tracked entities unless 
                DbContextConfiguration.AutoDetectChangesEnabled is set to false.
                2. By default only Added on Modified entities are validated. The user is able to change this behavior 
                by overriding ShouldValidateEntity method.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
            <summary>
                Extension point allowing the user to override the default behavior of validating only
                added and modified entities.
            </summary>
            <param name = "entityEntry">DbEntityEntry instance that is supposed to be validated.</param>
            <returns>true to proceed with validation. false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
                Extension point allowing the user to customize validation of an entity or filter out validation results.
                Called by <see cref="M:System.Data.Entity.DbContext.GetValidationErrors"/>.
            </summary>
            <param name="entityEntry">DbEntityEntry instance to be validated.</param>
            <param name="items">User defined dictionary containing additional info for custom validation.
                It will be passed to <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/>
                and will be exposed as <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items"/>.
                This parameter is optional and can be null.</param>
            <returns>Entity validation result. Possibly null when overridden.</returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.CallValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
            <summary>
                Internal method that calls the protected ValidateEntity method.
            </summary>
            <param name="entityEntry">DbEntityEntry instance to be validated.</param>
            <param name="items">User defined dictionary containing additional info for custom validation.
                It will be passed to <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/>
                and will be exposed as <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items"/>.
                This parameter is optional and can be null.</param>
            <returns>Entity validation result. Possibly null when ValidateEntity is overridden.</returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
            <summary>
                Gets a <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> object for the given entity providing access to
                information about the entity and the ability to perform actions on the entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="entity">The entity.</param>
            <returns>An entry for the entity.</returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
            <summary>
                Gets a <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> object for the given entity providing access to
                information about the entity and the ability to perform actions on the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>An entry for the entity.</returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.Dispose">
            <summary>
                Calls the protected Dispose method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
            <summary>
                Disposes the context. The underlying <see cref="T:System.Data.Objects.ObjectContext"/> is also disposed if it was created
                is by this context or ownership was passed to this context when this context was created.
                The connection to the database (<see cref="T:System.Data.Common.DbConnection"/> object) is also disposed if it was created
                is by this context or ownership was passed to this context when this context was created.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:System.Data.Entity.DbContext.Database">
            <summary>
                Creates a Database instance for this context that allows for creation/deletion/existence checks
                for the underlying database.
            </summary>
        </member>
        <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
            <summary>
                Returns the Entity Framework ObjectContext that is underlying this context.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="P:System.Data.Entity.DbContext.ChangeTracker">
            <summary>
                Provides access to features of the context that deal with change tracking of entities.
            </summary>
            <value>An object used to access features that deal with change tracking.</value>
        </member>
        <member name="P:System.Data.Entity.DbContext.Configuration">
            <summary>
                Provides access to configuration options for the context.
            </summary>
            <value>An object used to access configuration options.</value>
        </member>
        <member name="P:System.Data.Entity.DbContext.InternalContext">
            <summary>
                Provides access to the underlying InternalContext for other parts of the internal design.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.AppConfig">
            <summary>
            A simple representation of an app.config or web.config file.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.AppConfig.#ctor(System.Configuration.Configuration)">
            <summary>
            Initializes a new instance of AppConfig based on supplied configuration
            </summary>
            <param name="configuration">Configuration to load settings from</param>
        </member>
        <member name="M:System.Data.Entity.Internal.AppConfig.#ctor(System.Configuration.ConnectionStringSettingsCollection)">
            <summary>
            Initializes a new instance of AppConfig based on supplied connection strings
            The default configuration for database initializers and default connection factory will be used
            </summary>
            <param name="connectionStrings">Connection strings to be used</param>
        </member>
        <member name="M:System.Data.Entity.Internal.AppConfig.#ctor">
            <summary>
            Initializes a new instance of AppConfig based on the <see cref="T:System.Configuration.ConfigurationManager"/> for the AppDomain
            </summary>
            <remarks>
            Use AppConfig.DefaultInstance instead of this constructor
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Internal.AppConfig.ApplyInitializers">
            <summary>
            Appies any database intializers specified in the configuration
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.AppConfig.InternalApplyInitializers(System.Boolean)">
            <summary>
            Appies any database intializers specified in the configuration
            </summary>
            <param name="force">
            Value indicating if initializers should be re-applied if they have already been applied in this AppDomain
            </param>
        </member>
        <member name="M:System.Data.Entity.Internal.AppConfig.GetConnectionString(System.String)">
            <summary>
            Gets the specified connection string from the configuration
            </summary>
            <param name="name">Name of the connection string to get</param>
            <returns>The connection string, or null if there is no connection string with the specified name</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.AppConfig.DefaultConnectionFactory">
            <summary>
            Gets the default connection factory based on the configuration
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.AppConfig.DefaultInstance">
            <summary>
            Gets a singleton instance of configuration based on the <see cref="T:System.Configuration.ConfigurationManager"/> for the AppDomain
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.MockingProxies.EntityConnectionProxy">
            <summary>
            Acts as a proxy for <see cref="T:System.Data.EntityClient.EntityConnection"/> that for the most part just passes calls
            through to the real object but uses virtual methods/properties such that uses of the object
            can be mocked.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.LegacyDatabaseInitializerConfig">
            <summary>
                Encapsulates information read from the application config file that specifies a database initializer
                and allows that initializer to be dynamically applied.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.LegacyDatabaseInitializerConfig.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.LegacyDatabaseInitializerConfig"/> class.
            </summary>
            <param name="configKey">The key from the entry in the config file.</param>
            <param name="configValue">The value from the enrty in the config file.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.LegacyDatabaseInitializerConfig.ApplyInitializer">
            <summary>
                Uses the context type and initializer type specified in the config to create an initializer instance
                and set it with the DbDbatabase.SetInitializer method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.LegacyDatabaseInitializerConfig.ApplyInitializersFromConfig(System.Configuration.KeyValueConfigurationCollection)">
            <summary>
                Reads all initializers from the application config file and sets them using the Database class.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.ModelHashCalculator">
            <summary>
                Calculates the model hash values used the EdmMetadata table from EF 4.1/4.2.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.ModelHashCalculator.Calculate(System.Data.Entity.Infrastructure.DbCompiledModel)">
            <summary>
                Calculates an SHA256 hash of the EDMX from the given code first model. This is the hash stored in
                the database in the EdmMetadata table in EF 4.1/4.2. The hash is always calculated using a v2 schema
                as was generated by EF 4.1/4.2 and with the <see cref="T:System.Data.Entity.Infrastructure.EdmMetadata"/> entity included in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.MockingProxies.ObjectContextProxy">
            <summary>
            Acts as a proxy for <see cref="T:System.Data.Objects.ObjectContext"/> that for the most part just passes calls
            through to the real object but uses virtual methods/properties such that uses of the object
            can be mocked.
            </summary>
        </member>
        <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
            <summary>
            An implementation of <see cref="T:System.Data.Entity.IDatabaseInitializer`1"/> that will use Code First Migrations
            to update the database to the latest version.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Data.Entity.IDatabaseInitializer`1" -->
        <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
            <summary>
                Executes the strategy to initialize the database for the given context.
            </summary>
            <param name = "context">The context.</param>
        </member>
        <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
            <summary>
            Initializes a new instance of the MigrateDatabaseToLatestVersion class. 
            </summary>
        </member>
        <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MigrateDatabaseToLatestVersion class that will
            use a specific connection string from the configuration file to connect to
            the database to perform the migration.
            </summary>
            <param name="connectionStringName">The name of the connection string to use for migration.</param>
        </member>
        <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
            <summary>
                Helper class that is used to configure a column.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String)">
            <summary>
                Creates a new column definition to store Binary data.
            </summary>
            <param name = "nullable">Value indicating whether or not the column allows null values.</param>
            <param name = "maxLength">The maximum allowable length of the array data.</param>
            <param name = "fixedLength">Value indicating whether or not all data should be padded to the maximum length.</param>
            <param name = "isMaxLength">Value indicating whether or not the maximum length supported by the database provider should be used.</param>
            <param name = "defaultValue">Constant value to use as the default value for this column.</param>
            <param name = "defaultValueSql">SQL expression used as the default value for this column.</param>
            <param name = "timestamp">Value indicating whether or not this column should be configured as a timestamp.</param>
            <param name = "name">The name of the column.</param>
            <param name = "storeType">Provider specific data type to use for this column.</param>
            <returns>The newly constructed column definition.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String)">
            <summary>
                Creates a new column definition to store Boolean data.
            </summary>
            <param name = "nullable">Value indicating whether or not the column allows null values.</param>
            <param name = "defaultValue">Constant value to use as the default value for this column.</param>
            <param name = "defaultValueSql">SQL expression used as the default value for this column.</param>
            <param name = "name">The name of the column.</param>
            <param name = "storeType">Provider specific data type to use for this column.</param>
            <returns>The newly constructed column definition.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String)">
            <summary>
                Creates a new column definition to store Byte data.
            </summary>
            <param name = "nullable">Value indicating whether or not the column allows null values.</param>
            <param name = "identity">Value indicating whether or not the database will generate values for this column during insert.</param>
            <param name = "defaultValue">Constant value to use as the default value for this column.</param>
            <param name = "defaultValueSql">SQL expression used as the default value for this column.</param>
            <param name = "name">The name of the column.</param>
            <param name = "storeType">Provider specific data type to use for this column.</param>
            <returns>The newly constructed column definition.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String)">
            <summary>
                Creates a new column definition to store DateTime data.
            </summary>
            <param name = "nullable">Value indicating whether or not the column allows null values.</param>
            <param name = "precision">The precision of the column.</param>
            <param name = "defaultValue">Constant value to use as the default value for this column.</param>
            <param name = "defaultValueSql">SQL expression used as the default value for this column.</param>
            <param name = "name">The name of the column.</param>
            <param name = "storeType">Provider specific data type to use for this column.</param>
            <returns>The newly constructed column definition.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
            <summary>
                Creates a new column definition to store Decimal data.
            </summary>
            <param name = "nullable">Value indicating whether or not the column allows null values.</param>
            <param name = "precision">The numeric precision of the column.</param>
            <param name = "scale">The numeric scale of the column.</param>
            <param name = "defaultValue">Constant value to use as the default value for this column.</param>
            <param name = "defaultValueSql">SQL expression used as the default value for this column.</param>
            <param name = "name">The name of the column.</param>
            <param name = "storeType">Provider specific data type to use for this column.</param>
            <param name = "identity">Value indicating whether or not the database will generate values for this column during insert.</param>
            <returns>The newly constructed column definition.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String)">
            <summary>
                Creates a new column definition to store Double data.
            </summary>
            <param name = "nullable">Value indicating whether or not the column allows null values.</param>
            <param name = "defaultValue">Constant value to use as the default value for this column.</param>
            <param name = "defaultValueSql">SQL expression used as the default value for this column.</param>
            <param name = "name">The name of the column.</param>
            <param name = "storeType">Provider specific data type to use for this column.</param>
            <returns>The newly constructed column definition.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String)">
            <summary>
                Creates a new column definition to store GUID data.
            </summary>
            <param name = "nullable">Value indicating whether or not the column allows null values.</param>
            <param name = "identity">Value indicating whether or not the database will generate values for this column during insert.</param>
            <param name = "defaultValue">Constant value to use as the default value for this column.</param>
            <param name = "defaultValueSql">SQL expression used as the default value for this column.</param>
            <param name = "name">The name of the column.</param>
            <param name = "storeType">Provider specific data type to use for this column.</param>
            <returns>The newly constructed column definition.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String)">
            <summary>
                Creates a new column definition to store Single data.
            </summary>
            <param name = "nullable">Value indicating whether or not the column allows null values.</param>
            <param name = "defaultValue">Constant value to use as the default value for this column.</param>
            <param name = "defaultValueSql">SQL expression used as the default value for this column.</param>
            <param name = "name">The name of the column.</param>
            <param name = "storeType">Provider specific data type to use for this column.</param>
            <returns>The newly constructed column definition.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String)">
            <summary>
                Creates a new column definition to store Short data.
            </summary>
            <param name = "nullable">Value indicating whether or not the column allows null values.</param>
            <param name = "identity">Value indicating whether or not the database will generate values for this column during insert.</param>
            <param name = "defaultValue">Constant value to use as the default value for this column.</param>
            <param name = "defaultValueSql">SQL expression used as the default value for this column.</param>
            <param name = "name">The name of the column.</param>
            <param name = "storeType">Provider specific data type to use for this column.</param>
            <returns>The newly constructed column definition.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
                Creates a new column definition to store Integer data.
            </summary>
            <param name = "nullable">Value indicating whether or not the column allows null values.</param>
            <param name = "identity">Value indicating whether or not the database will generate values for this column during insert.</param>
            <param name = "defaultValue">Constant value to use as the default value for this column.</param>
            <param name = "defaultValueSql">SQL expression used as the default value for this column.</param>
            <param name = "name">The name of the column.</param>
            <param name = "storeType">Provider specific data type to use for this column.</param>
            <returns>The newly constructed column definition.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String)">
            <summary>
                Creates a new column definition to store Long data.
            </summary>
            <param name = "nullable">Value indicating whether or not the column allows null values.</param>
            <param name = "identity">Value indicating whether or not the database will generate values for this column during insert.</param>
            <param name = "defaultValue">Constant value to use as the default value for this column.</param>
            <param name = "defaultValueSql">SQL expression used as the default value for this column.</param>
            <param name = "name">The name of the column.</param>
            <param name = "storeType">Provider specific data type to use for this column.</param>
            <returns>The newly constructed column definition.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String)">
            <summary>
                Creates a new column definition to store String data.
            </summary>
            <param name = "nullable">Value indicating whether or not the column allows null values.</param>
            <param name = "maxLength">The maximum allowable length of the string data.</param>
            <param name = "fixedLength">Value indicating whether or not all data should be padded to the maximum length.</param>
            <param name = "isMaxLength">Value indicating whether or not the maximum length supported by the database provider should be used.</param>
            <param name = "unicode">Value indicating whether or not the column supports Unicode content.</param>
            <param name = "defaultValue">Constant value to use as the default value for this column.</param>
            <param name = "defaultValueSql">SQL expression used as the default value for this column.</param>
            <param name = "name">The name of the column.</param>
            <param name = "storeType">Provider specific data type to use for this column.</param>
            <returns>The newly constructed column definition.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String)">
            <summary>
                Creates a new column definition to store Time data.
            </summary>
            <param name = "nullable">Value indicating whether or not the column allows null values.</param>
            <param name = "precision">The precision of the column.</param>
            <param name = "defaultValue">Constant value to use as the default value for this column.</param>
            <param name = "defaultValueSql">SQL expression used as the default value for this column.</param>
            <param name = "name">The name of the column.</param>
            <param name = "storeType">Provider specific data type to use for this column.</param>
            <returns>The newly constructed column definition.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String)">
            <summary>
                Creates a new column definition to store DateTimeOffset data.
            </summary>
            <param name = "nullable">Value indicating whether or not the column allows null values.</param>
            <param name = "precision">The precision of the column.</param>
            <param name = "defaultValue">Constant value to use as the default value for this column.</param>
            <param name = "defaultValueSql">SQL expression used as the default value for this column.</param>
            <param name = "name">The name of the column.</param>
            <param name = "storeType">Provider specific data type to use for this column.</param>
            <returns>The newly constructed column definition.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Spatial.DbGeography,System.String,System.String,System.String)">
            <summary>
                Creates a new column definition to store geography data.
            </summary>
            <param name = "nullable">Value indicating whether or not the column allows null values.</param>
            <param name = "defaultValue">Constant value to use as the default value for this column.</param>
            <param name = "defaultValueSql">SQL expression used as the default value for this column.</param>
            <param name = "name">The name of the column.</param>
            <param name = "storeType">Provider specific data type to use for this column.</param>
            <returns>The newly constructed column definition.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Spatial.DbGeometry,System.String,System.String,System.String)">
            <summary>
                Creates a new column definition to store geometry data.
            </summary>
            <param name = "nullable">Value indicating whether or not the column allows null values.</param>
            <param name = "defaultValue">Constant value to use as the default value for this column.</param>
            <param name = "defaultValueSql">SQL expression used as the default value for this column.</param>
            <param name = "name">The name of the column.</param>
            <param name = "storeType">Provider specific data type to use for this column.</param>
            <returns>The newly constructed column definition.</returns>
        </member>
        <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
            <summary>
                Helper class that is used to further configure a table being created from a CreateTable call on <see cref="T:System.Data.Entity.Migrations.DbMigration"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
            <summary>
                Initializes a new instance of the TableBuilder class.
            </summary>
            <param name = "createTableOperation">The table creation operation to be further configured.</param>
            <param name = "migration">The migration the table is created in.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Object)">
            <summary>
                Specifies a primary key for the table.
            </summary>
            <param name = "keyExpression">
                A lambda expression representing the property to be used as the primary key. 
                C#: t => t.Id   
                VB.Net: Function(t) t.Id
            
                If the primary key is made up of multiple properties then specify an anonymous type including the properties. 
                C#: t => new { t.Id1, t.Id2 }
                VB.Net: Function(t) New With { t.Id1, t.Id2 }
            </param>
            <param name = "name">
                The name of the primary key.
                If null is supplied, a default name will be generated.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
            <returns>Itself, so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Object)">
            <summary>
                Specifies an index to be created on the table.
            </summary>
            <param name = "indexExpression">
                A lambda expression representing the property to be indexed. 
                C#: t => t.PropertyOne   
                VB.Net: Function(t) t.PropertyOne
            
                If multiple properties are to be indexed then specify an anonymous type including the properties. 
                C#: t => new { t.PropertyOne, t.PropertyTwo }
                VB.Net: Function(t) New With { t.PropertyOne, t.PropertyTwo }
            </param>
            <param name = "unique">A value indicating whether or not this is a unique index.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
            <returns>Itself, so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
            <summary>
                Specifies a foreign key constraint to be created on the table.
            </summary>
            <param name = "principalTable">Name of the table that the foreign key constraint targets.</param>
            <param name = "dependentKeyExpression">
                A lambda expression representing the properties of the foreign key. 
                C#: t => t.PropertyOne   
                VB.Net: Function(t) t.PropertyOne
            
                If multiple properties make up the foreign key then specify an anonymous type including the properties. 
                C#: t => new { t.PropertyOne, t.PropertyTwo }
                VB.Net: Function(t) New With { t.PropertyOne, t.PropertyTwo }</param>
            <param name = "cascadeDelete">
                A value indicating whether or not cascade delete should be configured on the foreign key constraint.
            </param>
            <param name = "name">
                The name of this foreign key constraint.
                If no name is supplied, a default name will be calculated.
            </param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
            <returns>Itself, so that multiple calls can be chained.</returns>
        </member>
        <member name="T:System.Data.Entity.Migrations.DbMigration">
            <summary>
                Base class for code-based migrations.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
            <summary>
                Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
            <summary>
                Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
            <summary>
                Adds an operation to create a new table.
            </summary>
            <typeparam name = "TColumns">
                The columns in this create table operation. 
                You do not need to specify this type, it will be inferred from the columnsAction parameter you supply.
            </typeparam>
            <param name = "name">The name of the table. Schema name is optional, if no schema is specified then dbo is assumed.</param>
            <param name = "columnsAction">
                An action that specifies the columns to be included in the table.
                i.e. t => new { Id = t.Int(identity: true), Name = t.String() }</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
            <returns>An object that allows further configuration of the table creation operation.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
            <summary>
                Adds an operation to create a new foreign key constraint.
            </summary>
            <param name = "dependentTable">
                The table that contains the foreign key column.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "dependentColumn">The foreign key column.</param>
            <param name = "principalTable">
                The table that contains the column this foreign key references.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "principalColumn">
                The column this foreign key references. 
                If no value is supplied the primary key of the principal table will be referenced.
            </param>
            <param name = "cascadeDelete">
                A value indicating if cascade delete should be configured for the foreign key relationship.
                If no value is supplied, cascade delete will be off.
            </param>
            <param name = "name">
                The name of the foreign key constraint in the database.
                If no value is supplied a unique name will be generated.
            </param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
            <summary>
                Adds an operation to create a new foreign key constraint.
            </summary>
            <param name = "dependentTable">
                The table that contains the foreign key columns.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "dependentColumns">The foreign key columns.</param>
            <param name = "principalTable">
                The table that contains the columns this foreign key references.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "principalColumns">
                The columns this foreign key references. 
                If no value is supplied the primary key of the principal table will be referenced.
            </param>
            <param name = "cascadeDelete">
                A value indicating if cascade delete should be configured for the foreign key relationship.
                If no value is supplied, cascade delete will be off.
            </param>
            <param name = "name">
                The name of the foreign key constraint in the database.
                If no value is supplied a unique name will be generated.
            </param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
            <summary>
                Adds an operation to drop a foreign key constraint based on its name.
            </summary>
            <param name = "dependentTable">
                The table that contains the foreign key column.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "name">The name of the foreign key constraint in the database.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
                Adds an operation to drop a foreign key constraint based on the column it targets.
            </summary>
            <param name = "dependentTable">
                The table that contains the foreign key column.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "dependentColumn">The foreign key column.</param>
            <param name = "principalTable">
                The table that contains the column this foreign key references.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "principalColumn">The columns this foreign key references.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
            <summary>
                Adds an operation to drop a foreign key constraint based on the columns it targets.
            </summary>
            <param name = "dependentTable">
                The table that contains the foreign key columns.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "dependentColumns">The foreign key columns.</param>
            <param name = "principalTable">
                The table that contains the columns this foreign key references.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "principalColumns">The columns this foreign key references.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
            <summary>
                Adds an operation to drop a table.
            </summary>
            <param name = "name">
                The name of the table to be dropped.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
            <summary>
                Adds an operation to move a table to a new schema.
            </summary>
            <param name = "name">
                The name of the table to be moved.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "newSchema">The schema the table is to be moved to.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
            <summary>
                Adds an operation to rename a table. To change the schema of a table use MoveTable
            </summary>
            <param name = "name">
                The name of the table to be renamed.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "newName">
                The new name for the table.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
            <summary>
                Adds an operation to rename a column.
            </summary>
            <param name = "table">
                The name of the table that contains the column to be renamed.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "name">The name of the column to be renamed.</param>
            <param name = "newName">The new name for the column.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
            <summary>
                Adds an operation to add a column to an existing table.
            </summary>
            <param name = "table">
                The name of the table to add the column to.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "name">
                The name of the column to be added.
            </param>
            <param name = "columnAction">
                An action that specifies the column to be added.
                i.e. c => c.Int(nullable: false, defaultValue: 3)
            </param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
            <summary>
                Adds an operation to drop an existing column.
            </summary>
            <param name = "table">
                The name of the table to drop the column from.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "name">The name of the column to be dropped.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
            <summary>
                Adds an operation to alter the definition of an existing column.
            </summary>
            <param name = "table">
                The name of the table the column exists in.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "name">The name of the column to be changed.</param>
            <param name = "columnAction">
                An action that specifies the new definition for the column.
                i.e. c => c.String(nullable: false, defaultValue: "none")
            </param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Object)">
            <summary>
                Adds an operation to create a new primary key.
            </summary>
            <param name = "table">
                The table that contains the primary key column.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "column">The primary key column.</param>
            <param name = "name">
                The name of the primary key in the database.
                If no value is supplied a unique name will be generated.
            </param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Object)">
            <summary>
                Adds an operation to create a new primary key based on multiple columns.
            </summary>
            <param name = "table">
                The table that contains the primary key columns.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "columns">The primary key columns.</param>
            <param name = "name">
                The name of the primary key in the database.
                If no value is supplied a unique name will be generated.
            </param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
            <summary>
                Adds an operation to drop an existing primary key that does not have the default name.
            </summary>
            <param name = "table">
                The table that contains the primary key column.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "name">The name of the primary key to be dropped.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
            <summary>
                Adds an operation to drop an existing primary key that was created with the default name.
            </summary>
            <param name = "table">
                The table that contains the primary key column.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Object)">
            <summary>
                Adds an operation to create an index on a single column.
            </summary>
            <param name = "table">
                The name of the table to create the index on.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "column">The name of the column to create the index on.</param>
            <param name = "unique">
                A value indicating if this is a unique index.
                If no value is supplied a non-unique index will be created.
            </param>
            <param name = "name">
                The name to use for the index in the database.
                If no value is supplied a unique name will be generated.
            </param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Object)">
            <summary>
                Adds an operation to create an index on multiple columns.
            </summary>
            <param name = "table">
                The name of the table to create the index on.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "columns">The name of the columns to create the index on.</param>
            <param name = "unique">
                A value indicating if this is a unique index.
                If no value is supplied a non-unique index will be created.
            </param>
            <param name = "name">
                The name to use for the index in the database.
                If no value is supplied a unique name will be generated.
            </param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
            <summary>
                Adds an operation to drop an index based on its name.
            </summary>
            <param name = "table">
                The name of the table to drop the index from.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "name">The name of the index to be dropped.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
            <summary>
                Adds an operation to drop an index based on the columns it targets.
            </summary>
            <param name = "table">
                The name of the table to drop the index from.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
            <param name = "columns">The name of the column(s) the index targets.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
            <summary>
                Adds an operation to execute a SQL command.
            </summary>
            <param name = "sql">The SQL to be executed.</param>
            <param name = "suppressTransaction">
                A value indicating if the SQL should be executed outside of the 
                transaction being used for the migration process.
                If no value is supplied the SQL will be executed within the transaction.
            </param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
            <summary>
                Configuration relating to the use of migrations for a given model.
                You will typically create a configuration class that derives
                from <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1"/> rather than 
                using this class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
            <summary>
                Initializes a new instance of the DbMigrationsConfiguration class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
            <summary>
                Adds a new SQL generator to be used for a given database provider.
            </summary>
            <param name = "providerInvariantName">Name of the database provider to set the SQL generator for.</param>
            <param name = "migrationSqlGenerator">The SQL generator to be used.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
            <summary>
                Gets the SQL generator that is set to be used with a given database provider.
            </summary>
            <param name = "providerInvariantName">Name of the database provider to get the SQL generator for.</param>
            <returns>The SQL generator that is set for the database provider.</returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
            <summary>
                Gets or sets a value indicating if automatic migrations can be used when migration the database.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
            <summary>
                Gets or sets a value indicating if data loss is acceptable during automatic migration.
                If set to false an exception will be thrown if data loss may occur as part of an automatic migration.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
            <summary>
                Gets or sets the derived DbContext representing the model to be migrated.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
            <summary>
                Gets or sets the namespace used for code-based migrations.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
            <summary>
                Gets or sets the sub-directory that code-based migrations are stored in.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
            <summary>
                Gets or sets the code generator to be used when scaffolding migrations.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
            <summary>
                Gets or sets the assembly containing code-based migrations.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
            <summary>
                Gets or sets a value to override the connection of the database to be migrated.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CommandTimeout">
            <summary>
            Gets or sets the timeout value used for the individual commands within a
            migration. A null value indicates that the default value of the underlying
            provider will be used.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
            <summary>
                Configuration relating to the use of migrations for a given model.
            </summary>
            <typeparam name = "TContext">The context representing the model that this configuration applies to.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
            <summary>
                Initializes a new instance of the DbMigrationsConfiguration class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
            <summary>
                Runs after upgrading to the latest migration to allow seed data to be updated.
            </summary>
            <param name = "context">Context to be used for updating seed data.</param>
        </member>
        <member name="T:System.Data.Entity.Migrations.DbMigrator">
            <summary>
                DbMigrator is used to apply existing migrations to a database. 
                DbMigrator can be used to upgrade and downgrade to any given migration.
                To scaffold migrations based on changes to your model use <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder"/>
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
            <summary>
                Base class for decorators that wrap the core <see cref="T:System.Data.Entity.Migrations.DbMigrator"/>
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
            <summary>
                Initializes a new instance of the MigratorBase class.
            </summary>
            <param name = "innerMigrator">The migrator that this decorator is wrapping.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
            <summary>
                Gets a list of the pending migrations that have not been applied to the database.
            </summary>
            <returns>List of migration Ids</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
            <summary>
                Updates the target database to the latest migration.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
            <summary>
                Updates the target database to a given migration.
            </summary>
            <param name = "targetMigration">The migration to upgrade/downgrade to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
            <summary>
                Gets a list of the migrations that are defined in the assembly.
            </summary>
            <returns>List of migration Ids</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
            <summary>
                Gets a list of the migrations that have been applied to the database.
            </summary>
            <returns>List of migration Ids</returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
            <summary>
                Gets the configuration being used for the migrations process.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
            <summary>
                Migration Id representing the state of the database before any migrations are applied.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
            <summary>
                Initializes a new instance of the DbMigrator class.
            </summary>
            <param name = "configuration">Configuration to be used for the migration process.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
            <summary>
                Gets all migrations that are defined in the configured migrations assembly.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
            <summary>
                Gets all migrations that have been applied to the target database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
            <summary>
                Gets all migrations that are defined in the assembly but haven't been applied to the target database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
            <summary>
                Updates the target database to a given migration.
            </summary>
            <param name = "targetMigration">The migration to upgrade/downgrade to.</param>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
            <summary>
                Gets the configuration that is being used for the migration process.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.IDbSetExtensions">
            <summary>
                A set of extension methods for <see cref="T:System.Data.Entity.IDbSet`1"/>
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
            <summary>
                Adds or updates entities by key when SaveChanges is called. Equivalent to an "upsert" operation
                from database terminology. 
                This method can useful when seeding data using Migrations.
            </summary>
            <param name = "entities">The entities to add or update.</param>
            <remarks>
                When the <param name="set"/> parameter is a custom or fake IDbSet implementation, this method will
                attempt to locate and invoke a public, instance method with the same signature as this extension method.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
            <summary>
                Adds or updates entities by a custom identification expression when SaveChanges is called.
                Equivalent to an "upsert" operation from database terminology.
                This method can useful when seeding data using Migrations.
            </summary>
            <param name = "identifierExpression">
                An expression specifying the properties that should be used when determining
                whether an Add or Update operation should be performed.
            </param>
            <param name = "entities">The entities to add or update.</param>
            <remarks>
                When the <param name="set"/> parameter is a custom or fake IDbSet implementation, this method will
                attempt to locate and invoke a public, instance method with the same signature as this extension method.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
            <summary>
                Generates C# code for a code-based migration.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
            <summary>
                Base class for providers that generate code for code-based migrations.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
            <summary>
                Generates the code that should be added to the users project.
            </summary>
            <param name = "migrationId">Unique identifier of the migration.</param>
            <param name = "operations">Operations to be performed by the migration.</param>
            <param name = "sourceModel">Source model to be stored in the migration metadata.</param>
            <param name = "targetModel">Target model to be stored in the migration metadata.</param>
            <param name = "namespace">Namespace that code should be generated in.</param>
            <param name = "className">Name of the class that should be generated.</param>
            <returns>The generated code.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
            <summary>
            Gets the namespaces that must be output as "using" or "Imports" directives to handle
            the code generated by the given operations.
            </summary>
            <param name="operations">The operations for which code is going to be generated.</param>
            <returns>An ordered list of namespace names.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
            <summary>
            Gets the default namespaces that must be output as "using" or "Imports" directives for
            any code generated.
            </summary>
            <param name = "designer">A value indicating if this class is being generated for a code-behind file.</param>
            <returns>An ordered list of namespace names.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
            <summary>
                Generates the primary code file that the user can view and edit.
            </summary>
            <param name = "operations">Operations to be performed by the migration.</param>
            <param name = "namespace">Namespace that code should be generated in.</param>
            <param name = "className">Name of the class that should be generated.</param>
            <returns>The generated code.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
            <summary>
                Generates the code behind file with migration metadata.
            </summary>
            <param name = "migrationId">Unique identifier of the migration.</param>
            <param name = "sourceModel">Source model to be stored in the migration metadata.</param>
            <param name = "targetModel">Target model to be stored in the migration metadata.</param>
            <param name = "namespace">Namespace that code should be generated in.</param>
            <param name = "className">Name of the class that should be generated.</param>
            <returns>The generated code.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates a property to return the source or target model in the code behind file.
            </summary>
            <param name = "name">Name of the property.</param>
            <param name = "value">Value to be returned.</param>
            <param name = "writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Generates a namespace, using statements and class definition.
            </summary>
            <param name = "namespace">Namespace that code should be generated in.</param>
            <param name = "className">Name of the class that should be generated.</param>
            <param name = "writer">Text writer to add the generated code to.</param>
            <param name = "base">Base class for the generated class.</param>
            <param name = "designer">A value indicating if this class is being generated for a code-behind file.</param>
            <param name="namespaces">Namespaces for which using directives will be added. If null, then the namespaces returned from GetDefaultNamespaces will be used.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates the closing code for a class that was started with WriteClassStart.
            </summary>
            <param name = "writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation"/>.
            </summary>
            <param name="addColumnOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation"/>.
            </summary>
            <param name="dropColumnOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation"/>.
            </summary>
            <param name="alterColumnOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="createTableOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation"/> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="addPrimaryKeyOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation"/> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="addForeignKeyOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation"/> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="createIndexOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to specify a set of column names using a lambda expression.
            </summary>
            <param name = "columns">The columns to generate code for.</param>
            <param name = "writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation"/>.
            </summary>
            <param name="addPrimaryKeyOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation"/>.
            </summary>
            <param name="dropPrimaryKeyOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation"/>.
            </summary>
            <param name="addForeignKeyOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation"/>.
            </summary>
            <param name="dropForeignKeyOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation"/>.
            </summary>
            <param name="createIndexOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation"/>.
            </summary>
            <param name="dropIndexOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
            <summary>
                Generates code to specify the definition for a <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel"/>.
            </summary>
            <param name="column">The column definition to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
            <param name="emitName">A value indicating whether to include the column name in the definition.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
            <summary>
                Generates code to specify the default value for a <see cref = "T:byte[]" /> column.
            </summary>
            <param name = "defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.DateTime"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.DateTimeOffset"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.Byte"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.Decimal"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.Guid"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.Int64"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.Single"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.String"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.TimeSpan"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.Data.Spatial.DbGeography"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.Data.Spatial.DbGeometry"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
            <summary>
                Generates code to specify the default value for a column of unknown data type.
            </summary>
            <param name = "defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation"/>.
            </summary>
            <param name="dropTableOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation"/>.
            </summary>
            <param name="moveTableOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation"/>.
            </summary>
            <param name="renameTableOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation"/>.
            </summary>
            <param name="renameColumnOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation"/>.
            </summary>
            <param name="sqlOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
            <summary>
                Removes any invalid characters from the name of an database artifact.
            </summary>
            <param name = "name">The name to be scrubbed.</param>
            <returns>The scrubbed name.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
            <summary>
                Gets the type name to use for a column of the given data type.
            </summary>
            <param name = "primitiveTypeKind">The data type to translate.</param>
            <returns>The type name to use in the generated migration.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
            <summary>
                Quotes an identifier using appropriate escaping to allow it to be stored in a string.
            </summary>
            <param name = "identifier">The identifier to be quoted.</param>
            <returns>The quoted identifier.</returns>
        </member>
        <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
            <summary>
                Scaffolds code-based migrations to apply pending model changes to the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
            <summary>
                Initializes a new instance of the MigrationScaffolder class.
            </summary>
            <param name = "migrationsConfiguration">Configuration to be used for scaffolding.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
            <summary>
                Scaffolds a code based migration to apply any pending model changes to the database.
            </summary>
            <param name = "migrationName">The name to use for the scaffolded migration.</param>
            <returns>The scaffolded migration.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
            <summary>
                Scaffolds a code based migration to apply any pending model changes to the database.
            </summary>
            <param name="migrationName">The name to use for the scaffolded migration.</param>
            <param name="ignoreChanges">Whether or not to include model changes.</param>
            <returns>The scaffolded migration.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
            <summary>
            Scaffolds the initial code-based migration corresponding to a previously run database initializer.
            </summary>
            <returns>The scaffolded migration.</returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
            <summary>
            Gets or sets the namespace used in the migration's generated code.
            
            By default, this is the same as MigrationsNamespace on the migrations
            configuration object passed into the constructor. For VB.NET projects, this
            will need to be updated to take into account the project's root namespace.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
            <summary>
                Represents a code-based migration that has been scaffolded and is ready to be written to a file.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
            <summary>
                Gets or sets the unique identifier for this migration.
                Typically used for the file name of the generated code.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
            <summary>
                Gets or sets the scaffolded migration code that the user can edit.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
            <summary>
                Gets or sets the scaffolded migration code that should be stored in a code behind file.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
            <summary>
                Gets or sets the programming language used for this migration.
                Typically used for the file extension of the generated code.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
            <summary>
                Gets or sets the subdirectory in the user's project that this migration should be saved in.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Resources">
            <summary>
            Gets a dictionary of string resources to add to the migration resource file.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Design.ToolingException">
            <summary>
                Represents an exception that occurred while running an operation in another AppDomain in the <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the ToolingException class.
            </summary>
            <param name = "message">Error that explains the reason for the exception.</param>
            <param name = "innerType">The type of the exception that was thrown.</param>
            <param name = "innerStackTrace">The stack trace of the exception that was thrown.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerType">
            <summary>
                Gets the type of the exception that was thrown.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerStackTrace">
            <summary>
                Gets the stack trace of the exception that was thrown.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
            <summary>
                Helper class that is used by design time tools to run migrations related  
                commands that need to interact with an application that is being edited
                in Visual Studio.
            
                Because the application is being edited the assemblies need to
                be loaded in a separate AppDomain to ensure the latest version
                is always loaded.
            
                The App/Web.config file from the startup project is also copied
                to ensure that any configuration is applied.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
            <summary>
                Initializes a new instance of the ToolingFacade class.
            </summary>
            <param name = "assemblyName">
                The name of the assembly that contains the migrations configuration to be used.
            </param>
            <param name = "configurationTypeName">
                The namespace qualified name of migrations configuration to be used.
            </param>
            <param name = "workingDirectory">
                The working directory containing the compiled assemblies.
            </param>
            <param name = "configurationFilePath">
                The path of the config file from the startup project.
            </param>
            <param name = "dataDirectory">
                The path of the application data directory from the startup project.
                Typically the App_Data directory for web applications or the working directory for executables.
            </param>
            <param name = "connectionStringInfo">
                The connection to the database to be migrated.
                If null is supplied, the default connection for the context will be used.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
            <summary>
                Releases all unmanaged resources used by the facade.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
            <summary>
                Gets the fully qualified name of all types deriving from <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns>All context types found.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextType(System.String)">
            <summary>
            Gets the fully qualified name of a type deriving from <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="contextTypeName">The name of the context type. If null, the single context type found in the assembly will be returned.</param>
            <returns>The context type found.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
            <summary>
                Gets a list of all migrations that have been applied to the database.
            </summary>
            <returns>Ids of applied migrations.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
            <summary>
                Gets a list of all migrations that have not been applied to the database.
            </summary>
            <returns>Ids of pending migrations.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
            <summary>
                Updates the database to the specified migration.
            </summary>
            <param name = "targetMigration">
                The Id of the migration to migrate to.
                If null is supplied, the database will be updated to the latest migration.
            </param>
            <param name = "force">Value indicating if data loss during automatic migration is acceptable.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
            <summary>
                Generates a SQL script to migrate between two migrations.
            </summary>
            <param name = "sourceMigration">
                The migration to update from. 
                If null is supplied, a script to update the current database will be produced.
            </param>
            <param name = "targetMigration">
                The migration to update to.
                If null is supplied, a script to update to the latest migration will be produced.
            </param>
            <param name = "force">Value indicating if data loss during automatic migration is acceptable.</param>
            <returns>The generated SQL script.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
            <summary>
                Scaffolds a code-based migration to apply any pending model changes.
            </summary>
            <param name = "migrationName">The name for the generated migration.</param>
            <param name = "language">The programming language of the generated migration.</param>
            <param name = "rootNamespace">The root namespace of the project the migration will be added to.</param>
            <param name = "ignoreChanges">Whether or not to include model changes.</param>
            <returns>The scaffolded migration.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
            <summary>
                Scaffolds the initial code-based migration corresponding to a previously run database initializer.
            </summary>
            <param name = "language">The programming language of the generated migration.</param>
            <param name = "rootNamespace">The root namespace of the project the migration will be added to.</param>
            <returns>The scaffolded migration.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
            <summary>
                Releases all resources used by the facade.
            </summary>
            <param name = "disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
            <summary>
                Gets or sets an action to be run to log information.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
            <summary>
                Gets or sets an action to be run to log warnings.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
            <summary>
                Gets or sets an action to be run to log verbose information.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
            <summary>
                Base class for loggers that can be used for the migrations process.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
            <summary>
                Logs an informational message.
            </summary>
            <param name = "message">The message to be logged.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
            <summary>
                Logs a warning that the user should be made aware of.
            </summary>
            <param name = "message">The message to be logged.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
            <summary>
                Logs some additional information that should only be presented to the user if they request verbose output.
            </summary>
            <param name = "message">The message to be logged.</param>
        </member>
        <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
            <summary>
                Generates VB.Net code for a code-based migration.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
            <summary>
                Generates the primary code file that the user can view and edit.
            </summary>
            <param name = "operations">Operations to be performed by the migration.</param>
            <param name = "namespace">Namespace that code should be generated in.</param>
            <param name = "className">Name of the class that should be generated.</param>
            <returns>The generated code.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
            <summary>
                Generates the code behind file with migration metadata.
            </summary>
            <param name = "migrationId">Unique identifier of the migration.</param>
            <param name = "sourceModel">Source model to be stored in the migration metadata.</param>
            <param name = "targetModel">Target model to be stored in the migration metadata.</param>
            <param name = "namespace">Namespace that code should be generated in.</param>
            <param name = "className">Name of the class that should be generated.</param>
            <returns>The generated code.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates a property to return the source or target model in the code behind file.
            </summary>
            <param name = "name">Name of the property.</param>
            <param name = "value">Value to be returned.</param>
            <param name = "writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Generates a namespace, using statements and class definition.
            </summary>
            <param name = "namespace">Namespace that code should be generated in.</param>
            <param name = "className">Name of the class that should be generated.</param>
            <param name = "writer">Text writer to add the generated code to.</param>
            <param name = "base">Base class for the generated class.</param>
            <param name = "designer">A value indicating if this class is being generated for a code-behind file.</param>
            <param name="namespaces">Namespaces for which Imports directives will be added. If null, then the namespaces returned from GetDefaultNamespaces will be used.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates the closing code for a class that was started with WriteClassStart.
            </summary>
            <param name = "writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation"/>.
            </summary>
            <param name="addColumnOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation"/>.
            </summary>
            <param name="dropColumnOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation"/>.
            </summary>
            <param name="alterColumnOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="createTableOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation"/> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="addPrimaryKeyOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation"/> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="addForeignKeyOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation"/> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="createIndexOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to specify a set of column names using a lambda expression.
            </summary>
            <param name = "columns">The columns to generate code for.</param>
            <param name = "writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation"/>.
            </summary>
            <param name="addForeignKeyOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation"/>.
            </summary>
            <param name="dropForeignKeyOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation"/>.
            </summary>
            <param name="addPrimaryKeyOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation"/>.
            </summary>
            <param name="dropPrimaryKeyOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation"/>.
            </summary>
            <param name="createIndexOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation"/>.
            </summary>
            <param name="dropIndexOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
            <summary>
                Generates code to specify the definition for a <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel"/>.
            </summary>
            <param name="column">The column definition to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
            <param name="emitName">A value indicating whether to include the column name in the definition.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
            <summary>
                Generates code to specify the default value for a <see cref = "T:byte[]" /> column.
            </summary>
            <param name = "defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.DateTime"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.DateTimeOffset"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.Byte"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.Decimal"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.Guid"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.Int64"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.Single"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.String"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.TimeSpan"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.Data.Spatial.DbGeography"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
            <summary>
                Generates code to specify the default value for a <see cref="T:System.Data.Spatial.DbGeometry"/> column.
            </summary>
            <param name="defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
            <summary>
                Generates code to specify the default value for a column of unknown data type.
            </summary>
            <param name = "defaultValue">The value to be used as the default.</param>
            <returns>Code representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation"/>.
            </summary>
            <param name="dropTableOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation"/>.
            </summary>
            <param name="moveTableOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation"/>.
            </summary>
            <param name="renameTableOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation"/>.
            </summary>
            <param name="renameColumnOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation"/>.
            </summary>
            <param name="sqlOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
            <summary>
                Removes any invalid characters from the name of an database artifact.
            </summary>
            <param name = "name">The name to be scrubbed.</param>
            <returns>The scrubbed name.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
            <summary>
                Gets the type name to use for a column of the given data type.
            </summary>
            <param name = "primitiveTypeKind">The data type to translate.</param>
            <returns>The type name to use in the generated migration.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
            <summary>
                Quotes an identifier using appropriate escaping to allow it to be stored in a string.
            </summary>
            <param name = "identifier">The identifier to be quoted.</param>
            <returns>The quoted identifier.</returns>
        </member>
        <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
            <summary>
                This class is used by Code First Migrations to read and write migration history
                from the database. It is not intended to be used by other code and is only public
                so that it can be accessed by EF when running under partial trust. It may be
                changed or removed in the future.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
            <summary>
                Gets or sets the Id of the migration this row represents.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.History.HistoryRow.CreatedOn">
            <summary>
                Gets or sets the date and time that this migrations history entry was created.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
            <summary>
                Gets or sets the state of the model after this migration was applied.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
            <summary>
                Gets or sets the version of Entity Framework that created this entry.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.History.LegacyHistoryContext">
            <summary>
            This is a version of the HistoryContext that still includes CreatedOn in its model.
            It is used when figuring out whether or not the CreatedOn column exists and so should
            be dropped.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
            <summary>
                Represents an error that occurs when an automatic migration would result in data loss.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
            <summary>
            Represents errors that occur inside the Code First Migrations pipeline.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor">
            <summary>
            Initializes a new instance of the MigrationsException class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MigrationsException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MigrationsException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MigrationsException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the AutomaticDataLossException class.
            </summary>
            <param name = "message">The message that describes the error.</param>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
            <summary>
                Represents an error that occurs when there are pending model changes after applying the last migration and automatic migration is disabled.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the AutomaticMigrationsDisabledException class.
            </summary>
            <param name = "message">The message that describes the error.</param>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
            <summary>
                Provides additional metadata about a code-based migration.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
            <summary>
                Gets the unique identifier for the migration.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
            <summary>
                Gets the state of the model before this migration is run.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
            <summary>
                Gets the state of the model after this migration is run.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
            <summary>
                Decorator to provide logging during migrations operations..
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
            <summary>
                Initializes a new instance of the MigratorLoggingDecorator class.
            </summary>
            <param name = "innerMigrator">The migrator that this decorator is wrapping.</param>
            <param name = "logger">The logger to write messages to.</param>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
            <summary>
                Decorator to produce a SQL script instead of applying changes to the database.
                Using this decorator to wrap <see cref="T:System.Data.Entity.Migrations.DbMigrator"/> will prevent <see cref="T:System.Data.Entity.Migrations.DbMigrator"/> 
                from applying any changes to the target database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
            <summary>
                Initializes a new instance of the  MigratorScriptingDecorator class.
            </summary>
            <param name = "innerMigrator">The migrator that this decorator is wrapping.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)" -->
        <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
            <summary>
                Represents a column being added to a table.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
            <summary>
                Represents an operation to modify a database schema.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the MigrationOperation class.
            </summary>
            <param name = "anonymousArguments">
             
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
            <summary>
                Gets additional arguments that may be processed by providers.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
            <summary>
                Gets an operation that will revert this operation.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
            <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
            <summary>
                Initializes a new instance of the AddColumnOperation class.
            </summary>
            <param name = "table">The name of the table the column should be added to.</param>
            <param name = "column">Details of the column being added.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
            <summary>
                Gets the name of the table the column should be added to.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
            <summary>
                Gets the details of the column being added.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
            <summary>
                Gets an operation that represents dropping the added column.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
            <summary>
                Represents a foreign key constraint being added to a table.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
            <summary>
                Base class for changes that affect foreign key constraints.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the ForeignKeyOperation class.
            </summary>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
            <summary>
                Gets or sets the name of the table that the foreign key constraint targets.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
            <summary>
                Gets or sets the name of the table that the foreign key columns exist in.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
            <summary>
                The names of the foreign key column(s).
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
            <summary>
                Gets a value indicating if a specific name has been supplied for this foreign key constraint.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
            <summary>
                Gets or sets the name of this foreign key constraint.
                If no name is supplied, a default name will be calculated.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the AddForeignKeyOperation class.
                The PrincipalTable, PrincipalColumns, DependentTable and DependentColumns properties should also be populated.
            </summary>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
            <summary>
                Gets an operation to create an index on the foreign key column(s).
            </summary>
            <returns>An operation to add the index.</returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
            <summary>
                The names of the column(s) that the foreign key constraint should target.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
            <summary>
                Gets or sets a value indicating if cascade delete should be configured on the foreign key constraint.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
            <summary>
                Gets an operation to drop the foreign key constraint.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
            <summary>
                Represents adding a primary key to a table.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
            <summary>
                Common base class to represent operations affecting primary keys.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the PrimaryKeyOperation class.
            </summary>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
            <summary>
                Gets or sets the name of the table that contains the primary key.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
            <summary>
                Gets the column(s) that make up the primary key.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
            <summary>
                Gets a value indicating if a specific name has been supplied for this primary key.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
            <summary>
                Gets or sets the name of this primary key.
                If no name is supplied, a default name will be calculated.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the AddPrimaryKeyOperation class.
                The Table and Columns properties should also be populated.
            </summary>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
            <summary>
                Gets an operation to drop the primary key.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
            <summary>
                Represents altering an existing column.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
            <summary>
                Initializes a new instance of the AlterColumnOperation class.
            </summary>
            <param name = "table">The name of the table that the column belongs to.</param>
            <param name = "column">Details of what the column should be altered to.</param>
            <param name = "isDestructiveChange">Value indicating if this change will result in data loss.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
            <summary>
                Initializes a new instance of the AlterColumnOperation class.
            </summary>
            <param name = "table">The name of the table that the column belongs to.</param>
            <param name = "column">Details of what the column should be altered to.</param>
            <param name = "isDestructiveChange">Value indicating if this change will result in data loss.</param>
            <param name = "inverse">An operation to revert this alteration of the column.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
            <summary>
                Gets the name of the table that the column belongs to.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
            <summary>
                Gets the new definition for the column.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
            <summary>
                Gets an operation that represents reverting the alteration.
                The inverse cannot be automatically calculated, 
                if it was not supplied to the constructor this property will return null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
            <summary>
                Represents information about a column.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind)">
            <summary>
                Initializes a new instance of the  class.
            </summary>
            <param name = "type">The data type for this column.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind,System.Data.Metadata.Edm.TypeUsage)">
            <summary>
                Initializes a new instance of the  class.
            </summary>
            <param name = "type">The data type for this column.</param>
            <param name = "typeUsage">
                Additional details about the data type.
                This includes details such as maximum length, nullability etc.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Common.DbProviderManifest)">
            <summary>
                Determines if this column is a narrower data type than another column.
                Used to determine if altering the supplied column definition to this definition will result in data loss.
            </summary>
            <param name = "column">The column to compare to.</param>
            <param name = "providerManifest">Details of the database provider being used.</param>
            <returns>True if this column is of a narrower data type.</returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Type">
            <summary>
                Gets the data type for this column.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
            <summary>
                Gets the CLR type corresponding to the database type of this column.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
            <summary>
                Gets the default value for the CLR type corresponding to the database type of this column.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.TypeUsage">
            <summary>
                Gets additional details about the data type of this column.
                This includes details such as maximum length, nullability etc.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Name">
            <summary>
                Gets or sets the name of the column.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.StoreType">
            <summary>
                Gets or sets a provider specific data type to use for this column.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
            <summary>
                Gets or sets a value indicating if this column can store null values.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
            <summary>
                Gets or sets a value indicating if values for this column will be generated by the database using the identity pattern.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.MaxLength">
            <summary>
                Gets or sets the maximum length for this column.
                Only valid for array data types.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Precision">
            <summary>
                Gets or sets the precision for this column.
                Only valid for decimal data types.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Scale">
            <summary>
                Gets or sets the scale for this column.
                Only valid for decimal data types.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValue">
            <summary>
                Gets or sets a constant value to use as the default value for this column.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValueSql">
            <summary>
                Gets or sets a SQL expression used as the default value for this column.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsFixedLength">
            <summary>
                Gets or sets a value indicating if this column is fixed length.
                Only valid for array data types.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsUnicode">
            <summary>
                Gets or sets a value indicating if this column supports Unicode characters.
                Only valid for textual data types.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
            <summary>
                Gets or sets a value indicating if this column should be configured as a timestamp.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
            <summary>
                Represents creating a database index.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
            <summary>
                Common base class for operations affecting indexes.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the IndexOperation class.
            </summary>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
            <summary>
                Gets or sets the table the index belongs to.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
            <summary>
                Gets or sets the columns that are indexed.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
            <summary>
                Gets a value indicating if a specific name has been supplied for this index.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
            <summary>
                Gets or sets the name of this index.
                If no name is supplied, a default name will be calculated.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the CreateIndexOperation class.
                The Table and Columns properties should also be populated.
            </summary>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
            <summary>
                Gets or sets a value indicating if this is a unique index.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
            <summary>
                Gets an operation to drop this index.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
            <summary>
                Represents creating a table.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
            <summary>
                Initializes a new instance of the CreateTableOperation class.
            </summary>
            <param name = "name">Name of the table to be created.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
            <summary>
                Gets the name of the table to be created.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
            <summary>
                Gets the columns to be included in the new table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
            <summary>
                Gets or sets the primary key for the new table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
            <summary>
                Gets an operation to drop the table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation">
            <summary>
                Represents deleting a new record from the migrations history table.
                The migrations history table is used to store a log of the migrations that have been applied to the database.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
            <summary>
                Common base class for operations that affect the migrations history table.
                The migrations history table is used to store a log of the migrations that have been applied to the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.String,System.String,System.Object)">
            <summary>
                Initializes a new instance of the HistoryOperation class.
            </summary>
            <param name = "table">Name of the migrations history table.</param>
            <param name = "migrationId">Name of the migration being affected.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.Table">
            <summary>
                Gets the name of the migrations history table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.MigrationId">
            <summary>
                Gets the name of the migration being affected.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DeleteHistoryOperation.#ctor(System.String,System.String,System.Object)">
            <summary>
                Initializes a new instance of the DeleteHistoryOperation class.
            </summary>
            <param name = "table">Name of the migrations history table.</param>
            <param name = "migrationId">Id of the migration record to be deleted.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
            <summary>
                Represents a column being dropped from a table.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
            <summary>
                Initializes a new instance of the DropColumnOperation class.
            </summary>
            <param name = "table">The name of the table the column should be dropped from.</param>
            <param name = "name">The name of the column to be dropped.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
            <summary>
                Initializes a new instance of the DropColumnOperation class.
            </summary>
            <param name = "table">The name of the table the column should be dropped from.</param>
            <param name = "name">The name of the column to be dropped.</param>
            <param name = "inverse">The operation that represents reverting the drop operation.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
            <summary>
                Gets the name of the table the column should be dropped from.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
            <summary>
                Gets the name of the column to be dropped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
            <summary>
                Gets an operation that represents reverting dropping the column.
                The inverse cannot be automatically calculated, 
                if it was not supplied to the constructor this property will return null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
            <summary>
                Represents a foreign key constraint being dropped from a table.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the DropForeignKeyOperation class.
                The PrincipalTable, DependentTable and DependentColumns properties should also be populated.
            </summary>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
            <summary>
                Initializes a new instance of the DropForeignKeyOperation class.
            </summary>
            <param name = "inverse">The operation that represents reverting dropping the foreign key constraint.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
            <summary>
                Gets an operation to drop the associated index on the foreign key column(s).
            </summary>
            <returns>An operation to drop the index.</returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
            <summary>
                Gets an operation that represents reverting dropping the foreign key constraint.
                The inverse cannot be automatically calculated, 
                if it was not supplied to the constructor this property will return null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
            <summary>
                Represents dropping an existing index.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the DropIndexOperation class.
            </summary>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
            <summary>
                Initializes a new instance of the DropIndexOperation class.
            </summary>
            <param name = "inverse">The operation that represents reverting dropping the index.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
            <summary>
                Gets an operation that represents reverting dropping the index.
                The inverse cannot be automatically calculated, 
                if it was not supplied to the constructor this property will return null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
            <summary>
                Represents dropping a primary key from a table.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the DropPrimaryKeyOperation class.
                The Table and Columns properties should also be populated.
            </summary>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
            <summary>
                Gets an operation to add the primary key.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
            <summary>
                Represents dropping an existing table.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
            <summary>
                Initializes a new instance of the DropTableOperation class.
            </summary>
            <param name = "name">The name of the table to be dropped.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
            <summary>
                Initializes a new instance of the DropTableOperation class.
            </summary>
            <param name = "name">The name of the table to be dropped.</param>
            <param name = "inverse">An operation that represents reverting dropping the table.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
            <summary>
                Gets the name of the table to be dropped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
            <summary>
                Gets an operation that represents reverting dropping the table.
                The inverse cannot be automatically calculated, 
                if it was not supplied to the constructor this property will return null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation">
            <summary>
                Represents inserting a new record into the migrations history table.
                The migrations history table is used to store a log of the migrations that have been applied to the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.InsertHistoryOperation.#ctor(System.String,System.String,System.Byte[],System.Object)">
            <summary>
                Initializes a new instance of the InsertHistoryOperation class.
            </summary>
            <param name = "table">Name of the migrations history table.</param>
            <param name = "migrationId">Id of the migration record to be inserted.</param>
            <param name = "model">Value to be stored in the model column.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.Model">
            <summary>
                Gets the value to store in the history table representing the target model of the migration.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.ProductVersion">
            <summary>
                Gets the value to store in the history table indicating the version of Entity Framework used to produce this migration.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
            <summary>
                Represents moving a table from one schema to another.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
            <summary>
                Initializes a new instance of the MoveTableOperation class.
            </summary>
            <param name = "name">Name of the table to be moved.</param>
            <param name = "newSchema">Name of the schema to move the table to.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
            <summary>
                Gets the name of the table to be moved.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
            <summary>
                Gets the name of the schema to move the table to.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
            <summary>
                Gets an operation that moves the table back to its original schema.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
            <summary>
                Represents renaming an existing column.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
            <summary>
                Initializes a new instance of the RenameColumnOperation class.
            </summary>
            <param name = "table">Name of the table the column belongs to.</param>
            <param name = "name">Name of the column to be renamed.</param>
            <param name = "newName">New name for the column.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
            <summary>
                Gets the name of the table the column belongs to.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
            <summary>
                Gets the name of the column to be renamed.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
            <summary>
                Gets the new name for the column.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
            <summary>
                Gets an operation that reverts the rename.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
            <summary>
                Represents renaming an existing table.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
            <summary>
                Initializes a new instance of the RenameTableOperation class.
            </summary>
            <param name = "name">Name of the table to be renamed.</param>
            <param name = "newName">New name for the table.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
            <summary>
                Gets the name of the table to be renamed.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
            <summary>
                Gets the new name for the table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
            <summary>
                Gets an operation that reverts the rename.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
            <summary>
                Represents a provider specific SQL statement to be executed directly against the target database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
            <summary>
                Initializes a new instance of the SqlOperation class.
            </summary>
            <param name = "sql">The SQL to be executed.</param>
            <param name = "anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
            <summary>
                Gets the SQL to be executed.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
            <summary>
                Gets or sets a value indicating whether this statement should be performed outside of
                the transaction scope that is used to make the migration process transactional.
                If set to true, this operation will not be rolled back if the migration process fails.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
            <summary>
                Common base class for providers that convert provider agnostic migration 
                operations into database provider specific SQL commands.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
            <summary>
                Converts a set of migration operations into database provider specific SQL.
            </summary>
            <param name = "migrationOperations">The operations to be converted.</param>
            <param name = "providerManifestToken">Token representing the version of the database being targeted.</param>
            <returns>A list of SQL statements to be executed to perform the migration operations.</returns>
        </member>
        <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
            <summary>
                Represents a migration operation that has been translated into a SQL statement.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
            <summary>
                Gets or sets the SQL to be executed to perform this migration operation.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
            <summary>
                Gets or sets a value indicating whether this statement should be performed outside of
                the transaction scope that is used to make the migration process transactional.
                If set to true, this operation will not be rolled back if the migration process fails.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator">
            <summary>
                Provider to convert provider agnostic migration operations into SQL commands 
                that can be run against Microsoft SQL Server Compact Edition.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator">
            <summary>
                Provider to convert provider agnostic migration operations into SQL commands 
                that can be run against a Microsoft SQL Server database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
            <summary>
                Converts a set of migration operations into Microsoft SQL Server specific SQL.
            </summary>
            <param name = "migrationOperations">The operations to be converted.</param>
            <param name = "providerManifestToken">Token representing the version of SQL Server being targeted (i.e. "2005", "2008").</param>
            <returns>A list of SQL statements to be executed to perform the migration operations.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.CreateConnection">
            <summary>
                Creates an empty connection for the current provider.
                Allows derived providers to use connection other than <see cref="T:System.Data.SqlClient.SqlConnection"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation)">
            <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name="createTableOperation">The operation to produce SQL for.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
            <summary>
                Generates SQL to mark a table as a system table.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name = "createTableOperation">The table to mark as a system table.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateCreateSchema(System.String)">
            <summary>
                Generates SQL to create a database schema.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name = "createTableOperation">The name of the schema to create.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation)">
            <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation"/>.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name="addForeignKeyOperation">The operation to produce SQL for.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation)">
            <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation"/>.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name="dropForeignKeyOperation">The operation to produce SQL for.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation)">
            <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation"/>.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name="createIndexOperation">The operation to produce SQL for.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
            <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation"/>.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name="dropIndexOperation">The operation to produce SQL for.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation)">
            <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation"/>.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name="addPrimaryKeyOperation">The operation to produce SQL for.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation)">
            <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation"/>.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name="dropPrimaryKeyOperation">The operation to produce SQL for.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation)">
            <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation"/>.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name="addColumnOperation">The operation to produce SQL for.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
            <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation"/>.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name="dropColumnOperation">The operation to produce SQL for.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
            <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation"/>.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name="alterColumnOperation">The operation to produce SQL for.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation)">
            <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation"/>.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name="dropTableOperation">The operation to produce SQL for.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation)">
            <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation"/>.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name="sqlOperation">The operation to produce SQL for.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
            <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation"/>.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name="renameColumnOperation">The operation to produce SQL for.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
            <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation"/>.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name="renameTableOperation">The operation to produce SQL for.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
            <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation"/>.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name="moveTableOperation">The operation to produce SQL for.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.InsertHistoryOperation)">
            <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation"/>.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name="insertHistoryOperation">The operation to produce SQL for.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DeleteHistoryOperation)">
            <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation"/>.
                Generated SQL should be added using the Statement method.
            </summary>
            <param name="deleteHistoryOperation">The operation to produce SQL for.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Byte[])">
            <summary>
                Generates SQL to specify a constant byte[] default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name = "defaultValue">The value to be set.</param>
            <returns>SQL representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Boolean)">
            <summary>
                Generates SQL to specify a constant bool default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name = "defaultValue">The value to be set.</param>
            <returns>SQL representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTime)">
            <summary>
                Generates SQL to specify a constant DateTime default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name = "defaultValue">The value to be set.</param>
            <returns>SQL representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTimeOffset)">
            <summary>
                Generates SQL to specify a constant DateTimeOffset default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name = "defaultValue">The value to be set.</param>
            <returns>SQL representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Guid)">
            <summary>
                Generates SQL to specify a constant Guid default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name = "defaultValue">The value to be set.</param>
            <returns>SQL representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.String)">
            <summary>
                Generates SQL to specify a constant string default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name = "defaultValue">The value to be set.</param>
            <returns>SQL representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.TimeSpan)">
            <summary>
                Generates SQL to specify a constant TimeSpan default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name = "defaultValue">The value to be set.</param>
            <returns>SQL representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeography)">
            <summary>
                Generates SQL to specify a constant geogrpahy default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name = "defaultValue">The value to be set.</param>
            <returns>SQL representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeometry)">
            <summary>
                Generates SQL to specify a constant geometry default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name = "defaultValue">The value to be set.</param>
            <returns>SQL representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Object)">
            <summary>
                Generates SQL to specify a constant default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name = "defaultValue">The value to be set.</param>
            <returns>SQL representing the default value.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.BuildColumnType(System.Data.Entity.Migrations.Model.ColumnModel)">
            <summary>
                Generates SQL to specify the data type of a column.
                This method just generates the actual type, not the SQL to create the column.
            </summary>
            <param name = "defaultValue">The definition of the column.</param>
            <returns>SQL representing the data type.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Name(System.String)">
            <summary>
                Generates a quoted name. The supplied name may or may not contain the schema.
            </summary>
            <param name = "name">The name to be quoted.</param>
            <returns>The quoted name.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Quote(System.String)">
            <summary>
                Quotes an identifier for SQL Server.
            </summary>
            <param name = "identifier">The identifier to be quoted.</param>
            <returns>The quoted identifier.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.String,System.Boolean)">
            <summary>
                Adds a new Statement to be executed against the database.
            </summary>
            <param name = "sql">The statement to be executed.</param>
            <param name = "suppressTransaction">
                Gets or sets a value indicating whether this statement should be performed outside of
                the transaction scope that is used to make the migration process transactional.
                If set to true, this operation will not be rolled back if the migration process fails.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Writer">
            <summary>
                Gets a new <see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter"/> that can be used to build SQL.
            
                This is just a helper method to create a writer. Writing to the writer will
                not cause SQL to be registered for execution. You must pass the generated
                SQL to the Statement method.
            </summary>
            <returns>An empty text writer to use for SQL generation.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
                Adds a new Statement to be executed against the database.
            </summary>
            <param name = "writer">The writer containing the SQL to be executed.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.CreateConnection">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateCreateSchema(System.String)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Name(System.String)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Utilities.ConfigurationFileUpdater">
            <summary>
                Utility class to prep the user's config file to run in an AppDomain
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.ConfigurationFileUpdater.Update(System.String)">
            <summary>
                Updates a config file by adding binding redirects for EntityFramework.dll.
                This ensures that the user's code can be ran in an AppDomain and the exact
                same version of the assembly will be used for both domains.
            </summary>
            <param name = "configurationFile">That path of the user's config file. Can also be null or a path to an non-existent file.</param>
            <returns>The path of the updated config file. It is the caller's responsibility to delete this.</returns>
        </member>
        <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
            <summary>
                The same as <see cref="T:System.CodeDom.Compiler.IndentedTextWriter"/> but works in partial trust.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
            <summary>
                Specifies the default tab string. This field is constant.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
                Initializes a new instance of the IndentedTextWriter class using the specified text writer and default tab string.
            </summary>
            <param name = "writer">The <see cref = "T:System.IO.TextWriter" /> to use for output. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
            <summary>
                Initializes a new instance of the IndentedTextWriter class using the specified text writer and tab string.
            </summary>
            <param name = "writer">The <see cref = "T:System.IO.TextWriter" /> to use for output. </param>
            <param name = "tabString">The tab string to use for indentation. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
            <summary>
                Closes the document being written to.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
            <summary>
                Flushes the stream.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
            <summary>
                Outputs the tab string once for each level of indentation according to the <see cref = "P:System.CodeDom.Compiler.IndentedTextWriter.Indent" /> property.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
            <summary>
                Writes the specified string to the text stream.
            </summary>
            <param name = "s">The string to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
            <summary>
                Writes the text representation of a Boolean value to the text stream.
            </summary>
            <param name = "value">The Boolean value to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
            <summary>
                Writes a character to the text stream.
            </summary>
            <param name = "value">The character to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
            <summary>
                Writes a character array to the text stream.
            </summary>
            <param name = "buffer">The character array to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
                Writes a subarray of characters to the text stream.
            </summary>
            <param name = "buffer">The character array to write data from. </param>
            <param name = "index">Starting index in the buffer. </param>
            <param name = "count">The number of characters to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
            <summary>
                Writes the text representation of a Double to the text stream.
            </summary>
            <param name = "value">The double to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
            <summary>
                Writes the text representation of a Single to the text stream.
            </summary>
            <param name = "value">The single to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
            <summary>
                Writes the text representation of an integer to the text stream.
            </summary>
            <param name = "value">The integer to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
            <summary>
                Writes the text representation of an 8-byte integer to the text stream.
            </summary>
            <param name = "value">The 8-byte integer to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
            <summary>
                Writes the text representation of an object to the text stream.
            </summary>
            <param name = "value">The object to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
            <summary>
                Writes out a formatted string, using the same semantics as specified.
            </summary>
            <param name = "format">The formatting string. </param>
            <param name = "arg0">The object to write into the formatted string. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
            <summary>
                Writes out a formatted string, using the same semantics as specified.
            </summary>
            <param name = "format">The formatting string to use. </param>
            <param name = "arg0">The first object to write into the formatted string. </param>
            <param name = "arg1">The second object to write into the formatted string. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
            <summary>
                Writes out a formatted string, using the same semantics as specified.
            </summary>
            <param name = "format">The formatting string to use. </param>
            <param name = "arg">The argument array to output. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
            <summary>
                Writes the specified string to a line without tabs.
            </summary>
            <param name = "s">The string to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
            <summary>
                Writes the specified string, followed by a line terminator, to the text stream.
            </summary>
            <param name = "s">The string to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
            <summary>
                Writes a line terminator.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
            <summary>
                Writes the text representation of a Boolean, followed by a line terminator, to the text stream.
            </summary>
            <param name = "value">The Boolean to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
            <summary>
                Writes a character, followed by a line terminator, to the text stream.
            </summary>
            <param name = "value">The character to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
            <summary>
                Writes a character array, followed by a line terminator, to the text stream.
            </summary>
            <param name = "buffer">The character array to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
                Writes a subarray of characters, followed by a line terminator, to the text stream.
            </summary>
            <param name = "buffer">The character array to write data from. </param>
            <param name = "index">Starting index in the buffer. </param>
            <param name = "count">The number of characters to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
            <summary>
                Writes the text representation of a Double, followed by a line terminator, to the text stream.
            </summary>
            <param name = "value">The double to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
            <summary>
                Writes the text representation of a Single, followed by a line terminator, to the text stream.
            </summary>
            <param name = "value">The single to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
            <summary>
                Writes the text representation of an integer, followed by a line terminator, to the text stream.
            </summary>
            <param name = "value">The integer to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
            <summary>
                Writes the text representation of an 8-byte integer, followed by a line terminator, to the text stream.
            </summary>
            <param name = "value">The 8-byte integer to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
            <summary>
                Writes the text representation of an object, followed by a line terminator, to the text stream.
            </summary>
            <param name = "value">The object to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
            <summary>
                Writes out a formatted string, followed by a line terminator, using the same semantics as specified.
            </summary>
            <param name = "format">The formatting string. </param>
            <param name = "arg0">The object to write into the formatted string. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
            <summary>
                Writes out a formatted string, followed by a line terminator, using the same semantics as specified.
            </summary>
            <param name = "format">The formatting string to use. </param>
            <param name = "arg0">The first object to write into the formatted string. </param>
            <param name = "arg1">The second object to write into the formatted string. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
            <summary>
                Writes out a formatted string, followed by a line terminator, using the same semantics as specified.
            </summary>
            <param name = "format">The formatting string to use. </param>
            <param name = "arg">The argument array to output. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
            <summary>
                Writes the text representation of a UInt32, followed by a line terminator, to the text stream.
            </summary>
            <param name = "value">A UInt32 to output. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
            <summary>
                Gets the encoding for the text writer to use.
            </summary>
            <returns>
                An <see cref = "T:System.Text.Encoding" /> that indicates the encoding for the text writer to use.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
            <summary>
                Gets or sets the new line character to use.
            </summary>
            <returns>
                The new line character to use.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
            <summary>
                Gets or sets the number of spaces to indent.
            </summary>
            <returns>
                The number of spaces to indent.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
            <summary>
                Gets the <see cref = "T:System.IO.TextWriter" /> to use.
            </summary>
            <returns>
                The <see cref = "T:System.IO.TextWriter" /> to use.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Migrations.Utilities.UtcNowGenerator">
            <summary>
            Used for generating <see cref="P:System.DateTime.UtcNow"/> values that are always in sequential
            order for the calling thread.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.UtcNowGenerator.UtcNow">
            <summary>
            Returns the value of <see cref="P:System.DateTime.UtcNow"/> unless this value would be the same as the
            last value returned by this thread calling this method, in which case the thread pushes the value
            a little bit into the future. The comparison is in terms of the form used to store migration ID
            in the database--i.e. to the 1/10 second.
            </summary>
            <remarks>
            There should never be any pushing to the future involved for normal use of migrations, but when
            this method is called in rapid succession while testing or otherwise calling the DbMigrator APIs
            there may be occasional sleeping.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.UtcNowGenerator.UtcNowAsMigrationIdTimestamp">
            <summary>
            Same as UtcNow method bur returns the time in the timestamp format used in migration IDs.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict">
            <summary>
                Convention to apply column ordering specified via <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute"/> 
                or the <see cref="T:System.Data.Entity.DbModelBuilder"/> API. This convention throws if a duplicate configured column order
                is detected.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention">
            <summary>
                Convention to apply column ordering specified via <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute"/> 
                or the <see cref="T:System.Data.Entity.DbModelBuilder"/> API.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
            <summary>
                Identifies conventions that can be removed from a <see cref="T:System.Data.Entity.DbModelBuilder"/> instance.
            </summary>
            /// <remarks>
            Note that implementations of this interface must be immutable.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Resources.Strings">
            <summary>
               Strongly-typed and parameterized string resources.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.LoggingAutoMigrate(System.Object)">
            <summary>
            A string like "Applying automatic migration: {0}."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.LoggingRevertAutoMigrate(System.Object)">
            <summary>
            A string like "Reverting automatic migration: {0}."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.LoggingApplyMigration(System.Object)">
            <summary>
            A string like "Applying code-based migration: {0}."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.LoggingRevertMigration(System.Object)">
            <summary>
            A string like "Reverting code-based migration: {0}."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.LoggingPendingMigrations(System.Object,System.Object)">
            <summary>
            A string like "Applying code-based migrations: [{1}]."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.LoggingPendingMigrationsDown(System.Object,System.Object)">
            <summary>
            A string like "Reverting migrations: [{1}]."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.LoggingAlreadyAtTarget(System.Object)">
            <summary>
            A string like "Target database is already at version {0}."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.LoggingTargetDatabase(System.Object)">
            <summary>
            A string like "Target database is: {0}."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.LoggingTargetDatabaseFormat(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "'{1}' (DataSource: {0}, Provider: {2}, Origin: {3})"
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.MigrationNotFound(System.Object)">
            <summary>
            A string like "The specified target migration '{0}' does not exist. Ensure that target migration refers to an existing migration id."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.PartialFkOperation(System.Object,System.Object)">
            <summary>
            A string like "The Foreign Key on table '{0}' with columns '{1}' could not be created because the principal key columns could not be determined. Use the AddForeignKey fluent API to fully specify the Foreign Key."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.AutoNotValidTarget(System.Object)">
            <summary>
            A string like "'{0}' is not a valid target migration. When targeting a previously applied automatic migration, use the full migration id including timestamp."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.AutoNotValidForScriptWindows(System.Object)">
            <summary>
            A string like "'{0}' is not a valid migration. Code-based migrations must be used for both source and target when scripting the upgrade between them."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ContextNotConstructible(System.Object)">
            <summary>
            A string like "The target context '{0}' is not constructible. Add a default constructor or provide an implementation of IDbContextFactory."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.AmbiguousMigrationName(System.Object)">
            <summary>
            A string like "The specified migration name '{0}' is ambiguous. Specify the full migration id including timestamp instead."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.AssemblyMigrator_NoConfigurationWithName(System.Object,System.Object)">
            <summary>
            A string like "The migrations configuration type '{0}' was not be found in the assembly '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.AssemblyMigrator_MultipleConfigurationsWithName(System.Object,System.Object)">
            <summary>
            A string like "More than one migrations configuration type '{0}' was found in the assembly '{1}'. Specify the fully qualified name of the one to use."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.AssemblyMigrator_NoConfiguration(System.Object)">
            <summary>
            A string like "No migrations configuration type was found in the assembly '{0}'. (In Visual Studio you can use the Enable-Migrations command from Package Manager Console to add a migrations configuration)."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.AssemblyMigrator_MultipleConfigurations(System.Object)">
            <summary>
            A string like "More than one migrations configuration type was found in the assembly '{0}'. Specify the name of the one to use."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.AssemblyMigrator_NonConfigurationType(System.Object)">
            <summary>
            A string like "The type '{0}' is not a migrations configuration type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.AssemblyMigrator_NoDefaultConstructor(System.Object)">
            <summary>
            A string like "The migrations configuration type '{0}' must have a public default constructor."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.AssemblyMigrator_AbstractConfigurationType(System.Object)">
            <summary>
            A string like "The migrations configuration type '{0}' must not be abstract."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.AssemblyMigrator_GenericConfigurationType(System.Object)">
            <summary>
            A string like "The migrations configuration type '{0}' must not be generic."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.MigrationsNamespaceNotUnderRootNamespace(System.Object,System.Object)">
            <summary>
            A string like "In VB.NET projects, the migrations namespace '{0}' must be under the root namespace '{1}'. Update the migrations project's root namespace to allow classes under the migrations namespace to be added."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Strings.UnableToDispatchAddOrUpdate(System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Strings.NoSqlGeneratorForProvider(System.Object)">
            <summary>
            A string like "No MigrationSqlGenerator found for provider '{0}'. Use the SetSqlGenerator method in the target migrations configuration class to register additional SQL generators."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ToolingFacade_AssemblyNotFound(System.Object)">
            <summary>
            A string like "Could not load assembly '{0}'. (If you are using Code First Migrations inside Visual Studio this can happen if the startUp project for your solution does not reference the project that contains your migrations. You can either change the startUp project for your solution or use the -StartUpProjectName parameter.)"
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EnableMigrations_NoContext(System.Object)">
            <summary>
            A string like "No context type was found in the assembly '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EnableMigrations_MultipleContexts(System.Object)">
            <summary>
            A string like "More than one context type was found in the assembly '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EnableMigrationsForContext(System.Object)">
            <summary>
            A string like "To enable migrations for {0}, use Enable-Migrations -ContextTypeName {0}."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EnableMigrations_NoContextWithName(System.Object,System.Object)">
            <summary>
            A string like "The context type '{0}' was not found in the assembly '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EnableMigrations_MultipleContextsWithName(System.Object,System.Object)">
            <summary>
            A string like "More than one context type '{0}' was found in the assembly '{1}'. Specify the fully qualified name of the context."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ArgumentIsNullOrWhitespace(System.Object)">
            <summary>
            A string like "The argument '{0}' cannot be null, empty or contain only white space."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ArgumentPropertyIsNull(System.Object)">
            <summary>
            A string like "The argument property '{0}' cannot be null."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.PreconditionFailed(System.Object,System.Object)">
            <summary>
            A string like "The precondition '{0}' failed. {1}"
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EntityTypeConfigurationMismatch(System.Object)">
            <summary>
            A string like "The type '{0}' has already been configured as a complex type. It cannot be reconfigured as an entity type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ComplexTypeConfigurationMismatch(System.Object)">
            <summary>
            A string like "The type '{0}' has already been configured as an entity type. It cannot be reconfigured as a complex type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.KeyPropertyNotFound(System.Object,System.Object)">
            <summary>
            A string like "The key component '{0}' is not a declared property on type '{1}'. Verify that it has not been explicitly excluded from the model and that it is a valid primitive property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ForeignKeyPropertyNotFound(System.Object,System.Object)">
            <summary>
            A string like "The foreign key component '{0}' is not a declared property on type '{1}'. Verify that it has not been explicitly excluded from the model and that it is a valid primitive property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.PropertyNotFound(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' is not a declared property on type '{1}'. Verify that the property has not been explicitly excluded from the model by using the Ignore method or NotMappedAttribute data annotation. Make sure that it is a valid primitive property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.NavigationPropertyNotFound(System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' is not a declared property on type '{1}'. Verify that it has not been explicitly excluded from the model and that it is a valid navigation property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.InvalidPropertyExpression(System.Object)">
            <summary>
            A string like "The expression '{0}' is not a valid property expression. The expression should represent a property: C#: 't => t.MyProperty'  VB.Net: 'Function(t) t.MyProperty'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.InvalidComplexPropertyExpression(System.Object)">
            <summary>
            A string like "The expression '{0}' is not a valid property expression. The expression should represent a property: C#: 't => t.MyProperty'  VB.Net: 'Function(t) t.MyProperty'. Use dotted paths for nested properties: C#: 't => t.MyProperty.MyProperty'  VB.Net: 'Function(t) t.MyProperty.MyProperty'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.InvalidPropertiesExpression(System.Object)">
            <summary>
            A string like "The properties expression '{0}' is not valid. The expression should represent a property: C#: 't => t.MyProperty'  VB.Net: 'Function(t) t.MyProperty'. When specifying multiple properties use an anonymous type: C#: 't => new {{ t.MyProperty1, t.MyProperty2 }}'  VB.Net: 'Function(t) New With {{ t.MyProperty1, t.MyProperty2 }}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.InvalidComplexPropertiesExpression(System.Object)">
            <summary>
            A string like "The properties expression '{0}' is not valid. The expression should represent a property: C#: 't => t.MyProperty'  VB.Net: 'Function(t) t.MyProperty'. When specifying multiple properties use an anonymous type: C#: 't => new {{ t.MyProperty1, t.MyProperty2 }}'  VB.Net: 'Function(t) New With {{ t.MyProperty1, t.MyProperty2 }}'."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Strings.DuplicateStructuralTypeConfiguration(System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Strings.ConflictingPropertyConfiguration(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Conflicting configuration settings were specified for property '{0}' on type '{1}': {2}"
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ConflictingColumnConfiguration(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Conflicting configuration settings were specified for column '{0}' on table '{1}': {2}"
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ConflictingConfigurationValue(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "{0} = {1} conflicts with {2} = {3}"
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.InvalidComplexType(System.Object)">
            <summary>
            A string like "The type '{0}' was not mapped. Check that the type has not been explicitly excluded by using the Ignore method or NotMappedAttribute data annotation. Verify that the type was defined as a class, is not primitive, nested or generic, and does not inherit from ComplexObject."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.InvalidEntityType(System.Object)">
            <summary>
            A string like "The type '{0}' was not mapped. Check that the type has not been explicitly excluded by using the Ignore method or NotMappedAttribute data annotation. Verify that the type was defined as a class, is not primitive, nested or generic, and does not inherit from EntityObject."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.NavigationInverseItself(System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' declared on type '{1}' cannot be the inverse of itself."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ConflictingConstraint(System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting foreign keys."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ConflictingInferredColumnType(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Values of incompatible types ('{1}' and '{2}') were assigned to the '{0}' discriminator column. Values of the same type must be specified. To explicitly specify the type of the discriminator column use the HasColumnType method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ConflictingMapping(System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting mapping information."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ConflictingCascadeDeleteOperation(System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting cascade delete operations using 'WillCascadeOnDelete'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ConflictingMultiplicities(System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting multiplicities."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.MaxLengthAttributeConvention_InvalidMaxLength(System.Object,System.Object)">
            <summary>
            A string like "The MaxLengthAttribute on property '{0}' on type '{1} is not valid. The Length value must be greater than zero. Use MaxLength() without parameters to indicate that the string or array can have the maximum allowable length."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.StringLengthAttributeConvention_InvalidMaximumLength(System.Object,System.Object)">
            <summary>
            A string like "The StringLengthAttribute on property '{0}' on type '{1}' is not valid. The maximum length must be greater than zero. Use MaxLength() without parameters to indicate that the string or array can have the maximum allowable length."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ModelGeneration_UnableToDetermineKeyOrder(System.Object)">
            <summary>
            A string like "Unable to determine composite primary key ordering for type '{0}'. Use the ColumnAttribute or the HasKey method to specify an order for composite primary keys."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ForeignKeyAttributeConvention_EmptyKey(System.Object,System.Object)">
            <summary>
            A string like "The ForeignKeyAttribute on property '{0}' on type '{1}' is not valid. Name must not be empty."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ForeignKeyAttributeConvention_InvalidKey(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The ForeignKeyAttribute on property '{0}' on type '{1}' is not valid. The foreign key name '{2}' was not found on the dependent type '{3}'. The Name value should be a comma separated list of foreign key property names."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ForeignKeyAttributeConvention_InvalidNavigationProperty(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The ForeignKeyAttribute on property '{0}' on type '{1}' is not valid. The navigation property '{2}' was not found on the dependent type '{1}'. The Name value should be a valid navigation property name."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ForeignKeyAttributeConvention_OrderRequired(System.Object)">
            <summary>
            A string like "Unable to determine a composite foreign key ordering for foreign key on type {0}. When using the ForeignKey data annotation on composite foreign key properties ensure order is specified by using the Column data annotation or the fluent API."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.InversePropertyAttributeConvention_PropertyNotFound(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The InversePropertyAttribute on property '{2}' on type '{3}' is not valid. The property '{0}' is not a valid navigation property on the related type '{1}'. Ensure that the property exists and is a valid reference or collection navigation property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.InversePropertyAttributeConvention_SelfInverseDetected(System.Object,System.Object)">
            <summary>
            A string like "A relationship cannot be established from property '{0}' on type '{1}' to property '{0}' on type '{1}'. Check the values in the InversePropertyAttribute to ensure relationship definitions are unique and reference from one navigation property to its corresponding inverse navigation property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ValidationItemFormat(System.Object,System.Object,System.Object)">
            <summary>
            A string like "\t{0}: {1}: {2}"
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.KeyRegisteredOnDerivedType(System.Object,System.Object)">
            <summary>
            A string like "A key is registered for the derived type '{0}'. Keys can only be registered for the root type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DuplicateEntryInUserDictionary(System.Object,System.Object)">
            <summary>
            A string like "The {0} value '{1}' already exists in the user-defined dictionary."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.InvalidTableMapping(System.Object,System.Object)">
            <summary>
            A string like "The type '{0}' has already been mapped to table '{1}'. Specify all mapping aspects of a table in a single Map call."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.InvalidTableMapping_NoTableName(System.Object)">
            <summary>
            A string like "Map was called more than once for type '{0}' and at least one of the calls didn't specify the target table name."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.InvalidChainedMappingSyntax(System.Object)">
            <summary>
            A string like "The derived type '{0}' has already been mapped using the chaining syntax. A derived type can only be mapped once using the chaining syntax."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.InvalidNotNullCondition(System.Object,System.Object)">
            <summary>
            A string like "An "is not null" condition cannot be specified on property '{0}' on type '{1}' because this property is not included in the model. Check that the property has not been explicitly excluded from the model by using the Ignore method or NotMappedAttribute data annotation."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.InvalidDiscriminatorType(System.Object)">
            <summary>
            A string like "Values of type '{0}' cannot be used as type discriminator values. Supported types include byte, signed byte, bool, int16, int32, int64, and string."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ConventionNotFound(System.Object,System.Object)">
            <summary>
            A string like "Unable to add the convention '{0}'. Could not find an existing convention of type '{1}' in the current convention set."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.InvalidEntitySplittingProperties(System.Object)">
            <summary>
            A string like "Not all properties for type '{0}' have been mapped. Either map those properties or explicitly excluded them from the model."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ModelBuilder_ProviderNameNotFound(System.Object)">
            <summary>
            A string like "Unable to determine the provider name for connection of type '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ToTable_InvalidSchemaName(System.Object)">
            <summary>
            A string like "The qualified table name '{0}' contains an invalid schema name. Schema names must have a non-zero length."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ToTable_InvalidTableName(System.Object)">
            <summary>
            A string like "The qualified table name '{0}' contains an invalid table name. Table names must have a non-zero length."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EntityMappingConfiguration_DuplicateMapInheritedProperties(System.Object)">
            <summary>
            A string like "Properties for type '{0}' can only be mapped once. Ensure the MapInheritedProperties method is only used during one call to the Map method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EntityMappingConfiguration_DuplicateMappedProperties(System.Object)">
            <summary>
            A string like "Properties for type '{0}' can only be mapped once. Ensure the Properties method is used and that repeated calls specify each non-key property only once."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EntityMappingConfiguration_DuplicateMappedProperty(System.Object,System.Object)">
            <summary>
            A string like "Properties for type '{0}' can only be mapped once. The non-key property '{1}' is mapped more than once. Ensure the Properties method specifies each non-key property only once."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EntityMappingConfiguration_CannotMapIgnoredProperty(System.Object,System.Object)">
            <summary>
            A string like "The property '{1}' on type '{0}' cannot be mapped because it has been explicitly excluded from the model or it is of a type not supported by the DbModelBuilderVersion being used."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EntityMappingConfiguration_InvalidTableSharing(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The entity types '{0}' and '{1}' cannot share table '{2}' because they are not in the same type hierarchy or do not have a valid one to one foreign key relationship with matching primary keys between them."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.CannotIgnoreMappedBaseProperty(System.Object,System.Object,System.Object)">
            <summary>
            A string like "You cannot use Ignore method on the property '{0}' on type '{1}' because this type inherits from the type '{2}' where this property is mapped. To exclude this property from your model, use NotMappedAttribute or Ignore method on the base type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ModelBuilder_KeyPropertiesMustBePrimitive(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' cannot be used as a key property on the entity '{1}' because the property type is not a valid key type. Only scalar types, string and byte[] are supported key types."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.TableNotFound(System.Object)">
            <summary>
            A string like "The specified table '{0}' was not found in the model. Ensure that the table name has been correctly specified."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.IncorrectColumnCount(System.Object)">
            <summary>
            A string like "The specified association foreign key columns '{0}' are invalid. The number of columns specified must match the number of primary key columns."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.UnableToDeterminePrincipal(System.Object,System.Object)">
            <summary>
            A string like "Unable to determine the principal end of an association between the types '{0}' and '{1}'. The principal end of this association must be explicitly configured using either the relationship fluent API or data annotations."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.UnmappedAbstractType(System.Object)">
            <summary>
            A string like "The abstract type '{0}' has no mapped descendents and so cannot be mapped. Either remove '{0}' from the model or add one or more types deriving from '{0}' to the model. "
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.UnsupportedHybridInheritanceMapping(System.Object)">
            <summary>
            A string like "The type '{0}' cannot be mapped as defined because it maps inherited properties from types that use entity splitting or another form of inheritance. Either choose a different inheritance mapping strategy so as to not map inherited properties, or change all types in the hierarchy to map inherited properties and to not use splitting. "
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.OrphanedConfiguredTableDetected(System.Object)">
            <summary>
            A string like "The table '{0}' was configured but is not used in any mappings. Verify the mapping configuration for '{0}' is correct."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DuplicateConfiguredColumnOrder(System.Object)">
            <summary>
            A string like "The configured column orders for the table '{0}' contains duplicates. Ensure the specified column order values are distinct."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.UnsupportedUseOfV3Type(System.Object,System.Object)">
            <summary>
            A string like "The enum or spatial property '{1}' on type '{0}' cannot be mapped. Use DbModelBuilderVersion 'V5_0' or later to map enum or spatial properties."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.MultiplePropertiesMatchedAsKeys(System.Object,System.Object)">
            <summary>
            A string like "Multiple potential primary key properties named '{0}' but differing only by case were found on entity type '{1}'. Configure the primary key explicitly using the HasKey fluent API or the KeyAttribute data annotation."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyEntry_CannotGetCurrentValue(System.Object,System.Object)">
            <summary>
            A string like "Cannot get value for property '{0}' from entity of type '{1}' because the property has no get accessor."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyEntry_CannotSetCurrentValue(System.Object,System.Object)">
            <summary>
            A string like "Cannot set value for property '{0}' on entity of type '{1}' because the property has no set accessor."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Strings.DbPropertyEntry_NotSupportedForDetached(System.Object,System.Object,System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyEntry_SettingEntityRefNotSupported(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Cannot set value for property '{0}' on entity of type '{1}' because the property has no set accessor and is in the '{2}' state."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyEntry_NotSupportedForPropertiesNotInTheModel(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Member '{0}' cannot be called for property '{1}' on entity of type '{2}' because the property is not part of the Entity Data Model."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Strings.DbEntityEntry_NotSupportedForDetached(System.Object,System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Strings.DbSet_BadTypeForAddAttachRemove(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Cannot call the {0} method for an entity of type '{1}' on a DbSet for entities of type '{2}'. Only entities of type '{2}' or derived from type '{2}' can be added, attached, or removed."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbSet_BadTypeForCreate(System.Object,System.Object)">
            <summary>
            A string like "Cannot call the Create method for the type '{0}' on a DbSet for entities of type '{1}'. Only entities of type '{1}' or derived from type '{1}' can be created."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Strings.DbEntity_BadTypeForCast(System.Object,System.Object,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Strings.DbMember_BadTypeForCast(System.Object,System.Object,System.Object,System.Object,System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_UsedReferenceForCollectionProp(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' on type '{1}' is a collection navigation property. The Collection method should be used instead of the Reference method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_UsedCollectionForReferenceProp(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' on type '{1}' is a reference navigation property. The Reference method should be used instead of the Collection method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_NotANavigationProperty(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' on type '{1}' is not a navigation property. The Reference and Collection methods can only be used with navigation properties. Use the Property or ComplexProperty method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_NotAScalarProperty(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' on type '{1}' is not a primitive or complex property. The Property method can only be used with primitive or complex properties. Use the Reference or Collection method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_NotAComplexProperty(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' on type '{1}' is not a complex property. The ComplexProperty method can only be used with complex properties. Use the Property, Reference or Collection method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_NotAProperty(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' on type '{1}' is not a primitive property, complex property, collection navigation property, or reference navigation property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_DottedPartNotComplex(System.Object,System.Object,System.Object)">
            <summary>
            A string like ""The property '{0}' from the property path '{1}' is not a complex property on type '{2}'. Property paths must be composed of complex properties for all except the final property.""
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_DottedPathMustBeProperty(System.Object)">
            <summary>
            A string like ""The property path '{0}' cannot be used for navigation properties. Property paths can only be used to access primitive or complex properties.""
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_WrongGenericForNavProp(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' on entity type '{1}' cannot be used for entities of type '{2}' because it refers to entities of type '{3}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_WrongGenericForCollectionNavProp(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The generic type argument '{0}' cannot be used with the Member method when accessing the collection navigation property '{1}' on entity type '{2}'. The generic type argument '{3}' must be used instead."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_WrongGenericForProp(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' on entity type '{1}' cannot be used for objects of type '{2}' because it is a property for objects of type '{3}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_BadPropertyExpression(System.Object,System.Object)">
            <summary>
            A string like "The expression passed to method {0} must represent a property defined on the type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_CannotGetValuesForState(System.Object,System.Object)">
            <summary>
            A string like "{0} cannot be used for entities in the {1} state."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_CannotSetNullValue(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Cannot set non-nullable property '{0}' of type '{1}' to null on object of type '{2}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_CannotGetStoreValuesWhenComplexPropertyIsNull(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' in the entity of type '{1}' is null. Store values cannot be obtained for an entity with a null complex property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_WrongTypeForAssignment(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "Cannot assign value of type '{0}' to property '{1}' of type '{2}' in property values for type '{3}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_PropertyDoesNotExist(System.Object,System.Object)">
            <summary>
            A string like "The '{0}' property does not exist or is not mapped for the type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_AttemptToSetValuesFromWrongObject(System.Object,System.Object)">
            <summary>
            A string like "Cannot copy values from DbPropertyValues for type '{0}' into DbPropertyValues for type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_AttemptToSetValuesFromWrongType(System.Object,System.Object)">
            <summary>
            A string like "Cannot copy from property values for object of type '{0}' into property values for object of type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_ComplexObjectCannotBeNull(System.Object,System.Object)">
            <summary>
            A string like "The value of the complex property '{0}' on entity of type '{1}' is null. Complex properties cannot be set to null and values cannot be set for null complex properties."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_NestedPropertyValuesNull(System.Object,System.Object)">
            <summary>
            A string like "The value of the nested property values property '{0}' on the values for entity of type '{1}' is null. Nested property values cannot be set to null and values cannot be set for null complex properties."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_CannotSetPropertyOnNullCurrentValue(System.Object,System.Object)">
            <summary>
            A string like "Cannot set the value of the nested property '{0}' because value of the complex property '{1}' to which it belongs is null."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_CannotSetPropertyOnNullOriginalValue(System.Object,System.Object)">
            <summary>
            A string like "Cannot set the original value of the nested property '{0}' because the original value of the complex property '{1}' to which it belongs is null."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DatabaseInitializationStrategy_ModelMismatch(System.Object)">
            <summary>
            A string like "The model backing the '{0}' context has changed since the database was created. Consider using Code First Migrations to update the database (http://go.microsoft.com/fwlink/?LinkId=238269)."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.Database_DatabaseAlreadyExists(System.Object)">
            <summary>
            A string like "Database '{0}' cannot be created because it already exists."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Strings.Database_BadLegacyInitializerEntry(System.Object,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Strings.Database_InitializeFromLegacyConfigFailed(System.Object,System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Strings.Database_InitializeFromConfigFailed(System.Object,System.Object)">
            <summary>
            A string like "Failed to set database initializer of type '{0}' for DbContext type '{1}' specified in the application configuration. See inner exception for details."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ContextConfiguredMultipleTimes(System.Object)">
            <summary>
            A string like "Configuration for DbContext type '{0}' is specified multiple times in the application configuration. Each context can only be configured once."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.SetConnectionFactoryFromConfigFailed(System.Object)">
            <summary>
            A string like "Failed to set Database.DefaultConnectionFactory to an instance of the '{0}' type as specified in the application configuration. See inner exception for details."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.Database_FailedToResolveType(System.Object)">
            <summary>
            A string like "The type '{0}' could not be found. The type name must be an assembly-qualified name."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbContext_ProviderNameMissing(System.Object)">
            <summary>
            A string like "The connection string '{0}' in the application's configuration file does not contain the required providerName attribute.""
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbSet_WrongEntityTypeFound(System.Object,System.Object)">
            <summary>
            A string like "The entity found was of type {0} when an entity of type {1} was requested."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbSet_DbSetUsedWithComplexType(System.Object)">
            <summary>
            A string like "The type '{0}' is mapped as a complex type. The Set method, DbSet objects, and DbEntityEntry objects can only be used with entity types, not complex types."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbSet_PocoAndNonPocoMixedInSameAssembly(System.Object)">
            <summary>
            A string like "The type '{0}' is not attributed with EdmEntityTypeAttribute but is contained in an assembly attributed with EdmSchemaAttribute. POCO entities that do not use EdmEntityTypeAttribute cannot be contained in the same assembly as non-POCO entities that use EdmEntityTypeAttribute."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbSet_EntityTypeNotInModel(System.Object)">
            <summary>
            A string like "The entity type {0} is not part of the model for the current context."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbContext_ConnectionStringNotFound(System.Object)">
            <summary>
            A string like "No connection string named '{0}' could be found in the application config file."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbCollectionEntry_CannotSetCollectionProp(System.Object,System.Object)">
            <summary>
            A string like "The collection navigation property '{0}' on the entity of type '{1}' cannot be set because the entity type does not define a navigation property with a set accessor."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.Mapping_MESTNotSupported(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Multiple object sets per type are not supported. The object sets '{0}' and '{1}' can both contain instances of type '{2}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbModelBuilder_MissingRequiredCtor(System.Object)">
            <summary>
            A string like "The context type '{0}' must have a public constructor taking an EntityConnection."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbUnexpectedValidationException_ValidationAttribute(System.Object,System.Object)">
            <summary>
            A string like "An unexpected exception was thrown during validation of '{0}' when invoking {1}.IsValid. See the inner exception for details."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbUnexpectedValidationException_IValidatableObject(System.Object,System.Object)">
            <summary>
            A string like "An unexpected exception was thrown during validation of '{0}' when invoking {1}.Validate. See the inner exception for details."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.SqlConnectionFactory_MdfNotSupported(System.Object)">
            <summary>
            A string like "The database name '{0}' is not supported because it is an MDF file name. A full connection string must be provided to attach an MDF file."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbContextServices_MissingDefaultCtor(System.Object)">
            <summary>
            A string like "The context factory type '{0}' must have a public default constructor."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmPrimitiveType_SetPropertyNotSupported(System.Object)">
            <summary>
            A string like "The '{0}' property of EdmPrimitiveType is fixed and cannot be set."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_SystemNamespaceEncountered(System.Object)">
            <summary>
            A string like "The namespace '{0}' is a system namespace and cannot be used by other schemas. Choose another namespace name."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_SimilarRelationshipEnd(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "Role '{0}' in AssociationSets '{1}' and '{2}' refers to the same EntitySet '{3}' in EntityContainer '{4}'. Make sure that if two or more AssociationSets refer to the same AssociationType, the ends do not refer to the same EntitySet."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidEntitySetNameReference(System.Object,System.Object)">
            <summary>
            A string like "The referenced EntitySet '{0}' for End '{1}' could not be found in the containing EntityContainer."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_ConcurrencyRedefinedOnSubTypeOfEntitySetType(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Type '{0}' is derived from type '{1}' that is the type for EntitySet '{2}'. Type '{0}' defines new concurrency requirements that are not allowed for subtypes of base EntitySet types."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_EntitySetTypeHasNoKeys(System.Object,System.Object)">
            <summary>
            A string like "EntitySet '{0}' is based on type '{1}' that has no keys defined."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_DuplicateEndName(System.Object)">
            <summary>
            A string like "The end name  '{0}' is already defined."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_DuplicatePropertyNameSpecifiedInEntityKey(System.Object,System.Object)">
            <summary>
            A string like "The key specified in EntityType '{0}' is not valid. Property '{1}' is referenced more than once in the Key element."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidCollectionKindNotCollection(System.Object)">
            <summary>
            A string like "Property '{0}' has a CollectionKind specified but is not a collection property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidCollectionKindNotV1_1(System.Object)">
            <summary>
            A string like "Property '{0}' has a CollectionKind specified. CollectionKind is only supported in version 1.1 EDM models."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidComplexTypeAbstract(System.Object)">
            <summary>
            A string like "ComplexType '{0}' is marked as abstract. Abstract ComplexTypes are only supported in version 1.1 EDM models."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidComplexTypePolymorphic(System.Object)">
            <summary>
            A string like "ComplexType '{0}' has a BaseType specified. ComplexType inheritance is only supported in version 1.1 EDM models."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidKeyNullablePart(System.Object,System.Object)">
            <summary>
            A string like "Key part '{0}' for type '{1}' is not valid. All parts of the key must be non-nullable."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_EntityKeyMustBeScalar(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' in EntityType '{1}' is not valid. All properties that are part of the EntityKey must be of PrimitiveType."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidKeyKeyDefinedInBaseClass(System.Object,System.Object)">
            <summary>
            A string like "Key usage is not valid. The {0} class  cannot define keys because one of its base classes ('{1}') defines keys."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_KeyMissingOnEntityType(System.Object)">
            <summary>
            A string like "EntityType '{0}' has no key defined. Define the key for this EntityType."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_BadNavigationPropertyUndefinedRole(System.Object,System.Object,System.Object)">
            <summary>
            A string like "NavigationProperty is not valid. Role '{0}' or Role '{1}' is not defined in Relationship '{2}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_EndWithManyMultiplicityCannotHaveOperationsSpecified(System.Object,System.Object)">
            <summary>
            A string like "End '{0}' on relationship '{1}' cannot have an operation specified because its multiplicity is '*'. Operations cannot be specified on ends with multiplicity '*'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_EndNameAlreadyDefinedDuplicate(System.Object)">
            <summary>
            A string like "Each Name and PluralName in a relationship must be unique. '{0}' is already defined."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_SameRoleReferredInReferentialConstraint(System.Object)">
            <summary>
            A string like "In relationship '{0}', the Principal and Dependent Role of the referential constraint refer to the same Role in the relationship type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidMultiplicityFromRoleUpperBoundMustBeOne(System.Object,System.Object)">
            <summary>
            A string like "Multiplicity is not valid in Role '{0}' in relationship '{1}'. Valid values for multiplicity for the Principal Role are '0..1' or '1'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidMultiplicityFromRoleToPropertyNullableV1(System.Object,System.Object)">
            <summary>
            A string like "Multiplicity is not valid in Role '{0}' in relationship '{1}'. Because all the properties in the Dependent Role are nullable, multiplicity of the Principal Role must be '0..1'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidMultiplicityFromRoleToPropertyNonNullableV1(System.Object,System.Object)">
            <summary>
            A string like "Multiplicity conflicts with the referential constraint in Role '{0}' in relationship '{1}'. Because at least one  of the properties in the Dependent Role is non-nullable, multiplicity of the Principal Role must be '1'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidMultiplicityFromRoleToPropertyNonNullableV2(System.Object,System.Object)">
            <summary>
            A string like "Multiplicity conflicts with the referential constraint in Role '{0}' in relationship '{1}'. Because all of the properties in the Dependent Role are non-nullable, multiplicity of the Principal Role must be '1'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidToPropertyInRelationshipConstraint(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Properties referred by the Dependent Role '{0}' must be a subset of the key of the EntityType '{1}' referred to by the Dependent Role in the referential constraint for relationship '{2}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidMultiplicityToRoleUpperBoundMustBeOne(System.Object,System.Object)">
            <summary>
            A string like "Multiplicity is not valid in Role '{0}' in relationship '{1}'. Because the Dependent Role refers to the key properties, the upper bound of the multiplicity of the Dependent Role must be '1'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidMultiplicityToRoleUpperBoundMustBeMany(System.Object,System.Object)">
            <summary>
            A string like "Multiplicity is not valid in Role '{0}' in relationship '{1}'. Because the Dependent Role properties are not the key properties, the upper bound of the multiplicity of the Dependent Role must be '*'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_TypeMismatchRelationshipConstraint(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The types of all properties in the Dependent Role of a referential constraint must be the same as the corresponding property types in the Principal Role. The type of property '{0}' on entity '{1}' does not match the type of property '{2}' on entity '{3}' in the referential constraint '{4}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidPropertyInRelationshipConstraint(System.Object,System.Object)">
            <summary>
            A string like "There is no property with name '{0}' defined in the type referred to by Role '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_NullableComplexType(System.Object)">
            <summary>
            A string like "A nullable ComplexType is not supported. Property '{0}' must not allow nulls."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidPropertyType(System.Object)">
            <summary>
            A string like "A property cannot be of type '{0}'. The property type must be a ComplexType or a PrimitiveType."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_DuplicateEntityContainerMemberName(System.Object)">
            <summary>
            A string like "Each member name in an EntityContainer must be unique. A member with name '{0}' is already defined."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_TypeNameAlreadyDefinedDuplicate(System.Object)">
            <summary>
            A string like "Each type name in a schema must be unique. Type name '{0}' is already defined."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidMemberNameMatchesTypeName(System.Object,System.Object)">
            <summary>
            A string like "Name '{0}' cannot be used in type '{1}'. Member names cannot be the same as their enclosing type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_PropertyNameAlreadyDefinedDuplicate(System.Object)">
            <summary>
            A string like "Each property name in a type must be unique. Property name '{0}' is already defined."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_CycleInTypeHierarchy(System.Object)">
            <summary>
            A string like "A cycle was detected in the type hierarchy of '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidPropertyType_V1_1(System.Object)">
            <summary>
            A string like "A property cannot be of type '{0}'. The property type must be a ComplexType, a PrimitiveType, or a CollectionType."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidPropertyType_V3(System.Object)">
            <summary>
            A string like "A property cannot be of type {0}. The property type must be a ComplexType, a PrimitiveType or an EnumType."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Syntactic_EdmModel_NameIsTooLong(System.Object)">
            <summary>
            A string like "The specified name must not be longer than 480 characters: '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.EdmModel_Validator_Syntactic_EdmModel_NameIsNotAllowed(System.Object)">
            <summary>
            A string like "The specified name is not allowed: '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.MaxLengthAttribute_ValidationError(System.Object,System.Object)">
            <summary>
            A string like "The field {0} must be a string or array type with a maximum length of '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.MinLengthAttribute_ValidationError(System.Object,System.Object)">
            <summary>
            A string like "The field {0} must be a string or array type with a minimum length of '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbConnectionInfo_ConnectionStringNotFound(System.Object)">
            <summary>
            A string like "No connection string named '{0}' could be found in the application config file."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.AutomaticMigration">
            <summary>
            A string like "AutomaticMigration"
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.BootstrapMigration">
            <summary>
            A string like "BootstrapMigration"
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.InitialCreate">
            <summary>
            A string like "InitialCreate"
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.AutomaticDataLoss">
            <summary>
            A string like "Automatic migration was not applied because it would result in data loss."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.LoggingHistoryInsert">
            <summary>
            A string like "[Inserting migration history record]"
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.LoggingHistoryDelete">
            <summary>
            A string like "[Deleting migration history record]"
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.LoggingMetadataUpdate">
            <summary>
            A string like "[Updating EdmMetadata model hash]"
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.LoggingSeedingDatabase">
            <summary>
            A string like "Running Seed method."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.LoggingNoExplicitMigrations">
            <summary>
            A string like "No pending code-based migrations."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.LoggingExplicit">
            <summary>
            A string like "Explicit"
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.UpgradingHistoryTable">
            <summary>
            A string like "Upgrading history table."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.MetadataOutOfDate">
            <summary>
            A string like "Cannot scaffold the next migration because the target database was created with a version of Code First earlier than EF 4.3 and does not contain the migrations history table. To start using migrations against this database, ensure the current model is compatible with the target database and execute the migrations Update process. (In Visual Studio you can use the Update-Database command from Package Manager Console to execute the migrations Update process)."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.AutomaticDisabledException">
            <summary>
            A string like "Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DownScriptWindowsNotSupported">
            <summary>
            A string like "Scripting the downgrade between two specified migrations is not supported."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.SqlCeColumnRenameNotSupported">
            <summary>
            A string like "Direct column renaming is not supported by SQL Server Compact. To rename a column in SQL Server Compact, you will need to recreate it."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.ValidationHeader">
            <summary>
            A string like "One or more validation errors were detected during model generation:"
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.CircularComplexTypeHierarchy">
            <summary>
            A string like "A circular ComplexType hierarchy was detected. Self-referencing ComplexTypes are not supported."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.BadLocalDBDatabaseName">
            <summary>
            A string like "Connection to the database failed. The connection string is configured with an invalid LocalDB server name. This may have been set in 'global.asax' by a pre-release version of MVC4. The default connection factory is now set in web.config so the line in 'global.asax' starting with 'Database.DefaultConnectionFactory = ' should be removed. See http://go.microsoft.com/fwlink/?LinkId=243166 for details."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.FailedToGetProviderInformation">
            <summary>
            A string like "An error occurred while getting provider information from the database. This can be caused by Entity Framework using an incorrect connection string. Check the inner exceptions for details and ensure that the connection string is correct."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbPropertyEntry_CannotMarkPropertyUnmodified">
            <summary>
            A string like "Setting IsModified to false for a modified property is not supported."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbContext_IndependentAssociationUpdateException">
            <summary>
            A string like "An error occurred while saving entities that do not expose foreign key properties for their relationships. The EntityEntries property will return null because a single entity cannot be identified as the source of the exception. Handling of exceptions while saving can be made easier by exposing foreign key properties in your entity types. See the InnerException for details."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbPropertyValues_PropertyValueNamesAreReadonly">
            <summary>
            A string like "The set of property value names is read-only."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbPropertyValues_AttemptToSetNonValuesOnComplexProperty">
            <summary>
            A string like "A property of a complex type must be set to an instance of the generic or non-generic DbPropertyValues class for that type."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.Database_NonCodeFirstCompatibilityCheck">
            <summary>
            A string like "Model compatibility cannot be checked because the DbContext instance was not created using Code First patterns. DbContext instances created from an ObjectContext or using an EDMX file cannot be checked for compatibility."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.Database_MetadataNotMapped">
            <summary>
            A string like "Model compatibility cannot be checked because the EdmMetadata type was not included in the model. Ensure that IncludeMetadataConvention has been added to the DbModelBuilder conventions."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.Database_NoDatabaseMetadata">
            <summary>
            A string like "Model compatibility cannot be checked because the database does not contain model metadata. Model compatibility can only be checked for databases created using Code First or Code First Migrations."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbContext_ContextUsedInModelCreating">
            <summary>
            A string like "The context cannot be used while the model is being created."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbContext_MESTNotSupported">
            <summary>
            A string like "The DbContext class cannot be used with models that have multiple entity sets per type (MEST)."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbContext_Disposed">
            <summary>
            A string like "The operation cannot be completed because the DbContext has been disposed."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbContext_ProviderReturnedNullConnection">
            <summary>
            A string like "The provider factory returned a null connection."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbContext_ConnectionFactoryReturnedNullConnection">
            <summary>
            A string like "The DbConnectionFactory instance returned a null connection."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbSet_WrongNumberOfKeyValuesPassed">
            <summary>
            A string like "The number of primary key values passed must match number of primary key values defined on the entity."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbSet_WrongKeyValueType">
            <summary>
            A string like "The type of one of the primary key values did not match the type defined in the entity. See inner exception for details."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbSet_MultipleAddedEntitiesFound">
            <summary>
            A string like "Multiple entities were found in the Added state that match the given primary key values."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbQuery_BindingToDbQueryNotSupported">
            <summary>
            A string like "Data binding directly to a store query (DbSet, DbQuery, DbSqlQuery) is not supported. Instead populate a DbSet with data, for example by calling Load on the DbSet, and then bind to local data. For WPF bind to DbSet.Local. For WinForms bind to DbSet.Local.ToBindingList()."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbExtensions_InvalidIncludePathExpression">
            <summary>
            A string like "The Include path expression must refer to a navigation property defined on the type. Use dotted paths for reference navigation properties and the Select operator for collection navigation properties."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbContext_ConnectionHasModel">
            <summary>
            A string like "Cannot initialize a DbContext from an entity connection string or an EntityConnection instance together with a DbCompiledModel. If an entity connection string or EntityConnection instance is used, then the model will be created from the metadata in the connection. If a DbCompiledModel is used, then the connection supplied should be a standard database connection (for example, a SqlConnection instance) rather than an entity connection."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.CodeFirstCachedMetadataWorkspace_SameModelDifferentProvidersNotSupported">
            <summary>
            A string like "Using the same DbCompiledModel to create contexts against different types of database servers is not supported. Instead, create a separate DbCompiledModel for each type of server being used."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbEntityValidationException_ValidationFailed">
            <summary>
            A string like "Validation failed for one or more entities. See 'EntityValidationErrors' property for more details."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.Database_InitializationException">
            <summary>
            A string like "An exception occurred while initializing the database. See the InnerException for details."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmxWriter_EdmxFromObjectContextNotSupported">
            <summary>
            A string like "Creating a DbModelBuilder or writing the EDMX from a DbContext created using an existing ObjectContext is not supported. EDMX can only be obtained from a Code First DbContext created without using an existing DbCompiledModel."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmxWriter_EdmxFromDbCompiledModelNotSupported">
            <summary>
            A string like "Creating a DbModelBuilder or writing the EDMX from a DbContext created using an existing DbCompiledModel is not supported. EDMX can only be obtained from a Code First DbContext created without using an existing DbCompiledModel."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmxWriter_EdmxFromModelFirstNotSupported">
            <summary>
            A string like "Creating a DbModelBuilder or writing the EDMX from a DbContext created using Database First or Model First is not supported. EDMX can only be obtained from a Code First DbContext created without using an existing DbCompiledModel."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.UnintentionalCodeFirstException_Message">
            <summary>
            A string like "Code generated using the T4 templates for Database First and Model First development may not work correctly if used in Code First mode. To continue using Database First or Model First ensure that the Entity Framework connection string is specified in the config file of executing application. To use these classes, that were generated from Database First or Model First, with Code First add any additional configuration using attributes or the DbModelBuilder API and then remove the code that throws this exception."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.CannotCallGenericSetWithProxyType">
            <summary>
            A string like "The generic 'Set' method cannot be called with a proxy type. Either use the actual entity type or call the non-generic 'Set' method."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_BadNavigationPropertyRolesCannotBeTheSame">
            <summary>
            A string like "NavigationProperty is not valid. The FromRole and ToRole are the same."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_InvalidOperationMultipleEndsInAssociation">
            <summary>
            A string like "OnDelete can be specified on only one End of an EdmAssociation."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmModel_Validator_Semantic_MismatchNumberOfPropertiesinRelationshipConstraint">
            <summary>
            A string like "The number of properties in the Dependent and Principal Roles in a relationship constraint must be identical."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmModel_Validator_Syntactic_MissingName">
            <summary>
            A string like "The name is missing or not valid."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmModel_Validator_Syntactic_EdmAssociationType_AssocationEndMustNotBeNull">
            <summary>
            A string like "AssociationEnd must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmModel_Validator_Syntactic_EdmAssociationConstraint_DependentEndMustNotBeNull">
            <summary>
            A string like "DependentEnd must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmModel_Validator_Syntactic_EdmAssociationConstraint_DependentPropertiesMustNotBeEmpty">
            <summary>
            A string like "DependentProperties must not be empty."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmModel_Validator_Syntactic_EdmNavigationProperty_AssocationMustNotBeNull">
            <summary>
            A string like "Association must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmModel_Validator_Syntactic_EdmNavigationProperty_ResultEndMustNotBeNull">
            <summary>
            A string like "ResultEnd must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmModel_Validator_Syntactic_EdmAssociationEnd_EntityTypeMustNotBeNull">
            <summary>
            A string like "EntityType must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmModel_Validator_Syntactic_EdmEntitySet_ElementTypeMustNotBeNull">
            <summary>
            A string like "ElementType must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmModel_Validator_Syntactic_EdmAssociationSet_ElementTypeMustNotBeNull">
            <summary>
            A string like "ElementType must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmModel_Validator_Syntactic_EdmAssociationSet_SourceSetMustNotBeNull">
            <summary>
            A string like "SourceSet must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmModel_Validator_Syntactic_EdmAssociationSet_TargetSetMustNotBeNull">
            <summary>
            A string like "TargetSet must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EdmModel_Validator_Syntactic_EdmTypeReferenceNotValid">
            <summary>
            A string like "The type is not a valid EdmTypeReference."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.Serializer_OneNamespaceAndOneContainer">
            <summary>
            A string like "Serializer can only serialize an EdmModel that has one EdmNamespace and one EdmEntityContainer."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.MaxLengthAttribute_InvalidMaxLength">
            <summary>
            A string like "MaxLengthAttribute must have a Length value that is greater than zero. Use MaxLength() without parameters to  indicate that the string or array can have the maximum allowable length."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.MinLengthAttribute_InvalidMinLength">
            <summary>
            A string like "MinLengthAttribute must have a Length value that is zero or greater."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.EagerInternalContext_CannotSetConnectionInfo">
            <summary>
            A string like "The connection can not be overridden because this context was created from an existing ObjectContext."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.LazyInternalContext_CannotReplaceEfConnectionWithDbConnection">
            <summary>
            A string like "Can not override the connection for this context with a standard DbConnection because the original connection was an EntityConnection."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.LazyInternalContext_CannotReplaceDbConnectionWithEfConnection">
            <summary>
            A string like "Can not override the connection for this context with an EntityConnection because the original connection was a standard DbConnection."
            </summary>
        </member>
        <member name="T:System.Data.Entity.Resources.Error">
            <summary>
               Strongly-typed and parameterized exception factory.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.AutomaticDataLoss">
            <summary>
            Migrations.Infrastructure.AutomaticDataLossException with message like "Automatic migration was not applied because it would result in data loss."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.MetadataOutOfDate">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "Cannot scaffold the next migration because the target database was created with a version of Code First earlier than EF 4.3 and does not contain the migrations history table. To start using migrations against this database, ensure the current model is compatible with the target database and execute the migrations Update process. (In Visual Studio you can use the Update-Database command from Package Manager Console to execute the migrations Update process)."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.MigrationNotFound(System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "The specified target migration '{0}' does not exist. Ensure that target migration refers to an existing migration id."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.PartialFkOperation(System.Object,System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "The Foreign Key on table '{0}' with columns '{1}' could not be created because the principal key columns could not be determined. Use the AddForeignKey fluent API to fully specify the Foreign Key."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.AutoNotValidTarget(System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "'{0}' is not a valid target migration. When targeting a previously applied automatic migration, use the full migration id including timestamp."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.AutoNotValidForScriptWindows(System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "'{0}' is not a valid migration. Code-based migrations must be used for both source and target when scripting the upgrade between them."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ContextNotConstructible(System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "The target context '{0}' is not constructible. Add a default constructor or provide an implementation of IDbContextFactory."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.AmbiguousMigrationName(System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "The specified migration name '{0}' is ambiguous. Specify the full migration id including timestamp instead."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.AutomaticDisabledException">
            <summary>
            Migrations.Infrastructure.AutomaticMigrationsDisabledException with message like "Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DownScriptWindowsNotSupported">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "Scripting the downgrade between two specified migrations is not supported."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.AssemblyMigrator_NoConfigurationWithName(System.Object,System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "The migrations configuration type '{0}' was not be found in the assembly '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.AssemblyMigrator_MultipleConfigurationsWithName(System.Object,System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "More than one migrations configuration type '{0}' was found in the assembly '{1}'. Specify the fully qualified name of the one to use."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.AssemblyMigrator_NoConfiguration(System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "No migrations configuration type was found in the assembly '{0}'. (In Visual Studio you can use the Enable-Migrations command from Package Manager Console to add a migrations configuration)."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.AssemblyMigrator_MultipleConfigurations(System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "More than one migrations configuration type was found in the assembly '{0}'. Specify the name of the one to use."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.AssemblyMigrator_NonConfigurationType(System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "The type '{0}' is not a migrations configuration type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.AssemblyMigrator_NoDefaultConstructor(System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "The migrations configuration type '{0}' must have a public default constructor."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.AssemblyMigrator_AbstractConfigurationType(System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "The migrations configuration type '{0}' must not be abstract."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.AssemblyMigrator_GenericConfigurationType(System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "The migrations configuration type '{0}' must not be generic."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.SqlCeColumnRenameNotSupported">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "Direct column renaming is not supported by SQL Server Compact. To rename a column in SQL Server Compact, you will need to recreate it."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.MigrationsNamespaceNotUnderRootNamespace(System.Object,System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "In VB.NET projects, the migrations namespace '{0}' must be under the root namespace '{1}'. Update the migrations project's root namespace to allow classes under the migrations namespace to be added."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Error.UnableToDispatchAddOrUpdate(System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Error.NoSqlGeneratorForProvider(System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "No MigrationSqlGenerator found for provider '{0}'. Use the SetSqlGenerator method in the target migrations configuration class to register additional SQL generators."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.EnableMigrations_NoContext(System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "No context type was found in the assembly '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.EnableMigrations_NoContextWithName(System.Object,System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "The context type '{0}' was not found in the assembly '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.EnableMigrations_MultipleContextsWithName(System.Object,System.Object)">
            <summary>
            Migrations.Infrastructure.MigrationsException with message like "More than one context type '{0}' was found in the assembly '{1}'. Specify the fully qualified name of the context."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ArgumentIsNullOrWhitespace(System.Object)">
            <summary>
            ArgumentException with message like "The argument '{0}' cannot be null, empty or contain only white space."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ArgumentPropertyIsNull(System.Object)">
            <summary>
            ArgumentException with message like "The argument property '{0}' cannot be null."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.PreconditionFailed(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The precondition '{0}' failed. {1}"
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.EntityTypeConfigurationMismatch(System.Object)">
            <summary>
            InvalidOperationException with message like "The type '{0}' has already been configured as a complex type. It cannot be reconfigured as an entity type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ComplexTypeConfigurationMismatch(System.Object)">
            <summary>
            InvalidOperationException with message like "The type '{0}' has already been configured as an entity type. It cannot be reconfigured as a complex type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.KeyPropertyNotFound(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The key component '{0}' is not a declared property on type '{1}'. Verify that it has not been explicitly excluded from the model and that it is a valid primitive property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ForeignKeyPropertyNotFound(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The foreign key component '{0}' is not a declared property on type '{1}'. Verify that it has not been explicitly excluded from the model and that it is a valid primitive property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.PropertyNotFound(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The property '{0}' is not a declared property on type '{1}'. Verify that the property has not been explicitly excluded from the model by using the Ignore method or NotMappedAttribute data annotation. Make sure that it is a valid primitive property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.NavigationPropertyNotFound(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The navigation property '{0}' is not a declared property on type '{1}'. Verify that it has not been explicitly excluded from the model and that it is a valid navigation property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.InvalidPropertyExpression(System.Object)">
            <summary>
            InvalidOperationException with message like "The expression '{0}' is not a valid property expression. The expression should represent a property: C#: 't => t.MyProperty'  VB.Net: 'Function(t) t.MyProperty'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.InvalidComplexPropertyExpression(System.Object)">
            <summary>
            InvalidOperationException with message like "The expression '{0}' is not a valid property expression. The expression should represent a property: C#: 't => t.MyProperty'  VB.Net: 'Function(t) t.MyProperty'. Use dotted paths for nested properties: C#: 't => t.MyProperty.MyProperty'  VB.Net: 'Function(t) t.MyProperty.MyProperty'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.InvalidPropertiesExpression(System.Object)">
            <summary>
            InvalidOperationException with message like "The properties expression '{0}' is not valid. The expression should represent a property: C#: 't => t.MyProperty'  VB.Net: 'Function(t) t.MyProperty'. When specifying multiple properties use an anonymous type: C#: 't => new {{ t.MyProperty1, t.MyProperty2 }}'  VB.Net: 'Function(t) New With {{ t.MyProperty1, t.MyProperty2 }}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.InvalidComplexPropertiesExpression(System.Object)">
            <summary>
            InvalidOperationException with message like "The properties expression '{0}' is not valid. The expression should represent a property: C#: 't => t.MyProperty'  VB.Net: 'Function(t) t.MyProperty'. When specifying multiple properties use an anonymous type: C#: 't => new {{ t.MyProperty1, t.MyProperty2 }}'  VB.Net: 'Function(t) New With {{ t.MyProperty1, t.MyProperty2 }}'."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Error.DuplicateStructuralTypeConfiguration(System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Error.ConflictingPropertyConfiguration(System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Conflicting configuration settings were specified for property '{0}' on type '{1}': {2}"
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ConflictingColumnConfiguration(System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Conflicting configuration settings were specified for column '{0}' on table '{1}': {2}"
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.InvalidComplexType(System.Object)">
            <summary>
            InvalidOperationException with message like "The type '{0}' was not mapped. Check that the type has not been explicitly excluded by using the Ignore method or NotMappedAttribute data annotation. Verify that the type was defined as a class, is not primitive, nested or generic, and does not inherit from ComplexObject."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.InvalidEntityType(System.Object)">
            <summary>
            InvalidOperationException with message like "The type '{0}' was not mapped. Check that the type has not been explicitly excluded by using the Ignore method or NotMappedAttribute data annotation. Verify that the type was defined as a class, is not primitive, nested or generic, and does not inherit from EntityObject."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.NavigationInverseItself(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The navigation property '{0}' declared on type '{1}' cannot be the inverse of itself."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ConflictingConstraint(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting foreign keys."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ConflictingInferredColumnType(System.Object,System.Object,System.Object)">
            <summary>
            MappingException with message like "Values of incompatible types ('{1}' and '{2}') were assigned to the '{0}' discriminator column. Values of the same type must be specified. To explicitly specify the type of the discriminator column use the HasColumnType method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ConflictingMapping(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting mapping information."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ConflictingCascadeDeleteOperation(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting cascade delete operations using 'WillCascadeOnDelete'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ConflictingMultiplicities(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting multiplicities."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.MaxLengthAttributeConvention_InvalidMaxLength(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The MaxLengthAttribute on property '{0}' on type '{1} is not valid. The Length value must be greater than zero. Use MaxLength() without parameters to indicate that the string or array can have the maximum allowable length."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.StringLengthAttributeConvention_InvalidMaximumLength(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The StringLengthAttribute on property '{0}' on type '{1}' is not valid. The maximum length must be greater than zero. Use MaxLength() without parameters to indicate that the string or array can have the maximum allowable length."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ModelGeneration_UnableToDetermineKeyOrder(System.Object)">
            <summary>
            InvalidOperationException with message like "Unable to determine composite primary key ordering for type '{0}'. Use the ColumnAttribute or the HasKey method to specify an order for composite primary keys."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ForeignKeyAttributeConvention_EmptyKey(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The ForeignKeyAttribute on property '{0}' on type '{1}' is not valid. Name must not be empty."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ForeignKeyAttributeConvention_InvalidKey(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The ForeignKeyAttribute on property '{0}' on type '{1}' is not valid. The foreign key name '{2}' was not found on the dependent type '{3}'. The Name value should be a comma separated list of foreign key property names."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ForeignKeyAttributeConvention_InvalidNavigationProperty(System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The ForeignKeyAttribute on property '{0}' on type '{1}' is not valid. The navigation property '{2}' was not found on the dependent type '{1}'. The Name value should be a valid navigation property name."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ForeignKeyAttributeConvention_OrderRequired(System.Object)">
            <summary>
            InvalidOperationException with message like "Unable to determine a composite foreign key ordering for foreign key on type {0}. When using the ForeignKey data annotation on composite foreign key properties ensure order is specified by using the Column data annotation or the fluent API."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.InversePropertyAttributeConvention_PropertyNotFound(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The InversePropertyAttribute on property '{2}' on type '{3}' is not valid. The property '{0}' is not a valid navigation property on the related type '{1}'. Ensure that the property exists and is a valid reference or collection navigation property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.InversePropertyAttributeConvention_SelfInverseDetected(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "A relationship cannot be established from property '{0}' on type '{1}' to property '{0}' on type '{1}'. Check the values in the InversePropertyAttribute to ensure relationship definitions are unique and reference from one navigation property to its corresponding inverse navigation property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.KeyRegisteredOnDerivedType(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "A key is registered for the derived type '{0}'. Keys can only be registered for the root type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.InvalidTableMapping(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The type '{0}' has already been mapped to table '{1}'. Specify all mapping aspects of a table in a single Map call."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.InvalidTableMapping_NoTableName(System.Object)">
            <summary>
            InvalidOperationException with message like "Map was called more than once for type '{0}' and at least one of the calls didn't specify the target table name."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.InvalidChainedMappingSyntax(System.Object)">
            <summary>
            InvalidOperationException with message like "The derived type '{0}' has already been mapped using the chaining syntax. A derived type can only be mapped once using the chaining syntax."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.InvalidNotNullCondition(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "An "is not null" condition cannot be specified on property '{0}' on type '{1}' because this property is not included in the model. Check that the property has not been explicitly excluded from the model by using the Ignore method or NotMappedAttribute data annotation."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.InvalidDiscriminatorType(System.Object)">
            <summary>
            ArgumentException with message like "Values of type '{0}' cannot be used as type discriminator values. Supported types include byte, signed byte, bool, int16, int32, int64, and string."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ConventionNotFound(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Unable to add the convention '{0}'. Could not find an existing convention of type '{1}' in the current convention set."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.InvalidEntitySplittingProperties(System.Object)">
            <summary>
            InvalidOperationException with message like "Not all properties for type '{0}' have been mapped. Either map those properties or explicitly excluded them from the model."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ModelBuilder_ProviderNameNotFound(System.Object)">
            <summary>
            NotSupportedException with message like "Unable to determine the provider name for connection of type '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ToTable_InvalidSchemaName(System.Object)">
            <summary>
            ArgumentException with message like "The qualified table name '{0}' contains an invalid schema name. Schema names must have a non-zero length."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ToTable_InvalidTableName(System.Object)">
            <summary>
            ArgumentException with message like "The qualified table name '{0}' contains an invalid table name. Table names must have a non-zero length."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.EntityMappingConfiguration_DuplicateMapInheritedProperties(System.Object)">
            <summary>
            InvalidOperationException with message like "Properties for type '{0}' can only be mapped once. Ensure the MapInheritedProperties method is only used during one call to the Map method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.EntityMappingConfiguration_DuplicateMappedProperties(System.Object)">
            <summary>
            InvalidOperationException with message like "Properties for type '{0}' can only be mapped once. Ensure the Properties method is used and that repeated calls specify each non-key property only once."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.EntityMappingConfiguration_DuplicateMappedProperty(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Properties for type '{0}' can only be mapped once. The non-key property '{1}' is mapped more than once. Ensure the Properties method specifies each non-key property only once."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.EntityMappingConfiguration_CannotMapIgnoredProperty(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The property '{1}' on type '{0}' cannot be mapped because it has been explicitly excluded from the model or it is of a type not supported by the DbModelBuilderVersion being used."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.EntityMappingConfiguration_InvalidTableSharing(System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The entity types '{0}' and '{1}' cannot share table '{2}' because they are not in the same type hierarchy or do not have a valid one to one foreign key relationship with matching primary keys between them."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.CannotIgnoreMappedBaseProperty(System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "You cannot use Ignore method on the property '{0}' on type '{1}' because this type inherits from the type '{2}' where this property is mapped. To exclude this property from your model, use NotMappedAttribute or Ignore method on the base type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ModelBuilder_KeyPropertiesMustBePrimitive(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The property '{0}' cannot be used as a key property on the entity '{1}' because the property type is not a valid key type. Only scalar types, string and byte[] are supported key types."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.TableNotFound(System.Object)">
            <summary>
            InvalidOperationException with message like "The specified table '{0}' was not found in the model. Ensure that the table name has been correctly specified."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.IncorrectColumnCount(System.Object)">
            <summary>
            InvalidOperationException with message like "The specified association foreign key columns '{0}' are invalid. The number of columns specified must match the number of primary key columns."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.CircularComplexTypeHierarchy">
            <summary>
            InvalidOperationException with message like "A circular ComplexType hierarchy was detected. Self-referencing ComplexTypes are not supported."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.UnableToDeterminePrincipal(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Unable to determine the principal end of an association between the types '{0}' and '{1}'. The principal end of this association must be explicitly configured using either the relationship fluent API or data annotations."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.UnmappedAbstractType(System.Object)">
            <summary>
            InvalidOperationException with message like "The abstract type '{0}' has no mapped descendents and so cannot be mapped. Either remove '{0}' from the model or add one or more types deriving from '{0}' to the model. "
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.UnsupportedHybridInheritanceMapping(System.Object)">
            <summary>
            NotSupportedException with message like "The type '{0}' cannot be mapped as defined because it maps inherited properties from types that use entity splitting or another form of inheritance. Either choose a different inheritance mapping strategy so as to not map inherited properties, or change all types in the hierarchy to map inherited properties and to not use splitting. "
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.OrphanedConfiguredTableDetected(System.Object)">
            <summary>
            InvalidOperationException with message like "The table '{0}' was configured but is not used in any mappings. Verify the mapping configuration for '{0}' is correct."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DuplicateConfiguredColumnOrder(System.Object)">
            <summary>
            InvalidOperationException with message like "The configured column orders for the table '{0}' contains duplicates. Ensure the specified column order values are distinct."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.UnsupportedUseOfV3Type(System.Object,System.Object)">
            <summary>
            NotSupportedException with message like "The enum or spatial property '{1}' on type '{0}' cannot be mapped. Use DbModelBuilderVersion 'V5_0' or later to map enum or spatial properties."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.MultiplePropertiesMatchedAsKeys(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Multiple potential primary key properties named '{0}' but differing only by case were found on entity type '{1}'. Configure the primary key explicitly using the HasKey fluent API or the KeyAttribute data annotation."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyEntry_CannotGetCurrentValue(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Cannot get value for property '{0}' from entity of type '{1}' because the property has no get accessor."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyEntry_CannotSetCurrentValue(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Cannot set value for property '{0}' on entity of type '{1}' because the property has no set accessor."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Error.DbPropertyEntry_NotSupportedForDetached(System.Object,System.Object,System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyEntry_SettingEntityRefNotSupported(System.Object,System.Object,System.Object)">
            <summary>
            NotSupportedException with message like "Cannot set value for property '{0}' on entity of type '{1}' because the property has no set accessor and is in the '{2}' state."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyEntry_NotSupportedForPropertiesNotInTheModel(System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Member '{0}' cannot be called for property '{1}' on entity of type '{2}' because the property is not part of the Entity Data Model."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Error.DbEntityEntry_NotSupportedForDetached(System.Object,System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Error.DbSet_BadTypeForAddAttachRemove(System.Object,System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Cannot call the {0} method for an entity of type '{1}' on a DbSet for entities of type '{2}'. Only entities of type '{2}' or derived from type '{2}' can be added, attached, or removed."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbSet_BadTypeForCreate(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Cannot call the Create method for the type '{0}' on a DbSet for entities of type '{1}'. Only entities of type '{1}' or derived from type '{1}' can be created."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Error.DbEntity_BadTypeForCast(System.Object,System.Object,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Error.DbMember_BadTypeForCast(System.Object,System.Object,System.Object,System.Object,System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_UsedReferenceForCollectionProp(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The property '{0}' on type '{1}' is a collection navigation property. The Collection method should be used instead of the Reference method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_UsedCollectionForReferenceProp(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The property '{0}' on type '{1}' is a reference navigation property. The Reference method should be used instead of the Collection method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_NotANavigationProperty(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The property '{0}' on type '{1}' is not a navigation property. The Reference and Collection methods can only be used with navigation properties. Use the Property or ComplexProperty method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_NotAScalarProperty(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The property '{0}' on type '{1}' is not a primitive or complex property. The Property method can only be used with primitive or complex properties. Use the Reference or Collection method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_NotAComplexProperty(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The property '{0}' on type '{1}' is not a complex property. The ComplexProperty method can only be used with complex properties. Use the Property, Reference or Collection method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_NotAProperty(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The property '{0}' on type '{1}' is not a primitive property, complex property, collection navigation property, or reference navigation property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_DottedPartNotComplex(System.Object,System.Object,System.Object)">
            <summary>
            ArgumentException with message like ""The property '{0}' from the property path '{1}' is not a complex property on type '{2}'. Property paths must be composed of complex properties for all except the final property.""
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyEntry_CannotMarkPropertyUnmodified">
            <summary>
            NotSupportedException with message like "Setting IsModified to false for a modified property is not supported."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_DottedPathMustBeProperty(System.Object)">
            <summary>
            ArgumentException with message like ""The property path '{0}' cannot be used for navigation properties. Property paths can only be used to access primitive or complex properties.""
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_WrongGenericForNavProp(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The navigation property '{0}' on entity type '{1}' cannot be used for entities of type '{2}' because it refers to entities of type '{3}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_WrongGenericForCollectionNavProp(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The generic type argument '{0}' cannot be used with the Member method when accessing the collection navigation property '{1}' on entity type '{2}'. The generic type argument '{3}' must be used instead."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_WrongGenericForProp(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The property '{0}' on entity type '{1}' cannot be used for objects of type '{2}' because it is a property for objects of type '{3}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_BadPropertyExpression(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The expression passed to method {0} must represent a property defined on the type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_CannotGetValuesForState(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "{0} cannot be used for entities in the {1} state."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_CannotSetNullValue(System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Cannot set non-nullable property '{0}' of type '{1}' to null on object of type '{2}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_CannotGetStoreValuesWhenComplexPropertyIsNull(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The property '{0}' in the entity of type '{1}' is null. Store values cannot be obtained for an entity with a null complex property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_WrongTypeForAssignment(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Cannot assign value of type '{0}' to property '{1}' of type '{2}' in property values for type '{3}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_PropertyValueNamesAreReadonly">
            <summary>
            NotSupportedException with message like "The set of property value names is read-only."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_PropertyDoesNotExist(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The '{0}' property does not exist or is not mapped for the type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_AttemptToSetValuesFromWrongObject(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Cannot copy values from DbPropertyValues for type '{0}' into DbPropertyValues for type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_AttemptToSetValuesFromWrongType(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Cannot copy from property values for object of type '{0}' into property values for object of type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_AttemptToSetNonValuesOnComplexProperty">
            <summary>
            ArgumentException with message like "A property of a complex type must be set to an instance of the generic or non-generic DbPropertyValues class for that type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_ComplexObjectCannotBeNull(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The value of the complex property '{0}' on entity of type '{1}' is null. Complex properties cannot be set to null and values cannot be set for null complex properties."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_NestedPropertyValuesNull(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The value of the nested property values property '{0}' on the values for entity of type '{1}' is null. Nested property values cannot be set to null and values cannot be set for null complex properties."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_CannotSetPropertyOnNullCurrentValue(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Cannot set the value of the nested property '{0}' because value of the complex property '{1}' to which it belongs is null."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_CannotSetPropertyOnNullOriginalValue(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Cannot set the original value of the nested property '{0}' because the original value of the complex property '{1}' to which it belongs is null."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DatabaseInitializationStrategy_ModelMismatch(System.Object)">
            <summary>
            InvalidOperationException with message like "The model backing the '{0}' context has changed since the database was created. Consider using Code First Migrations to update the database (http://go.microsoft.com/fwlink/?LinkId=238269)."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.Database_DatabaseAlreadyExists(System.Object)">
            <summary>
            InvalidOperationException with message like "Database '{0}' cannot be created because it already exists."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.Database_NonCodeFirstCompatibilityCheck">
            <summary>
            NotSupportedException with message like "Model compatibility cannot be checked because the DbContext instance was not created using Code First patterns. DbContext instances created from an ObjectContext or using an EDMX file cannot be checked for compatibility."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.Database_MetadataNotMapped">
            <summary>
            NotSupportedException with message like "Model compatibility cannot be checked because the EdmMetadata type was not included in the model. Ensure that IncludeMetadataConvention has been added to the DbModelBuilder conventions."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.Database_NoDatabaseMetadata">
            <summary>
            NotSupportedException with message like "Model compatibility cannot be checked because the database does not contain model metadata. Model compatibility can only be checked for databases created using Code First or Code First Migrations."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Error.Database_BadLegacyInitializerEntry(System.Object,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Error.Database_InitializeFromLegacyConfigFailed(System.Object,System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Error.Database_InitializeFromConfigFailed(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Failed to set database initializer of type '{0}' for DbContext type '{1}' specified in the application configuration. See inner exception for details."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ContextConfiguredMultipleTimes(System.Object)">
            <summary>
            InvalidOperationException with message like "Configuration for DbContext type '{0}' is specified multiple times in the application configuration. Each context can only be configured once."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.SetConnectionFactoryFromConfigFailed(System.Object)">
            <summary>
            InvalidOperationException with message like "Failed to set Database.DefaultConnectionFactory to an instance of the '{0}' type as specified in the application configuration. See inner exception for details."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.Database_FailedToResolveType(System.Object)">
            <summary>
            InvalidOperationException with message like "The type '{0}' could not be found. The type name must be an assembly-qualified name."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbContext_ContextUsedInModelCreating">
            <summary>
            InvalidOperationException with message like "The context cannot be used while the model is being created."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbContext_MESTNotSupported">
            <summary>
            InvalidOperationException with message like "The DbContext class cannot be used with models that have multiple entity sets per type (MEST)."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbContext_Disposed">
            <summary>
            InvalidOperationException with message like "The operation cannot be completed because the DbContext has been disposed."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbContext_ProviderReturnedNullConnection">
            <summary>
            InvalidOperationException with message like "The provider factory returned a null connection."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbContext_ProviderNameMissing(System.Object)">
            <summary>
            InvalidOperationException with message like "The connection string '{0}' in the application's configuration file does not contain the required providerName attribute.""
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbContext_ConnectionFactoryReturnedNullConnection">
            <summary>
            InvalidOperationException with message like "The DbConnectionFactory instance returned a null connection."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbSet_WrongNumberOfKeyValuesPassed">
            <summary>
            ArgumentException with message like "The number of primary key values passed must match number of primary key values defined on the entity."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbSet_WrongKeyValueType">
            <summary>
            ArgumentException with message like "The type of one of the primary key values did not match the type defined in the entity. See inner exception for details."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbSet_WrongEntityTypeFound(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The entity found was of type {0} when an entity of type {1} was requested."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbSet_MultipleAddedEntitiesFound">
            <summary>
            InvalidOperationException with message like "Multiple entities were found in the Added state that match the given primary key values."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbSet_DbSetUsedWithComplexType(System.Object)">
            <summary>
            InvalidOperationException with message like "The type '{0}' is mapped as a complex type. The Set method, DbSet objects, and DbEntityEntry objects can only be used with entity types, not complex types."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbSet_PocoAndNonPocoMixedInSameAssembly(System.Object)">
            <summary>
            InvalidOperationException with message like "The type '{0}' is not attributed with EdmEntityTypeAttribute but is contained in an assembly attributed with EdmSchemaAttribute. POCO entities that do not use EdmEntityTypeAttribute cannot be contained in the same assembly as non-POCO entities that use EdmEntityTypeAttribute."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbSet_EntityTypeNotInModel(System.Object)">
            <summary>
            InvalidOperationException with message like "The entity type {0} is not part of the model for the current context."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbQuery_BindingToDbQueryNotSupported">
            <summary>
            NotSupportedException with message like "Data binding directly to a store query (DbSet, DbQuery, DbSqlQuery) is not supported. Instead populate a DbSet with data, for example by calling Load on the DbSet, and then bind to local data. For WPF bind to DbSet.Local. For WinForms bind to DbSet.Local.ToBindingList()."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbExtensions_InvalidIncludePathExpression">
            <summary>
            ArgumentException with message like "The Include path expression must refer to a navigation property defined on the type. Use dotted paths for reference navigation properties and the Select operator for collection navigation properties."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbContext_ConnectionStringNotFound(System.Object)">
            <summary>
            InvalidOperationException with message like "No connection string named '{0}' could be found in the application config file."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbContext_ConnectionHasModel">
            <summary>
            InvalidOperationException with message like "Cannot initialize a DbContext from an entity connection string or an EntityConnection instance together with a DbCompiledModel. If an entity connection string or EntityConnection instance is used, then the model will be created from the metadata in the connection. If a DbCompiledModel is used, then the connection supplied should be a standard database connection (for example, a SqlConnection instance) rather than an entity connection."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbCollectionEntry_CannotSetCollectionProp(System.Object,System.Object)">
            <summary>
            NotSupportedException with message like "The collection navigation property '{0}' on the entity of type '{1}' cannot be set because the entity type does not define a navigation property with a set accessor."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.CodeFirstCachedMetadataWorkspace_SameModelDifferentProvidersNotSupported">
            <summary>
            NotSupportedException with message like "Using the same DbCompiledModel to create contexts against different types of database servers is not supported. Instead, create a separate DbCompiledModel for each type of server being used."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.Mapping_MESTNotSupported(System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Multiple object sets per type are not supported. The object sets '{0}' and '{1}' can both contain instances of type '{2}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbModelBuilder_MissingRequiredCtor(System.Object)">
            <summary>
            InvalidOperationException with message like "The context type '{0}' must have a public constructor taking an EntityConnection."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.SqlConnectionFactory_MdfNotSupported(System.Object)">
            <summary>
            NotSupportedException with message like "The database name '{0}' is not supported because it is an MDF file name. A full connection string must be provided to attach an MDF file."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.Database_InitializationException">
            <summary>
            DataException with message like "An exception occurred while initializing the database. See the InnerException for details."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.EdmxWriter_EdmxFromObjectContextNotSupported">
            <summary>
            NotSupportedException with message like "Creating a DbModelBuilder or writing the EDMX from a DbContext created using an existing ObjectContext is not supported. EDMX can only be obtained from a Code First DbContext created without using an existing DbCompiledModel."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.EdmxWriter_EdmxFromDbCompiledModelNotSupported">
            <summary>
            NotSupportedException with message like "Creating a DbModelBuilder or writing the EDMX from a DbContext created using an existing DbCompiledModel is not supported. EDMX can only be obtained from a Code First DbContext created without using an existing DbCompiledModel."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.EdmxWriter_EdmxFromModelFirstNotSupported">
            <summary>
            NotSupportedException with message like "Creating a DbModelBuilder or writing the EDMX from a DbContext created using Database First or Model First is not supported. EDMX can only be obtained from a Code First DbContext created without using an existing DbCompiledModel."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbContextServices_MissingDefaultCtor(System.Object)">
            <summary>
            InvalidOperationException with message like "The context factory type '{0}' must have a public default constructor."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.CannotCallGenericSetWithProxyType">
            <summary>
            InvalidOperationException with message like "The generic 'Set' method cannot be called with a proxy type. Either use the actual entity type or call the non-generic 'Set' method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.MaxLengthAttribute_InvalidMaxLength">
            <summary>
            InvalidOperationException with message like "MaxLengthAttribute must have a Length value that is greater than zero. Use MaxLength() without parameters to  indicate that the string or array can have the maximum allowable length."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.MinLengthAttribute_InvalidMinLength">
            <summary>
            InvalidOperationException with message like "MinLengthAttribute must have a Length value that is zero or greater."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbConnectionInfo_ConnectionStringNotFound(System.Object)">
            <summary>
            InvalidOperationException with message like "No connection string named '{0}' could be found in the application config file."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.EagerInternalContext_CannotSetConnectionInfo">
            <summary>
            InvalidOperationException with message like "The connection can not be overridden because this context was created from an existing ObjectContext."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.LazyInternalContext_CannotReplaceEfConnectionWithDbConnection">
            <summary>
            InvalidOperationException with message like "Can not override the connection for this context with a standard DbConnection because the original connection was an EntityConnection."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.LazyInternalContext_CannotReplaceDbConnectionWithEfConnection">
            <summary>
            InvalidOperationException with message like "Can not override the connection for this context with an EntityConnection because the original connection was a standard DbConnection."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ArgumentNull(System.String)">
            <summary>
            The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ArgumentOutOfRange(System.String)">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.NotImplemented">
            <summary>
            The exception that is thrown when the author has yet to implement the logic at this point in the program. This can act as an exception based TODO tag.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.NotSupported">
            <summary>
            The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality. 
            </summary>
        </member>
        <member name="T:System.Data.Entity.Resources.EntityRes">
             <summary>
                AutoGenerated resource class. Usage:
            
                    string s = EntityRes.GetString(EntityRes.MyIdenfitier);
             </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Common.DataModelAnnotation">
            <summary>
                Allows the construction and modification of a user-specified annotation (name-value pair) on a <see cref="T:System.Data.Entity.Edm.Common.DataModelItem"/> instance.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Common.DataModelAnnotation.Namespace">
            <summary>
                Gets or sets an optional namespace that can be used to distinguish the annotation from others with the same <see cref="P:System.Data.Entity.Edm.Common.DataModelAnnotation.Name"/> value.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Common.DataModelAnnotation.Name">
            <summary>
                Gets or sets the name of the annotation.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Common.DataModelAnnotation.Value">
            <summary>
                Gets or sets the value of the annotation.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Common.DataModelErrorEventArgs">
            <summary>
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Common.DataModelEventArgs">
            <summary>
                DataModelEventArgs is the base argument type for all events raised by consumers of Entity Data Model (EDM) models.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Common.DataModelEventArgs.Item">
            <summary>
                Gets a value indicating the <see cref="T:System.Data.Entity.Edm.Common.DataModelItem"/> that caused the event to be raised.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Common.DataModelErrorEventArgs.PropertyName">
            <summary>
                Gets an optional value indicating which property of the source item caused the event to be raised.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Common.DataModelErrorEventArgs.ErrorCode">
            <summary>
                Gets a value that identifies the specific error that is being raised.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Common.DataModelErrorEventArgs.ErrorMessage">
            <summary>
                Gets an optional descriptive message the describes the error that is being raised.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.DbAliasedMetadataItem">
            <summary>
                DbAliasedMetadataItem provides the base type for all Database Metadata types that can have an optional <see cref="P:System.Data.Entity.Edm.Db.DbAliasedMetadataItem.DatabaseIdentifier"/> that should be used instead of the item's <see cref="P:System.Data.Entity.Edm.Db.DbNamedMetadataItem.Name"/> when referring to the item in the database.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.DbNamedMetadataItem">
            <summary>
                NamedDbItem is the base for all types in the Database Metadata construction and modification API with a <see cref="P:System.Data.Entity.Edm.Db.DbNamedMetadataItem.Name"/> property.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.DbMetadataItem">
            <summary>
                The base for all all Database Metadata types that support annotation using <see cref="T:System.Data.Entity.Edm.Common.DataModelAnnotation"/> .
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.DbDataModelItem">
            <summary>
                DbDataModelItem is the base for all types in the Database Metadata construction and modification API.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbMetadataItem.Annotations">
            <summary>
                Gets or sets the currently assigned annotations.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbNamedMetadataItem.Name">
            <summary>
                Gets or sets the currently assigned name.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbAliasedMetadataItem.DatabaseIdentifier">
            <summary>
                Gets an optional alternative identifier that should be used when referring to this item in the database.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.DbColumnMetadata">
            <summary>
                When implemented in derived types, allows the construction and modification of a column in a Database Metadata table or row.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbColumnMetadata.TypeName">
            <summary>
                Gets or sets a string indicating the database-specific type of the column.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbColumnMetadata.IsNullable">
            <summary>
                Gets or sets a value indicating whether the column is nullable.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbColumnMetadata.Facets">
            <summary>
                Gets or sets an optional <see cref="T:System.Data.Entity.Edm.Db.DbPrimitiveTypeFacets"/> instance that applies additional constraints to the referenced database-specific type of the column.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.DbDatabaseMetadata">
            <summary>
                Allows the construction and modification of a database in a Database Metadata model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbDatabaseMetadata.Version">
            <summary>
                Gets or sets an optional value that indicates the database model version.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbDatabaseMetadata.Schemas">
            <summary>
                Gets or sets the collection of <see cref="T:System.Data.Entity.Edm.Db.DbSchemaMetadata"/> instances that specifies the schemas within the database.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.DbForeignKeyConstraintMetadata">
            <summary>
                Allows the construction and modification of a foreign key constraint sourced by a <see cref="T:System.Data.Entity.Edm.Db.DbTableMetadata"/> instance.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbForeignKeyConstraintMetadata.DeleteAction">
            <summary>
                Gets or sets the <see cref="T:System.Data.Entity.Edm.Db.DbOperationAction"/> to take when a delete operation is attempted.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.DbItemKind">
            <summary>
                Indicates which Database Metadata concept is represented by a given item.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.DbItemKind.Database">
            <summary>
                Database Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.DbItemKind.Schema">
            <summary>
                Schema Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.DbItemKind.ForeignKeyConstraint">
            <summary>
                Foreign Key Constraint Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.DbItemKind.Function">
            <summary>
                Function Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.DbItemKind.FunctionParameter">
            <summary>
                Function Parameter Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.DbItemKind.FunctionType">
            <summary>
                Function Return or Parameter Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.DbItemKind.RowColumn">
            <summary>
                Row Column Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.DbItemKind.Table">
            <summary>
                Table Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.DbItemKind.TableColumn">
            <summary>
                Table Column Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.DbItemKind.PrimitiveTypeFacets">
            <summary>
                Primitive Facets Kind
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.DbOperationAction">
            <summary>
                Specifies the action to take on a given operation.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.DbOperationAction.None">
            <summary>
                Default behavior
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.DbOperationAction.Restrict">
            <summary>
                Restrict the operation
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.DbOperationAction.Cascade">
            <summary>
                Cascade the operation
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.DbPrimitiveTypeFacets">
            <summary>
                Allows the construction and modification of additional constraints that can be applied to a specific use of a primitive type in a Database Metadata item.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbPrimitiveTypeFacets.HasValue">
            <summary>
                Returns <code>true</code> if any facet value property currently has a non-null value; otherwise returns <code>false</code> .
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbPrimitiveTypeFacets.IsFixedLength">
            <summary>
                Gets or sets an optional value indicating whether the referenced type should be considered to have a fixed or variable length.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbPrimitiveTypeFacets.IsMaxLength">
            <summary>
                Gets or sets an optional value indicating whether the referenced type should be considered to have its intrinsic maximum length, rather than a specific value.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbPrimitiveTypeFacets.IsUnicode">
            <summary>
                Gets or sets an optional value indicating whether the referenced type should be considered to be Unicode or non-Unicode.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbPrimitiveTypeFacets.MaxLength">
            <summary>
                Gets or sets an optional value indicating the current constraint on the type's maximum length.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbPrimitiveTypeFacets.Precision">
            <summary>
                Gets or sets an optional value indicating the current constraint on the type's precision.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbPrimitiveTypeFacets.Scale">
            <summary>
                Gets or sets an optional value indicating the current constraint on the type's scale.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbPrimitiveTypeFacets.IsVariableSrid">
            <summary>
                Gets or sets an optional value indicating the current spatial type's SRID.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbPrimitiveTypeFacets.Srid">
            <summary>
                Gets or sets an optional value indicating the current spatial type's SRID.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbPrimitiveTypeFacets.IsStrict">
            <summary>
                Gets or sets an optional value indicating whether the spatial type is to be type checked strictly.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.DbSchemaMetadata">
            <summary>
                Allows the construction and modification of a database schema in a <see cref="T:System.Data.Entity.Edm.Db.DbDatabaseMetadata"/> database model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbSchemaMetadata.Tables">
            <summary>
                Gets or sets the collection of <see cref="T:System.Data.Entity.Edm.Db.DbTableMetadata"/> instances that specifies the tables declared within the schema.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.DbSchemaMetadataItem">
            <summary>
                DbSchemaMetadataItem is the base for all types that can be contained in a <see cref="T:System.Data.Entity.Edm.Db.DbSchemaMetadata"/> schema.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.DbTableColumnMetadata">
            <summary>
                Allows the construction and modification of a column in a <see cref="T:System.Data.Entity.Edm.Db.DbTableMetadata"/> table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbTableColumnMetadata.IsPrimaryKeyColumn">
            <summary>
                Gets or sets a value indicating whether the column is part of the table's primary key.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbTableColumnMetadata.StoreGeneratedPattern">
            <summary>
                Gets or sets a <see cref="T:System.Data.Entity.Edm.Db.DbStoreGeneratedPattern"/> value indicating if and how the value of the column is automatically generated.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbTableColumnMetadata.Collation">
            <summary>
                Gets or sets an optional value indicating the collation specific to this table column.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbTableColumnMetadata.DefaultValue">
            <summary>
                Gets or sets an optional value that specifies the default value for the column.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.DbTableMetadata">
            <summary>
                Allows the construction and modification a table in a <see cref="T:System.Data.Entity.Edm.Db.DbSchemaMetadata"/> database schema.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbTableMetadata.Columns">
            <summary>
                Gets or sets the collection of <see cref="T:System.Data.Entity.Edm.Db.DbTableColumnMetadata"/> instances that specifies the columns present within the table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbTableMetadata.KeyColumns">
            <summary>
                Gets or sets the collection of <see cref="T:System.Data.Entity.Edm.Db.DbTableColumnMetadata"/> instances from the <see cref="P:System.Data.Entity.Edm.Db.DbTableMetadata.Columns"/> collection of the table that are part of the primary key.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbTableMetadata.ForeignKeyConstraints">
            <summary>
                Gets or sets the collection of <see cref="T:System.Data.Entity.Edm.Db.DbForeignKeyConstraintMetadata"/> instances that defines the foreign key constraints sourced from the table.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.DbTypeMetadata">
            <summary>
                Represents a specific use of a type in a Database Metadata item.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbTypeMetadata.Facets">
            <summary>
                Gets or sets an optional <see cref="T:System.Data.Entity.Edm.Db.DbPrimitiveTypeFacets"/> instance that applies additional constraints to a referenced primitive type.
            </summary>
            <remarks>
                Accessing this property forces the creation of a DbPrimitiveTypeFacets value if no value has previously been set. Use <see cref="P:System.Data.Entity.Edm.Db.DbTypeMetadata.HasFacets"/> to determine whether or not this property currently has a value.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbTypeMetadata.IsCollection">
            <summary>
                Gets or sets a value indicating whether the represented type is a collection type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbTypeMetadata.IsNullable">
            <summary>
                Gets or sets an optional value indicating whether the referenced type should be considered nullable.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.DbTypeMetadata.IsRow">
            <summary>
                Gets a value indicating whether the type has been configured as a row type by the addition of one or more RowColumns.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.Mapping.DbAssociationEndMapping">
            <summary>
                Represents the mapping of an EDM association end ( <see cref="T:System.Data.Entity.Edm.EdmAssociationEnd"/> ) as a collection of property mappings ( <see cref="T:System.Data.Entity.Edm.Db.Mapping.DbEdmPropertyMapping"/> ).
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.Mapping.DbMappingMetadataItem">
            <summary>
                DbMappingMetadataItem is the base for all types in the EDM-to-Database Mapping construction and modification API that support annotation using <see cref="T:System.Data.Entity.Edm.Common.DataModelAnnotation"/> .
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.Mapping.DbMappingModelItem">
            <summary>
                DbMappingModelItem is the base for all types in the EDM-to-Database Mapping construction and modification API.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbMappingMetadataItem.Annotations">
            <summary>
                Gets or sets the currently assigned annotations.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbAssociationEndMapping.AssociationEnd">
            <summary>
                Gets an <see cref="T:System.Data.Entity.Edm.EdmAssociationEnd"/> value representing the association end that is being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbAssociationEndMapping.PropertyMappings">
            <summary>
                Gets the collection of <see cref="T:System.Data.Entity.Edm.Db.Mapping.DbEdmPropertyMapping"/> s that specifies how the association end key properties are mapped to the table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbAssociationSetMapping.AssociationSet">
            <summary>
                Gets an <see cref="T:System.Data.Entity.Edm.EdmAssociationSet"/> value representing the association set that is being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbAssociationSetMapping.Table">
            <summary>
                Gets a <see cref="T:System.Data.Entity.Edm.Db.DbTableMetadata"/> value representing the table to which the entity type's properties are being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbAssociationSetMapping.ColumnConditions">
            <summary>
                Gets the collection of <see cref="T:System.Data.Entity.Edm.Db.Mapping.DbColumnCondition"/> s that specifies the constant or null values that columns in <see cref="P:System.Data.Entity.Edm.Db.Mapping.DbAssociationSetMapping.Table"/> must have for this type mapping to apply.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.Mapping.DbColumnCondition">
            <summary>
                Allows the construction and modification of a condition for a column in a database table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbColumnCondition.Column">
            <summary>
                Gets or sets a <see cref="T:System.Data.Entity.Edm.Db.DbTableColumnMetadata"/> value representing the table column which must contain <see cref="P:System.Data.Entity.Edm.Db.Mapping.DbColumnCondition.Value"/> for this condition to hold.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbColumnCondition.Value">
            <summary>
                Gets or sets the value that <see cref="P:System.Data.Entity.Edm.Db.Mapping.DbColumnCondition.Column"/> must contain for this condition to hold.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbDatabaseMapping.Model">
            <summary>
                Gets or sets an <see cref="T:System.Data.Entity.Edm.EdmModel"/> value representing the model that is being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbDatabaseMapping.Database">
            <summary>
                Gets or sets a <see cref="T:System.Data.Entity.Edm.Db.DbDatabaseMetadata"/> value representing the database that is the target of the mapping.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbDatabaseMapping.EntityContainerMappings">
            <summary>
                Gets or sets the collection of <see cref="T:System.Data.Entity.Edm.Db.Mapping.DbEntityContainerMapping"/> s that specifies how the model's entity containers are mapped to the database.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.Mapping.DbEdmPropertyMapping">
            <summary>
                Represents the mapping of an entity property to a column in a database table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbEdmPropertyMapping.PropertyPath">
            <summary>
                Gets or sets the collection of <see cref="T:System.Data.Entity.Edm.EdmProperty"/> instances that defines the mapped property, beginning from a property declared by the mapped entity type and optionally proceeding through properties of complex property result types.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbEdmPropertyMapping.Column">
            <summary>
                Gets or sets a <see cref="T:System.Data.Entity.Edm.Db.DbTableColumnMetadata"/> value representing the table column to which the entity property is being mapped.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.Mapping.DbEntityContainerMapping">
            <summary>
                Allows the construction and modification of the mapping of an EDM entity container ( <see cref="T:System.Data.Entity.Edm.EdmEntityContainer"/> ) to a database ( <see cref="T:System.Data.Entity.Edm.Db.DbDatabaseMetadata"/> ).
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbEntityContainerMapping.EntityContainer">
            <summary>
                Gets or sets an <see cref="T:System.Data.Entity.Edm.EdmEntityContainer"/> value representing the entity container that is being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbEntityContainerMapping.EntitySetMappings">
            <summary>
                Gets or sets the collection of <see cref="T:System.Data.Entity.Edm.Db.Mapping.DbEntitySetMapping"/> s that specifies how the container's entity sets are mapped to the database.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbEntityContainerMapping.AssociationSetMappings">
            <summary>
                Gets the collection of <see cref="T:System.Data.Entity.Edm.Db.Mapping.DbAssociationSetMapping"/> s that specifies how the container's association sets are mapped to the database.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.Mapping.DbEntitySetMapping">
            <summary>
                Allows the construction and modification of the mapping of an EDM entity set ( <see cref="T:System.Data.Entity.Edm.EdmEntitySet"/> ) to a database ( <see cref="T:System.Data.Entity.Edm.Db.DbDatabaseMetadata"/> ).
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbEntitySetMapping.EntitySet">
            <summary>
                Gets or sets an <see cref="T:System.Data.Entity.Edm.EdmEntitySet"/> value representing the entity set that is being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbEntitySetMapping.EntityTypeMappings">
            <summary>
                Gets or sets the collection of <see cref="T:System.Data.Entity.Edm.Db.Mapping.DbEntityTypeMapping"/> s that specifies how the set's entity types are mapped to the database.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.Mapping.DbEntityTypeMapping">
            <summary>
                Allows the construction and modification of a complete or partial mapping of an EDM entity type ( <see cref="T:System.Data.Entity.Edm.EdmEntityType"/> ) or type hierarchy to a specific database table ( <see cref="T:System.Data.Entity.Edm.Db.DbTableMetadata"/> ).
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbEntityTypeMapping.EntityType">
            <summary>
                Gets or sets an <see cref="T:System.Data.Entity.Edm.EdmEntityType"/> value representing the entity type or hierarchy that is being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbEntityTypeMapping.IsHierarchyMapping">
            <summary>
                Gets or sets a value indicating whether this type mapping applies to <see cref="P:System.Data.Entity.Edm.Db.Mapping.DbEntityTypeMapping.EntityType"/> and all its direct or indirect subtypes ( <code>true</code> ), or only to <see cref="P:System.Data.Entity.Edm.Db.Mapping.DbEntityTypeMapping.EntityType"/> ( <code>false</code> ).
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbEntityTypeMappingFragment.Table">
            <summary>
                Gets a <see cref="T:System.Data.Entity.Edm.Db.DbTableMetadata"/> value representing the table to which the entity type's properties are being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbEntityTypeMappingFragment.PropertyMappings">
            <summary>
                Gets the collection of <see cref="T:System.Data.Entity.Edm.Db.Mapping.DbEdmPropertyMapping"/> s that specifies how the type's properties are mapped to the table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.Db.Mapping.DbEntityTypeMappingFragment.ColumnConditions">
            <summary>
                Gets the collection of <see cref="T:System.Data.Entity.Edm.Db.Mapping.DbColumnCondition"/> s that specifies the constant or null values that columns in <see cref="P:System.Data.Entity.Edm.Db.Mapping.DbEntityTypeMappingFragment.Table"/> must have for this type mapping fragment to apply.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Db.Mapping.DbMappingItemKind">
            <summary>
                Indicates which EDM-to-Database Mapping concept is represented by a given item.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.Mapping.DbMappingItemKind.DatabaseMapping">
            <summary>
                Database Mapping Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.Mapping.DbMappingItemKind.EntityContainerMapping">
            <summary>
                Entity Container Mapping Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.Mapping.DbMappingItemKind.EntitySetMapping">
            <summary>
                Entity Set Mapping Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.Mapping.DbMappingItemKind.AssociationSetMapping">
            <summary>
                Association Set Mapping Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.Mapping.DbMappingItemKind.EntityTypeMapping">
            <summary>
                Entity Type Mapping Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.Mapping.DbMappingItemKind.QueryViewMapping">
            <summary>
                Query View Mapping Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.Mapping.DbMappingItemKind.EntityTypeMappingFragment">
            <summary>
                Entity Type Mapping Fragment Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.Mapping.DbMappingItemKind.EdmPropertyMapping">
            <summary>
                Edm Property Mapping Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.Mapping.DbMappingItemKind.AssociationEndMapping">
            <summary>
                Association End Mapping Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.Mapping.DbMappingItemKind.ColumnCondition">
            <summary>
                Column Condition Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Db.Mapping.DbMappingItemKind.PropertyCondition">
            <summary>
                Property Condition Kind
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmAssociationConstraint">
            <summary>
                Allows the construction and modification of a constraint applied to an Entity Data Model (EDM) association.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmAssociationConstraint.DependentEnd">
            <summary>
                Gets or sets the <see cref="T:System.Data.Entity.Edm.EdmAssociationEnd"/> that represents the 'dependent' end of the constraint; properties from this association end's entity type contribute to the <see cref="P:System.Data.Entity.Edm.EdmAssociationConstraint.DependentProperties"/> collection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmAssociationConstraint.DependentProperties">
            <summary>
                Gets or sets the collection of <see cref="T:System.Data.Entity.Edm.EdmProperty"/> instances from the <see cref="P:System.Data.Entity.Edm.EdmAssociationConstraint.DependentEnd"/> of the constraint. The values of these properties are constrained against the primary key values of the remaining, 'principal' association end's entity type.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmAssociationEnd">
            <summary>
                Allows the construction and modification of one end of an Entity Data Model (EDM) association.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmAssociationEnd.EntityType">
            <summary>
                Gets or sets the entity type referenced by this association end.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmAssociationEnd.EndKind">
            <summary>
                Gets or sets the <see cref="T:System.Data.Entity.Edm.EdmAssociationEndKind"/> of this association end, which indicates the multiplicity of the end and whether or not it is required.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmAssociationEnd.DeleteAction">
            <summary>
                Gets or sets the <see cref="T:System.Data.Entity.Edm.EdmOperationAction"/> to take when a delete operation is attempted.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmAssociationEndKind">
            <summary>
                Indicates the multiplicity of an <see cref="T:System.Data.Entity.Edm.EdmAssociationEnd"/> and whether or not it is required.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmAssociationSet">
            <summary>
                Allows the construction and modification of an association set in an Entity Data Model (EDM) <see cref="T:System.Data.Entity.Edm.EdmEntityContainer"/> ).
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmEntityContainerItem">
            <summary>
                Represents an item in an Entity Data Model (EDM) <see cref="T:System.Data.Entity.Edm.EdmEntityContainer"/> .
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmAssociationSet.ElementType">
            <summary>
                Gets or sets the <see cref="T:System.Data.Entity.Edm.EdmAssociationType"/> that specifies the association type for the set.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmAssociationSet.SourceSet">
            <summary>
                Gets or sets the <see cref="T:System.Data.Entity.Edm.EdmEntitySet"/> that specifies the entity set corresponding to the <see cref="P:System.Data.Entity.Edm.EdmAssociationType.SourceEnd"/> association end for this association set.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmAssociationSet.TargetSet">
            <summary>
                Gets or sets the <see cref="T:System.Data.Entity.Edm.EdmEntitySet"/> that specifies the entity set corresponding to the <see cref="P:System.Data.Entity.Edm.EdmAssociationType.TargetEnd"/> association end for this association set.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Data.Entity.Edm.EdmAssociationType" -->
        <member name="T:System.Data.Entity.Edm.EdmStructuralType">
            <summary>
                The base for all all Entity Data Model (EDM) types that represent a structured type from the EDM type system.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmAssociationType.SourceEnd">
            <summary>
                Gets or sets the <see cref="T:System.Data.Entity.Edm.EdmAssociationEnd"/> that defines the source end of the association.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmAssociationType.TargetEnd">
            <summary>
                Gets or sets the <see cref="T:System.Data.Entity.Edm.EdmAssociationEnd"/> that defines the target end of the association.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmAssociationType.Constraint">
            <summary>
                Gets or sets the optional constraint that indicates whether the relationship is an independent association (no constraint present) or a foreign key relationship ( <see cref="T:System.Data.Entity.Edm.EdmAssociationConstraint"/> specified).
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmCollectionKind">
            <summary>
                Collection semantics for properties.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmCollectionKind.Default">
            <summary>
                The property does not have a collection type or does not specify explicit collection semantics.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmCollectionKind.Bag">
            <summary>
                The property is an unordered collection that may contain duplicates.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmCollectionKind.List">
            <summary>
                The property is an ordered collection that may contain duplicates.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmComplexType">
            <summary>
                Allows the construction and modification of a complex type in an Entity Data Model (EDM) <see cref="T:System.Data.Entity.Edm.EdmNamespace"/> .
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmComplexType.BaseType">
            <summary>
                Gets or sets the optional <see cref="T:System.Data.Entity.Edm.EdmComplexType"/> that indicates the base complex type of the complex type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmComplexType.IsAbstract">
            <summary>
                Gets or sets a value indicating whether the complex type is abstract.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmComplexType.DeclaredProperties">
            <summary>
                Gets or sets the collection of <see cref="T:System.Data.Entity.Edm.EdmProperty"/> instances that describe the (scalar or complex) properties of the complex type.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmConcurrencyMode">
            <summary>
                Concurrency mode for properties.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmConcurrencyMode.None">
            <summary>
                Default concurrency mode: the property is never validated at write time
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmConcurrencyMode.Fixed">
            <summary>
                Fixed concurrency mode: the property is always validated at write time
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmEntityContainer">
            <summary>
                Allows the construction and modification of an entity container in an Entity Data Model (EDM) <see cref="T:System.Data.Entity.Edm.EdmModel"/> .
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmEntityContainer.ContainerItems">
            <summary>
                Gets all <see cref="T:System.Data.Entity.Edm.EdmEntityContainerItem"/> s declared within the namspace. Includes <see cref="T:System.Data.Entity.Edm.EdmAssociationSet"/> s and <see cref="T:System.Data.Entity.Edm.EdmEntitySet"/> s.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmEntityContainer.AssociationSets">
            <summary>
                Gets or sets the collection of <see cref="T:System.Data.Entity.Edm.EdmAssociationSet"/> s that specifies the association sets within the container.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmEntityContainer.EntitySets">
            <summary>
                Gets or sets the collection of <see cref="T:System.Data.Entity.Edm.EdmEntitySet"/> s that specifies the entity sets within the container.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmEntitySet">
            <summary>
                Allows the construction and modification of an entity set in an Entity Data Model (EDM) <see cref="T:System.Data.Entity.Edm.EdmEntityContainer"/> .
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmEntitySet.ElementType">
            <summary>
                Gets or sets the <see cref="T:System.Data.Entity.Edm.EdmEntityType"/> that specifies the entity type for the set.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmEntityType">
            <summary>
                Allows the construction and modification of an entity type in an Entity Data Model (EDM) <see cref="T:System.Data.Entity.Edm.EdmNamespace"/> .
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmEntityType.BaseType">
            <summary>
                Gets or sets the optional <see cref="T:System.Data.Entity.Edm.EdmEntityType"/> that indicates the base entity type of the entity type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmEntityType.IsAbstract">
            <summary>
                Gets or sets a value indicating whether the entity type is abstract.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmEntityType.DeclaredProperties">
            <summary>
                Gets or sets the collection of <see cref="T:System.Data.Entity.Edm.EdmProperty"/> s that specifies the properties declared by the entity type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmEntityType.DeclaredKeyProperties">
            <summary>
                Gets or sets the collection of <see cref="T:System.Data.Entity.Edm.EdmProperty"/> s that indicates which properties from the <see cref="P:System.Data.Entity.Edm.EdmEntityType.DeclaredProperties"/> collection are part of the entity key.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmEntityType.DeclaredNavigationProperties">
            <summary>
                Gets or sets the optional collection of <see cref="T:System.Data.Entity.Edm.EdmNavigationProperty"/> s that specifies the navigation properties declared by the entity type.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmItemKind">
            <summary>
                Indicates which Entity Data Model (EDM) concept is represented by a given item.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.AssociationEnd">
            <summary>
                Association End Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.AssociationSet">
            <summary>
                Association Set Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.AssociationType">
            <summary>
                Association Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.CollectionType">
            <summary>
                Collection Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.ComplexType">
            <summary>
                Complex Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.EntityContainer">
            <summary>
                Entity Container Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.EntitySet">
            <summary>
                Entity Set Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.EntityType">
            <summary>
                Entity Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.FunctionGroup">
            <summary>
                Function Group Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.FunctionOverload">
            <summary>
                Function Overload Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.FunctionImport">
            <summary>
                Function Import Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.FunctionParameter">
            <summary>
                Function Parameter Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.NavigationProperty">
            <summary>
                Navigation Property Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.Property">
            <summary>
                EdmProperty Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.AssociationConstraint">
            <summary>
                Association Constraint Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.RefType">
            <summary>
                Ref Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.RowColumn">
            <summary>
                Row Column Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.RowType">
            <summary>
                Row Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.TypeReference">
            <summary>
                Type Reference Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.Model">
            <summary>
                Model Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.Namespace">
            <summary>
                Namespace Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.PrimitiveFacets">
            <summary>
                Primitive Facets Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.PrimitiveType">
            <summary>
                Primitive Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.EnumType">
            <summary>
                Enum Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmItemKind.EnumTypeMember">
            <summary>
                Enum Type Member Kind
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmModel">
            <summary>
                EdmModel is the top-level container for namespaces and entity containers belonging to the same logical Entity Data Model (EDM) model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmModel.Version">
            <summary>
                Gets or sets an optional value that indicates the entity model version.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmModel.Containers">
            <summary>
                Gets or sets the containers declared within the model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmModel.Namespaces">
            <summary>
                Gets or sets the namespaces declared within the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmNamespace">
            <summary>
                Allows the construction and modification of a namespace in an <see cref="T:System.Data.Entity.Edm.EdmModel"/> .
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmNamespace.NamespaceItems">
            <summary>
                Gets all <see cref="T:System.Data.Entity.Edm.EdmNamespaceItem"/> s declared within the namspace. Includes <see cref="T:System.Data.Entity.Edm.EdmAssociationType"/> s, <see cref="T:System.Data.Entity.Edm.EdmComplexType"/> s, <see cref="T:System.Data.Entity.Edm.EdmEntityType"/> s.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmNamespace.AssociationTypes">
            <summary>
                Gets or sets the <see cref="T:System.Data.Entity.Edm.EdmAssociationType"/> s declared within the namespace.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmNamespace.ComplexTypes">
            <summary>
                Gets or sets the <see cref="T:System.Data.Entity.Edm.EdmComplexType"/> s declared within the namespace.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmNamespace.EntityTypes">
            <summary>
                Gets or sets the <see cref="T:System.Data.Entity.Edm.EdmEntityType"/> s declared within the namespace.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmNavigationProperty">
            <summary>
                Allows the construction and modification of an Entity Data Model (EDM) navigation property.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmNavigationProperty.Association">
            <summary>
                Gets or sets the <see cref="T:System.Data.Entity.Edm.EdmAssociationType"/> that specifies the association over which navigation takes place.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmNavigationProperty.ResultEnd">
            <summary>
                Gets or sets the <see cref="T:System.Data.Entity.Edm.EdmAssociationEnd"/> that specifies which association end is the 'destination' end of the navigation and produces the navigation property result.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmOperationAction">
            <summary>
                Specifies the action to take on a given operation. <seealso cref="P:System.Data.Entity.Edm.EdmAssociationEnd.DeleteAction"/>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmOperationAction.None">
            <summary>
                Default behavior
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmOperationAction.Restrict">
            <summary>
                Restrict the operation
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmOperationAction.Cascade">
            <summary>
                Cascade the operation
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmPrimitiveType">
            <summary>
                Represents one of the fixed set of Entity Data Model (EDM) primitive types.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmScalarType">
            <summary>
                The base for all all Entity Data Model (EDM) types that represent a scalar type from the EDM type system.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Edm.EdmPrimitiveType.TryGetByName(System.String,System.Data.Entity.Edm.EdmPrimitiveType@)">
            <summary>
                Retrieves the EdmPrimitiveType instance with the <see cref="T:System.Data.Entity.Edm.EdmPrimitiveTypeKind"/> corresponding to the specified <paramref name="primitiveTypeName"/> value, if any.
            </summary>
            <param name="primitiveTypeName"> The name of the primitive type instance to retrieve </param>
            <param name="primitiveType"> The EdmPrimitiveType with the specified name, if successful; otherwise <c>null</c> . </param>
            <returns> <c>true</c> if the given name corresponds to an EDM primitive type name; otherwise <c>false</c> . </returns>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveType.Binary">
            <summary>
                Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Binary"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveType.Boolean">
            <summary>
                Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Boolean"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveType.Byte">
            <summary>
                Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Byte"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveType.DateTime">
            <summary>
                Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.DateTime"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveType.DateTimeOffset">
            <summary>
                Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.DateTimeOffset"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveType.Decimal">
            <summary>
                Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Decimal"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveType.Double">
            <summary>
                Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Double"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveType.Guid">
            <summary>
                Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Guid"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveType.Int16">
            <summary>
                Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Int16"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveType.Int32">
            <summary>
                Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Int32"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveType.Int64">
            <summary>
                Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Int64"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveType.SByte">
            <summary>
                Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.SByte"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveType.Single">
            <summary>
                Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Single"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveType.String">
            <summary>
                Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.String"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveType.Time">
            <summary>
                Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Time"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveType.PrimitiveTypeKind">
            <summary>
                Gets an <see cref="T:System.Data.Entity.Edm.EdmPrimitiveTypeKind"/> value that indicates which Entity Data Model (EDM) primitive type this type represents.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmPrimitiveTypeFacets">
            <summary>
                Allows the construction and modification of additional constraints that can be applied to a specific use of a primitive type in an Entity Data Model (EDM) item. See <see cref="T:System.Data.Entity.Edm.EdmTypeReference"/> .
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveTypeFacets.HasValue">
            <summary>
                Returns <code>true</code> if any facet value property currently has a non-null value; otherwise returns <code>false</code> .
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveTypeFacets.MaxLength">
            <summary>
                Gets or sets an optional value indicating the current constraint on the type's maximum length.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveTypeFacets.IsMaxLength">
            <summary>
                Gets or sets an optional value indicating whether the referenced type should be considered to have its intrinsic maximum length, rather than a specific value.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveTypeFacets.IsFixedLength">
            <summary>
                Gets or sets an optional value indicating whether the referenced type should be considered to have a fixed or variable length.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveTypeFacets.IsUnicode">
            <summary>
                Gets or sets an optional value indicating whether the referenced type should be considered to be Unicode or non-Unicode.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveTypeFacets.Precision">
            <summary>
                Gets or sets an optional value indicating the current constraint on the type's precision.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveTypeFacets.Scale">
            <summary>
                Gets or sets an optional value indicating the current constraint on the type's scale.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveTypeFacets.IsVariableSrid">
            <summary>
                Gets or sets an optional value indicating that the current spatial type's SRID is unconstrained.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveTypeFacets.Srid">
            <summary>
                Gets or sets an optional value indicating the current spatial type's SRID.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmPrimitiveTypeFacets.IsStrict">
            <summary>
                Gets or sets an optional value indicating whether the spatial type is to be type checked strictly.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmPrimitiveTypeKind">
            <summary>
                Primitive Types as defined by the Entity Data Model (EDM).
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Binary">
            <summary>
                Binary Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Boolean">
            <summary>
                Boolean Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Byte">
            <summary>
                Byte Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.DateTime">
            <summary>
                DateTime Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Decimal">
            <summary>
                Decimal Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Double">
            <summary>
                Double Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Guid">
            <summary>
                Guid Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Single">
            <summary>
                Single Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.SByte">
            <summary>
                SByte Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Int16">
            <summary>
                Int16 Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Int32">
            <summary>
                Int32 Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Int64">
            <summary>
                Int64 Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.String">
            <summary>
                String Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Time">
            <summary>
                Time Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.DateTimeOffset">
            <summary>
                DateTimeOffset Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Geometry">
            <summary>
                Geometry Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.Geography">
            <summary>
                Geography Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.GeometricPoint">
            <summary>
                Geometric point type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.GeometricLinestring">
            <summary>
                Geometric linestring type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.GeometricPolygon">
            <summary>
                Geometric polygon type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.GeometricMultiPoint">
            <summary>
                Geometric multi-point type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.GeometricMultiLinestring">
            <summary>
                Geometric multi-linestring type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.GeometricMultiPolygon">
            <summary>
                Geometric multi-polygon type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.GeometryCollection">
            <summary>
                Geometric collection type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.GeographicPoint">
            <summary>
                Geographic point type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.GeographicLinestring">
            <summary>
                Geographic linestring type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.GeographicPolygon">
            <summary>
                Geographic polygon type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.GeographicMultiPoint">
            <summary>
                Geographic multi-point type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.GeographicMultiLinestring">
            <summary>
                Geographic multi-linestring type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.GeographicMultiPolygon">
            <summary>
                Geographic multi-polygon type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.EdmPrimitiveTypeKind.GeographyCollection">
            <summary>
                Geographic collection type kind
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmProperty">
            <summary>
                Allows the construction and modification of a primitive- or complex-valued property of an Entity Data Model (EDM) entity or complex type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmProperty.CollectionKind">
            <summary>
                Gets or sets an <see cref="T:System.Data.Entity.Edm.EdmCollectionKind"/> value that indicates which collection semantics - if any - apply to the property.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmProperty.ConcurrencyMode">
            <summary>
                Gets or sets a <see cref="T:System.Data.Entity.Edm.EdmConcurrencyMode"/> value that indicates whether the property is used for concurrency validation.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmProperty.DefaultValue">
            <summary>
                Gets or sets on optional value that indicates an initial default value for the property.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmProperty.PropertyType">
            <summary>
                Gets or sets an <see cref="T:System.Data.Entity.Edm.EdmTypeReference"/> that specifies the result type of the property.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmStructuralTypeMemberCollection">
            <summary>
                Enumerates all <see cref="T:System.Data.Entity.Edm.EdmStructuralMember"/> s declared or inherited by an <see cref="T:System.Data.Entity.Edm.EdmStructuralType"/> .
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.EdmTypeReference">
            <summary>
                Allows the construction and modification of a specific use of a type in an Entity Data Model (EDM) item. See <see cref="P:System.Data.Entity.Edm.EdmProperty.PropertyType"/> for examples.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmTypeReference.CollectionRank">
            <summary>
                Gets or sets a value indicating the collection rank of the type reference. A collection rank greater than zero indicates that the type reference represents a collection of its referenced <see cref="P:System.Data.Entity.Edm.EdmTypeReference.EdmType"/> .
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmTypeReference.EdmType">
            <summary>
                Gets or sets a value indicating the <see cref="T:System.Data.Entity.Edm.EdmDataModelType"/> referenced by this type reference.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmTypeReference.IsNullable">
            <summary>
                Gets or sets an optional value indicating whether the referenced type should be considered nullable.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmTypeReference.PrimitiveTypeFacets">
            <summary>
                Gets or sets an optional <see cref="T:System.Data.Entity.Edm.EdmPrimitiveTypeFacets"/> instance that applies additional constraints to a referenced primitive type.
            </summary>
            <remarks>
                Accessing this property forces the creation of an EdmPrimitiveTypeFacets value if no value has previously been set. Use <see cref="P:System.Data.Entity.Edm.EdmTypeReference.HasFacets"/> to determine whether or not this property currently has a value.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmTypeReference.HasFacets">
            <summary>
                Gets a value indicating whether the <see cref="P:System.Data.Entity.Edm.EdmTypeReference.PrimitiveTypeFacets"/> property of this type reference has been assigned an <see cref="T:System.Data.Entity.Edm.EdmPrimitiveTypeFacets"/> value with at least one facet value specified.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmTypeReference.IsCollectionType">
            <summary>
                Indicates whether this type reference represents a collection of its referenced <see cref="P:System.Data.Entity.Edm.EdmTypeReference.EdmType"/> (when <see cref="P:System.Data.Entity.Edm.EdmTypeReference.CollectionRank"/> is greater than zero) or not.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmTypeReference.IsComplexType">
            <summary>
                Indicates whether the <see cref="P:System.Data.Entity.Edm.EdmTypeReference.EdmType"/> property of this type reference currently refers to an <see cref="T:System.Data.Entity.Edm.EdmComplexType"/> , is not a collection type, and does not have primitive facet values specified.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmTypeReference.ComplexType">
            <summary>
                Gets the <see cref="T:System.Data.Entity.Edm.EdmComplexType"/> currently referred to by this type reference, or <code>null</code> if the type reference is a collection type or does not refer to a complex type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmTypeReference.IsPrimitiveType">
            <summary>
                Indicates whether the <see cref="P:System.Data.Entity.Edm.EdmTypeReference.EdmType"/> property of this type reference currently refers to an <see cref="T:System.Data.Entity.Edm.EdmPrimitiveType"/> and is not a collection type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Edm.EdmTypeReference.PrimitiveType">
            <summary>
                Gets the <see cref="T:System.Data.Entity.Edm.EdmPrimitiveType"/> currently referred to by this type reference, or <code>null</code> if the type reference is a collection type or does not refer to a primitive type.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Internal.EdmConstants">
            <summary>
                Contains constant values that apply to the EDM model, regardless of source (for CSDL specific constants see <see cref="T:System.Data.Entity.Edm.Parsing.Xml.Internal.Csdl.CsdlConstants"/> ).
            </summary>
        </member>
        <member name="M:System.Data.Entity.Edm.Internal.EdmUtil.IsValidLanguageIndependentIdentifier(System.String)">
            <summary>
                Parsing code taken from System.dll's System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(string) method to avoid LinkDemand needed to call this method
            </summary>
        </member>
        <member name="M:System.Data.Entity.Edm.Internal.EdmUtil.IsValidUndottedName(System.String)">
            <summary>
            </summary>
            <param name = "name"> </param>
            <returns> </returns>
        </member>
        <member name="T:System.Data.Entity.Edm.Parsing.Xml.Internal.Csdl.CsdlConstants">
            <summary>
                Constants for CSDL XML.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Parsing.Xml.Internal.Msl.MslConstants">
            <summary>
                Constants for C-S MSL XML.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Parsing.Xml.Internal.Ssdl.SsdlConstants">
            <summary>
                Constants for SSDL XML.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode">
            <summary>
                The acceptable range for this enum is 0000 - 0999; the range 10,000-15,000 is reserved for tools.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidErrorCodeValue">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.SecurityError">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.IOException">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.XmlError">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.TooManyErrors">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.MalformedXml">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.UnexpectedXmlNodeType">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.UnexpectedXmlAttribute">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.UnexpectedXmlElement">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.TextNotAllowed">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.EmptyFile">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.XsdError">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidAlias">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.MissingAttribute">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.IntegerExpected">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidName">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.AlreadyDefined">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.ElementNotInSchema">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidBaseType">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.NoConcreteDescendants">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.CycleInTypeHierarchy">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidVersionNumber">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidSize">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidBoolean">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.BadType">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidVersioningClass">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidVersionIntroduced">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.BadNamespace">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.UnresolvedReferenceSchema">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.NotInNamespace">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.NotUnnestedType">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.BadProperty">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.UndefinedProperty">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidPropertyType">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidAsNestedType">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidChangeUnit">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.UnauthorizedAccessException">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.PrecisionOutOfRange">
            <summary>
                Precision out of range
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.ScaleOutOfRange">
            <summary>
                Scale out of range
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.DefaultNotAllowed">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidDefault">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.RequiredFacetMissing">
            <summary>
                One of the required facets is missing
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.BadImageFormatException">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.MissingSchemaXml">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.BadPrecisionAndScale">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidChangeUnitUsage">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.NameTooLong">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.CircularlyDefinedType">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidAssociation">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.FacetNotAllowedByType">
            <summary>
                The facet isn't allow by the property type.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.ConstantFacetSpecifiedInSchema">
            <summary>
                This facet value is constant and is specified in the schema
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.BadNavigationProperty">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidKey">
            <summary>
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidMultiplicity">
            <summary>
                Multiplicity value was malformed
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidAction">
            <summary>
                The value for the Action attribute is invalid or not allowed in the current context
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidOperation">
            <summary>
                An error occurred processing the On&lt;Operation&gt; elements
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidContainerTypeForEnd">
            <summary>
                Ends were given for the Property element of a EntityContainer that is not a RelationshipSet
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidEndEntitySet">
            <summary>
                The extent name used in the EntittyContainerType End does not match the name of any of the EntityContainerProperties in the containing EntityContainer
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.AmbiguousEntityContainerEnd">
            <summary>
                An end element was not given, and cannot be inferred because too many EntityContainerEntitySet elements that are good possibilities.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.MissingExtentEntityContainerEnd">
            <summary>
                An end element was not given, and cannot be inferred because there is no EntityContainerEntitySets that are the correct type to be used as an EntitySet.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.BadParameterDirection">
            <summary>
                Not a valid parameter direction for the parameter in a function
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.FailedInference">
            <summary>
                Unable to infer an optional schema part, to resolve this; be more explicit
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidFacetInProviderManifest">
            <summary>
                Invalid facet attribute(s) specified in provider manifest
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidRoleInRelationshipConstraint">
            <summary>
                Invalid role value in the relationship constraint
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidPropertyInRelationshipConstraint">
            <summary>
                Invalid Property in relationship constraint
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.TypeMismatchRelationshipConstraint">
            <summary>
                Type mismatch between ToProperty and FromProperty in the relationship constraint
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidMultiplicityInRoleInRelationshipConstraint">
            <summary>
                Invalid multiplicity in FromRole in the relationship constraint
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.MismatchNumberOfPropertiesInRelationshipConstraint">
            <summary>
                The number of properties in the FromProperty and ToProperty in the relationship constraint must be identical
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.MissingPropertyInRelationshipConstraint">
            <summary>
                No Properties defined in either FromProperty or ToProperty in the relationship constraint
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.MissingConstraintOnRelationshipType">
            <summary>
                Missing constraint in relationship type in ssdl
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.SameRoleReferredInReferentialConstraint">
            <summary>
                Same role referred in the ToRole and FromRole of a referential constraint
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidValueForParameterTypeSemantics">
            <summary>
                Invalid value for attribute ParameterTypeSemantics
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidRelationshipEndType">
            <summary>
                Invalid type used for a Relationship End Type
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidPrimitiveTypeKind">
            <summary>
                Invalid PrimitiveTypeKind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidTypeConversionDestinationType">
            <summary>
                Invalid TypeConversion DestinationType
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.ByteValueExpected">
            <summary>
                Expected a integer value between 0 - 255
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.FunctionWithNonScalarTypeNotSupported">
            <summary>
                Invalid Type specified in function
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.PrecisionMoreThanAllowedMax">
            <summary>
                Precision must not be greater than 28
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.EntityKeyMustBeScalar">
            <summary>
                Properties that are part of entity key must be of scalar type
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.BinaryEntityKeyCurrentlyNotSupported">
            <summary>
                Binary type properties which are part of entity key are currently not supported
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.NoPreferredMappingForPrimitiveTypeKind">
            <summary>
                The primitive type kind does not have a preferred mapping
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.TooManyPreferredMappingsForPrimitiveTypeKind">
            <summary>
                More than one PreferredMapping for a PrimitiveTypeKind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.EndWithManyMultiplicityCannotHaveOperationsSpecified">
            <summary>
                End with * multiplicity cannot have operations specified
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.EntitySetTypeHasNoKeys">
            <summary>
                EntitySet type has no keys
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidNumberOfParametersForAggregateFunction">
            <summary>
                InvalidNumberOfParametersForAggregateFunction
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidParameterTypeForAggregateFunction">
            <summary>
                InvalidParameterTypeForAggregateFunction
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.ComposableFunctionWithoutReturnType">
            <summary>
                Composable functions must declare a return type.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.NonComposableFunctionWithReturnType">
            <summary>
                Non-composable functions must not declare a return type.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.NonComposableFunctionAttributesNotValid">
            <summary>
                Non-composable functions do not permit the aggregate; niladic; or built-in attributes.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.ComposableFunctionWithCommandText">
            <summary>
                Composable functions can not include command text attribute.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.FunctionDeclaresCommandTextAndStoreFunctionName">
            <summary>
                Functions should not declare both a store name and command text (only one or the other can be used).
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.SystemNamespace">
            <summary>
                SystemNamespace
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.EmptyDefiningQuery">
            <summary>
                Empty DefiningQuery text
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.TableAndSchemaAreMutuallyExclusiveWithDefiningQuery">
            <summary>
                Schema, Table and DefiningQuery are all specified, and are mutually exclusive
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidConcurrencyMode">
            <summary>
                ConcurrencyMode value was malformed
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.ConcurrencyRedefinedOnSubTypeOfEntitySetType">
            <summary>
                Concurrency can't change for any sub types of an EntitySet type.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.FunctionImportUnsupportedReturnType">
            <summary>
                Function import return type must be either empty, a collection of entities, or a singleton scalar.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.FunctionImportUnknownEntitySet">
            <summary>
                Function import specifies a non-existent entity set.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.FunctionImportReturnsEntitiesButDoesNotSpecifyEntitySet">
            <summary>
                Function import specifies entity type return but no entity set.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.FunctionImportEntityTypeDoesNotMatchEntitySet">
            <summary>
                Function import specifies entity type that does not derive from element type of entity set.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.FunctionImportSpecifiesEntitySetButDoesNotReturnEntityType">
            <summary>
                Function import specifies a binding to an entity set but does not return entities.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InternalError">
            <summary>
                InternalError
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.SimilarRelationshipEnd">
            <summary>
                Same Entity Set Taking part in the same role of the relationship set in two different relationship sets
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.DuplicatePropertySpecifiedInEntityKey">
            <summary>
                Entity key refers to the same property twice
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.AmbiguousFunctionReturnType">
            <summary>
                Function declares a ReturnType attribute and element
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.NullableComplexType">
            <summary>
                Nullable Complex Type not supported in Edm V1
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.NonComplexCollections">
            <summary>
                Only Complex Collections supported in Edm V1.1
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.KeyMissingOnEntityType">
            <summary>
                No Key defined on Entity Type
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidNamespaceInUsing">
            <summary>
                Invalid namespace specified in using element
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.NeedNotUseSystemNamespaceInUsing">
            <summary>
                Need not specify system namespace in using
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.CannotUseSystemNamespaceAsAlias">
            <summary>
                Cannot use a reserved/system namespace as alias
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidNamespaceName">
            <summary>
                Invalid qualification specified for type
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidEntityContainerNameInExtends">
            <summary>
                Invalid Entity Container Name in extends attribute
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidCollectionKind">
            <summary>
                Invalid CollectionKind value in property CollectionKind attribute
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidNamespaceOrAliasSpecified">
            <summary>
                Must specify namespace or alias of the schema in which this type is defined
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.EntityContainerCannotExtendItself">
            <summary>
                Entity Container cannot extend itself
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.FailedToRetrieveProviderManifest">
            <summary>
                Failed to retrieve provider manifest
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.ProviderManifestTokenMismatch">
            <summary>
                Mismatched Provider Manifest token values in SSDL artifacts
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.ProviderManifestTokenNotFound">
            <summary>
                Missing Provider Manifest token value in SSDL artifact(s)
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.EmptyCommandText">
            <summary>
                Empty CommandText element
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InconsistentProvider">
            <summary>
                Inconsistent Provider values in SSDL artifacts
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InconsistentProviderManifestToken">
            <summary>
                Inconsistent Provider Manifest token values in SSDL artifacts
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.DuplicatedFunctionoverloads">
            <summary>
                Duplicated Function overloads
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidProvider">
            <summary>
                InvalidProvider
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.FunctionWithNonEdmTypeNotSupported">
            <summary>
                FunctionWithNonEdmTypeNotSupported
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.ComplexTypeAsReturnTypeAndDefinedEntitySet">
            <summary>
                ComplexTypeAsReturnTypeAndDefinedEntitySet
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.ComplexTypeAsReturnTypeAndNestedComplexProperty">
            <summary>
                ComplexTypeAsReturnTypeAndDefinedEntitySet
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.FacetOnNonScalarType">
            unused 179,
            unused 180,
            unused 181,
            <summary>
                In model functions facet attribute is allowed only on ScalarTypes
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.IncorrectlyPlacedFacet">
            <summary>
                Captures several conditions where facets are placed on element where it should not exist.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.ReturnTypeNotDeclared">
            <summary>
                Return type has not been declared
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidValueInEnumOption">
            <summary>
                Invalid value in the EnumTypeOption
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.NoCodeGenNamespaceInStructuralAnnotation">
            <summary>
                The structural annotation cannot use codegen namespaces
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.AmbiguousFunctionAndType">
            <summary>
                Function and type cannot have the same fully qualified name
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.CannotLoadDifferentVersionOfSchemaInTheSameItemCollection">
            <summary>
                Cannot load different version of schema in the same ItemCollection
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.BoolValueExpected">
            <summary>
                Expected bool value
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.EndWithoutMultiplicity">
            <summary>
                End without Multiplicity specified
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.TVFReturnTypeRowHasNonScalarProperty">
            <summary>
                In SSDL, if composable function returns a collection of rows (TVF), all row properties must be of scalar types.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.EdmModel_NameMustNotBeEmptyOrWhiteSpace">
            <summary>
                The name of NamedEdmItem must not be empty or white space only
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Parsing.Xml.Internal.XmlErrorCode.EdmAssociationType_AssocationEndMustNotBeNull">
            <summary>
                EdmTypeReference is empty
            </summary>
            Unused 199;
        </member>
        <member name="T:System.Data.Entity.Edm.Serialization.CsdlSerializer">
            <summary>
                Serializes an <see cref="T:System.Data.Entity.Edm.EdmModel"/> that conforms to the restrictions of a single CSDL schema file to an XML writer. The model to be serialized must contain a single <see cref="T:System.Data.Entity.Edm.EdmNamespace"/> and a single <see cref="T:System.Data.Entity.Edm.EdmEntityContainer"/> .
            </summary>
        </member>
        <member name="M:System.Data.Entity.Edm.Serialization.CsdlSerializer.Serialize(System.Data.Entity.Edm.EdmModel,System.Xml.XmlWriter)">
            <summary>
                Serialize the <see cref="T:System.Data.Entity.Edm.EdmModel"/> to the XmlWriter.
            </summary>
            <param name="model"> The EdmModel to serialize, mut have only one <see cref="T:System.Data.Entity.Edm.EdmNamespace"/> and one <see cref="T:System.Data.Entity.Edm.EdmEntityContainer"/> </param>
            <param name="xmlWriter"> The XmlWriter to serialize to </param>
        </member>
        <member name="M:System.Data.Entity.Edm.Serialization.MslSerializer.Serialize(System.Data.Entity.Edm.Db.Mapping.DbDatabaseMapping,System.Xml.XmlWriter)">
            <summary>
                Serialize the <see cref="T:System.Data.Entity.Infrastructure.DbModel"/> to the XmlWriter
            </summary>
            <param name="databaseMapping"> The DbModel to serialize </param>
            <param name="xmlWriter"> The XmlWriter to serialize to </param>
        </member>
        <member name="M:System.Data.Entity.Edm.Serialization.SsdlSerializer.Serialize(System.Data.Entity.Edm.Db.DbDatabaseMetadata,System.String,System.String,System.Xml.XmlWriter)">
            <summary>
                Serialize the <see cref="T:System.Data.Entity.Edm.Db.DbDatabaseMetadata"/> to the <see cref="T:System.Xml.XmlWriter"/>
            </summary>
            <param name="dbDatabase"> The DbDatabaseMetadata to serialize </param>
            <param name="provider"> Provider information on the Schema element </param>
            <param name="providerManifestToken"> ProviderManifestToken information on the Schema element </param>
            <param name="xmlWriter"> The XmlWriter to serialize to </param>
            <returns> </returns>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndAuthorEmail">
            <summary>
                author/email
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndAuthorName">
            <summary>
                author/name
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndAuthorUri">
            <summary>
                author/uri
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndPublished">
            <summary>
                published
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndRights">
            <summary>
                rights
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndSummary">
            <summary>
                summary
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndTitle">
            <summary>
                title
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndContributorEmail">
            <summary>
                contributor/email
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndContributorName">
            <summary>
                contributor/name
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndContributorUri">
            <summary>
                contributor/uri
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndCategoryLabel">
            <summary>
                category/@label
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndContentKindPlaintext">
            <summary>
                Plaintext
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndContentKindHtml">
            <summary>
                HTML
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndContentKindXHtml">
            <summary>
                XHTML
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndUpdated">
            <summary>
                updated
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndLinkHref">
            <summary>
                link/@href
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndLinkRel">
            <summary>
                link/@rel
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndLinkType">
            <summary>
                link/@type
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndLinkHrefLang">
            <summary>
                link/@hreflang
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndLinkTitle">
            <summary>
                link/@title
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndLinkLength">
            <summary>
                link/@length
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndCategoryTerm">
            <summary>
                category/@term
            </summary>
        </member>
        <member name="F:System.Data.Entity.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndCategoryScheme">
            <summary>
                category/@scheme
            </summary>
        </member>
        <member name="M:System.Data.Entity.Edm.Serialization.Xml.Internal.Ssdl.DbModelSsdlHelper.GetRoleNamePair(System.Data.Entity.Edm.Db.DbTableMetadata,System.Data.Entity.Edm.Db.DbTableMetadata)">
            <summary>
                Return role name pair
            </summary>
            <param name = "firstTable"> </param>
            <param name = "secondTable"> </param>
            <returns> </returns>
        </member>
        <member name="T:System.Data.Entity.Edm.Validation.Internal.DataModelValidationContext">
            <summary>
                The context for DataModel Validation
            </summary>
        </member>
        <member name="M:System.Data.Entity.Edm.Validation.Internal.DataModelValidationHelper.AreRelationshipEndsEqual(System.Collections.Generic.KeyValuePair{System.Data.Entity.Edm.EdmAssociationSet,System.Data.Entity.Edm.EdmEntitySet},System.Collections.Generic.KeyValuePair{System.Data.Entity.Edm.EdmAssociationSet,System.Data.Entity.Edm.EdmEntitySet})">
            <summary>
                Returns true if the given two ends are similar - the relationship type that this ends belongs to is the same and the entity set refered by the ends are same and they are from the same role
            </summary>
            <param name = "left"> </param>
            <param name = "right"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Data.Entity.Edm.Validation.Internal.DataModelValidationHelper.IsReferentialConstraintReadyForValidation(System.Data.Entity.Edm.EdmAssociationType)">
            <summary>
                Return true if the Referential Constraint on the association is ready for further validation, otherwise return false.
            </summary>
            <param name = "association"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Data.Entity.Edm.Validation.Internal.DataModelValidationHelper.IsKeyProperty(System.Collections.Generic.List{System.Data.Entity.Edm.EdmProperty},System.Data.Entity.Edm.EdmAssociationEnd,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
                Resolves the given property names to the property in the item Also checks whether the properties form the key for the given type and whether all the properties are nullable or not
            </summary>
            <param name = "roleProperties"> </param>
            <param name = "roleElement"> </param>
            <param name = "isKeyProperty"> </param>
            <param name = "areAllPropertiesNullable"> </param>
            <param name = "isAnyPropertyNullable"> </param>
            <param name = "isSubsetOfKeyProperties"> </param>
        </member>
        <member name="M:System.Data.Entity.Edm.Validation.Internal.DataModelValidationHelper.IsEdmSystemNamespace(System.String)">
            <summary>
                Return true if the namespaceName is a Edm System Namespace
            </summary>
            <param name = "namespaceName"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Data.Entity.Edm.Validation.Internal.DataModelValidationHelper.TypeIsSubTypeOf(System.Data.Entity.Edm.EdmEntityType,System.Collections.Generic.Dictionary{System.Data.Entity.Edm.EdmEntityType,System.Data.Entity.Edm.EdmEntitySet},System.Data.Entity.Edm.EdmEntitySet@)">
            <summary>
                Return true if the entityType is a subtype of any entity type in the dictionary keys, and return the corresponding entry EntitySet value. Otherwise return false.
            </summary>
            <param name = "entityType"> </param>
            <param name = "baseEntitySetTypes"> </param>
            <param name = "set"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Data.Entity.Edm.Validation.Internal.DataModelValidationHelper.IsTypeDefinesNewConcurrencyProperties(System.Data.Entity.Edm.EdmEntityType)">
            <summary>
                Return true if any of the properties in the EdmEntityType defines ConcurrencyMode. Otherwise return false.
            </summary>
            <param name = "entityType"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Data.Entity.Edm.Validation.Internal.DataModelValidationHelper.AddMemberNameToHashSet(System.Data.Entity.Edm.EdmNamedMetadataItem,System.Collections.Generic.HashSet{System.String},System.Data.Entity.Edm.Validation.Internal.DataModelValidationContext,System.Func{System.String,System.String})">
            <summary>
                Add member name to the Hash set, raise an error if the name exists already.
            </summary>
            <param name = "item"> </param>
            <param name = "memberNameList"> </param>
            <param name = "context"> </param>
            <param name = "getErrorString"> </param>
        </member>
        <member name="M:System.Data.Entity.Edm.Validation.Internal.DataModelValidationHelper.HasContent(System.String)">
            <summary>
                If the string is null, empty, or only whitespace, return false, otherwise return true
            </summary>
            <param name = "stringToCheck"> </param>
            <returns> </returns>
        </member>
        <member name="M:System.Data.Entity.Edm.Validation.Internal.DataModelValidationHelper.CheckForInheritanceCycle``1(``0,System.Func{``0,``0})">
            <summary>
                Determine if a cycle exists in the type hierarchy: use two pointers to walk the chain, if one catches up with the other, we have a cycle.
            </summary>
            <returns> true if a cycle exists in the type hierarchy, false otherwise </returns>
        </member>
        <member name="T:System.Data.Entity.Edm.Validation.Internal.DataModelValidationRuleSet">
            <summary>
                RuleSet for DataModel Validation
            </summary>
        </member>
        <member name="M:System.Data.Entity.Edm.Validation.Internal.DataModelValidationRuleSet.GetRules(System.Data.Entity.Edm.Common.DataModelItem)">
            <summary>
                Get the related rules given certain DataModelItem
            </summary>
            <param name="itemToValidate"> The <see cref="T:System.Data.Entity.Edm.Common.DataModelItem"/> to validate </param>
            <returns> A collection of <see cref="T:System.Data.Entity.Edm.Validation.Internal.DataModelValidationRule"/> </returns>
        </member>
        <member name="T:System.Data.Entity.Edm.Validation.Internal.DataModelValidator">
            <summary>
                Data Model Validator
            </summary>
        </member>
        <member name="M:System.Data.Entity.Edm.Validation.Internal.DataModelValidator.Validate(System.Data.Entity.Edm.EdmModel,System.Boolean)">
            <summary>
                Validate the <see cref="N:System.Data.Entity.Edm.Validation.Internal.EdmModel"/> and all of its properties given certain version.
            </summary>
            <param name="root"> The root of the model to be validated </param>
            <param name="validateSyntax"> True to validate the syntax, otherwise false </param>
        </member>
        <member name="T:System.Data.Entity.Edm.Validation.Internal.EdmModel.EdmModelRuleSet">
            <summary>
                The RuleSet for EdmModel
            </summary>
        </member>
        <member name="M:System.Data.Entity.Edm.Validation.Internal.EdmModel.EdmModelRuleSet.CreateEdmModelRuleSet(System.Double,System.Boolean)">
            <summary>
                Get <see cref="T:System.Data.Entity.Edm.Validation.Internal.EdmModel.EdmModelRuleSet"/> based on version
            </summary>
            <param name="version"> a double value of version </param>
            <returns> <see cref="T:System.Data.Entity.Edm.Validation.Internal.EdmModel.EdmModelRuleSet"/> </returns>
        </member>
        <member name="T:System.Data.Entity.Edm.Validation.Internal.EdmModel.EdmModelValidationContext">
            <summary>
                The context for EdmModel Validation
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Validation.Internal.EdmModel.EdmModelValidationVisitor">
            <summary>
                Visitor for EdmModel Validation
            </summary>
        </member>
        <member name="T:System.Data.Entity.Edm.Validation.Internal.EdmModel.EdmModelValidator">
            <summary>
                Edm Model Validator
            </summary>
        </member>
        <member name="M:System.Data.Entity.Edm.Validation.Internal.EdmModel.EdmModelValidator.Validate(System.Data.Entity.Edm.EdmModel,System.Data.Entity.Edm.Validation.Internal.EdmModel.EdmModelValidationContext)">
            <summary>
                validate the <see cref="T:System.Data.Entity.Edm.EdmModel"/> from the root with the context
            </summary>
            <param name="validateRoot"> The root to validate from </param>
            <param name="context"> The validation context </param>
        </member>
        <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
            <summary>
                An implementation of IDatabaseInitializer that will recreate and optionally re-seed the
                database only if the database does not exist.
                To seed the database, create a derived class and override the Seed method.
            </summary>
            <typeparam name = "TContext">The type of the context.</typeparam>
        </member>
        <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
            <summary>
                Executes the strategy to initialize the database for the given context.
            </summary>
            <param name = "context">The context.</param>
        </member>
        <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
            <summary>
                A that should be overridden to actually add data to the context for seeding. 
                The default implementation does nothing.
            </summary>
            <param name = "context">The context to seed.</param>
        </member>
        <member name="T:System.Data.Entity.Database">
            <summary>
                An instances of this class is obtained from an <see cref="T:System.Data.Entity.DbContext"/> object and can be used
                to manage the actual database backing a DbContext or connection.
                This includes creating, deleting, and checking for the existence of a database.
                Note that deletion and checking for existence of a database can be performed using just a
                connection (i.e. without a full context) by using the static methods of this class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Database.#ctor(System.Data.Entity.Internal.InternalContext)">
            <summary>
                Creates a Database backed by the given context.  This object can be used to create a database,
                check for database existence, and delete a database.
            </summary>
            <param name = "context">The context that defines the database connection and model.</param>
        </member>
        <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
            <summary>
                Gets or sets the database initialization strategy.  The database initialization strategy is called when <see cref="T:System.Data.Entity.DbContext"/> instance
                is initialized from a <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel"/>.  The strategy can optionally check for database existence, create a new database, and
                seed the database with data.
                The default strategy is an instance of <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1"/>.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <param name="strategy">The strategy.</param>
            <value>The database creation strategy.</value>
        </member>
        <member name="M:System.Data.Entity.Database.SetInitializerInternal``1(System.Data.Entity.IDatabaseInitializer{``0},System.Boolean)">
            <summary>
                Internal version of SetInitializer that allows the strategy to be locked such that it cannot be replaced
                by another call to SetInitializer.  This allows strategies set in the app.config to win over strategies set
                in code.
            </summary>
            <typeparam name = "TContext">The type of the context.</typeparam>
            <param name = "strategy">The strategy.</param>
            <param name = "lockStrategy">if set to <c>true</c> then the strategy is locked.</param>
        </member>
        <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
            <summary>
                Runs the the registered <see cref="T:System.Data.Entity.IDatabaseInitializer`1"/> on this context.
            
                If "force" is set to true, then the initializer is run regardless of whether or not it
                has been run before.  This can be useful if a database is deleted while an app is running
                and needs to be reinitialized.
            
                If "force" is set to false, then the initializer is only run if it has not already been
                run for this context, model, and connection in this app domain. This method is typically
                used when it is necessary to ensure that the database has been created and seeded
                before starting some operation where doing so lazily will cause issues, such as when the
                operation is part of a transaction.
            </summary>
            <param name="force">if set to <c>true</c> the initializer is run even if it has already been run.</param>
        </member>
        <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
            <summary>
            Checks whether or not the database is compatible with the the current Code First model.
            </summary>
            <remarks>
            Model compatibility currently uses the following rules.
            
            If the context was created using either the Model First or Database First approach then the
            model is assumed to be compatible with the database and this method returns true.
            
            For Code First the model is considered compatible if the model is stored in the database
            in the Migrations history table and that model has no differences from the current model as
            determined by Migrations model differ.
            
            If the model is not stored in the database but an EF 4.1/4.2 model hash is found instead,
            then this is used to check for compatibility.
            </remarks>
            <param name = "throwIfNoMetadata">
            If set to <c>true</c> then an exception will be thrown if no model metadata is found in
            the database. If set to <c>false</c> then this method will return <c>true</c> if metadata
            is not found.</param>
            <returns>
            True if the model hash in the context and the database match; false otherwise.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Database.Create">
            <summary>
                Creates a new database on the database server for the model defined in the backing context.
                Note that calling this method before the database initialization strategy has run will disable
                executing that strategy.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Database.CreateIfNotExists">
            <summary>
                Creates a new database on the database server for the model defined in the backing context, but only
                if a database with the same name does not already exist on the server.
            </summary>
            <returns>True if the database did not exist and was created; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.Exists">
            <summary>
                Checks whether or not the database exists on the server.
            </summary>
            <returns>True if the database exists; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.Delete">
            <summary>
                Deletes the database on the database server if it exists, otherwise does nothing.
                Calling this method from outside of an initializer will mark the database as having
                not been initialized. This means that if an attempt is made to use the database again
                after it has been deleted, then any initializer set will run again and, usually, will
                try to create the database again automatically.
            </summary>
            <returns>True if the database did exist and was deleted; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.Exists(System.String)">
            <summary>
                Checks whether or not the database exists on the server.
                The connection to the database is created using the given database name or connection string
                in the same way as is described in the documentation for the <see cref="T:System.Data.Entity.DbContext"/> class.
            </summary>
            <param name="nameOrConnectionString">The database name or a connection string to the database.</param>
            <returns>True if the database exists; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.Delete(System.String)">
            <summary>
                Deletes the database on the database server if it exists, otherwise does nothing.
                The connection to the database is created using the given database name or connection string
                in the same way as is described in the documentation for the <see cref="T:System.Data.Entity.DbContext"/> class.
            </summary>
            <param name="nameOrConnectionString">The database name or a connection string to the database.</param>
            <returns>True if the database did exist and was deleted; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
            <summary>
                Checks whether or not the database exists on the server.
            </summary>
            <param name = "existingConnection">An existing connection to the database.</param>
            <returns>True if the database exists; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
            <summary>
                Deletes the database on the database server if it exists, otherwise does nothing.
            </summary>
            <param name = "existingConnection">An existing connection to the database.</param>
            <returns>True if the database did exist and was deleted; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.ResetDefaultConnectionFactory">
            <summary>
                Resets the DefaultConnectionFactory to its initial value.
                Currently, this method is only used by test code.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Database.PerformDatabaseOp(System.Data.Entity.Internal.LazyInternalConnection,System.Func{System.Data.Objects.ObjectContext,System.Boolean})">
            <summary>
                Performs the operation defined by the given delegate using the given lazy connection, ensuring
                that the lazy connection is disposed after use.
            </summary>
            <param name = "lazyConnection">Information used to create a DbConnection.</param>
            <param name = "operation">The operation to perform.</param>
            <returns>The return value of the operation.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.PerformDatabaseOp(System.Data.Common.DbConnection,System.Func{System.Data.Objects.ObjectContext,System.Boolean})">
            <summary>
                Performs the operation defined by the given delegate against a connection.  The connection
                is either the connection accessed from the context backing this object, or is obtained from
                the connection information passed to one of the static methods.
            </summary>
            <param name = "connection">The connection to use.</param>
            <param name = "operation">The operation to perform.</param>
            <returns>The return value of the operation.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.CreateEmptyObjectContext(System.Data.Common.DbConnection)">
            <summary>
                Returns an empty ObjectContext that can be used to perform delete/exists operations.
            </summary>
            <param name = "connection">The connection for which to create an ObjectContext</param>
            <returns>The empty context.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
            <summary>
                Creates a raw SQL query that will return elements of the given generic type.
                The type can be any type that has properties that match the names of the columns returned
                from the query, or can be a simple primitive type.  The type does not have to be an
                entity type. The results of this query are never tracked by the context even if the
                type of object returned is an entity type.  Use the <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])"/>
                method to return entities that are tracked by the context.
            </summary>
            <typeparam name="TElement">The type of object returned by the query.</typeparam>
            <param name="sql">The SQL query string.</param>
            <param name="parameters">The parameters to apply to the SQL query string.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> object that will execute the query when it is enumerated.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
            <summary>
                Creates a raw SQL query that will return elements of the given type.
                The type can be any type that has properties that match the names of the columns returned
                from the query, or can be a simple primitive type.  The type does not have to be an
                entity type. The results of this query are never tracked by the context even if the
                type of object returned is an entity type.  Use the <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])"/>
                method to return entities that are tracked by the context.
            </summary>
            <param name="elementType">The type of object returned by the query.</param>
            <param name="sql">The SQL query string.</param>
            <param name="parameters">The parameters to apply to the SQL query string.</param>
            <returns>A <see cref="T:System.Collections.IEnumerable"/> object that will execute the query when it is enumerated.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
            <summary>
                Executes the given DDL/DML command against the database.
            </summary>
            <param name = "sql">The command string.</param>
            <param name = "parameters">The parameters to apply to the command string.</param>
            <returns>The result returned by the database after executing the command.</returns>
        </member>
        <member name="P:System.Data.Entity.Database.Connection">
            <summary>
                Returns the connection being used by this context.  This may cause the
                connection to be created if it does not already exist.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="P:System.Data.Entity.Database.InitializerDelegate">
            <summary>
                Returns the <see cref="T:System.Data.Entity.IDatabaseInitializer`1"/> as a delegate that can be called with
                an instance of the <see cref="T:System.Data.Entity.DbContext"/> that owns this Database object, or returns null if
                there is no initializer set for this context type.
            </summary>
            <value>The initializer delegate or null.</value>
        </member>
        <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
            <summary>
                The connection factory to use when creating a <see cref="T:System.Data.Common.DbConnection"/> from just
                a database name or a connection string.
            </summary>
            <remarks>
                This is used when just a database name or connection string is given to <see cref="T:System.Data.Entity.DbContext"/> or when
                the no database name or connection is given to DbContext in which case the name of
                the context class is passed to this factory in order to generate a DbConnection.
                By default, the <see cref="T:System.Data.Entity.Infrastructure.IDbConnectionFactory"/> instance to use is read from the applications .config
                file from the "EntityFramework DefaultConnectionFactory" entry in appSettings. If no entry is found in
                the config file then <see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory"/> is used. Setting this property in code
                always overrides whatever value is found in the config file.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Database.DefaultConnectionFactoryChanged">
            <summary>
                Checks wether or not the DefaultConnectionFactory has been set to something other than its default value.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.DbExtensions.Include``1(System.Linq.IQueryable{``0},System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.DbExtensions.Include(System.Linq.IQueryable,System.String)" -->
        <member name="M:System.Data.Entity.DbExtensions.CommonInclude``1(``0,System.String)">
            <summary>
                Common code for generic and non-generic string Include.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" -->
        <member name="M:System.Data.Entity.DbExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
            <summary>
                Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>
                or <see cref="T:System.Data.Objects.ObjectContext"/>.  This method works by calling the AsNoTracking method of the
                underlying query object.  If the underlying query object does not have a AsNoTracking method,
                then calling this method will have no affect.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source query.</param>
            <returns>A new query with NoTracking applied, or the source query if NoTracking is not supported.</returns>
        </member>
        <member name="M:System.Data.Entity.DbExtensions.AsNoTracking(System.Linq.IQueryable)">
            <summary>
                Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>
                or <see cref="T:System.Data.Objects.ObjectContext"/>.  This method works by calling the AsNoTracking method of the
                underlying query object.  If the underlying query object does not have a AsNoTracking method,
                then calling this method will have no affect.
            </summary>
            <param name="source">The source query.</param>
            <returns>A new query with NoTracking applied, or the source query if NoTracking is not supported.</returns>
        </member>
        <member name="M:System.Data.Entity.DbExtensions.CommonAsNoTracking``1(``0)">
            <summary>
                Common code for generic and non-generic AsNoTracking.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbExtensions.Load(System.Linq.IQueryable)">
            <summary>
                Enumerates the query such that for server queries such as those of <see cref="T:System.Data.Entity.DbSet`1"/>, <see cref="T:System.Data.Objects.ObjectSet`1"/>,
                <see cref="T:System.Data.Objects.ObjectQuery`1"/>, and others the results of the query will be loaded into the associated <see cref="T:System.Data.Entity.DbContext"/>,
                <see cref="T:System.Data.Objects.ObjectContext"/> or other cache on the client.
                This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.
            </summary>
            <param name="source">The source query.</param>
        </member>
        <member name="M:System.Data.Entity.DbExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
                Returns an <see cref="T:System.ComponentModel.BindingList`1"/> implementation that stays in sync with the given <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The collection that the binding list will stay in sync with.</param>
            <returns>The binding list.</returns>
        </member>
        <member name="T:System.Data.Entity.DbModelBuilder">
            <summary>
                DbModelBuilder is used to map CLR classes to a database schema.
                This code centric approach to building an Entity Data Model (EDM) model is known as 'Code First'.
            </summary>
            <remarks>
                DbModelBuilder is typically used to configure a model by overriding <see cref="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)"/>. 
                You can also use DbModelBuilder independently of DbContext to build a model and then construct a 
                <see cref="T:System.Data.Entity.DbContext"/> or <see cref="T:System.Data.Objects.ObjectContext"/>.
                The recommended approach, however, is to use OnModelCreating in <see cref="T:System.Data.Entity.DbContext"/> as
                the workflow is more intuitive and takes care of common tasks, such as caching the created model.
            
                Types that form your model are registered with DbModelBuilder and optional configuration can be
                performed by applying data annotations to your classes and/or using the fluent style DbModelBuilder
                API. 
            
                When the Build method is called a set of conventions are run to discover the initial model.
                These conventions will automatically discover aspects of the model, such as primary keys, and
                will also process any data annotations that were specified on your classes. Finally
                any configuration that was performed using the DbModelBuilder API is applied. 
            
                Configuration done via the DbModelBuilder API takes precedence over data annotations which 
                in turn take precedence over the default conventions.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.DbModelBuilder"/> class. 
            
                The process of discovering the initial model will use the set of conventions included 
                in the most recent version of the Entity Framework installed on your machine.
            </summary>
            <remarks>
                Upgrading to newer versions of the Entity Framework may cause breaking changes 
                in your application because new conventions may cause the initial model to be 
                configured differently. There is an alternate constructor that allows a specific 
                version of conventions to be specified.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.DbModelBuilder"/> class that will use 
                a specific set of conventions to discover the initial model.
            </summary>
            <param name="modelBuilderVersion">The version of conventions to be used.</param>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
            <summary>
                Excludes a type from the model. This is used to remove types from the model that were added 
                by convention during initial model discovery.
            </summary>
            <typeparam name = "T">The type to be excluded.</typeparam>
            <returns>The same DbModelBuilder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
                Excludes a type(s) from the model. This is used to remove types from the model that were added 
                by convention during initial model discovery.
            </summary>
            <param name = "types">The types to be excluded from the model.</param>
            <returns>The same DbModelBuilder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
            <summary>
                Registers an entity type as part of the model and returns an object that can be used to
                configure the entity. This method can be called multiple times for the same entity to
                perform multiple lines of configuration.
            </summary>
            <typeparam name = "TEntityType">The type to be registered or configured.</typeparam>
            <returns>The configuration object for the specified entity type.</returns>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.Entity(System.Type)">
            <summary>
                Registers a type as an entity in the model and returns an object that can be used to
                configure the entity. This method can be called multiple times for the same type to
                perform multiple lines of configuration.
            </summary>
            <param name = "entityType">The type to be registered or configured.</param>
            <returns>The configuration object for the specified entity type.</returns>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
            <summary>
                Registers a type as a complex type in the model and returns an object that can be used to
                configure the complex type. This method can be called multiple times for the same type to
                perform multiple lines of configuration.
            </summary>
            <typeparam name = "TComplexType">The type to be registered or configured.</typeparam>
            <returns>The configuration object for the specified complex type.</returns>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
            <summary>
                Creates a <see cref="T:System.Data.Entity.Infrastructure.DbModel"/> based on the configuration performed using this builder.
                The connection is used to determine the database provider being used as this
                affects the database layer of the generated model.
            </summary>
            <param name="providerConnection">Connection to use to determine provider information.</param>
            <returns>The model that was built.</returns>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
            <summary>
                Creates a <see cref="T:System.Data.Entity.Infrastructure.DbModel"/> based on the configuration performed using this builder.
                Provider information must be specified because this affects the database layer of the generated model.
                For SqlClient the invariant name is 'System.Data.SqlClient' and the manifest token is the version year (i.e. '2005', '2008' etc.)
            </summary>
            <param name="providerInfo">The database provider that the model will be used with.</param>
            <returns>The model that was built.</returns>
        </member>
        <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
            <summary>
                Provides access to the settings of this DbModelBuilder that deal with conventions.
            </summary>
        </member>
        <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
            <summary>
                Gets the <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar"/> for this DbModelBuilder. 
                The registrar allows derived entity and complex type configurations to be registered with this builder.
            </summary>
        </member>
        <member name="T:System.Data.Entity.DbModelBuilderVersion">
            <summary>
                A value from this enumeration can be provided directly to the <see cref="T:System.Data.Entity.DbModelBuilder"/>
                class or can be used in the <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute"/> applied to
                a class derived from <see cref="T:System.Data.Entity.DbContext"/>. The value used defines which version of
                the DbContext and DbModelBuilder conventions should be used when building a model from
                code--also know as "Code First".
            </summary>
            <remarks>
                Using DbModelBuilderVersion.Latest ensures that all the latest functionality is available
                when upgrading to a new release of the Entity Framework. However, it may result in an
                application behaving differently with the new release than it did with a previous release.
                This can be avoided by using a specific version of the conventions, but if a version
                other than the latest is set then not all the latest functionality will be available.
            </remarks>
        </member>
        <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
            <summary>
                Indicates that the latest version of the <see cref="T:System.Data.Entity.DbModelBuilder"/> and 
                <see cref="T:System.Data.Entity.DbContext"/> conventions should be used.
            </summary>
        </member>
        <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
            <summary>
                Indicates that the version of the <see cref="T:System.Data.Entity.DbModelBuilder"/> and 
                <see cref="T:System.Data.Entity.DbContext"/> conventions shipped with Entity Framework 4.1
                through 4.3 should be used.
            </summary>
        </member>
        <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
            <summary>
                Indicates that the version of the <see cref="T:System.Data.Entity.DbModelBuilder"/> and 
                <see cref="T:System.Data.Entity.DbContext"/> conventions shipped with Entity Framework 5.0
                when targeting .NET 4 should be used.
            </summary>
        </member>
        <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
            <summary>
                Indicates that the version of the <see cref="T:System.Data.Entity.DbModelBuilder"/> and 
                <see cref="T:System.Data.Entity.DbContext"/> conventions shipped with Entity Framework 5.0
                when targeting .NET 4.5 should be used.
            </summary>
        </member>
        <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
            <summary>
                This attribute can be applied to a class derived from <see cref="T:System.Data.Entity.DbContext"/> to set which
                version of the DbContext and <see cref="T:System.Data.Entity.DbModelBuilder"/> conventions should be used when building
                a model from code--also know as "Code First". See the <see cref="T:System.Data.Entity.DbModelBuilderVersion"/>
                enumeration for details about DbModelBuilder versions.
            </summary>
            <remarks>
                If the attribute is missing from DbContextthen DbContext will always use the latest
                version of the conventions.  This is equivalent to using DbModelBuilderVersion.Latest.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute"/> class.
            </summary>
            <param name="version">The <see cref="T:System.Data.Entity.DbModelBuilder"/> conventions version to use.</param>
        </member>
        <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
            <summary>
                Gets the <see cref="T:System.Data.Entity.DbModelBuilder"/> conventions version.
            </summary>
            <value>The <see cref="T:System.Data.Entity.DbModelBuilder"/> conventions version.</value>
        </member>
        <member name="T:System.Data.Entity.DbSet">
            <summary>
                A non-generic version of <see cref="T:System.Data.Entity.DbSet`1"/> which can be used when the type of entity
                is not known at build time.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbQuery">
            <summary>
                Represents a non-generic LINQ to Entities query against a DbContext.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.IInternalQueryAdapter">
            <summary>
                An internal interface implemented by <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1"/> and <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/> that allows access to
                the internal query without using reflection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.IInternalQueryAdapter.InternalQuery">
            <summary>
                The underlying internal set.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.#ctor">
            <summary>
                Internal constructor prevents external classes deriving from DbQuery.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
            <summary>
                Throws an exception indicating that binding directly to a store query is not supported.
                Instead populate a DbSet with data, for example by using the Load extension method, and
                then bind to local data.  For WPF bind to DbSet.Local.  For Windows Forms bind to
                DbSet.Local.ToBindingList().
            </summary>
            <returns>
                Never returns; always throws.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Gets the enumeration of this query causing it to be executed against the store.
            </summary>
            <returns>An enumerator for the query</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)" -->
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
            <summary>
                Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns> A new query with NoTracking applied.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
            <summary>
                Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1"/> object.
            </summary>
            <typeparam name="TElement">The type of element for which the query was created.</typeparam>
            <returns>The generic set object.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> representation of the underlying query.
            </summary>
            <returns>
                The query string.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
                Returns <c>false</c>.
            </summary>
            <returns><c>false</c>.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
            <summary>
                The IQueryable element type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
            <summary>
                The IQueryable LINQ Expression.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
            <summary>
                The IQueryable provider.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery.InternalQuery">
            <summary>
                Gets the underlying internal query object.
            </summary>
            <value>The internal query.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Data#Entity#Internal#Linq#IInternalQueryAdapter#InternalQuery">
            <summary>
                The internal query object that is backing this DbQuery
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.IInternalSetAdapter">
            <summary>
                An internal interface implemented by <see cref="T:System.Data.Entity.DbSet`1"/> and <see cref="T:System.Data.Entity.DbSet"/> that allows access to
                the internal set without using reflection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.IInternalSetAdapter.InternalSet">
            <summary>
                The underlying internal set.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbSet.#ctor">
            <summary>
                Internal constructor prevents external classes deriving from DbSet.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
            <summary>
                Finds an entity with the given primary key values.
                If an entity with the given primary key values exists in the context, then it is
                returned immediately without making a request to the store.  Otherwise, a request
                is made to the store for an entity with the given primary key values and this entity,
                if found, is attached to the context and returned.  If no entity is found in the
                context or the store, then null is returned.
            </summary>
            <remarks>
                The ordering of composite key values is as defined in the EDM, which is in turn as defined in
                the designer, by the Code First fluent API, or by the DataMember attribute.
            </remarks>
            <param name="keyValues">The values of the primary key for the entity to be found.</param>
            <returns>The entity found, or null.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if multiple entities exist in the context with the primary key values given.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the type of entity is not part of the data model for this context.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the types of the key values do not match the types of the key values for the entity type to be found.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
            <summary>
                Attaches the given entity to the context underlying the set.  That is, the entity is placed
                into the context in the Unchanged state, just as if it had been read from the database.
            </summary>
            <param name = "entity">The entity to attach.</param>
            <returns>The entity.</returns>
            <remarks>
                Attach is used to repopulate a context with an entity that is known to already exist in the database.
                SaveChanges will therefore not attempt to insert an attached entity into the database because
                it is assumed to already be there.
                Note that entities that are already in the context in some other state will have their state set
                to Unchanged.  Attach is a no-op if the entity is already in the context in the Unchanged state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
            <summary>
                Adds the given entity to the context underlying the set in the Added state such that it will
                be inserted into the database when SaveChanges is called.
            </summary>
            <param name = "entity">The entity to add.</param>
            <returns>The entity.</returns>
            <remarks>
                Note that entities that are already in the context in some other state will have their state set
                to Added.  Add is a no-op if the entity is already in the context in the Added state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
            <summary>
                Marks the given entity as Deleted such that it will be deleted from the database when SaveChanges
                is called.  Note that the entity must exist in the context in some other state before this method
                is called.
            </summary>
            <param name = "entity">The entity to remove.</param>
            <returns>The entity.</returns>
            <remarks>
                Note that if the entity exists in the context in the Added state, then this method
                will cause it to be detached from the context.  This is because an Added entity is assumed not to
                exist in the database such that trying to delete it does not make sense.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbSet.Create">
            <summary>
                Creates a new instance of an entity for the type of this set.
                Note that this instance is NOT added or attached to the set.
                The instance returned will be a proxy if the underlying context is configured to create
                proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <returns>The entity instance, which may be a proxy.</returns>
        </member>
        <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
            <summary>
                Creates a new instance of an entity for the type of this set or for a type derived
                from the type of this set.
                Note that this instance is NOT added or attached to the set.
                The instance returned will be a proxy if the underlying context is configured to create
                proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <returns> The entity instance, which may be a proxy. </returns>
        </member>
        <member name="M:System.Data.Entity.DbSet.Cast``1">
            <summary>
                Returns the equivalent generic <see cref="T:System.Data.Entity.DbSet`1"/> object.
            </summary>
            <typeparam name="TEntity">The type of entity for which the set was created.</typeparam>
            <returns>The generic set object.</returns>
        </member>
        <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
            <summary>
                Creates a raw SQL query that will return entities in this set.  By default, the
                entities returned are tracked by the context; this can be changed by calling
                AsNoTracking on the <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery"/> returned.
                Note that the entities returned are always of the type for this set and never of
                a derived type.  If the table or tables queried may contain data for other entity
                types, then the SQL query must be written appropriately to ensure that only entities of
                the correct type are returned.
            </summary>
            <param name="sql">The SQL query string.</param>
            <param name="parameters">The parameters to apply to the SQL query string.</param>
            <returns>A <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery"/> object that will execute the query when it is enumerated.</returns>
        </member>
        <member name="P:System.Data.Entity.DbSet.Local">
            <summary>
                Gets an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that represents a local view of all Added, Unchanged,
                and Modified entities in this set.  This local view will stay in sync as entities are added or
                removed from the context.  Likewise, entities added to or removed from the local view will automatically
                be added to or removed from the context.
            </summary>
            <remarks>
                This property can be used for data binding by populating the set with data, for example by using the Load
                extension method, and then binding to the local data through this property.  For WPF bind to this property
                directly.  For Windows Forms bind to the result of calling ToBindingList on this property
            </remarks>
            <value>The local view.</value>
        </member>
        <member name="P:System.Data.Entity.DbSet.System#Data#Entity#Internal#Linq#IInternalSetAdapter#InternalSet">
            <summary>
                The internal IQueryable that is backing this DbQuery
            </summary>
        </member>
        <member name="P:System.Data.Entity.DbSet.InternalSet">
            <summary>
                Gets the underlying internal set.
            </summary>
            <value>The internal set.</value>
        </member>
        <member name="T:System.Data.Entity.DbSet`1">
            <summary>
                A DbSet represents the collection of all entities in the context, or that can be queried from the
                database, of a given type.  DbSet objects are created from a DbContext using the DbContext.Set method.
            </summary>
            <remarks>
                Note that DbSet does not support MEST (Multiple Entity Sets per Type) meaning that there is always a
                one-to-one correlation between a type and a set.
            </remarks>
            <typeparam name = "TEntity">The type that defines the set.</typeparam>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
            <summary>
                Represents a LINQ to Entities query against a DbContext.
            </summary>
            <typeparam name = "TResult">The type of entity to query for.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.#ctor(System.Data.Entity.Internal.Linq.IInternalQuery{`0})">
            <summary>
                Creates a new query that will be backed by the given internal query object.
            </summary>
            <param name = "internalQuery">The backing query.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)" -->
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
            <summary>
                Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns> A new query with NoTracking applied.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
            <summary>
                Throws an exception indicating that binding directly to a store query is not supported.
                Instead populate a DbSet with data, for example by using the Load extension method, and
                then bind to local data.  For WPF bind to DbSet.Local.  For Windows Forms bind to
                DbSet.Local.ToBindingList().
            </summary>
            <returns>
                Never returns; always throws.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{TResult}#GetEnumerator">
            <summary>
                Gets the enumeration of this query causing it to be executed against the store.
            </summary>
            <returns>An enumerator for the query</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Gets the enumeration of this query causing it to be executed against the store.
            </summary>
            <returns>An enumerator for the query</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> representation of the underlying query.
            </summary>
            <returns>
                The query string.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
            <summary>
                Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/> class for this query.
            </summary>
            <returns>A non-generic version.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
                Returns <c>false</c>.
            </summary>
            <returns><c>false</c>.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
            <summary>
                The IQueryable element type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
            <summary>
                The IQueryable LINQ Expression.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
            <summary>
                The IQueryable provider.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Internal#Linq#IInternalQueryAdapter#InternalQuery">
            <summary>
                The internal query object that is backing this DbQuery
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.InternalQuery">
            <summary>
                The internal query object that is backing this DbQuery
            </summary>
        </member>
        <member name="T:System.Data.Entity.IDbSet`1">
            <summary>
                An IDbSet represents the collection of all entities in the context, or that can be queried from the
                database, of a given type.  DbSet is a concrete implementation of IDbSet.
            </summary>
            <typeparam name = "TEntity">The type that defines the set.</typeparam>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
            <summary>
                Finds an entity with the given primary key values.
                If an entity with the given primary key values exists in the context, then it is
                returned immediately without making a request to the store.  Otherwise, a request
                is made to the store for an entity with the given primary key values and this entity,
                if found, is attached to the context and returned.  If no entity is found in the
                context or the store, then null is returned.
            </summary>
            <remarks>
                The ordering of composite key values is as defined in the EDM, which is in turn as defined in
                the designer, by the Code First fluent API, or by the DataMember attribute.
            </remarks>
            <param name = "keyValues">The values of the primary key for the entity to be found.</param>
            <returns>The entity found, or null.</returns>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
            <summary>
                Adds the given entity to the context underlying the set in the Added state such that it will
                be inserted into the database when SaveChanges is called.
            </summary>
            <param name = "entity">The entity to add.</param>
            <returns>The entity.</returns>
            <remarks>
                Note that entities that are already in the context in some other state will have their state set
                to Added.  Add is a no-op if the entity is already in the context in the Added state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
            <summary>
                Marks the given entity as Deleted such that it will be deleted from the database when SaveChanges
                is called.  Note that the entity must exist in the context in some other state before this method
                is called.
            </summary>
            <param name = "entity">The entity to remove.</param>
            <returns>The entity.</returns>
            <remarks>
                Note that if the entity exists in the context in the Added state, then this method
                will cause it to be detached from the context.  This is because an Added entity is assumed not to
                exist in the database such that trying to delete it does not make sense.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
            <summary>
                Attaches the given entity to the context underlying the set.  That is, the entity is placed
                into the context in the Unchanged state, just as if it had been read from the database.
            </summary>
            <param name = "entity">The entity to attach.</param>
            <returns>The entity.</returns>
            <remarks>
                Attach is used to repopulate a context with an entity that is known to already exist in the database.
                SaveChanges will therefore not attempt to insert an attached entity into the database because
                it is assumed to already be there.
                Note that entities that are already in the context in some other state will have their state set
                to Unchanged.  Attach is a no-op if the entity is already in the context in the Unchanged state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Create">
            <summary>
                Creates a new instance of an entity for the type of this set.
                Note that this instance is NOT added or attached to the set.
                The instance returned will be a proxy if the underlying context is configured to create
                proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <returns>The entity instance, which may be a proxy.</returns>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Create``1">
            <summary>
                Creates a new instance of an entity for the type of this set or for a type derived
                from the type of this set.
                Note that this instance is NOT added or attached to the set.
                The instance returned will be a proxy if the underlying context is configured to create
                proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <typeparam name = "TDerivedEntity">The type of entity to create.</typeparam>
            <returns> The entity instance, which may be a proxy. </returns>
        </member>
        <member name="P:System.Data.Entity.IDbSet`1.Local">
            <summary>
                Gets an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that represents a local view of all Added, Unchanged,
                and Modified entities in this set.  This local view will stay in sync as entities are added or
                removed from the context.  Likewise, entities added to or removed from the local view will automatically
                be added to or removed from the context.
            </summary>
            <remarks>
                This property can be used for data binding by populating the set with data, for example by using the Load
                extension method, and then binding to the local data through this property.  For WPF bind to this property
                directly.  For Windows Forms bind to the result of calling ToBindingList on this property
            </remarks>
            <value>The local view.</value>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.#ctor(System.Data.Entity.Internal.Linq.InternalSet{`0})">
            <summary>
                Creates a new set that will be backed by the given <see cref="T:System.Data.Entity.Internal.Linq.InternalSet`1"/>.
            </summary>
            <param name="internalSet">The internal set.</param>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
            <summary>
                Finds an entity with the given primary key values.
                If an entity with the given primary key values exists in the context, then it is
                returned immediately without making a request to the store.  Otherwise, a request
                is made to the store for an entity with the given primary key values and this entity,
                if found, is attached to the context and returned.  If no entity is found in the
                context or the store, then null is returned.
            </summary>
            <remarks>
                The ordering of composite key values is as defined in the EDM, which is in turn as defined in
                the designer, by the Code First fluent API, or by the DataMember attribute.
            </remarks>
            <param name="keyValues">The values of the primary key for the entity to be found.</param>
            <returns>The entity found, or null.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if multiple entities exist in the context with the primary key values given.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the type of entity is not part of the data model for this context.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the types of the key values do not match the types of the key values for the entity type to be found.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
            <summary>
                Attaches the given entity to the context underlying the set.  That is, the entity is placed
                into the context in the Unchanged state, just as if it had been read from the database.
            </summary>
            <param name = "entity">The entity to attach.</param>
            <returns>The entity.</returns>
            <remarks>
                Attach is used to repopulate a context with an entity that is known to already exist in the database.
                SaveChanges will therefore not attempt to insert an attached entity into the database because
                it is assumed to already be there.
                Note that entities that are already in the context in some other state will have their state set
                to Unchanged.  Attach is a no-op if the entity is already in the context in the Unchanged state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
            <summary>
                Adds the given entity to the context underlying the set in the Added state such that it will
                be inserted into the database when SaveChanges is called.
            </summary>
            <param name = "entity">The entity to add.</param>
            <returns>The entity.</returns>
            <remarks>
                Note that entities that are already in the context in some other state will have their state set
                to Added.  Add is a no-op if the entity is already in the context in the Added state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
            <summary>
                Marks the given entity as Deleted such that it will be deleted from the database when SaveChanges
                is called.  Note that the entity must exist in the context in some other state before this method
                is called.
            </summary>
            <param name = "entity">The entity to remove.</param>
            <returns>The entity.</returns>
            <remarks>
                Note that if the entity exists in the context in the Added state, then this method
                will cause it to be detached from the context.  This is because an Added entity is assumed not to
                exist in the database such that trying to delete it does not make sense.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Create">
            <summary>
                Creates a new instance of an entity for the type of this set.
                Note that this instance is NOT added or attached to the set.
                The instance returned will be a proxy if the underlying context is configured to create
                proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <returns>The entity instance, which may be a proxy.</returns>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Create``1">
            <summary>
                Creates a new instance of an entity for the type of this set or for a type derived
                from the type of this set.
                Note that this instance is NOT added or attached to the set.
                The instance returned will be a proxy if the underlying context is configured to create
                proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <typeparam name = "TDerivedEntity">The type of entity to create.</typeparam>
            <returns> The entity instance, which may be a proxy. </returns>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet">
            <summary>
                Returns the equivalent non-generic <see cref="T:System.Data.Entity.DbSet"/> object.
            </summary>
            <returns>The non-generic set object.</returns>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
            <summary>
                Creates a raw SQL query that will return entities in this set.  By default, the
                entities returned are tracked by the context; this can be changed by calling
                AsNoTracking on the <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1"/> returned.
                Note that the entities returned are always of the type for this set and never of
                a derived type.  If the table or tables queried may contain data for other entity
                types, then the SQL query must be written appropriately to ensure that only entities of
                the correct type are returned.
            </summary>
            <param name="sql">The SQL query string.</param>
            <param name="parameters">The parameters to apply to the SQL query string.</param>
            <returns>A <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1"/> object that will execute the query when it is enumerated.</returns>
        </member>
        <member name="P:System.Data.Entity.DbSet`1.Local">
            <summary>
                Gets an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that represents a local view of all Added, Unchanged,
                and Modified entities in this set.  This local view will stay in sync as entities are added or
                removed from the context.  Likewise, entities added to or removed from the local view will automatically
                be added to or removed from the context.
            </summary>
            <remarks>
                This property can be used for data binding by populating the set with data, for example by using the Load
                extension method, and then binding to the local data through this property.  For WPF bind to this property
                directly.  For Windows Forms bind to the result of calling ToBindingList on this property
            </remarks>
            <value>The local view.</value>
        </member>
        <member name="P:System.Data.Entity.DbSet`1.System#Data#Entity#Internal#Linq#IInternalSetAdapter#InternalSet">
            <summary>
                The internal IQueryable that is backing this DbQuery
            </summary>
        </member>
        <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
            <summary>
                An implementation of IDatabaseInitializer that will always recreate and optionally re-seed the
                database the first time that a context is used in the app domain.
                To seed the database, create a derived class and override the Seed method.
            </summary>
            <typeparam name = "TContext">The type of the context.</typeparam>
        </member>
        <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
            <summary>
                Executes the strategy to initialize the database for the given context.
            </summary>
            <param name = "context">The context.</param>
        </member>
        <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
            <summary>
                A that should be overridden to actually add data to the context for seeding. 
                The default implementation does nothing.
            </summary>
            <param name = "context">The context to seed.</param>
        </member>
        <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
            <summary>
            An implementation of IDatabaseInitializer that will <b>DELETE</b>, recreate, and optionally re-seed the
            database only if the model has changed since the database was created.
            </summary>
            <remarks>
            Whether or not the model has changed is determined by the <see cref="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)"/>
            method.
            To seed the database create a derived class and override the Seed method.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
            <summary>
                Executes the strategy to initialize the database for the given context.
            </summary>
            <param name = "context">The context.</param>
        </member>
        <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
            <summary>
                A that should be overridden to actually add data to the context for seeding. 
                The default implementation does nothing.
            </summary>
            <param name = "context">The context to seed.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
            <summary>
                Returned by the ChangeTracker method of <see cref="T:System.Data.Entity.DbContext"/> to provide access to features of
                the context that are related to change tracking of entities.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.#ctor(System.Data.Entity.Internal.InternalContext)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker"/> class.
            </summary>
            <param name="internalContext">The internal context.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
            <summary>
                Gets <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> objects for all the entities tracked by this context.
            </summary>
            <returns>The entries.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
            <summary>
                Gets <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> objects for all the entities of the given type
                tracked by this context.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>The entries.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
            <summary>
                Detects changes made to the properties and relationships of POCO entities.  Note that some types of
                entity (such as change tracking proxies and entities that derive from <see cref="T:System.Data.Objects.DataClasses.EntityObject"/>)
                report changes automatically and a call to DetectChanges is not normally needed for these types of entities.
                Also note that normally DetectChanges is called automatically by many of the methods of <see cref="T:System.Data.Entity.DbContext"/>
                and its related classes such that it is rare that this method will need to be called explicitly.
                However, it may be desirable, usually for performance reasons, to turn off this automatic calling of
                DetectChanges using the AutoDetectChangesEnabled flag from <see cref="P:System.Data.Entity.DbContext.Configuration"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
            <summary>
                A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/> class.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
            <summary>
                This is an abstract base class use to represent a scalar or complex property, or a navigation property
                of an entity.  Scalar and complex properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/>,
                reference navigation properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/>, and collection
                navigation properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Create(System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
                Creates a <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry"/> from information in the given <see cref="P:System.Data.Entity.Infrastructure.DbMemberEntry.InternalMemberEntry"/>.
                This method will create an instance of the appropriate subclass depending on the metadata contained
                in the InternalMemberEntry instance.
            </summary>
            <param name="internalMemberEntry">The internal member entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
            <summary>
                Validates this property.
            </summary>
            <returns>
                Collection of <see cref="T:System.Data.Entity.Validation.DbValidationError"/> objects. Never null. If the entity is valid the collection will be empty.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
            <summary>
                Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2"/> object.
            </summary>
            <typeparam name="TEntity">The type of entity on which the member is declared.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>The equivalent generic object.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
            <summary>
                Gets the name of the property.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
            <summary>
                Gets or sets the current value of this property.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
            <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> to which this member belongs.
            </summary>
            <value>An entry for the entity that owns this member.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.InternalMemberEntry">
            <summary>
                Gets the <see cref="P:System.Data.Entity.Infrastructure.DbMemberEntry.InternalMemberEntry"/> backing this object.
            </summary>
            <value>The internal member entry.</value>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Create(System.Data.Entity.Internal.InternalCollectionEntry)">
            <summary>
                Creates a <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/> from information in the given <see cref="T:System.Data.Entity.Internal.InternalCollectionEntry"/>.
                Use this method in preference to the constructor since it may potentially create a subclass depending on
                the type of member represented by the InternalCollectionEntry instance.
            </summary>
            <param name="internalCollectionEntry">The internal collection entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.#ctor(System.Data.Entity.Internal.InternalCollectionEntry)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/> class.
            </summary>
            <param name="internalCollectionEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
            <summary>
                Loads the collection of entities from the database.
                Note that entities that already exist in the context are not overwritten with values from the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
            <summary>
                Returns the query that would be used to load this collection from the database.
                The returned query can be modified using LINQ to perform filtering or operations in the database, such
                as counting the number of entities in the collection in the database without actually loading them.
            </summary>
            <returns>A query for the collection.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
            <summary>
                Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/> object.
            </summary>
            <typeparam name="TEntity">The type of entity on which the member is declared.</typeparam>
            <typeparam name="TElement">The type of the collection element.</typeparam>
            <returns>The equivalent generic object.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
            <summary>
                Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
            <summary>
                Gets or sets the current value of the navigation property.  The current value is
                the entity that the navigation property references.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
            <summary>
                Gets a value indicating whether the collection of entities has been loaded from the database.
            </summary>
            <value><c>true</c> if the collection is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
            <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> to which this navigation property belongs.
            </summary>
            <value>An entry for the entity that owns this navigation property.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.InternalMemberEntry">
            <summary>
                Gets the <see cref="T:System.Data.Entity.Internal.InternalCollectionEntry"/> backing this object as an <see cref="P:System.Data.Entity.Infrastructure.DbCollectionEntry.InternalMemberEntry"/>.
            </summary>
            <value>The internal member entry.</value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
            <summary>
                Instances of this class are returned from the Collection method of
                <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> and allow operations such as loading to
                be performed on the an entity's collection navigation properties.
            </summary>
            <typeparam name="TEntity">The type of the entity to which this property belongs.</typeparam>
            <typeparam name="TElement">The type of the element in the collection of entities.</typeparam>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
            <summary>
                This is an abstract base class use to represent a scalar or complex property, or a navigation property
                of an entity.  Scalar and complex properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/>,
                reference navigation properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/>, and collection
                navigation properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity to which this property belongs.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Create(System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
                Creates a <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2"/> from information in the given <see cref="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.InternalMemberEntry"/>.
                This method will create an instance of the appropriate subclass depending on the metadata contained
                in the InternalMemberEntry instance.
            </summary>
            <param name="internalMemberEntry">The internal member entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
            <summary>
                Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry"/> class for 
                the property represented by this object.
            </summary>
            <returns>A non-generic version.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
            <summary>
                Validates this property.
            </summary>
            <returns>
                Collection of <see cref="T:System.Data.Entity.Validation.DbValidationError"/> objects. Never null. If the entity is valid the collection will be empty.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
            <summary>
                Gets or sets the current value of this property.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.InternalMemberEntry">
            <summary>
                Gets the underlying <see cref="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.InternalMemberEntry"/>.
            </summary>
            <value>The internal member entry.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
            <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> to which this member belongs.
            </summary>
            <value>An entry for the entity that owns this member.</value>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Create(System.Data.Entity.Internal.InternalCollectionEntry)">
            <summary>
                Creates a <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/> from information in the given <see cref="T:System.Data.Entity.Internal.InternalCollectionEntry"/>.
                Use this method in preference to the constructor since it may potentially create a subclass depending on
                the type of member represented by the InternalCollectionEntry instance.
            </summary>
            <param name="internalCollectionEntry">The internal collection entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.#ctor(System.Data.Entity.Internal.InternalCollectionEntry)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/> class.
            </summary>
            <param name="internalCollectionEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
            <summary>
                Loads the collection of entities from the database.
                Note that entities that already exist in the context are not overwritten with values from the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
            <summary>
                Returns the query that would be used to load this collection from the database.
                The returned query can be modified using LINQ to perform filtering or operations in the database, such
                as counting the number of entities in the collection in the database without actually loading them.
            </summary>
            <returns>A query for the collection.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
            <summary>
                Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/> class for 
                the navigation property represented by this object.
            </summary>
            <returns>A non-generic version.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
            <summary>
                Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
            <summary>
                Gets or sets the current value of the navigation property.  The current value is
                the entity that the navigation property references.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
            <summary>
                Gets a value indicating whether the collection of entities has been loaded from the database.
            </summary>
            <value><c>true</c> if the collection is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.InternalMemberEntry">
            <summary>
                Gets the underlying <see cref="T:System.Data.Entity.Internal.InternalCollectionEntry"/> as an <see cref="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.InternalMemberEntry"/>.
            </summary>
            <value>The internal member entry.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
            <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> to which this navigation property belongs.
            </summary>
            <value>An entry for the entity that owns this navigation property.</value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
            <summary>
                An immutable representation of an Entity Data Model (EDM) model that can be used to create an 
                <see cref="T:System.Data.Objects.ObjectContext"/> or can be passed to the constructor of a <see cref="T:System.Data.Entity.DbContext"/>. 
                For increased performance, instances of this type should be cached and re-used to construct contexts.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.#ctor">
            <summary>
            For mocking.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.#ctor(System.Data.Entity.Infrastructure.DbModel)">
            <summary>
                Creates a model for the given EDM metadata model.
            </summary>
            <param name = "modelaseMapping">The EDM metadata model.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
            <summary>
                Creates an instance of ObjectContext or class derived from ObjectContext.  Note that an instance
                of DbContext can be created instead by using the appropriate DbContext constructor.
                If a derived ObjectContext is used, then it must have a public constructor with a single
                EntityConnection parameter.
                The connection passed is used by the ObjectContext created, but is not owned by the context.  The caller
                must dispose of the connection once the context has been disposed.
            </summary>
            <typeparam name = "TContext">The type of context to create.</typeparam>
            <param name = "existingConnection">An existing connection to a database for use by the context.</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.GetConstructorDelegate``1">
            <summary>
                Gets a cached delegate (or creates a new one) used to call the constructor for the given derived ObjectContext type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCompiledModel.CachedModelBuilder">
            <summary>
            A snapshot of the <see cref="T:System.Data.Entity.DbModelBuilder"/> that was used to create this compiled model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCompiledModel.ProviderInfo">
            <summary>
            The provider info (provider name and manifest token) that was used to create this model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
            <summary>
                A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2"/> class.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
            <summary>
                A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Create(System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
                Creates a <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> from information in the given <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/>.
                Use this method in preference to the constructor since it may potentially create a subclass depending on
                the type of member represented by the InternalCollectionEntry instance.
            </summary>
            <param name="internalPropertyEntry">The internal property entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.#ctor(System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> class.
            </summary>
            <param name="internalPropertyEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
            <summary>
                Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/> object.
            </summary>
            <typeparam name="TEntity">The type of entity on which the member is declared.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>The equivalent generic object.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
            <summary>
                Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
            <summary>
                Gets or sets the original value of this property.
            </summary>
            <value>The original value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
            <summary>
                Gets or sets the current value of this property.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
            <summary>
                Gets or sets a value indicating whether the value of this property has been modified since
                it was loaded from the database.
            </summary>
            <remarks>
                Setting this value to false for a modified property will revert the change by setting the
                current value to the original value. If the result is that no properties of the entity are
                marked as modified, then the entity will be marked as Unchanged.
                Setting this value to false for properties of Added, Unchanged, or Deleted entities
                is a no-op.
            </remarks>
            <value>
                <c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
            <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> to which this property belongs.
            </summary>
            <value>An entry for the entity that owns this property.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
            <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> of the property for which this is a nested property.
                This method will only return a non-null entry for properties of complex objects; it will
                return null for properties of the entity itself.
            </summary>
            <value>An entry for the parent complex property, or null if this is an entity property.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.InternalMemberEntry">
            <summary>
                Gets the <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/> backing this object.
            </summary>
            <value>The internal member entry.</value>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Create(System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
                Creates a <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2"/> from information in the given <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/>.
                Use this method in preference to the constructor since it may potentially create a subclass depending on
                the type of member represented by the InternalCollectionEntry instance.
            </summary>
            <param name="internalPropertyEntry">The internal property entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.#ctor(System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> class.
            </summary>
            <param name="internalPropertyEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
            <summary>
                Gets an object that represents a nested property of this property.
                This method can be used for both scalar or complex properties.
            </summary>
            <param name = "propertyName">The name of the nested property.</param>
            <returns>An object representing the nested property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
            <summary>
                Gets an object that represents a nested complex property of this property.
            </summary>
            <param name = "propertyName">The name of the nested property.</param>
            <returns>An object representing the nested property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
            <summary>
                Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2"/> object.
            </summary>
            <typeparam name="TEntity">The type of entity on which the member is declared.</typeparam>
            <typeparam name="TComplexProperty">The type of the complex property.</typeparam>
            <returns>The equivalent generic object.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
            <summary>
                Instances of this class are returned from the ComplexProperty method of
                <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> and allow access to the state of a complex property.
            </summary>
            <typeparam name="TEntity">The type of the entity to which this property belongs.</typeparam>
            <typeparam name="TComplexProperty">The type of the property.</typeparam>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
            <summary>
                Instances of this class are returned from the Property method of
                <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> and allow access to the state of the scalar
                or complex property.
            </summary>
            <typeparam name="TEntity">The type of the entity to which this property belongs.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Create(System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
                Creates a <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/> from information in the given <see cref="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.InternalPropertyEntry"/>.
                Use this method in preference to the constructor since it may potentially create a subclass depending on
                the type of member represented by the InternalCollectionEntry instance.
            </summary>
            <param name="internalPropertyEntry">The internal property entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.#ctor(System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/> class.
            </summary>
            <param name="internalPropertyEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
            <summary>
                Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> class for 
                the property represented by this object.
            </summary>
            <returns>A non-generic version.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
            <summary>
                Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
            <summary>
                Gets or sets the original value of this property.
            </summary>
            <value>The original value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
            <summary>
                Gets or sets the current value of this property.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
            <summary>
                Gets or sets a value indicating whether the value of this property has been modified since
                it was loaded from the database.
            </summary>
            <value>
                <c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
            <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> to which this property belongs.
            </summary>
            <value>An entry for the entity that owns this property.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
            <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> of the property for which this is a nested property.
                This method will only return a non-null entry for properties of complex objects; it will
                return null for properties of the entity itself.
            </summary>
            <value>An entry for the parent complex property, or null if this is an entity property.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.InternalMemberEntry">
            <summary>
                Gets the underlying <see cref="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.InternalPropertyEntry"/> as an <see cref="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.InternalMemberEntry"/>.
            </summary>
            <value>The internal member entry.</value>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Create(System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
                Creates a <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry"/> from information in the given <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/>.
                Use this method in preference to the constructor since it may potentially create a subclass depending on
                the type of member represented by the InternalCollectionEntry instance.
            </summary>
            <param name="internalPropertyEntry">The internal property entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.#ctor(System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2"/> class.
            </summary>
            <param name="internalPropertyEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
            <summary>
                Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry"/> class for 
                the property represented by this object.
            </summary>
            <returns>A non-generic version.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
            <summary>
                Gets an object that represents a nested property of this property.
                This method can be used for both scalar or complex properties.
            </summary>
            <param name = "propertyName">The name of the nested property.</param>
            <returns>An object representing the nested property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
            <summary>
                Gets an object that represents a nested property of this property.
                This method can be used for both scalar or complex properties.
            </summary>
            <typeparam name = "TNestedProperty">The type of the nested property.</typeparam>
            <param name = "propertyName">The name of the nested property.</param>
            <returns>An object representing the nested property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
                Gets an object that represents a nested property of this property.
                This method can be used for both scalar or complex properties.
            </summary>
            <typeparam name = "TNestedProperty">The type of the nested property.</typeparam>
            <param name = "navigationProperty">An expression representing the nested property.</param>
            <returns>An object representing the nested property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
            <summary>
                Gets an object that represents a nested complex property of this property.
            </summary>
            <param name = "propertyName">The name of the nested property.</param>
            <returns>An object representing the nested property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
            <summary>
                Gets an object that represents a nested complex property of this property.
            </summary>
            <typeparam name = "TNestedComplexProperty">The type of the nested property.</typeparam>
            <param name = "propertyName">The name of the nested property.</param>
            <returns>An object representing the nested property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
                Gets an object that represents a nested complex property of this property.
            </summary>
            <typeparam name = "TNestedComplexProperty">The type of the nested property.</typeparam>
            <param name = "navigationProperty">An expression representing the nested property.</param>
            <returns>An object representing the nested property.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
            <summary>
                Describes the origin of the database connection string associated with a <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
            <summary>
                The connection string was created by convention.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
            <summary>
                The connection string was read from external configuration.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
            <summary>
                The connection string was explicitly specified at runtime.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
            <summary>
                The connection string was overriden by connection information supplied to DbContextInfo. 
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
            <summary>
                Returned by the Configuration method of <see cref="T:System.Data.Entity.DbContext"/> to provide access to configuration
                options for the context.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.#ctor(System.Data.Entity.Internal.InternalContext)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration"/> class.
            </summary>
            <param name="internalContext">The internal context.</param>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
            <summary>
                Gets or sets a value indicating whether lazy loading of relationships exposed as
                navigation properties is enabled.  Lazy loading is enabled by default.
            </summary>
            <value><c>true</c> if lazy loading is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
            <summary>
                Gets or sets a value indicating whether or not the framework will create instances of
                dynamically generated proxy classes whenever it creates an instance of an entity type.
                Note that even if proxy creation is enabled with this flag, proxy instances will only
                be created for entity types that meet the requirements for being proxied.
                Proxy creation is enabled by default.
            </summary>
            <value><c>true</c> if proxy creation is enabled; otherwise, <c>false</c>.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled" -->
        <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
            <summary>
                Gets or sets a value indicating whether tracked entities should be validated automatically when
                <see cref="M:System.Data.Entity.DbContext.SaveChanges"/> is invoked.
                The default value is true.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
            <summary>
                Provides runtime information about a given <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
            <summary>
                Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
            <param name="contextType">The type deriving from <see cref="T:System.Data.Entity.DbContext"/>.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
            <summary>
                Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext"/> targeting a specific database.
            </summary>
            <param name="contextType">The type deriving from <see cref="T:System.Data.Entity.DbContext"/>.</param>
            <param name="connectionInfo">Connection information for the database to be used.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
            <summary>
                Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext"/> type. An external list of 
                connection strings can be supplied and will be used during connection string resolution in place
                of any connection strings specified in external configuration files.
            </summary>
            <remarks>
                It is preferable to use the constructor that accepts the entire config document instead of using this
                constructor. Providing the entire config document allows DefaultConnectionFactroy entries in the config
                to be found in addition to explicitly specified connection strings.
            </remarks>
            <param name="contextType">The type deriving from <see cref="T:System.Data.Entity.DbContext"/>.</param>
            <param name="connectionStringSettings">A collection of connection strings.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
            <summary>
                Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext"/> type. An external config 
                object (e.g. app.config or web.config) can be supplied and will be used during connection string
                resolution. This includes looking for connection strings and DefaultConnectionFactory entries.
            </summary>
            <param name="contextType">The type deriving from <see cref="T:System.Data.Entity.DbContext"/>.</param>
            <param name="config">An object representing the config file.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
            <summary>
                Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext"/>, targeting a specific database.
                An external config object (e.g. app.config or web.config) can be supplied and will be used during connection string
                resolution. This includes looking for connection strings and DefaultConnectionFactory entries.
            </summary>
            <param name="contextType">The type deriving from <see cref="T:System.Data.Entity.DbContext"/>.</param>
            <param name="config">An object representing the config file.</param>
            <param name="connectionInfo">Connection information for the database to be used.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
            <summary>
                Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext"/> type.  A <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo"/>
                can be supplied in order to override the default determined provider used when constructing
                the underlying EDM model.
            </summary>
            <param name="contextType">The type deriving from <see cref="T:System.Data.Entity.DbContext"/>.</param>
            <param name="modelProviderInfo">A <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo"/> specifying the underlying ADO.NET provider to target.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbProviderInfo)">
            <summary>
                Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext"/> type. An external config 
                object (e.g. app.config or web.config) can be supplied and will be used during connection string
                resolution. This includes looking for connection strings and DefaultConnectionFactory entries. 
                A <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo"/> can be supplied in order to override the default determined
                provider used when constructing the underlying EDM model. This can be useful to prevent EF from
                connecting to discover a manifest token.
            </summary>
            <param name="contextType">The type deriving from <see cref="T:System.Data.Entity.DbContext"/>.</param>
            <param name="config">An object representing the config file.</param>
            <param name="modelProviderInfo">A <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo"/> specifying the underlying ADO.NET provider to target.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Data.Entity.DbContext)">
            <summary>
            Called internally when a context info is needed for an existing context, which may not be constructable.
            </summary>
            <param name="context">The context instance to get info from.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
            <summary>
                If instances of the underlying <see cref="T:System.Data.Entity.DbContext"/> type can be created, returns
                a new instance; otherwise returns null.
            </summary>
            <returns>A <see cref="T:System.Data.Entity.DbContext"/> instance.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
            <summary>
                The concrete <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
            <summary>
                Whether or not instances of the underlying <see cref="T:System.Data.Entity.DbContext"/> type can be created.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
            <summary>
                The connection string used by the underlying <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
            <summary>
                The connection string name used by the underlying <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
            <summary>
                The ADO.NET provider name of the connection used by the underlying <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
            <summary>
                The origin of the connection string used by the underlying <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
            <summary>
                An action to be run on the DbModelBuilder after OnModelCreating has been run on the context.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
            <summary>
                A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.#ctor(System.Data.Entity.Internal.InternalEntityEntry)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> class.
            </summary>
            <param name="internalEntityEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
            <summary>
                Queries the database for copies of the values of the tracked entity as they currently exist in the database.
                Note that changing the values in the returned dictionary will not update the values in the database.
                If the entity is not found in the database then null is returned.
            </summary>
            <returns>The store values.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
            <summary>
                Reloads the entity from the database overwriting any property values with values from the database.
                The entity will be in the Unchanged state after calling this method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
            <summary>
                Gets an object that represents the reference (i.e. non-collection) navigation property from this
                entity to another entity.
            </summary>
            <param name = "navigationProperty">The name of the navigation property.</param>
            <returns>An object representing the navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
            <summary>
                Gets an object that represents the collection navigation property from this
                entity to a collection of related entities.
            </summary>
            <param name = "navigationProperty">The name of the navigation property.</param>
            <returns>An object representing the navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
            <summary>
                Gets an object that represents a scalar or complex property of this entity.
            </summary>
            <param name = "propertyName">The name of the property.</param>
            <returns>An object representing the property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
            <summary>
                Gets an object that represents a complex property of this entity.
            </summary>
            <param name = "propertyName">The name of the complex property.</param>
            <returns>An object representing the complex property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
            <summary>
                Gets an object that represents a member of the entity.  The runtime type of the returned object will
                vary depending on what kind of member is asked for.  The currently supported member types and their return
                types are:
                Reference navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/>.
                Collection navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/>.
                Primitive/scalar property: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/>.
                Complex property: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry"/>.
            </summary>
            <param name="propertyName">The name of the member.</param>
            <returns>An object representing the member.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
            <summary>
                Returns a new instance of the generic <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> class for the given
                generic type for the tracked entity represented by this object.
                Note that the type of the tracked entity must be compatible with the generic type or
                an exception will be thrown.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>A generic version.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
            <summary>
                Validates this <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> instance and returns validation result.
            </summary>
            <returns>
                Entity validation result. Possibly null if 
                <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})"/> method is overridden.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
                Two <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> instances are considered equal if they are both entries for
                the same entity on the same <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
            <summary>
                Determines whether the specified <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> is equal to this instance.
                Two <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> instances are considered equal if they are both entries for
                the same entity on the same <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="other">The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
            <summary>
                Gets the entity.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
            <summary>
                Gets or sets the state of the entity.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
            <summary>
                Gets the current property values for the tracked entity represented by this object.
            </summary>
            <value>The current values.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
            <summary>
                Gets the original property values for the tracked entity represented by this object.
                The original values are usually the entity's property values as they were when last queried from
                the database.
            </summary>
            <value>The original values.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.InternalEntry">
            <summary>
                Gets InternalEntityEntry object for this DbEntityEntry instance.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
            <summary>
                Instances of this class provide access to information about and control of entities that
                are being tracked by the <see cref="T:System.Data.Entity.DbContext"/>.  Use the Entity or Entities methods of
                the context to obtain objects of this type.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.#ctor(System.Data.Entity.Internal.InternalEntityEntry)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> class.
            </summary>
            <param name="internalEntityEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
            <summary>
                Queries the database for copies of the values of the tracked entity as they currently exist in the database.
                Note that changing the values in the returned dictionary will not update the values in the database.
                If the entity is not found in the database then null is returned.
            </summary>
            <returns>The store values.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
            <summary>
                Reloads the entity from the database overwriting any property values with values from the database.
                The entity will be in the Unchanged state after calling this method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
            <summary>
                Gets an object that represents the reference (i.e. non-collection) navigation property from this
                entity to another entity.
            </summary>
            <param name = "navigationProperty">The name of the navigation property.</param>
            <returns>An object representing the navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
            <summary>
                Gets an object that represents the reference (i.e. non-collection) navigation property from this
                entity to another entity.
            </summary>
            <typeparam name = "TProperty">The type of the property.</typeparam>
            <param name = "navigationProperty">The name of the navigation property.</param>
            <returns>An object representing the navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Gets an object that represents the reference (i.e. non-collection) navigation property from this
                entity to another entity.
            </summary>
            <typeparam name = "TProperty">The type of the property.</typeparam>
            <param name = "navigationProperty">An expression representing the navigation property.</param>
            <returns>An object representing the navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
            <summary>
                Gets an object that represents the collection navigation property from this
                entity to a collection of related entities.
            </summary>
            <param name = "navigationProperty">The name of the navigation property.</param>
            <returns>An object representing the navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
            <summary>
                Gets an object that represents the collection navigation property from this
                entity to a collection of related entities.
            </summary>
            <typeparam name = "TElement">The type of elements in the collection.</typeparam>
            <param name = "navigationProperty">The name of the navigation property.</param>
            <returns>An object representing the navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
            <summary>
                Gets an object that represents the collection navigation property from this
                entity to a collection of related entities.
            </summary>
            <typeparam name = "TElement">The type of elements in the collection.</typeparam>
            <param name = "navigationProperty">An expression representing the navigation property.</param>
            <returns>An object representing the navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
            <summary>
                Gets an object that represents a scalar or complex property of this entity.
            </summary>
            <param name = "propertyName">The name of the property.</param>
            <returns>An object representing the property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
            <summary>
                Gets an object that represents a scalar or complex property of this entity.
            </summary>
            <typeparam name = "TProperty">The type of the property.</typeparam>
            <param name = "propertyName">The name of the property.</param>
            <returns>An object representing the property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Gets an object that represents a scalar or complex property of this entity.
            </summary>
            <typeparam name = "TProperty">The type of the property.</typeparam>
            <param name = "navigationProperty">An expression representing the property.</param>
            <returns>An object representing the property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
            <summary>
                Gets an object that represents a complex property of this entity.
            </summary>
            <param name = "propertyName">The name of the complex property.</param>
            <returns>An object representing the complex property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
            <summary>
                Gets an object that represents a complex property of this entity.
            </summary>
            <typeparam name = "TComplexProperty">The type of the complex property.</typeparam>
            <param name = "propertyName">The name of the complex property.</param>
            <returns>An object representing the complex property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Gets an object that represents a complex property of this entity.
            </summary>
            <typeparam name = "TComplexProperty">The type of the complex property.</typeparam>
            <param name = "navigationProperty">An expression representing the complex property.</param>
            <returns>An object representing the complex property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
            <summary>
                Gets an object that represents a member of the entity.  The runtime type of the returned object will
                vary depending on what kind of member is asked for.  The currently supported member types and their return
                types are:
                Reference navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/>.
                Collection navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/>.
                Primitive/scalar property: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/>.
                Complex property: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry"/>.
            </summary>
            <param name="propertyName">The name of the member.</param>
            <returns>An object representing the member.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
            <summary>
                Gets an object that represents a member of the entity.  The runtime type of the returned object will
                vary depending on what kind of member is asked for.  The currently supported member types and their return
                types are:
                Reference navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/>.
                Collection navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/>.
                Primitive/scalar property: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/>.
                Complex property: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2"/>.
            </summary>
            <typeparam name="TMember">The type of the member.</typeparam>
            <param name="propertyName">The name of the member.</param>
            <returns>An object representing the member.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
            <summary>
                Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> class for 
                the tracked entity represented by this object.
            </summary>
            <returns>A non-generic version.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
            <summary>
                Validates this <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> instance and returns validation result.
            </summary>
            <returns>
                Entity validation result. Possibly null if 
                <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})"/> method is overridden.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
                Two <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> instances are considered equal if they are both entries for
                the same entity on the same <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
            <summary>
                Determines whether the specified <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> is equal to this instance.
                Two <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> instances are considered equal if they are both entries for
                the same entity on the same <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="other">The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
            <summary>
                Gets the entity.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
            <summary>
                Gets or sets the state of the entity.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
            <summary>
                Gets the current property values for the tracked entity represented by this object.
            </summary>
            <value>The current values.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
            <summary>
                Gets the original property values for the tracked entity represented by this object.
                The original values are usually the entity's property values as they were when last queried from
                the database.
            </summary>
            <value>The original values.</value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbModel">
            <summary>
                Represents an Entity Data Model (EDM) created by the <see cref="T:System.Data.Entity.DbModelBuilder"/>.
                The Compile method can be used to go from this EDM representation to a <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel"/>
                which is a compiled snapshot of the model suitable for caching and creation of
                <see cref="T:System.Data.Entity.DbContext"/> or <see cref="T:System.Data.Objects.ObjectContext"/> instances.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbModel.#ctor(System.Data.Entity.Edm.Db.Mapping.DbDatabaseMapping,System.Data.Entity.DbModelBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbModel"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbModel.#ctor(System.Data.Entity.Edm.Db.Mapping.DbDatabaseMapping)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbModel"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
            <summary>
                Creates a <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel"/> for this mode which is a compiled snapshot
                suitable for caching and creation of <see cref="T:System.Data.Entity.DbContext"/> instances.
            </summary>
            <returns>The compiled model.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbModel.CachedModelBuilder">
            <summary>
            A snapshot of the <see cref="T:System.Data.Entity.DbModelBuilder"/> that was used to create this compiled model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
            <summary>
                A collection of all the properties for an underlying entity or complex object.
            </summary>
            <remarks>
                An instance of this class can be converted to an instance of the generic class
                using the Cast method.
                Complex properties in the underlying entity or complex object are represented in
                the property values as nested instances of this class.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.#ctor(System.Data.Entity.Internal.InternalPropertyValues)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues"/> class.
            </summary>
            <param name="internalValues">The internal dictionary.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
            <summary>
                Creates an object of the underlying type for this dictionary and hydrates it with property
                values from this dictionary.
            </summary>
            <returns>The properties of this dictionary copied into a new object.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
            <summary>
                Sets the values of this dictionary by reading values out of the given object.
                The given object can be of any type.  Any property on the object with a name that
                matches a property name in the dictionary and can be read will be read.  Other
                properties will be ignored.  This allows, for example, copying of properties from
                simple Data Transfer Objects (DTOs).
            </summary>
            <param name = "obj">The object to read values from.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
            <summary>
                Creates a new dictionary containing copies of all the properties in this dictionary.
                Changes made to the new dictionary will not be reflected in this dictionary and vice versa.
            </summary>
            <returns>A clone of this dictionary.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
            <summary>
                Sets the values of this dictionary by reading values from another dictionary.
                The other dictionary must be based on the same type as this dictionary, or a type derived
                from the type for this dictionary.
            </summary>
            <param name = "dictionary">The dictionary to read values from.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
            <summary>
                Gets the value of the property just like using the indexed property getter but
                typed to the type of the generic parameter.  This is useful especially with
                nested dictionaries to avoid writing expressions with lots of casts.
            </summary>
            <typeparam name = "TValue">The type of the property.</typeparam>
            <param name = "propertyName">Name of the property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
            <summary>
                Gets the set of names of all properties in this dictionary as a read-only set.
            </summary>
            <value>The property names.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
            <summary>
                Gets or sets the value of the property with the specified property name.
                The value may be a nested instance of this class.
            </summary>
            <param name = "propertyName">The property name.</param>
            <value>The value of the property.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.InternalPropertyValues">
            <summary>
                Gets the internal dictionary.
            </summary>
            <value>The internal dictionary.</value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
            <summary>
                A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Create(System.Data.Entity.Internal.InternalReferenceEntry)">
            <summary>
                Creates a <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/> from information in the given <see cref="T:System.Data.Entity.Internal.InternalReferenceEntry"/>.
                Use this method in preference to the constructor since it may potentially create a subclass depending on
                the type of member represented by the InternalCollectionEntry instance.
            </summary>
            <param name="internalReferenceEntry">The internal reference entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.#ctor(System.Data.Entity.Internal.InternalReferenceEntry)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/> class.
            </summary>
            <param name="internalReferenceEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
            <summary>
                Loads the entity from the database.
                Note that if the entity already exists in the context, then it will not overwritten with values from the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
            <summary>
                Returns the query that would be used to load this entity from the database.
                The returned query can be modified using LINQ to perform filtering or operations in the database.
            </summary>
            <returns>A query for the entity.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
            <summary>
                Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/> object.
            </summary>
            <typeparam name="TEntity">The type of entity on which the member is declared.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>The equivalent generic object.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
            <summary>
                Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
            <summary>
                Gets or sets the current value of the navigation property.  The current value is
                the entity that the navigation property references.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
            <summary>
                Gets a value indicating whether the entity has been loaded from the database.
            </summary>
            <value><c>true</c> if the entity is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
            <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> to which this navigation property belongs.
            </summary>
            <value>An entry for the entity that owns this navigation property.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.InternalMemberEntry">
            <summary>
                Gets the <see cref="T:System.Data.Entity.Internal.InternalReferenceEntry"/> backing this object as an <see cref="P:System.Data.Entity.Infrastructure.DbReferenceEntry.InternalMemberEntry"/>.
            </summary>
            <value>The internal member entry.</value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
            <summary>
                Instances of this class are returned from the Reference method of
                <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> and allow operations such as loading to
                be performed on the an entity's reference navigation properties.
            </summary>
            <typeparam name="TEntity">The type of the entity to which this property belongs.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Create(System.Data.Entity.Internal.InternalReferenceEntry)">
            <summary>
                Creates a <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/> from information in the given <see cref="T:System.Data.Entity.Internal.InternalReferenceEntry"/>.
                Use this method in preference to the constructor since it may potentially create a subclass depending on
                the type of member represented by the InternalCollectionEntry instance.
            </summary>
            <param name="internalReferenceEntry">The internal reference entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.#ctor(System.Data.Entity.Internal.InternalReferenceEntry)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/> class.
            </summary>
            <param name="internalReferenceEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
            <summary>
                Loads the entity from the database.
                Note that if the entity already exists in the context, then it will not overwritten with values from the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
            <summary>
                Returns the query that would be used to load this entity from the database.
                The returned query can be modified using LINQ to perform filtering or operations in the database.
            </summary>
            <returns>A query for the entity.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
            <summary>
                Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/> class for 
                the navigation property represented by this object.
            </summary>
            <returns>A non-generic version.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
            <summary>
                Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
            <summary>
                Gets or sets the current value of the navigation property.  The current value is
                the entity that the navigation property references.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
            <summary>
                Gets a value indicating whether the entity has been loaded from the database.
            </summary>
            <value><c>true</c> if the entity is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.InternalMemberEntry">
            <summary>
                Gets the underlying <see cref="T:System.Data.Entity.Internal.InternalReferenceEntry"/> as an <see cref="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.InternalMemberEntry"/>.
            </summary>
            <value>The internal member entry.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
            <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> to which this navigation property belongs.
            </summary>
            <value>An entry for the entity that owns this navigation property.</value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
            <summary>
                Represents a SQL query for entities that is created from a <see cref="T:System.Data.Entity.DbContext"/> 
                and is executed using the connection from that context.
                Instances of this class are obtained from the <see cref="T:System.Data.Entity.DbSet"/> instance for the 
                entity type. The query is not executed when this object is created; it is executed
                each time it is enumerated, for example by using foreach.
                SQL queries for non-entities are created using the <see cref="P:System.Data.Entity.DbContext.Database"/>.
                See <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1"/> for a generic version of this class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.#ctor(System.Data.Entity.Internal.InternalSqlQuery)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery"/> class.
            </summary>
            <param name="internalQuery">The internal query.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetEnumerator">
            <summary>
                Executes the query and returns an enumerator for the elements.
            </summary>
            <returns>
                An <see cref = "T:System.Collections.IEnumerator" /> object that can be used to iterate through the elements.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
            <summary>
                Returns a new query where the results of the query will not be tracked by the associated
                <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns>A new query with no-tracking applied.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that contains the SQL string that was set
                when the query was created.  The parameters are not included.
            </summary>
            <returns>
                A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.System#ComponentModel#IListSource#GetList">
            <summary>
                Throws an exception indicating that binding directly to a store query is not supported.
            </summary>
            <returns>
                Never returns; always throws.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery.InternalQuery">
            <summary>
                Gets the internal query.
            </summary>
            <value>The internal query.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
                Returns <c>false</c>.
            </summary>
            <returns><c>false</c>.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
            <summary>
                Represents a SQL query for entities that is created from a <see cref="T:System.Data.Entity.DbContext"/> 
                and is executed using the connection from that context.
                Instances of this class are obtained from the <see cref="T:System.Data.Entity.DbSet`1"/> instance for the 
                entity type. The query is not executed when this object is created; it is executed
                each time it is enumerated, for example by using foreach.
                SQL queries for non-entities are created using the <see cref="P:System.Data.Entity.DbContext.Database"/>.
                See <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery"/> for a non-generic version of this class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetEnumerator">
            <summary>
                Executes the query and returns an enumerator for the elements.
            </summary>
            An
            <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            object that can be used to iterate through the elements.
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Executes the query and returns an enumerator for the elements.
            </summary>
            <returns>
                An <see cref = "T:System.Collections.IEnumerator" /> object that can be used to iterate through the elements.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
            <summary>
                Returns a new query where the results of the query will not be tracked by the associated
                <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns>A new query with no-tracking applied.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that contains the SQL string that was set
                when the query was created.  The parameters are not included.
            </summary>
            <returns>
                A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#ComponentModel#IListSource#GetList">
            <summary>
                Throws an exception indicating that binding directly to a store query is not supported.
            </summary>
            <returns>
                Never returns; always throws.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery`1.InternalQuery">
            <summary>
                Gets the internal query.
            </summary>
            <value>The internal query.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
                Returns <c>false</c>.
            </summary>
            <returns><c>false</c>.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
            <summary>
                Exception thrown by <see cref="T:System.Data.Entity.DbContext"/> when it was expected that SaveChanges for an entity would
                result in a database update but in fact no rows in the database were affected.  This usually indicates
                that the database has been concurrently updated such that a concurrency token that was expected to match
                did not actually match.
                Note that state entries referenced by this exception are not serialized due to security and accesses to
                the state entries after serialization will return null.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Data.Entity.Infrastructure.DbUpdateException" -->
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.Data.Entity.Internal.InternalContext,System.Data.UpdateException,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
            <param name="internalContext">The internal context.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.SubscribeToSerializeObjectState">
            <summary>
                Subscribes the SerializeObjectState event.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
            <summary>
                Gets <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> objects that represents the entities that could not
                be saved to the database.
            </summary>
            <returns>The entries representing the entities that could not be saved.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbUpdateException.DbUpdateExceptionState">
            <summary>
                Holds exception state that will be serialized when the exception is serialized.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.DbUpdateExceptionState.CompleteDeserialization(System.Object)">
            <summary>
                Completes the deserialization.
            </summary>
            <param name = "deserialized">The deserialized object.</param>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.DbUpdateExceptionState.InvolvesIndependentAssociations">
            <summary>
                Gets or sets a value indicating whether the exception involved independent associations.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.Data.Entity.Internal.InternalContext,System.Data.OptimisticConcurrencyException)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
            <summary>
                Represents an entity used to store metadata about an EDM in the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
            <summary>
                Attempts to get the model hash calculated by Code First for the given context.
                This method will return null if the context is not being used in Code First mode.
            </summary>
            <param name = "context">The context.</param>
            <returns>The hash string.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
            <summary>
                Gets or sets the ID of the metadata entity, which is currently always 1.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
            <summary>
                Gets or sets the model hash which is used to check whether the model has
                changed since the database was created from it.
            </summary>
            <value>The model hash.</value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
            <summary>
                Contains methods used to access the Entity Data Model created by Code First in the EDMX form.
                These methods are typically used for debugging when there is a need to look at the model that
                Code First creates internally.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
            <summary>
                Uses Code First with the given context and writes the resulting Entity Data Model to the given
                writer in EDMX form.  This method can only be used with context instances that use Code First
                and create the model internally.  The method cannot be used for contexts created using Database
                First or Model First, for contexts created using a pre-existing <see cref="T:System.Data.Objects.ObjectContext"/>, or
                for contexts created using a pre-existing <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel"/>.
            </summary>
            <param name="context">The context.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
            <summary>
                Writes the Entity Data Model represented by the given <see cref="T:System.Data.Entity.Infrastructure.DbModel"/> to the
                given writer in EDMX form.
            </summary>
            <param name="modelaseMapping">An object representing the EDM.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
            <summary>
                A factory for creating derived <see cref="T:System.Data.Entity.DbContext"/> instances. Implement this 
                interface to enable design-time services for context types that do not have a 
                public default constructor.
                
                At design-time, derived <see cref="T:System.Data.Entity.DbContext"/> instances can be created in order to enable specific
                design-time experiences such as model rendering, DDL generation etc. To enable design-time instantiation
                for derived <see cref="T:System.Data.Entity.DbContext"/> types that do not have a public, default constructor, implement 
                this interface. Design-time services will auto-discover implementations of this interface that are in the
                same assembly as the derived <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
            <summary>
                Creates a new instance of a derived <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
            <returns>An instance of TContext</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
            <summary>
                This <see cref="T:System.Data.Entity.DbModelBuilder"/> convention causes DbModelBuilder to include metadata about the model 
                when it builds the model. When <see cref="T:System.Data.Entity.DbContext"/> creates a model by convention it will
                add this convention to the list of those used by the DbModelBuilder.  This will then result in
                model metadata being written to the database if the DbContext is used to create the database.
                This can then be used as a quick check to see if the model has changed since the last time it was
                used against the database.
                This convention can be removed from the <see cref="T:System.Data.Entity.DbModelBuilder"/> conventions by overriding
                the OnModelCreating method on a derived DbContext class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.IncludeMetadataConvention.System#Data#Entity#ModelConfiguration#Conventions#IConfigurationConvention#Apply(System.Data.Entity.ModelConfiguration.Configuration.ModelConfiguration)">
            <summary>
                Adds metadata to the given model configuration.
            </summary>
            <param name = "modelConfiguration">The model configuration.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
            <summary>
                This <see cref="T:System.Data.Entity.DbModelBuilder"/> convention uses the name of the derived
                <see cref="T:System.Data.Entity.DbContext"/> class as the container for the conceptual model built by
                Code First.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.ModelContainerConvention.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.ModelContainerConvention"/> class.
            </summary>
            <param name="containerName">The model container name.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.ModelContainerConvention.System#Data#Entity#ModelConfiguration#Conventions#IEdmConvention#Apply(System.Data.Entity.Edm.EdmModel)">
            <summary>
                Applies the convention to the given model.
            </summary>
            <param name = "model">The model.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
            <summary>
                This <see cref="T:System.Data.Entity.DbModelBuilder"/> convention uses the namespace of the derived
                <see cref="T:System.Data.Entity.DbContext"/> class as the namespace of the conceptual model built by
                Code First.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.ModelNamespaceConvention.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention"/> class.
            </summary>
            <param name="modelNamespace">The model namespace.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.ModelNamespaceConvention.System#Data#Entity#ModelConfiguration#Conventions#IEdmConvention#Apply(System.Data.Entity.Edm.EdmModel)">
            <summary>
                Applies the convention to the given model.
            </summary>
            <param name = "model">The model.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
            <summary>
                Instances of this class are used internally to create constant expressions for <see cref="T:System.Data.Objects.ObjectQuery`1"/>
                that are inserted into the expression tree to  replace references to <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1"/>
                and <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/>.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.#ctor(System.Data.Objects.ObjectQuery{`0})">
            <summary>
                Private constructor called by the Create factory method.
            </summary>
            <param name = "query">The query.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Create(System.Data.Objects.ObjectQuery)">
            <summary>
                Factory method called by CreateDelegate to create an instance of this class.
            </summary>
            <param name = "query">The query, which must be a generic object of the expected type.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
            <summary>
                The public property expected in the LINQ expression tree.
            </summary>
            <value>The query.</value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
            <summary>
                Instances of this class are used to create DbConnection objects for
                SQL Server Compact Edition based on a given database name or connection string.
            </summary>
            <remarks>
                It is necessary to provide the provider invariant name of the SQL Server Compact
                Edition to use when creating an instance of this class.  This is because different
                versions of SQL Server Compact Editions use different invariant names.
                An instance of this class can be set on the <see cref="T:System.Data.Entity.Database"/> class to
                cause all DbContexts created with no connection information or just a database
                name or connection string to use SQL Server Compact Edition by default.
                This class is immutable since multiple threads may access instances simultaneously
                when creating connections.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
            <summary>
                Creates a new connection factory with empty (default) DatabaseDirectory and BaseConnectionString
                properties.
            </summary>
            <param name = "providerInvariantName">The provider invariant name that specifies the version of SQL Server Compact Edition that should be used.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
            <summary>
                Creates a new connection factory with the given DatabaseDirectory and BaseConnectionString properties.
            </summary>
            <param name = "providerInvariantName">
                The provider invariant name that specifies the version of SQL Server Compact Edition that should be used.
            </param>
            <param name = "databaseDirectory">
                The path to prepend to the database name that will form the file name used by SQL Server Compact Edition
                when it creates or reads the database file. An empty string means that SQL Server Compact Edition will use
                its default for the database file location.
            </param>
            <param name = "baseConnectionString">
                The connection string to use for options to the database other than the 'Data Source'. The Data Source will
                be prepended to this string based on the database name when CreateConnection is called.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
            <summary>
                Creates a connection for SQL Server Compact Edition based on the given database name or connection string.
                If the given string contains an '=' character then it is treated as a full connection string,
                otherwise it is treated as a database name only.
            </summary>
            <param name = "nameOrConnectionString">The database name or connection string.</param>
            <returns>An initialized DbConnection.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
            <summary>
                The path to prepend to the database name that will form the file name used by
                SQL Server Compact Edition when it creates or reads the database file.
                The default value is "|DataDirectory|", which means the file will be placed
                in the designated data directory.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
            <summary>
                The connection string to use for options to the database other than the 'Data Source'.
                The Data Source will be prepended to this string based on the database name when
                CreateConnection is called.
                The default is the empty string, which means no other options will be used.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
            <summary>
                The provider invariant name that specifies the version of SQL Server Compact Edition
                that should be used.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
            <summary>
                Instances of this class are used to create DbConnection objects for
                SQL Server based on a given database name or connection string. By default, the connection is
                made to '.\SQLEXPRESS'.  This can be changed by changing the base connection
                string when constructing a factory instance.
            </summary>
            <remarks>
                An instance of this class can be set on the <see cref="T:System.Data.Entity.Database"/> class to
                cause all DbContexts created with no connection information or just a database
                name or connection string to use SQL Server by default.
                This class is immutable since multiple threads may access instances simultaneously
                when creating connections.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
            <summary>
                Creates a new connection factory with a default BaseConnectionString property of
                'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True'.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
            <summary>
                Creates a new connection factory with the given BaseConnectionString property.
            </summary>
            <param name = "baseConnectionString">
                The connection string to use for options to the database other than the 'Initial Catalog'. The 'Initial Catalog' will
                be prepended to this string based on the database name when CreateConnection is called.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
            <summary>
                Creates a connection for SQL Server based on the given database name or connection string.
                If the given string contains an '=' character then it is treated as a full connection string,
                otherwise it is treated as a database name only.
            </summary>
            <param name = "nameOrConnectionString">The database name or connection string.</param>
            <returns>An initialized DbConnection.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.ProviderFactory">
            <summary>
                Remove hard dependency on DbProviderFactories.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
            <summary>
                The connection string to use for options to the database other than the 'Initial Catalog'.
                The 'Initial Catalog' will  be prepended to this string based on the database name when
                CreateConnection is called.
                The default is 'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True'.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
            <summary>
                This attribute can be applied to either an entire derived <see cref="T:System.Data.Entity.DbContext"/> class or to
                individual <see cref="T:System.Data.Entity.DbSet`1"/> or <see cref="T:System.Data.Entity.IDbSet`1"/> properties on that class.  When applied
                any discovered <see cref="T:System.Data.Entity.DbSet`1"/> or <see cref="T:System.Data.Entity.IDbSet`1"/> properties will still be included
                in the model but will not be automatically initialized.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
            <summary>
                Thrown when a context is generated from the <see cref="T:System.Data.Entity.DbContext"/> templates in Database First or Model
                First mode and is then used in Code First mode.
            </summary>
            <remarks>
                Code generated using the T4 templates provided for Database First and Model First use may not work
                correctly if used in Code First mode. To use these classes with Code First please add any additional
                configuration using attributes or the DbModelBuilder API and then remove the code that throws this
                exception.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:System.Data.Entity.Internal.CodeFirstCachedMetadataWorkspace">
            <summary>
                Implements ICachedMetadataWorkspace for a Code First model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.ICachedMetadataWorkspace">
            <summary>
                Represents an object that holds a cached copy of a MetadataWorkspace and optionally the
                assemblies containing entity types to use with that workspace.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.ICachedMetadataWorkspace.GetMetadataWorkspace(System.Data.Common.DbConnection)">
            <summary>
                Gets the MetadataWorkspace, potentially lazily creating it if it does not already exist.
                If the workspace is not compatible with the provider manifest obtained from the given
                connection then an exception is thrown.
            </summary>
            <param name = "storeConnection">The connection to use to create or check SSDL provider info.</param>
            <returns>The workspace.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.ICachedMetadataWorkspace.Assemblies">
            <summary>
                The list of assemblies that contain entity types for this workspace, which may be empty, but
                will never be null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.ICachedMetadataWorkspace.DefaultContainerName">
            <summary>
                The default container name for code first is the container name that is set from the DbModelBuilder
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.ICachedMetadataWorkspace.ProviderInfo">
            <summary>
            The provider info used to construct the workspace.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.CodeFirstCachedMetadataWorkspace.#ctor(System.Data.Entity.Edm.Db.Mapping.DbDatabaseMapping)">
            <summary>
                Builds and stores the workspace based on the given code first configuration.
            </summary>
            <param name = "databaseMapping">The code first EDM model.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.CodeFirstCachedMetadataWorkspace.GetMetadataWorkspace(System.Data.Common.DbConnection)">
            <summary>
                Gets the <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace"/>.
                If the workspace is not compatible with the provider manifest obtained from the given
                connection then an exception is thrown.
            </summary>
            <param name="storeConnection">The connection to use to create or check SSDL provider info.</param>
            <returns>The workspace.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.CodeFirstCachedMetadataWorkspace.DefaultContainerName">
            <summary>
                The default container name for code first is the container name that is set from the DbModelBuilder
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.CodeFirstCachedMetadataWorkspace.Assemblies">
            <summary>
                The list of assemblies that contain entity types for this workspace, which may be empty, but
                will never be null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.CodeFirstCachedMetadataWorkspace.ProviderInfo">
            <summary>
            The provider info used to construct the workspace.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.DatabaseOperations">
            <summary>
                The methods here are called from multiple places with an ObjectContext that may have
                been created in a variety of ways and ensure that the same code is run regardless of
                how the context was created.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DatabaseOperations.Create(System.Data.Objects.ObjectContext)">
            <summary>
                Used a delegate to do the actual creation once an ObjectContext has been obtained.
                This is factored in this way so that we do the same thing regardless of how we get to
                having an ObjectContext.
                Note however that a context obtained from only a connection will have no model and so
                will result in an empty database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DatabaseOperations.Exists(System.Data.Objects.ObjectContext)">
            <summary>
                Used a delegate to do the actual existence check once an ObjectContext has been obtained.
                This is factored in this way so that we do the same thing regardless of how we get to
                having an ObjectContext.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DatabaseOperations.DeleteIfExists(System.Data.Objects.ObjectContext)">
            <summary>
                Used a delegate to do the actual check/delete once an ObjectContext has been obtained.
                This is factored in this way so that we do the same thing regardless of how we get to
                having an ObjectContext.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.DbContextTypesInitializersPair">
            <summary>
                Helper class that extends Tuple to give the Item1 and Item2 properties more meaningful names.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbContextTypesInitializersPair.#ctor(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.List{System.String}},System.Action{System.Data.Entity.DbContext})">
            <summary>
                Creates a new pair of the given set of entity types and DbSet initializer delegate.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.DbContextTypesInitializersPair.EntityTypeToPropertyNameMap">
            <summary>
                The entity types part of the pair.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.DbContextTypesInitializersPair.SetsInitializer">
            <summary>
                The DbSet properties initializer part of the pair.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.DbHelpers">
            <summary>
                Static helper methods only.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.ThrowIfNull``1(``0,System.String)">
            <summary>
                Checks whether the given value is null and throws ArgumentNullException if it is.
                This method should only be used in places where Code Contracts are compiled out in the
                release build but we still need public surface null-checking, such as where a public
                abstract class is implemented by an internal concrete class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.ThrowIfNullOrWhitespace(System.String,System.String)">
            <summary>
                Checks whether the given string is null, empty, or just whitespace, and throws appropriately
                if the check fails.
                This method should only be used in places where Code Contracts are compiled out in the
                release build but we still need public surface checking, such as where a public
                abstract class is implemented by an internal concrete class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.KeyValuesEqual(System.Object,System.Object)">
            <summary>
                Given two key values that may or may not be byte arrays, this method determines
                whether or not they are equal.  For non-binary key values, this is equivalent
                to Object.Equals.  For binary keys, it is by comparison of every byte in the
                arrays.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.QuoteIdentifier(System.String)">
            <summary>
                Provides a standard helper method for quoting identifiers
            </summary>
            <param name = "identifier">Identifier to be quoted. Does not validate that this identifier is valid.</param>
            <returns>Quoted string</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.TreatAsConnectionString(System.String)">
            <summary>
                Checks the given string which might be a database name or a connection string and determines
                whether it should be treated as a name or connection string.  Currently, the test is simply
                whether or not the string contains an '=' character--if it does, then it should be treated
                as a connection string.
            </summary>
            <param name = "nameOrConnectionString">The name or connection string.</param>
            <returns><c>true</c> if the string should be treated as a connection string; <c>false</c> if it should be treated as a name.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.TryGetConnectionName(System.String,System.String@)">
            <summary>
                Determines whether the given string should be treated as a database name directly (it contains no '='),
                is in the form name=foo, or is some other connection string.  If it is a direct name or has name=, then
                the name is extracted and the method returns true.
            </summary>
            <param name = "nameOrConnectionString">The name or connection string.</param>
            <param name = "name">The name.</param>
            <returns>True if a name is found; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.IsFullEFConnectionString(System.String)">
            <summary>
                Determines whether the given string is a full EF connection string with provider, provider connection string,
                and metadata parts, or is is instead some other form of connection string.
            </summary>
            <param name = "nameOrConnectionString">The name or connection string.</param>
            <returns><c>true</c> if the given string is an EF connection string; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.ParsePropertySelector``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
            <summary>
                Parses a property selector expression used for the expression-based versions of the Property, Collection, Reference,
                etc methods on <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> and
                <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> classes.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="methodName">Name of the method.</param>
            <param name="paramName">Name of the param.</param>
            <returns>The property name.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.TryParsePath(System.Linq.Expressions.Expression,System.String@)">
            <summary>
                Called recursively to parse an expression tree representing a property path such
                as can be passed to Include or the Reference/Collection/Property methods of <see cref="T:System.Data.Entity.Internal.InternalEntityEntry"/>.
                This involves parsing simple property accesses like o =&gt; o.Products as well as calls to Select like
                o =&gt; o.Products.Select(p =&gt; p.OrderLines).
            </summary>
            <param name="expression">The expression to parse.</param>
            <param name="path">The expression parsed into an include path, or null if the expression did not match.</param>
            <returns>True if matching succeeded; false if the expression could not be parsed.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.GetPropertyTypes(System.Type)">
            <summary>
                Gets a cached dictionary mapping property names to property types for all the properties
                in the given type.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.GetPropertySetters(System.Type)">
            <summary>
                Gets a dictionary of compiled property setter delegates for the underlying types.
                The dictionary is cached for the type in the app domain.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.ConvertAndSet``1(System.Object,System.Object,System.Action{System.Object,System.Object},System.String,System.String)">
            <summary>
                Used by the property setter delegates to throw for attempts to set null onto
                non-nullable properties or otherwise go ahead and set the property.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.GetPropertyGetters(System.Type)">
            <summary>
                Gets a dictionary of compiled property getter delegates for the underlying types.
                The dictionary is cached for the type in the app domain.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.CreateNoTrackingQuery(System.Data.Objects.ObjectQuery)">
            <summary>
                Creates a new <see cref="T:System.Data.Objects.ObjectQuery"/> with the NoTracking merge option applied.
                The query object passed in is not changed.
            </summary>
            <param name="query">The query.</param>
            <returns>A new query with NoTracking applied.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.SplitValidationResults(System.String,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
                Converts <see cref="T:System.Collections.Generic.IEnumerable`1"/> to <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="propertyName">
                Name of the property being validated with ValidationAttributes. Null for type-level validation.
            </param>
            <param name="validationResults">
                ValidationResults instances to be converted to <see cref="T:System.Data.Entity.Validation.DbValidationError"/> instances.
            </param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> created based on the 
                <paramref name="validationResults"/>.
            </returns>
            <remarks>
                <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> class contains a property with names of properties the error applies to.
                On the other hand each <see cref="T:System.Data.Entity.Validation.DbValidationError"/> applies at most to a single property. As a result for
                each name in ValidationResult.MemberNames one <see cref="T:System.Data.Entity.Validation.DbValidationError"/> will be created (with some 
                exceptions for special cases like null or empty .MemberNames or null names in the .MemberNames).
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.GetPropertyPath(System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
                Calculates a "path" to a property. For primitive properties on an entity type it is just the 
                name of the property. Otherwise it is a dot separated list of names of the property and all 
                its ancestor properties starting from the entity.
            </summary>
            <param name = "property">Property for which to calculate the path.</param>
            <returns>Dot separated path to the property.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.GetPropertyPathSegments(System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
                Gets names of the property and its ancestor properties as enumerable walking "bottom-up".
            </summary>
            <param name = "property">Property for which to get the segments.</param>
            <returns>Names of the property and its ancestor properties.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.CollectionType(System.Type)">
            <summary>
                Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> type for the given element type.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>The collection type.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.DatabaseName(System.Type)">
            <summary>
                Creates a database name given a type derived from DbContext.  This handles nested and
                generic classes.  No attempt is made to ensure that the name is not too long since this
                is provider specific.  If a too long name is generated then the provider will throw and
                the user must correct by specifying their own name in the DbContext constructor.
            </summary>
            <param name = "contextType">Type of the context.</param>
            <returns>The database name to use.</returns>
        </member>
        <member name="T:System.Data.Entity.Internal.DbLocalView`1">
            <summary>
                A local (in-memory) view of the entities in a DbSet.
                This view contains Added entities and does not contain Deleted entities.  The view extends
                from <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> and hooks up events between the collection and the
                state manager to keep the view in sync.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Internal.DbLocalView`1.#ctor(System.Data.Entity.Internal.InternalContext)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.DbLocalView`1"/> class for entities
                of the given generic type in the given internal context.
            </summary>
            <param name="internalContext">The internal context.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.DbLocalView`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Called by the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> base class when the collection changes.
                This method looks at the change made to the collection and reflects those changes in the
                state manager.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.DbLocalView`1.StateManagerChangedHandler(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
                Handles events from the state manager for entities entering, leaving, or being marked as deleted.
                The local view is kept in sync with these changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.DbLocalView`1.ClearItems">
            <summary>
                Clears the items by calling remove on each item such that we get Remove events that
                can be tracked back to the state manager, rather than a single Reset event that we
                cannot deal with.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbLocalView`1.InsertItem(System.Int32,`0)">
            <summary>
                Adds a contains check to the base implementation of InsertItem since we can't support
                duplicate entities in the set.
            </summary>
            <param name = "index">The index at which to insert.</param>
            <param name = "item">The item to insert.</param>
        </member>
        <member name="P:System.Data.Entity.Internal.DbLocalView`1.BindingList">
            <summary>
                Returns a cached binding list implementation backed by this ObservableCollection.
            </summary>
            <value>The binding list.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.DbSetDiscoveryService">
            <summary>
                Service used to search for instance properties on a DbContext class that can
                be assigned a DbSet instance.  Also, if the the property has a public setter,
                then a delegate is compiled to set the property to a new instance of DbSet.
                All of this information is cached per app domain.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbSetDiscoveryService.#ctor(System.Data.Entity.DbContext)">
            <summary>
                Creates a set discovery service for the given derived context.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbSetDiscoveryService.GetSets">
            <summary>
                Processes the given context type to determine the DbSet or IDbSet
                properties and collect root entity types from those properties.  Also, delegates are
                created to initialize any of these properties that have public setters.
                If the type has been processed previously in the app domain, then all this information
                is returned from a cache.
            </summary>
            <returns>A dictionary of potential entity type to the list of the names of the properties that used the type.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbSetDiscoveryService.InitializeSets">
            <summary>
                Calls the public setter on any property found to initialize it to a new instance of DbSet.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbSetDiscoveryService.RegisterSets(System.Data.Entity.DbModelBuilder)">
            <summary>
                Registers the entities and their entity set name hints with the given <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
            <param name="modelBuilder">The model builder.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.DbSetDiscoveryService.DbSetPropertyShouldBeInitialized(System.Reflection.PropertyInfo)">
            <summary>
                Returns false if SuppressDbSetInitializationAttribute is found on the property or the class, otherwise
                returns true.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbSetDiscoveryService.GetSetType(System.Type)">
            <summary>
                Determines whether or not an instance of DbSet/ObjectSet can be assigned to a property of the given type.
            </summary>
            <param name = "declaredType">The type to check.</param>
            <returns>The entity type of the DbSet/ObjectSet that can be assigned, or null if no set type can be assigned.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Internal.DbSetDiscoveryService.GetSetElementType(System.Type)" -->
        <member name="T:System.Data.Entity.Internal.EagerInternalConnection">
            <summary>
                A EagerInternalConnection object wraps an already existing DbConnection object.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalConnection">
            <summary>
                InternalConnection objects manage DbConnections.
                Two concrete base classes of this abstract interface exist:<see cref="T:System.Data.Entity.Internal.LazyInternalConnection"/>
                and <see cref="T:System.Data.Entity.Internal.EagerInternalConnection"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.IInternalConnection">
            <summary>
                IInternalConnection objects manage DbConnections.
                Two concrete implementations of this interface exist--LazyInternalConnection and EagerInternalConnection.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.IInternalConnection.CreateObjectContextFromConnectionModel">
            <summary>
                Creates an <see cref="T:System.Data.Objects.ObjectContext"/> from metadata in the connection.  This method must
                only be called if ConnectionHasModel returns true.
            </summary>
            <returns>The newly created context.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.IInternalConnection.Connection">
            <summary>
                Returns the underlying DbConnection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.IInternalConnection.ConnectionKey">
            <summary>
                Returns a key consisting of the connection type and connection string.
                If this is an EntityConnection then the metadata path is included in the key returned.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.IInternalConnection.ConnectionHasModel">
            <summary>
                Gets a value indicating whether the connection is an EF connection which therefore contains
                metadata specifying the model, or instead is a store connection, in which case it contains no
                model info.
            </summary>
            <value><c>true</c> if the connection contains model info; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.IInternalConnection.ConnectionStringOrigin">
            <summary>
                Returns the origin of the underlying connection string.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.IInternalConnection.AppConfig">
            <summary>
                Gets or sets an object representing a config file used for looking for DefaultConnectionFactory entries
                and connection strins.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.IInternalConnection.ProviderName">
            <summary>
                Gets or sets the provider to be used when creating the underlying connection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.IInternalConnection.ConnectionStringName">
            <summary>
                Gets the name of the underlying connection string.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.IInternalConnection.OriginalConnectionString">
            <summary>
                Gets the original connection string.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalConnection.CreateObjectContextFromConnectionModel">
            <summary>
                Creates an <see cref="T:System.Data.Objects.ObjectContext"/> from metadata in the connection.  This method must
                only be called if ConnectionHasModel returns true.
            </summary>
            <returns>The newly created context.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalConnection.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalConnection.OnConnectionInitialized">
            <summary>
                Called after the connection is initialized for the first time.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalConnection.AddAppNameCookieToConnectionString(System.Data.Common.DbConnection)">
            <summary>
                Adds a tracking cookie to the connection string for SqlConnections. Returns the
                possibly modified store connection string.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalConnection.Connection">
            <summary>
                Returns the underlying DbConnection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalConnection.ConnectionKey">
            <summary>
                Returns a key consisting of the connection type and connection string.
                If this is an EntityConnection then the metadata path is included in the key returned.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalConnection.ConnectionHasModel">
            <summary>
                Gets a value indicating whether the connection is an EF connection which therefore contains
                metadata specifying the model, or instead is a store connection, in which case it contains no
                model info.
            </summary>
            <value><c>true</c> if the connection contains model info; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalConnection.ConnectionStringOrigin">
            <summary>
                Returns the origin of the underlying connection string.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalConnection.AppConfig">
            <summary>
                Gets or sets an object representing a config file used for looking for DefaultConnectionFactory entries
                and connection strins.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalConnection.ProviderName">
            <summary>
                Gets or sets the provider to be used when creating the underlying connection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalConnection.ConnectionStringName">
            <summary>
                Gets the name of the underlying connection string.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalConnection.OriginalConnectionString">
            <summary>
                Gets the original connection string.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalConnection.UnderlyingConnection">
            <summary>
                Gets or sets the underlying <see cref="T:System.Data.Common.DbConnection"/> object.  No initialization is done when the
                connection is obtained, and it can also be set to null.
            </summary>
            <value>The underlying connection.</value>
        </member>
        <member name="M:System.Data.Entity.Internal.EagerInternalConnection.#ctor(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
                Creates a new EagerInternalConnection that wraps an existing DbConnection.
            </summary>
            <param name = "existingConnection">An existing connection.</param>
            <param name = "connectionOwned">If set to <c>true</c> then the underlying connection should be disposed when this object is disposed.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.EagerInternalConnection.Dispose">
            <summary>
                Dispose the existing connection is the original caller has specified that it should be disposed
                by the framework.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.EagerInternalConnection.ConnectionStringOrigin">
            <summary>
                Returns the origin of the underlying connection string.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.EagerInternalContext">
            <summary>
                An <see cref="T:System.Data.Entity.Internal.EagerInternalContext"/> is an <see cref="T:System.Data.Entity.Internal.InternalContext"/> where the <see cref="P:System.Data.Entity.Internal.EagerInternalContext.ObjectContext"/> 
                instance that it wraps is set immediately at construction time rather than being created lazily. In this case
                the internal context may or may not own the <see cref="P:System.Data.Entity.Internal.EagerInternalContext.ObjectContext"/> instance but will only dispose it
                if it does own it.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalContext">
            <summary>
                An <see cref="T:System.Data.Entity.Internal.InternalContext"/> underlies every instance of <see cref="T:System.Data.Entity.DbContext"/> and wraps an
                <see cref="P:System.Data.Entity.Internal.InternalContext.ObjectContext"/> instance.
                The <see cref="T:System.Data.Entity.Internal.InternalContext"/> also acts to expose necessary information to other parts of the design in a
                controlled manner without adding a lot of internal methods and properties to the <see cref="T:System.Data.Entity.DbContext"/>
                class itself.
                Two concrete classes derive from this abstract class - <see cref="T:System.Data.Entity.Internal.LazyInternalContext"/> and
                <see cref="T:System.Data.Entity.Internal.EagerInternalContext"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.#ctor(System.Data.Entity.DbContext)">
            <summary>
                Initializes the <see cref="T:System.Data.Entity.Internal.InternalContext"/> object with its <see cref="T:System.Data.Entity.DbContext"/> owner.
            </summary>
            <param name="owner">The owner <see cref="T:System.Data.Entity.DbContext"/>.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.GetObjectContextWithoutDatabaseInitialization">
            <summary>
                Returns the underlying <see cref="P:System.Data.Entity.Internal.InternalContext.ObjectContext"/> without causing the underlying database to be created
                or the database initialization strategy to be executed.
                This is used to get a context that can then be used for database creation/initialization.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.CreateObjectContextForDdlOps">
            <summary>
                Returns the underlying <see cref="P:System.Data.Entity.Internal.InternalContext.ObjectContext"/> without causing the underlying database to be created
                or the database initialization strategy to be executed.
                This is used to get a context that can then be used for database creation/initialization.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.UseTempObjectContext">
            <summary>
                Creates a new temporary <see cref="P:System.Data.Entity.Internal.InternalContext.ObjectContext"/> based on the same metadata and connection as the real
                <see cref="P:System.Data.Entity.Internal.InternalContext.ObjectContext"/> and sets it as the context to use DisposeTempObjectContext is called.
                This allows this internal context and its DbContext to be used for transient operations
                such as initializing and seeding the database, after which it can be thrown away.
                This isolates the real <see cref="P:System.Data.Entity.Internal.InternalContext.ObjectContext"/> from any changes made and and saves performed.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.DisposeTempObjectContext">
            <summary>
                If a temporary ObjectContext was set with UseTempObjectContext, then this method disposes that context
                and returns this internal context and its DbContext to using the real ObjectContext.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.CreateDatabase(System.Data.Objects.ObjectContext)">
            <summary>
            Called by methods of <see cref="T:System.Data.Entity.Database"/> to create a database either using the Migrations pipeline
            if possible and the core provider otherwise.
            </summary>
            <param name="objectContext">The context to use for core provider calls.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.CompatibleWithModel(System.Boolean)">
            <summary>
            Internal implementation of <see cref="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)"/>.
            </summary>
            <returns> True if the model hash in the context and the database match; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.ModelMatches(System.Xml.Linq.XDocument)">
            <summary>
            Checks whether the given model (an EDMX document) matches the current model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.QueryForModelHash">
            <summary>
                Queries the database for a model hash and returns it if found or returns null if the table
                or the row doesn't exist in the database.
            </summary>
            <returns>The model hash, or null if not found.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.QueryForModel">
            <summary>
            Queries the database for a model stored in the MigrationHistory table and returns it as an EDMX, or returns
            null if the database does not contain a model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.SaveMetadataToDatabase">
            <summary>
                Saves the model hash from the context to the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.PerformInitializationAction(System.Action)">
            <summary>
                Performs the initialization action that may result in a <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> and
                handle the exception to provide more meaning to the user.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.RegisterObjectStateManagerChangedEvent(System.ComponentModel.CollectionChangeEventHandler)">
            <summary>
                Registers for the ObjectStateManagerChanged event on the underlying ObjectStateManager.
                This is a virtual method on this class so that it can be mocked.
            </summary>
            <param name = "handler">The event handler.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.EntityInContextAndNotDeleted(System.Object)">
            <summary>
                Checks whether or not the given object is in the context in any state other than Deleted.
                This is a virtual method on this class so that it can be mocked.
            </summary>
            <param name = "entity">The entity.</param>
            <returns><c>true</c> if the entity is in the context and not deleted; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.SaveChanges">
            <summary>
                Saves all changes made in this context to the underlying database.
            </summary>
            <returns>The number of objects written to the underlying database.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.Initialize">
            <summary>
                Initializes this instance, which means both the context is initialized and the underlying
                database is initialized.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.InitializeContext">
            <summary>
                Initializes the underlying ObjectContext but does not cause the database to be initialized.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.MarkDatabaseNotInitialized">
            <summary>
            Marks the database as having not been initialized. This is called when the app calls Database.Delete so
            that the database if the app attempts to then use the database again it will be re-initialized automatically.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.InitializeDatabase">
            <summary>
                Runs the <see cref="T:System.Data.Entity.IDatabaseInitializer`1"/> unless it has already been run or there
                is no initializer for this context type in which case this method does nothing.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.MarkDatabaseInitialized">
            <summary>
                Marks the database as having been initialized without actually running the <see cref="T:System.Data.Entity.IDatabaseInitializer`1"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization">
            <summary>
                Runs the <see cref="T:System.Data.Entity.IDatabaseInitializer`1"/> if one has been set for this context type.
                Calling this method will always cause the initializer to run even if the database is marked
                as initialized.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.Dispose">
            <summary>
                Disposes the context. Override the DisposeContext method to perform
                additional work when disposing.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.DisposeContext">
            <summary>
                Performs additional work to dispose a context.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.DetectChanges(System.Boolean)">
            <summary>
                Calls DetectChanges on the underlying <see cref="P:System.Data.Entity.Internal.InternalContext.ObjectContext"/> if AutoDetectChangesEnabled is
                true or if force is set to true.
            </summary>
            <param name="force">if set to <c>true</c> then DetectChanges is called regardless of the value of AutoDetectChangesEnabled.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.Set``1">
            <summary>
                Returns the DbSet instance for the given entity type.
                This property is virtual and returns <see cref="T:System.Data.Entity.IDbSet`1"/> to that it can be mocked.
            </summary>
            <typeparam name="TEntity">The entity type for which a set should be returned.</typeparam>
            <returns>A set for the given entity type.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.Set(System.Type)">
            <summary>
                Returns the non-generic <see cref="T:System.Data.Entity.DbSet"/> instance for the given entity type.
                This property is virtual and returns <see cref="T:System.Data.Entity.Internal.Linq.IInternalSetAdapter"/> to that it can be mocked.
            </summary>
            <param name="entityType">The entity type for which a set should be returned.</param>
            <returns>A set for the given entity type.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.CreateInternalSet(System.Type,System.Data.Entity.Internal.Linq.IInternalSet)">
            <summary>
                Creates an internal set using an app domain cached delegate.
            </summary>
            <param name = "entityType">Type of the entity.</param>
            <returns>The set.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(System.Type)">
            <summary>
                Returns the entity set and the base type for that entity set for the given type.
                This method does o-space loading if required and throws if the type is not in the model.
            </summary>
            <param name = "entityType">The entity type to lookup.</param>
            <returns>The entity set and base type pair.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.TryGetEntitySetAndBaseTypeForType(System.Type)">
            <summary>
                Returns the entity set and the base type for that entity set for the given type if that
                type is mapped in the model, otherwise returns null.
                This method does o-space loading if required.
            </summary>
            <param name = "entityType">The entity type to lookup.</param>
            <returns>The entity set and base type pair, or null if not found.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.IsEntityTypeMapped(System.Type)">
            <summary>
                Checks whether or not the given entity type is mapped in the model.
            </summary>
            <param name = "entityType">The entity type to lookup.</param>
            <returns>True if the type is mapped as an entity; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.GetLocalEntities``1">
            <summary>
                Gets the local entities of the type specified from the state manager.  That is, all
                Added, Modified, and Unchanged entities of the given type.
            </summary>
            <typeparam name = "TEntity">The type of entity to get.</typeparam>
            <returns>The entities.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.ExecuteSqlQuery``1(System.String,System.Object[])">
            <summary>
                Executes the given SQL query against the database backing this context.  The results are not materialized as
                entities or tracked.
            </summary>
            <typeparam name = "TElement">The type of the element.</typeparam>
            <param name = "sql">The SQL.</param>
            <param name = "parameters">The parameters.</param>
            <returns>The query results.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.ExecuteSqlQuery(System.Type,System.String,System.Object[])">
            <summary>
                Executes the given SQL query against the database backing this context.  The results are not materialized as
                entities or tracked.
            </summary>
            <param name = "elementType">Type of the element.</param>
            <param name = "sql">The SQL.</param>
            <param name = "parameters">The parameters.</param>
            <returns>The query results.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.ExecuteSqlQueryAsIEnumerable``1(System.String,System.Object[])">
            <summary>
                Calls the generic ExecuteSqlQuery but with a non-generic return type so that it
                has the correct signature to be used with CreateDelegate above.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.ExecuteSqlCommand(System.String,System.Object[])">
            <summary>
                Executes the given SQL command against the database backing this context.
            </summary>
            <param name = "sql">The SQL.</param>
            <param name = "parameters">The parameters.</param>
            <returns>The return value from the database.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.GetStateEntry(System.Object)">
            <summary>
                Gets the underlying <see cref="T:System.Data.Objects.ObjectStateEntry"/> for the given entity, or returns null if the entity isn't tracked by this context.
                This method is virtual so that it can be mocked.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The state entry or null.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.GetStateEntries">
            <summary>
                Gets the underlying <see cref="T:System.Data.Objects.ObjectStateEntry"/> objects for all entities tracked by
                this context.
                This method is virtual so that it can be mocked.
            </summary>
            <returns>State entries for all tracked entities.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.GetStateEntries``1">
            <summary>
                Gets the underlying <see cref="T:System.Data.Objects.ObjectStateEntry"/> objects for all entities of the given
                type tracked by this context.
                This method is virtual so that it can be mocked.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>State entries for all tracked entities of the given type.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.GetStateEntries(System.Func{System.Data.Objects.ObjectStateEntry,System.Boolean})">
            <summary>
                Helper method that gets the underlying <see cref="T:System.Data.Objects.ObjectStateEntry"/> objects for all entities that
                match the given predicate.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.WrapUpdateException(System.Data.UpdateException)">
            <summary>
                Wraps the given <see cref="T:System.Data.UpdateException"/> in either a <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> or
                a <see cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException"/> depending on the actual exception type and the state
                entries involved.
            </summary>
            <param name="updateException">The update exception.</param>
            <returns>A new exception wrapping the given exception.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.CreateObject``1">
            <summary>
                Uses the underlying context to create an entity such that if the context is configured
                to create proxies and the entity is suitable then a proxy instance will be returned.
                This method is virtual so that it can be mocked.
            </summary>
            <typeparam name = "TEntity">The type of the entity.</typeparam>
            <returns>The new entity instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.CreateObject(System.Type)">
            <summary>
                Uses the underlying context to create an entity such that if the context is configured
                to create proxies and the entity is suitable then a proxy instance will be returned.
                This method is virtual so that it can be mocked.
            </summary>
            <param name = "type">The type of entity to create.</param>
            <returns>The new entity instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.CreateObjectAsObject``1">
            <summary>
                This method is used by CreateDelegate to transform the CreateObject method with return type TEntity
                into a method with return type object which matches the required type of the delegate.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.OverrideConnection(System.Data.Entity.Internal.IInternalConnection)">
            <summary>
                Replaces the connection that will be used by this context.
                The connection can only be changed before the context is initialized.
            </summary>
            <param name="connection">The new connection.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.CheckContextNotDisposed">
            <summary>
                Throws if the context has been disposed.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.InitializeEntitySetMappings">
            <summary>
                Checks whether or not the internal cache of types to entity sets has been initialized,
                and initializes it if necessary.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.ForceOSpaceLoadingForKnownEntityTypes">
            <summary>
                Forces all DbSets to be initialized, which in turn causes o-space loading to happen
                for any entity type for which we have a DbSet. This includes all DbSets that were
                discovered on the user's DbContext type.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.TryUpdateEntitySetMappingsForType(System.Type)">
            <summary>
                Performs o-space loading for the type and returns false if the type is not in the model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.UpdateEntitySetMappingsForType(System.Type)">
            <summary>
                Performs o-space loading for the type and throws if the type is not in the model.
            </summary>
            <param name = "entityType">Type of the entity.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.IsPocoTypeInNonPocoAssembly(System.Type)">
            <summary>
                Returns true if the given entity type does not have EdmEntityTypeAttribute but is in
                an assembly that has EdmSchemaAttribute.  This indicates mixing of POCO and EOCO in the
                same assembly, which is something that we don't support.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.IsComplexType(System.Type)">
            <summary>
                Determines whether or not the given clrType is mapped to a complex type.  Assumes o-space loading has happened.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.UpdateEntitySetMappings">
            <summary>
                Updates the cache of types to entity sets either for the first time or after potentially
                doing some o-space loading.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.Owner">
            <summary>
                The public context instance that owns this internal context.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.ObjectContext">
            <summary>
                Returns the underlying <see cref="P:System.Data.Entity.Internal.InternalContext.ObjectContext"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.TempObjectContext">
            <summary>
                Gets the temp object context, or null if none has been set.
            </summary>
            <value>The temp object context.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.CodeFirstModel">
            <summary>
            The compiled model created from the Code First pipeline, or null if Code First was
            not used to create this context.
            Causes the Code First pipeline to be run to create the model if it has not already been
            created.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.InInitializationAction">
            <summary>
            Set to true when a database initializer is performing some actions, such as creating or deleting
            a database, or seeding the database.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.DefaultInitializer">
            <summary>
                Gets the default database initializer to use for this context if no other has been registered.
                For code first this property returns a <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1"/> instance.
                For database/model first, this property returns null.
            </summary>
            <value>The default initializer.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.LazyLoadingEnabled">
            <summary>
                Gets or sets a value indicating whether lazy loading is enabled.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.ProxyCreationEnabled">
            <summary>
                Gets or sets a value indicating whether proxy creation is enabled.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.AutoDetectChangesEnabled">
            <summary>
                Gets or sets a value indicating whether DetectChanges is called automatically in the API.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.ValidateOnSaveEnabled">
            <summary>
                Gets or sets a value indicating whether to validate entities when <see cref="M:System.Data.Entity.DbContext.SaveChanges"/> is called.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.IsDisposed">
            <summary>
                True if the context has been disposed.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.Connection">
            <summary>
                The connection underlying this context.  Accessing this property does not cause the context
                to be initialized, only its connection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.OriginalConnectionString">
            <summary>
            The connection string as originally applied to the context. This is used to perform operations
            that need the connection string in a non-mutated form, such as with security info still intact.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.ConnectionStringOrigin">
            <summary>
                Returns the origin of the underlying connection string.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.AppConfig">
            <summary>
                Gets or sets an object representing a config file used for looking for DefaultConnectionFactory entries,
                database intializers and connection strings.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.ModelProviderInfo">
            <summary>
                Gets or sets the provider details to be used when building the EDM model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.ConnectionStringName">
            <summary>
                Gets the name of the underlying connection string.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.ProviderName">
            <summary>
            Gets the provider name bsing used either using a cached value or getting it from
            the DbConnection in use.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.OnModelCreating">
            <summary>
                Gets or sets a custom OnModelCreating action.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.DatabaseOperations">
            <summary>
                Gets the DatabaseOperations instance to use to perform Create/Delete/Exists operations
                against the database.
                Note that this virtual property can be mocked to help with unit testing.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.ValidationProvider">
            <summary>
                Gets <see cref="P:System.Data.Entity.Internal.InternalContext.ValidationProvider"/> instance used to create validators and validation contexts.
                This property is virtual to allow mocking.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.EagerInternalContext.#ctor(System.Data.Entity.DbContext)">
            <summary>
            For mocking.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.EagerInternalContext.#ctor(System.Data.Entity.DbContext,System.Data.Objects.ObjectContext,System.Boolean)">
            <summary>
                Constructs an <see cref="T:System.Data.Entity.Internal.EagerInternalContext"/> for an already existing <see cref="P:System.Data.Entity.Internal.EagerInternalContext.ObjectContext"/>.
            </summary>
            <param name="owner">The owner <see cref="T:System.Data.Entity.DbContext"/>.</param>
            <param name="objectContext">The existing <see cref="P:System.Data.Entity.Internal.EagerInternalContext.ObjectContext"/>.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.EagerInternalContext.GetObjectContextWithoutDatabaseInitialization">
            <summary>
                Returns the underlying <see cref="P:System.Data.Entity.Internal.EagerInternalContext.ObjectContext"/> without causing the underlying database to be created
                or the database initialization strategy to be executed.
                This is used to get a context that can then be used for database creation/initialization.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.EagerInternalContext.InitializeContext">
            <summary>
                Does nothing, since the <see cref="P:System.Data.Entity.Internal.EagerInternalContext.ObjectContext"/> already exists.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.EagerInternalContext.MarkDatabaseNotInitialized">
            <summary>
                Does nothing since the database is always considered initialized if the <see cref="T:System.Data.Entity.DbContext"/> was created
                from an existing <see cref="P:System.Data.Entity.Internal.EagerInternalContext.ObjectContext"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.EagerInternalContext.MarkDatabaseInitialized">
            <summary>
                Does nothing since the database is always considered initialized if the <see cref="T:System.Data.Entity.DbContext"/> was created
                from an existing <see cref="P:System.Data.Entity.Internal.EagerInternalContext.ObjectContext"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.EagerInternalContext.InitializeDatabase">
            <summary>
                Does nothing since the database is always considered initialized if the <see cref="T:System.Data.Entity.DbContext"/> was created
                from an existing <see cref="P:System.Data.Entity.Internal.EagerInternalContext.ObjectContext"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.EagerInternalContext.DisposeContext">
            <summary>
                Disposes the context. The underlying <see cref="P:System.Data.Entity.Internal.EagerInternalContext.ObjectContext"/> is also disposed if it is owned.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.EagerInternalContext.OverrideConnection(System.Data.Entity.Internal.IInternalConnection)">
            <inheritdoc/>
        </member>
        <member name="P:System.Data.Entity.Internal.EagerInternalContext.ObjectContext">
            <summary>
                Returns the underlying <see cref="P:System.Data.Entity.Internal.EagerInternalContext.ObjectContext"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.EagerInternalContext.DefaultInitializer">
            <summary>
                Gets the default database initializer to use for this context if no other has been registered.
                For code first this property returns a <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1"/> instance.
                For database/model first, this property returns null.
            </summary>
            <value>The default initializer.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.EagerInternalContext.Connection">
            <summary>
                The connection underlying this context.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.EagerInternalContext.OriginalConnectionString">
            <summary>
            The connection string as originally applied to the context. This is used to perform operations
            that need the connection string in a non-mutated form, such as with security info still intact.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.EagerInternalContext.ConnectionStringOrigin">
            <summary>
                Returns the origin of the underlying connection string.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.EagerInternalContext.LazyLoadingEnabled">
            <summary>
                Gets or sets a value indicating whether lazy loading is enabled.  This is just a wrapper
                over the same flag in the underlying <see cref="P:System.Data.Entity.Internal.EagerInternalContext.ObjectContext"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.EagerInternalContext.ProxyCreationEnabled">
            <summary>
                Gets or sets a value indicating whether proxy creation is enabled.  This is just a wrapper
                over the same flag in the underlying ObjectContext.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.ClonedPropertyValues">
            <summary>
                An implementation of <see cref="T:System.Data.Entity.Internal.InternalPropertyValues"/> that represents a clone of another
                dictionary.  That is, all the property values have been been copied into this dictionary.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalPropertyValues">
            <summary>
                The internal class used to implement <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues"/>.
                This internal class allows for a clean internal factoring without compromising the public API.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.#ctor(System.Data.Entity.Internal.InternalContext,System.Type,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalPropertyValues"/> class.
            </summary>
            <param name="internalContext">The internal context with which the entity of complex object is associated.</param>
            <param name="type">The type of the entity or complex object.</param>
            <param name="isEntityValues">If set to <c>true</c> this is a dictionary for an entity, otherwise it is a dictionary for a complex object.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.GetItemImpl(System.String)">
            <summary>
                Implemented by subclasses to get the dictionary item for a given property name.
                Checking that the name is valid should happen before this method is called such
                that subclasses do not need to perform the check.
            </summary>
            <param name = "propertyName">Name of the property.</param>
            <returns>An item for the given name.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.ToObject">
            <summary>
                Creates an object of the underlying type for this dictionary and hydrates it with property
                values from this dictionary.
            </summary>
            <returns>The properties of this dictionary copied into a new object.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.CreateObject">
            <summary>
                Creates an instance of the underlying type for this dictionary, which may either be an entity type (in which
                case CreateObject on the context is used) or a non-entity type (in which case the empty constructor is used.)
                In either case, app domain cached compiled delegates are used to do the creation.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.SetValues(System.Object)">
            <summary>
                Sets the values of this dictionary by reading values out of the given object.
                The given object must be of the type that this dictionary is based on.
            </summary>
            <param name = "value">The object to read values from.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.Clone">
            <summary>
                Creates a new dictionary containing copies of all the properties in this dictionary.
                Changes made to the new dictionary will not be reflected in this dictionary and vice versa.
            </summary>
            <returns>A clone of this dictionary.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.SetValues(System.Data.Entity.Internal.InternalPropertyValues)">
            <summary>
                Sets the values of this dictionary by reading values from another dictionary.
                The other dictionary must be based on the same type as this dictionary, or a type derived
                from the type for this dictionary.
            </summary>
            <param name = "values">The dictionary to read values from.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.GetItem(System.String)">
            <summary>
                Gets the dictionary item for the property with the given name.
                This method checks that the given name is valid.
            </summary>
            <param name = "propertyName">The property name.</param>
            <returns>The item.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.SetValue(System.Data.Entity.Internal.IPropertyValuesItem,System.Object)">
            <summary>
                Sets the value of the property only if it is different from the current value and is not
                an invalid attempt to set a complex property.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyValues.PropertyNames">
            <summary>
                Gets the set of names of all properties in this dictionary as a read-only set.
            </summary>
            <value>The property names.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyValues.Item(System.String)">
            <summary>
                Gets or sets the value of the property with the specified property name.
                The value may be a nested instance of this class.
            </summary>
            <param name = "propertyName">The property name.</param>
            <value>The value of the property.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyValues.ObjectType">
            <summary>
                Gets the entity type of complex type that this dictionary is based on.
            </summary>
            <value>The type of the object underlying this dictionary.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyValues.InternalContext">
            <summary>
                Gets the internal context with which the underlying entity or complex type is associated.
            </summary>
            <value>The internal context.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyValues.IsEntityValues">
            <summary>
                Gets a value indicating whether the object for this dictionary is an entity or a complex object.
            </summary>
            <value><c>true</c> if this this is a dictionary for an entity; <c>false</c> if it is a dictionary for a complex object.</value>
        </member>
        <member name="M:System.Data.Entity.Internal.ClonedPropertyValues.#ctor(System.Data.Entity.Internal.InternalPropertyValues,System.Data.Common.DbDataRecord)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.ClonedPropertyValues"/> class by copying
                values from the given dictionary.
            </summary>
            <param name="original">The dictionary to clone.</param>
            <param name="valuesRecord">If non-null, then the values for the new dictionary are taken from this record rather than from the original dictionary.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ClonedPropertyValues.GetItemImpl(System.String)">
            <summary>
                Gets the dictionary item for a given property name.
            </summary>
            <param name = "propertyName">Name of the property.</param>
            <returns>An item for the given name.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.ClonedPropertyValues.PropertyNames">
            <summary>
                Gets the set of names of all properties in this dictionary as a read-only set.
            </summary>
            <value>The property names.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.ClonedPropertyValuesItem">
            <summary>
                An implementation of <see cref="T:System.Data.Entity.Internal.IPropertyValuesItem"/> for an item in a <see cref="T:System.Data.Entity.Internal.ClonedPropertyValues"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.IPropertyValuesItem">
            <summary>
                Represents an item in an <see cref="T:System.Data.Entity.Internal.InternalPropertyValues"/> representing a property name/value.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.IPropertyValuesItem.Value">
            <summary>
                Gets or sets the value of the property represented by this item.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.IPropertyValuesItem.Name">
            <summary>
                Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.IPropertyValuesItem.IsComplex">
            <summary>
                Gets a value indicating whether this item represents a complex property.
            </summary>
            <value><c>true</c> If this instance represents a complex property; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.IPropertyValuesItem.Type">
            <summary>
                Gets the type of the underlying property.
            </summary>
            <value>The property type.</value>
        </member>
        <member name="M:System.Data.Entity.Internal.ClonedPropertyValuesItem.#ctor(System.String,System.Object,System.Type,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.ClonedPropertyValuesItem"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="isComplex">If set to <c>true</c> this item represents a complex property.</param>
        </member>
        <member name="P:System.Data.Entity.Internal.ClonedPropertyValuesItem.Value">
            <summary>
                Gets or sets the value of the property represented by this item.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.ClonedPropertyValuesItem.Name">
            <summary>
                Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.ClonedPropertyValuesItem.IsComplex">
            <summary>
                Gets a value indicating whether this item represents a complex property.
            </summary>
            <value>
                <c>true</c> If this instance represents a complex property; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Internal.ClonedPropertyValuesItem.Type">
            <summary>
                Gets the type of the underlying property.
            </summary>
            <value>The property type.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.DbDataRecordPropertyValues">
            <summary>
                An implementation of <see cref="T:System.Data.Entity.Internal.InternalPropertyValues"/> that is based on an existing
                <see cref="T:System.Data.Objects.DbUpdatableDataRecord"/> instance.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbDataRecordPropertyValues.#ctor(System.Data.Entity.Internal.InternalContext,System.Type,System.Data.Objects.DbUpdatableDataRecord,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.DbDataRecordPropertyValues"/> class.
            </summary>
            <param name="internalContext">The internal context.</param>
            <param name="type">The type.</param>
            <param name="dataRecord">The data record.</param>
            <param name="isEntityValues">If set to <c>true</c> this is a dictionary for an entity, otherwise it is a dictionary for a complex object.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.DbDataRecordPropertyValues.GetItemImpl(System.String)">
            <summary>
                Gets the dictionary item for a given property name.
            </summary>
            <param name = "propertyName">Name of the property.</param>
            <returns>An item for the given name.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.DbDataRecordPropertyValues.PropertyNames">
            <summary>
                Gets the set of names of all properties in this dictionary as a read-only set.
            </summary>
            <value>The property names.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.DbDataRecordPropertyValuesItem">
            <summary>
                An implementation of <see cref="T:System.Data.Entity.Internal.IPropertyValuesItem"/> for an item in a <see cref="T:System.Data.Entity.Internal.DbDataRecordPropertyValues"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbDataRecordPropertyValuesItem.#ctor(System.Data.Objects.DbUpdatableDataRecord,System.Int32,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.DbDataRecordPropertyValuesItem"/> class.
            </summary>
            <param name="dataRecord">The data record.</param>
            <param name="ordinal">The ordinal.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:System.Data.Entity.Internal.DbDataRecordPropertyValuesItem.Value">
            <summary>
                Gets or sets the value of the property represented by this item.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.DbDataRecordPropertyValuesItem.Name">
            <summary>
                Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.DbDataRecordPropertyValuesItem.IsComplex">
            <summary>
                Gets a value indicating whether this item represents a complex property.
            </summary>
            <value>
                <c>true</c> If this instance represents a complex property; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Internal.DbDataRecordPropertyValuesItem.Type">
            <summary>
                Gets the type of the underlying property.
            </summary>
            <value>The property type.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.IEntityStateEntry">
            <summary>
                This is version of an internal interface that already exists in System.Data.Entity that
                is implemented by <see cref="T:System.Data.Objects.ObjectStateEntry"/>.  Using this interface allows state
                entries to be mocked for unit testing.  The plan is to remove this version of the
                interface and use the one in System.Data.Entity once we roll into the framework.
                Note that some members may need to be added to the interface in the framework when
                we combine the two.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalCollectionEntry">
            <summary>
                The internal class used to implement <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/> and 
                <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/>.
                This internal class contains all the common implementation between the generic and non-generic
                entry classes and also allows for a clean internal factoring without compromising the public API.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalNavigationEntry">
            <summary>
                Base class for <see cref="T:System.Data.Entity.Internal.InternalCollectionEntry"/> and <see cref="T:System.Data.Entity.Internal.InternalReferenceEntry"/>
                containing common code for collection and reference navigation property entries.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalMemberEntry">
            <summary>
                Base class for all internal entries that represent different kinds of properties.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalMemberEntry.#ctor(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.MemberEntryMetadata)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalMemberEntry"/> class.
            </summary>
            <param name="internalEntityEntry">The internal entity entry.</param>
            <param name="memberMetadata">The member metadata.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalMemberEntry.GetValidationErrors">
            <summary>
                Validates this property.
            </summary>
            <returns>A sequence of validation errors for this property. Empty if no errors. Never null.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalMemberEntry.CreateDbMemberEntry">
            <summary>
                Creates a new non-generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry"/> backed by this internal entry.
                The actual subtype of the DbMemberEntry created depends on the metadata of this internal entry.
            </summary>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalMemberEntry.CreateDbMemberEntry``2">
            <summary>
                Creates a new generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2"/> backed by this internal entry.
                The actual subtype of the DbMemberEntry created depends on the metadata of this internal entry.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>The new entry.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalMemberEntry.Name">
            <summary>
                Gets the property name.
                The property is virtual to allow mocking.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalMemberEntry.CurrentValue">
            <summary>
                Gets or sets the current value of the navigation property.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalMemberEntry.InternalEntityEntry">
            <summary>
                Gets the internal entity entry property belongs to.
                This property is virtual to allow mocking.
            </summary>
            <value>The internal entity entry.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalMemberEntry.EntryMetadata">
            <summary>
                Gets the entry metadata.
            </summary>
            <value>The entry metadata.</value>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNavigationEntry.#ctor(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.NavigationEntryMetadata)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalNavigationEntry"/> class.
            </summary>
            <param name="internalEntityEntry">The internal entity entry.</param>
            <param name="navigationMetadata">The navigation metadata.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNavigationEntry.Load">
            <summary>
                Calls Load on the underlying <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNavigationEntry.Query">
            <summary>
                Uses CreateSourceQuery on the underlying <see cref="P:System.Data.Entity.Internal.InternalNavigationEntry.RelatedEnd"/> to create a query for this
                navigation property.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNavigationEntry.GetNavigationPropertyFromRelatedEnd(System.Object)">
            <summary>
                Gets the navigation property value from the <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd"/> object.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The navigation property value.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNavigationEntry.ValidateNotDetached(System.String)">
            <summary>
                Validates that the owning entity entry is associated with an underlying <see cref="T:System.Data.Objects.ObjectStateEntry"/> and
                is not just wrapping a non-attached entity.
                If the entity is not detached, then the RelatedEnd for this navigation property is obtained.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalNavigationEntry.IsLoaded">
            <summary>
                Calls IsLoaded on the underlying <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalNavigationEntry.RelatedEnd">
            <summary>
                Gets the related end, which will be null if the entity is not being tracked.
            </summary>
            <value>The related end.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalNavigationEntry.CurrentValue">
            <summary>
                Gets or sets the current value of the navigation property.  The current value is
                the entity that the navigation property references or the collection of references
                for a collection property.
                This property is virtual so that it can be mocked.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalNavigationEntry.Getter">
            <summary>
                Gets a delegate that can be used to get the value of the property directly from the entity.
                Returns null if the property does not have an accessible getter.
            </summary>
            <value>The getter delegate, or null.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalNavigationEntry.Setter">
            <summary>
                Gets a delegate that can be used to set the value of the property directly on the entity.
                Returns null if the property does not have an accessible setter.
            </summary>
            <value>The setter delegate, or null.</value>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalCollectionEntry.#ctor(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.NavigationEntryMetadata)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalCollectionEntry"/> class.
            </summary>
            <param name="internalEntityEntry">The internal entity entry.</param>
            <param name="navigationMetadata">The navigation metadata.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalCollectionEntry.GetNavigationPropertyFromRelatedEnd(System.Object)">
            <summary>
                Gets the navigation property value from the <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd"/> object.
                Since for a collection the related end is an <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1"/>, it means
                that the internal representation of the navigation property is just the related end.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The navigation property value.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalCollectionEntry.CreateDbMemberEntry">
            <summary>
                Creates a new non-generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry"/> backed by this internal entry.
                The runtime type of the DbMemberEntry created will be <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/> or a subtype of it.
            </summary>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalCollectionEntry.CreateDbMemberEntry``2">
            <summary>
                Creates a new generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2"/> backed by this internal entry.
                The runtime type of the DbMemberEntry created will be <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/> or a subtype of it.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalCollectionEntry.CreateDbCollectionEntry``2">
            <summary>
                Creates a new generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2"/> backed by this internal entry.
                The actual subtype of the DbCollectionEntry created depends on the metadata of this internal entry.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalCollectionEntry.CreateDbCollectionEntry``2(System.Type)">
            <summary>
                Creates a <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/> object for the given entity type
                and collection element type.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="elementType">Type of the element.</param>
            <returns>The set.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalCollectionEntry.CurrentValue">
            <summary>
                Gets or sets the current value of the navigation property.  The current value is
                the entity that the navigation property references or the collection of references
                for a collection property.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalEntityEntry">
            <summary>
                The internal class used to implement <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/>
                and <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/>.
                This internal class contains all the common implementation between the generic and non-generic
                entry classes and also allows for a clean internal factoring without compromising the public API.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.#ctor(System.Data.Entity.Internal.InternalContext,System.Data.Entity.Internal.IEntityStateEntry)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalEntityEntry"/> class.
            </summary>
            <param name="internalContext">The internal context.</param>
            <param name="stateEntry">The state entry.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.#ctor(System.Data.Entity.Internal.InternalContext,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalEntityEntry"/> class for an
                entity which may or may not be attached to the context.
            </summary>
            <param name="internalContext">The internal context.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.GetDatabaseValues">
            <summary>
                Queries the database for copies of the values of the tracked entity as they currently exist in the database.
            </summary>
            <returns>The store values.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.AppendEntitySqlRow(System.Text.StringBuilder,System.String,System.Data.Entity.Internal.InternalPropertyValues)">
            <summary>
                Appends a query for the properties in the entity to the given string builder that is being used to
                build the eSQL query.  This method may be called recursively to query for all the sub-properties of
                a complex property.
            </summary>
            <param name = "queryBuilder">The query builder.</param>
            <param name = "prefix">The qualifier with which to prefix each property name.</param>
            <param name = "templateValues">The dictionary that acts as a template for the properties to query.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.ValidateStateToGetValues(System.String,System.Data.EntityState)">
            <summary>
                Validates that a dictionary can be obtained for the state of the entity represented by this entry.
            </summary>
            <param name = "method">The method name being used to request a dictionary.</param>
            <param name = "invalidState">The state that is invalid for the request being processed.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Reload">
            <summary>
                Calls Refresh with StoreWins on the underlying state entry.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Reference(System.String,System.Type)">
            <summary>
                Gets an internal object representing a reference navigation property.
                This method is virtual to allow mocking.
            </summary>
            <param name = "navigationProperty">The navigation property.</param>
            <param name = "requestedType">The type of entity requested, which may be 'object' or null if any type can be accepted.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Collection(System.String,System.Type)">
            <summary>
                Gets an internal object representing a collection navigation property.
                This method is virtual to allow mocking.
            </summary>
            <param name = "navigationProperty">The navigation property.</param>
            <param name = "requestedType">The type of entity requested, which may be 'object' or null f any type can be accepted.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Member(System.String,System.Type)">
            <summary>
                Gets an internal object representing a navigation, scalar, or complex property.
                This method is virtual to allow mocking.
            </summary>
            <param name = "propertyName">Name of the property.</param>
            <param name = "requestedType">The type of entity requested, which may be 'object' if any type can be accepted.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Property(System.String,System.Type,System.Boolean)">
            <summary>
                Gets an internal object representing a scalar or complex property.
                This method is virtual to allow mocking.
            </summary>
            <param name = "property">The property.</param>
            <param name = "requestedType">The type of object requested, which may be null or 'object' if any type can be accepted.</param>
            <param name = "requireComplex">if set to <c>true</c> then the found property must be a complex property.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Property(System.Data.Entity.Internal.InternalPropertyEntry,System.String,System.Type,System.Boolean)">
            <summary>
                Gets an internal object representing a scalar or complex property.
                The property may be a nested property on the given <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/>.
            </summary>
            <param name="parentProperty">The parent property entry, or null if this is a property directly on the entity.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="requestedType">The type of object requested, which may be null or 'object' if any type can be accepted.</param>
            <param name="requireComplex">if set to <c>true</c> then the found property must be a complex property.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Property(System.Data.Entity.Internal.InternalPropertyEntry,System.String,System.Collections.Generic.IList{System.String},System.Type,System.Boolean)">
            <summary>
                Gets an internal object representing a scalar or complex property.
                The property may be a nested property on the given <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/>.
            </summary>
            <param name="parentProperty">The parent property entry, or null if this is a property directly on the entity.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="properties">The property split out into its parts.</param>
            <param name="requestedType">The type of object requested, which may be null or 'object' if any type can be accepted.</param>
            <param name="requireComplex">if set to <c>true</c> then the found property must be a complex property.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.ValidateAndGetNavigationMetadata(System.String,System.Type,System.Boolean)">
            <summary>
                Checks that the given property name is a navigation property and is either a reference property or
                collection property according to the value of requireCollection.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.GetNavigationMetadata(System.String)">
            <summary>
                Gets metadata for the given property if that property is a navigation property or returns null
                if it is not a navigation property.
            </summary>
            <param name = "propertyName">Name of the property.</param>
            <returns>Navigation property metadata or null.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.GetNavigationTargetType(System.Data.Metadata.Edm.NavigationProperty)">
            <summary>
                Gets the type of entity or entities at the target end of the given navigation property.
            </summary>
            <param name = "navigationProperty">The navigation property.</param>
            <returns>The CLR type of the entity or entities at the other end.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.GetRelatedEnd(System.String)">
            <summary>
                Gets the related end for the navigation property with the given name.
            </summary>
            <param name = "navigationProperty">The navigation property.</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.ValidateAndGetPropertyMetadata(System.String,System.Type,System.Type)">
            <summary>
                Uses EDM metadata to validate that the property name exists in the model and represents a scalar or
                complex property or exists in the CLR type.
                This method is public and virtual so that it can be mocked.
            </summary>
            <param name = "propertyName">The property name.</param>
            <param name = "declaringType">The type on which the property is declared.</param>
            <param name = "requestedType">The type of object requested, which may be 'object' if any type can be accepted.</param>
            <returns>Metadata for the property.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.SplitName(System.String)">
            <summary>
                Splits the given property name into parts delimited by dots.
            </summary>
            <param name = "propertyName">Name of the property.</param>
            <returns>The parts of the name.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.ValidateNotDetachedAndInitializeRelatedEnd(System.String)">
            <summary>
                Validates that this entry is associated with an underlying <see cref="P:System.Data.Entity.Internal.InternalEntityEntry.ObjectStateEntry"/> and
                is not just wrapping a non-attached entity.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.GetValidationResult(System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
                Validates entity represented by this entity entry.
                This method is virtual to allow mocking.
            </summary>
            <param name="items">User defined dictionary containing additional info for custom validation. This parameter is optional and can be null.</param>
            <returns><see cref="T:System.Data.Entity.Validation.DbEntityValidationResult"/> containing validation result. Never null.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
                Two <see cref="T:System.Data.Entity.Internal.InternalEntityEntry"/> instances are considered equal if they are both entries for
                the same entity on the same <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Equals(System.Data.Entity.Internal.InternalEntityEntry)">
            <summary>
                Determines whether the specified <see cref="T:System.Data.Entity.Internal.InternalEntityEntry"/> is equal to this instance.
                Two <see cref="T:System.Data.Entity.Internal.InternalEntityEntry"/> instances are considered equal if they are both entries for
                the same entity on the same <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="other">The <see cref="T:System.Data.Entity.Internal.InternalEntityEntry"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Data.Entity.Internal.InternalEntityEntry"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.Entity">
            <summary>
                Gets the tracked entity.
                This property is virtual to allow mocking.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.State">
            <summary>
                Gets or sets the state of the entity.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.CurrentValues">
            <summary>
                Gets the current property values for the tracked entity represented by this object.
                This property is virtual to allow mocking.
            </summary>
            <value>The current values.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.OriginalValues">
            <summary>
                Gets the original property values for the tracked entity represented by this object.
                The original values are usually the entity's property values as they were when last queried from
                the database.
                This property is virtual to allow mocking.
            </summary>
            <value>The original values.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.IsDetached">
            <summary>
                Checks whether or not this entry is associated with an underlying <see cref="P:System.Data.Entity.Internal.InternalEntityEntry.ObjectStateEntry"/> or
                is just wrapping a non-attached entity.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.EntityType">
            <summary>
                Gets the type of the entity being tracked.
            </summary>
            <value>The type of the entity.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.EdmEntityType">
            <summary>
                Gets the c-space entity type for this entity from the EDM.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.ObjectStateEntry">
            <summary>
                Gets the underlying object state entry.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.InternalContext">
            <summary>
                Gets the internal context.
            </summary>
            <value>The internal context.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalEntityPropertyEntry">
            <summary>
                A concrete implementation of <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/> used for properties of entities.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalPropertyEntry">
            <summary>
                The internal class used to implement <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> and 
                <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/>.
                This internal class contains all the common implementation between the generic and non-generic
                entry classes and also allows for a clean internal factoring without compromising the public API.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.#ctor(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.PropertyEntryMetadata)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/> class.
            </summary>
            <param name="internalEntityEntry">The internal entry.</param>
            <param name="propertyMetadata">The property info.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.CreateGetter">
            <summary>
                Creates a delegate that will get the value of this property.
            </summary>
            <returns>The delegate.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.CreateSetter">
            <summary>
                Creates a delegate that will set the value of this property.
            </summary>
            <returns>The delegate.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.EntityPropertyIsModified">
            <summary>
                Returns true if the property of the entity that this property is ultimately part
                of is set as modified.  If this is a property of an entity, then this method returns
                true if the property is modified.  If this is a property of a complex object, then
                this method returns true if the top-level complex property on the entity is modified.
            </summary>
            <returns>True if the entity property is modified.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.SetEntityPropertyModified">
            <summary>
                Sets the property of the entity that this property is ultimately part of to modified.
                If this is a property of an entity, then this method marks it as modified.
                If this is a property of a complex object, then this method marks the top-level
                complex property as modified.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.RejectEntityPropertyChanges">
            <summary>
            Rejects changes to this property.
            If this is a property of a complex object, then this method rejects changes to the top-level
            complex property.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.UpdateComplexPropertyState">
            <summary>
            Walks the tree from a property of a complex property back up to the top-level
            complex property and then checks whether or not DetectChanges still considers
            the complex property to be modified. If it does not, then the complex property
            is marked as Unchanged.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.CheckNotSettingComplexPropertyToNull(System.Object)">
            <summary>
                Throws if the user attempts to set a complex property to null.
            </summary>
            <param name = "value">The value.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.SetCurrentValueOnClrObject(System.Object)">
            <summary>
                Sets the given value directly onto the underlying entity object.
            </summary>
            <param name = "value">The value.</param>
            <returns>True if the property had a setter that we could attempt to call; false if no setter was available.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.SetPropertyValueUsingValues(System.Data.Entity.Internal.InternalPropertyValues,System.Object)">
            <summary>
                Sets the property value, potentially by setting individual nested values for a complex
                property.
            </summary>
            <param name = "value">The value.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.Property(System.String,System.Type,System.Boolean)">
            <summary>
                Gets an internal object representing a scalar or complex property of this property,
                which must be a mapped complex property.
                This method is virtual to allow mocking.
            </summary>
            <param name = "property">The property.</param>
            <param name = "requestedType">The type of object requested, which may be null or 'object' if any type can be accepted.</param>
            <param name = "requireComplex">if set to <c>true</c> then the found property must be a complex property.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.ValidateNotDetachedAndInModel(System.String)">
            <summary>
                Validates that the owning entity entry is associated with an underlying <see cref="T:System.Data.Objects.ObjectStateEntry"/> and
                is not just wrapping a non-attached entity.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.CreateDbMemberEntry">
            <summary>
                Creates a new non-generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry"/> backed by this internal entry.
                The runtime type of the DbMemberEntry created will be <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> or a subtype of it.
            </summary>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.CreateDbMemberEntry``2">
            <summary>
                Creates a new generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2"/> backed by this internal entry.
                The runtime type of the DbMemberEntry created will be <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/> or a subtype of it.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>The new entry.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.ParentPropertyEntry">
            <summary>
                Returns parent property, or null if this is a property on the top-level entity.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.ParentCurrentValues">
            <summary>
                Gets the current values of the parent entity or complex property.
                That is, the current values that contains the value for this property.
            </summary>
            <value>The parent current values.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.ParentOriginalValues">
            <summary>
                Gets the original values of the parent entity or complex property.
                That is, the original values that contains the value for this property.
            </summary>
            <value>The parent original values.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.Getter">
            <summary>
                A delegate that reads the value of this property.
                May be null if there is no way to set the value due to missing accessors on the type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.Setter">
            <summary>
                A delegate that sets the value of this property.
                May be null if there is no way to set the value due to missing accessors on the type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.OriginalValue">
            <summary>
                Gets or sets the original value.
                Note that complex properties are returned as objects, not property values.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.CurrentValue">
            <summary>
                Gets or sets the current value.
                Note that complex properties are returned as objects, not property values.
                Also, for complex properties, the object returned is the actual complex object from the entity
                and setting the complex object causes the actual object passed to be set onto the entity.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.IsModified">
            <summary>
                Gets or sets a value indicating whether this property is modified.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.EntryMetadata">
            <summary>
                Gets the property metadata.
            </summary>
            <value>The property metadata.</value>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityPropertyEntry.#ctor(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.PropertyEntryMetadata)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalEntityPropertyEntry"/> class.
            </summary>
            <param name="internalEntityEntry">The internal entry.</param>
            <param name="propertyMetadata">The property info.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityPropertyEntry.CreateGetter">
            <summary>
                Creates a delegate that will get the value of this property.
            </summary>
            <returns>The delegate.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityPropertyEntry.CreateSetter">
            <summary>
                Creates a delegate that will set the value of this property.
            </summary>
            <returns>The delegate.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityPropertyEntry.EntityPropertyIsModified">
            <summary>
                Returns true if the property of the entity that this property is ultimately part
                of is set as modified.  Since this is a property of an entity this method returns
                true if the property is modified.
            </summary>
            <returns>True if the entity property is modified.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityPropertyEntry.SetEntityPropertyModified">
            <summary>
                Sets the property of the entity that this property is ultimately part of to modified.
                Since this is a property of an entity this method marks it as modified.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityPropertyEntry.RejectEntityPropertyChanges">
            <summary>
            Rejects changes to this property.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityPropertyEntry.UpdateComplexPropertyState">
            <summary>
            Walks the tree from a property of a complex property back up to the top-level
            complex property and then checks whether or not DetectChanges still considers
            the complex property to be modified. If it does not, then the complex property
            is marked as Unchanged.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityPropertyEntry.ParentPropertyEntry">
            <summary>
                Returns parent property, or null if this is a property on the top-level entity.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityPropertyEntry.ParentCurrentValues">
            <summary>
                Gets the current values of the parent entity.
                That is, the current values that contains the value for this property.
            </summary>
            <value>The parent current values.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityPropertyEntry.ParentOriginalValues">
            <summary>
                Gets the original values of the parent entity.
                That is, the original values that contains the value for this property.
            </summary>
            <value>The parent original values.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalNestedPropertyEntry">
            <summary>
                A concrete implementation of <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/> used for properties of complex objects.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNestedPropertyEntry.#ctor(System.Data.Entity.Internal.InternalPropertyEntry,System.Data.Entity.Internal.PropertyEntryMetadata)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalNestedPropertyEntry"/> class.
            </summary>
            <param name="parentPropertyEntry">The parent property entry.</param>
            <param name="propertyMetadata">The property metadata.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNestedPropertyEntry.CreateGetter">
            <summary>
                Creates a delegate that will get the value of this property.
            </summary>
            <returns>The delegate.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNestedPropertyEntry.CreateSetter">
            <summary>
                Creates a delegate that will set the value of this property.
            </summary>
            <returns>The delegate.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNestedPropertyEntry.EntityPropertyIsModified">
            <summary>
                Returns true if the property of the entity that this property is ultimately part
                of is set as modified.  Since this is a property of a complex object
                this method returns true if the top-level complex property on the entity is modified.
            </summary>
            <returns>True if the entity property is modified.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNestedPropertyEntry.SetEntityPropertyModified">
            <summary>
                Sets the property of the entity that this property is ultimately part of to modified.
                Since this is a property of a complex object this method marks the top-level
                complex property as modified.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNestedPropertyEntry.RejectEntityPropertyChanges">
            <summary>
            Rejects changes to this property.
            Since this is a property of a complex object this method rejects changes to the top-level
            complex property.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNestedPropertyEntry.UpdateComplexPropertyState">
            <summary>
            Walks the tree from a property of a complex property back up to the top-level
            complex property and then checks whether or not DetectChanges still considers
            the complex property to be modified. If it does not, then the complex property
            is marked as Unchanged.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalNestedPropertyEntry.ParentPropertyEntry">
            <summary>
                Returns parent property, or null if this is a property on the top-level entity.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalNestedPropertyEntry.ParentCurrentValues">
            <summary>
                Gets the current values of the parent complex property.
                That is, the current values that contains the value for this property.
            </summary>
            <value>The parent current values.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalNestedPropertyEntry.ParentOriginalValues">
            <summary>
                Gets the original values of the parent complex property.
                That is, the original values that contains the value for this property.
            </summary>
            <value>The parent original values.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalReferenceEntry">
            <summary>
                The internal class used to implement <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/>,
                and <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/>.
                This internal class contains all the common implementation between the generic and non-generic
                entry classes and also allows for a clean internal factoring without compromising the public API.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalReferenceEntry.#ctor(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.NavigationEntryMetadata)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalReferenceEntry"/> class.
            </summary>
            <param name="internalEntityEntry">The internal entity entry.</param>
            <param name="navigationMetadata">The navigation metadata.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalReferenceEntry.GetNavigationPropertyFromRelatedEnd(System.Object)">
            <summary>
                Gets the navigation property value from the <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd"/> object.
                For reference navigation properties, this means getting the value from the
                <see cref="T:System.Data.Objects.DataClasses.EntityReference`1"/> object.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The navigation property value.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalReferenceEntry.SetNavigationPropertyOnRelatedEnd(System.Object)">
            <summary>
                Sets the navigation property value onto the <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd"/> object.
                For reference navigation properties, this means setting the value onto the
                <see cref="T:System.Data.Objects.DataClasses.EntityReference`1"/> object.
            </summary>
            <param name="entity">The entity.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalReferenceEntry.SetValueOnEntityReference``1(System.Data.Objects.DataClasses.IRelatedEnd,System.Object)">
            <summary>
                Sets the given value on the given <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd"/> which must be an
                <see cref="T:System.Data.Objects.DataClasses.EntityReference`1"/>.
                This method is setup in such a way that it can easily be used by CreateDelegate without any
                dynamic code generation needed.
            </summary>
            <typeparam name="TRelatedEntity">The type of the related entity.</typeparam>
            <param name="entityReference">The entity reference.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalReferenceEntry.CreateDbMemberEntry">
            <summary>
                Creates a new non-generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry"/> backed by this internal entry.
                The runtime type of the DbMemberEntry created will be <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/> or a subtype of it.
            </summary>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalReferenceEntry.CreateDbMemberEntry``2">
            <summary>
                Creates a new generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2"/> backed by this internal entry.
                The runtime type of the DbMemberEntry created will be <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/> or a subtype of it.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>The new entry.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalReferenceEntry.CurrentValue">
            <summary>
                Gets or sets the current value of the navigation property.  The current value is
                the entity that the navigation property references or the collection of references
                for a collection property.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.MemberEntryMetadata">
            <summary>
                Contains metadata about a member of an entity type or complex type.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.MemberEntryMetadata.#ctor(System.Type,System.Type,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.MemberEntryMetadata"/> class.
            </summary>
            <param name="declaringType">The type that the property is declared on.</param>
            <param name="elementType">Type of the property.</param>
            <param name="memberName">The property name.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.MemberEntryMetadata.CreateMemberEntry(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
                Creates a new <see cref="T:System.Data.Entity.Internal.InternalMemberEntry"/> the runtime type of which will be
                determined by the metadata.
            </summary>
            <param name="internalEntityEntry">The entity entry to which the member belongs.</param>
            <param name="parentPropertyEntry">The parent property entry if the new entry is nested, otherwise null.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.MemberEntryMetadata.MemberEntryType">
            <summary>
                Gets the type of the member for which this is metadata.
            </summary>
            <value>The type of the member entry.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.MemberEntryMetadata.MemberName">
            <summary>
                Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.MemberEntryMetadata.DeclaringType">
            <summary>
                Gets the type of the entity or complex object that on which the member is declared.
            </summary>
            <value>The type that the member is declared on.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.MemberEntryMetadata.ElementType">
            <summary>
                Gets the type of element for the property, which for non-collection properties
                is the same as the MemberType and which for collection properties is the type
                of element contained in the collection.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.MemberEntryMetadata.MemberType">
            <summary>
                Gets the type of the member, which for collection properties is the type
                of the collection rather than the type in the collection.
            </summary>
            <value>The type of the member.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.MemberEntryType">
            <summary>
                The types of member entries supported.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.NavigationEntryMetadata.#ctor(System.Type,System.Type,System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.NavigationEntryMetadata"/> class.
            </summary>
            <param name="declaringType">The type that the property is declared on.</param>
            <param name="propertyType">Type of the property.</param>
            <param name="propertyName">The property name.</param>
            <param name="isCollection">if set to <c>true</c> this is a collection nav prop.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.NavigationEntryMetadata.CreateMemberEntry(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
                Creates a new <see cref="T:System.Data.Entity.Internal.InternalMemberEntry"/> the runtime type of which will be
                determined by the metadata.
            </summary>
            <param name="internalEntityEntry">The entity entry to which the member belongs.</param>
            <param name="parentPropertyEntry">The parent property entry which will always be null for navigation entries.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.NavigationEntryMetadata.MemberEntryType">
            <summary>
                Gets the type of the member for which this is metadata.
            </summary>
            <value>The type of the member entry.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.NavigationEntryMetadata.MemberType">
            <summary>
                Gets the type of the member, which for collection properties is the type
                of the collection rather than the type in the collection.
            </summary>
            <value>The type of the member.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.PropertyEntryMetadata">
            <summary>
                Contains metadata for a property of a complex object or entity.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.PropertyEntryMetadata.#ctor(System.Type,System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.PropertyEntryMetadata"/> class.
            </summary>
            <param name="declaringType">The type that the property is declared on.</param>
            <param name="propertyType">Type of the property.</param>
            <param name="propertyName">The property name.</param>
            <param name="isMapped">if set to <c>true</c> the property is mapped in the EDM.</param>
            <param name="isComplex">if set to <c>true</c> the property is a complex property.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.PropertyEntryMetadata.ValidateNameAndGetMetadata(System.Data.Entity.Internal.InternalContext,System.Type,System.Type,System.String)">
            <summary>
                Validates that the given name is a property of the declaring type (either on the CLR type or in the EDM)
                and that it is a complex or scalar property rather than a nav property and then returns metadata about
                the property.
            </summary>
            <param name = "internalContext">The internal context.</param>
            <param name = "declaringType">The type that the property is declared on.</param>
            <param name = "requestedType">The type of property requested, which may be 'object' if any type can be accepted.</param>
            <param name = "propertyName">Name of the property.</param>
            <returns>Metadata about the property, or null if the property does not exist or is a navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.PropertyEntryMetadata.CreateMemberEntry(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
                Creates a new <see cref="T:System.Data.Entity.Internal.InternalMemberEntry"/> the runtime type of which will be
                determined by the metadata.
            </summary>
            <param name="internalEntityEntry">The entity entry to which the member belongs.</param>
            <param name="parentPropertyEntry">The parent property entry if the new entry is nested, otherwise null.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.PropertyEntryMetadata.IsComplex">
            <summary>
                Gets a value indicating whether this is a complex property.
                That is, not whether or not this is a property on a complex object, but rather if the
                property itself is a complex property.
            </summary>
            <value>
                <c>true</c> if this instance is complex; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Internal.PropertyEntryMetadata.MemberEntryType">
            <summary>
                Gets the type of the member for which this is metadata.
            </summary>
            <value>The type of the member entry.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.PropertyEntryMetadata.IsMapped">
            <summary>
                Gets a value indicating whether this instance is mapped in the EDM.
            </summary>
            <value><c>true</c> if this instance is mapped; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.PropertyEntryMetadata.MemberType">
            <summary>
                Gets the type of the member, which for collection properties is the type
                of the collection rather than the type in the collection.
            </summary>
            <value>The type of the member.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.ReadOnlySet`1">
            <summary>
                An implementation of <see cref="T:System.Collections.Generic.ISet`1"/> that wraps an existing set but makes
                it read-only.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Data.Entity.Internal.ReadOnlySet`1.#ctor(System.Collections.Generic.ISet{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.ReadOnlySet`1"/> class wrapped around
                another existing set.
            </summary>
            <param name="set">The existing set.</param>
        </member>
        <member name="T:System.Data.Entity.Internal.StateEntryAdapter">
            <summary>
                This is a temporary adapter class that wraps an <see cref="T:System.Data.Objects.ObjectStateEntry"/> and
                presents it as an <see cref="T:System.Data.Entity.Internal.IEntityStateEntry"/>.  This class will be removed once
                we roll into the System.Data.Entity assembly.  See <see cref="T:System.Data.Entity.Internal.IEntityStateEntry"/>
                for more details.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.EntitySetTypePair">
            <summary>
                Helper class that extends Tuple to give the Item1 and Item2 properties more meaningful names.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.EntitySetTypePair.#ctor(System.Data.Metadata.Edm.EntitySet,System.Type)">
            <summary>
                Creates a new pair of the given EntitySet and BaseType.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.EntitySetTypePair.EntitySet">
            <summary>
                The EntitySet part of the pair.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.EntitySetTypePair.BaseType">
            <summary>
                The BaseType part of the pair.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InitializerLockPair">
            <summary>
                Helper class that extends Tuple to give the Item1 and Item2 properties more meaningful names.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InitializerLockPair.#ctor(System.Action{System.Data.Entity.DbContext},System.Boolean)">
            <summary>
                Creates a new pair of the given database initializer delegate and a flag
                indicating whether or not it is locked.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InitializerLockPair.InitializerDelegate">
            <summary>
                The initializer delegate.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InitializerLockPair.IsLocked">
            <summary>
                A flag indicating whether or not the initializer is locked and should not be changed.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalSqlNonSetQuery">
            <summary>
                Represents a raw SQL query against the context for any type where the results are never
                associated with an entity set and are never tracked.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalSqlQuery">
            <summary>
                Represents a raw SQL query against the context that may be for entities in an entity set
                or for some other non-entity element type.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery.#ctor(System.String,System.Object[])">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalSqlQuery"/> class.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery.AsNoTracking">
            <summary>
                If the query is would track entities, then this method returns a new query that will
                not track entities.
            </summary>
            <returns>A no-tracking query.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery.GetEnumerator">
            <summary>
                Executes the query and returns an enumerator for the results.
            </summary>
            <returns>The query results.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery.GetList">
            <summary>
                Throws an exception indicating that binding directly to a store query is not supported.
            </summary>
            <returns>
                Never returns; always throws.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that contains the SQL string that was set
                when the query was created.  The parameters are not included.
            </summary>
            <returns>
                A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalSqlQuery.Sql">
            <summary>
                Gets the SQL query string,
            </summary>
            <value>The SQL query.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalSqlQuery.Parameters">
            <summary>
                Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalSqlQuery.ContainsListCollection">
            <summary>
                Returns <c>false</c>.
            </summary>
            <returns><c>false</c>.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlNonSetQuery.#ctor(System.Data.Entity.Internal.InternalContext,System.Type,System.String,System.Object[])">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalSqlNonSetQuery"/> class.
            </summary>
            <param name="internalContext">The internal context.</param>
            <param name="elementType">Type of the element.</param>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlNonSetQuery.AsNoTracking">
            <summary>
                Returns this query since it can never be a tracking query.
            </summary>
            <returns>This instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlNonSetQuery.GetEnumerator">
            <summary>
                Executes the query and returns an enumerator for the results.
            </summary>
            <returns>The query results.</returns>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalSqlQuery`1">
            <summary>
                Generic wrapper around <see cref="T:System.Data.Entity.Internal.InternalSqlQuery"/> to allow results to be
                returned as generic <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery`1.GetEnumerator">
            <summary>
                Executes the query and returns an enumerator for the elements.
            </summary>
            An
            <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            object that can be used to iterate through the elements.
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Executes the query and returns an enumerator for the elements.
            </summary>
            <returns>
                An <see cref = "T:System.Collections.IEnumerator" /> object that can be used to iterate through the elements.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery`1.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that contains the SQL string that was set
                when the query was created.  The parameters are not included.
            </summary>
            <returns>
                A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery`1.System#ComponentModel#IListSource#GetList">
            <summary>
                Throws an exception indicating that binding directly to a store query is not supported.
            </summary>
            <returns>
                Never returns; always throws.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
                Returns <c>false</c>.
            </summary>
            <returns><c>false</c>.</returns>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalSqlSetQuery">
            <summary>
                Represents a raw SQL query against the context for entities in an entity set.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlSetQuery.#ctor(System.Data.Entity.Internal.Linq.IInternalSet,System.String,System.Boolean,System.Object[])">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalSqlSetQuery"/> class.
            </summary>
            <param name="set">The set.</param>
            <param name="sql">The SQL.</param>
            <param name="isNoTracking">if set to <c>true</c> then the entities will not be tracked.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlSetQuery.AsNoTracking">
            <summary>
                If the query is would track entities, then this method returns a new query that will
                not track entities.
            </summary>
            <returns>A no-tracking query.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlSetQuery.GetEnumerator">
            <summary>
                Executes the query and returns an enumerator for the results.
            </summary>
            <returns>The query results.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalSqlSetQuery.IsNoTracking">
            <summary>
                Gets a value indicating whether this instance is set to track entities or not.
            </summary>
            <value>
                <c>true</c> if this instance is no-tracking; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Data.Entity.Internal.LazyInternalConnection">
            <summary>
                A LazyInternalConnection object manages information that can be used to create a DbConnection object and
                is responsible for creating that object and disposing it.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalConnection.#ctor(System.String)">
            <summary>
                Creates a new LazyInternalConnection using convention to calculate the connection.  
                The DbConnection object will be created lazily on demand and will be disposed when the LazyInternalConnection is disposed.
            </summary>
            <param name = "nameOrConnectionString">Either the database name or a connection string.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalConnection.#ctor(System.Data.Entity.Infrastructure.DbConnectionInfo)">
            <summary>
                Creates a new LazyInternalConnection targeting a specific database.  
                The DbConnection object will be created lazily on demand and will be disposed when the LazyInternalConnection is disposed.
            </summary>
            <param name="connectionInfo">The connection to target.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalConnection.CreateObjectContextFromConnectionModel">
            <summary>
                Creates an <see cref="T:System.Data.Objects.ObjectContext"/> from metadata in the connection.  This method must
                only be called if ConnectionHasModel returns true.
            </summary>
            <returns>The newly created context.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalConnection.Dispose">
            <summary>
                Disposes the underlying DbConnection.
                Note that dispose actually puts the LazyInternalConnection back to its initial state such that
                it can be used again.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Internal.LazyInternalConnection.Initialize" -->
        <member name="M:System.Data.Entity.Internal.LazyInternalConnection.TryInitializeFromAppConfig(System.String,System.Data.Entity.Internal.AppConfig)">
            <summary>
                Searches the app.config/web.config file for a connection that matches the given name.
                The connection might be a store connection or an EF connection.
            </summary>
            <param name = "name">The connection name.</param>
            <param name = "connectionStrings"></param>
            <returns>True if a connection from the app.config file was found and used.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalConnection.FindConnectionInConfig(System.String,System.Data.Entity.Internal.AppConfig)">
            <summary>
                Attempts to locate a connection entry in the configuration based on the supplied context name.
            </summary>
            <param name="name">The name to search for.</param>
            <param name="config">The configuration to search in.</param>
            <returns>Connection string if found, otherwise null.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalConnection.InitializeFromConnectionStringSetting(System.Configuration.ConnectionStringSettings)">
            <summary>
            Initializes the connection based on a connection string.
            </summary>
            <param name="appConfigConnection">The settings to initialize from.</param>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalConnection.Connection">
            <summary>
                Returns the underlying DbConnection, creating it first if it does not already exist.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalConnection.ConnectionStringOrigin">
            <summary>
                Returns the origin of the underlying connection string.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalConnection.ConnectionStringName">
            <summary>
                Gets the name of the underlying connection string.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalConnection.ConnectionKey">
            <summary>
                Returns a key consisting of the connection type and connection string.
                If this is an EntityConnection then the metadata path is included in the key returned.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalConnection.ProviderName">
            <inheritdoc/>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalConnection.ConnectionHasModel">
            <summary>
                Gets a value indicating whether the connection is an EF connection which therefore contains
                metadata specifying the model, or instead is a store connection, in which case it contains no
                model info.
            </summary>
            <value><c>true</c> if connection contain model info; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalConnection.IsInitialized">
            <summary>
                Gets a value indicating if the lazy connection has been initialized.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.LazyInternalContext">
            <summary>
                A <see cref="T:System.Data.Entity.Internal.LazyInternalContext"/> is a concrete <see cref="T:System.Data.Entity.Internal.InternalContext"/> type that will lazily create the
                underlying <see cref="P:System.Data.Entity.Internal.LazyInternalContext.ObjectContext"/> when needed. The <see cref="P:System.Data.Entity.Internal.LazyInternalContext.ObjectContext"/> created is owned by the
                internal context and will be disposed when the internal context is disposed.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.#ctor(System.Data.Entity.DbContext,System.Data.Entity.Internal.IInternalConnection,System.Data.Entity.Infrastructure.DbCompiledModel)">
            <summary>
                Constructs a <see cref="T:System.Data.Entity.Internal.LazyInternalContext"/> for the given <see cref="T:System.Data.Entity.DbContext"/> owner that will be initialized
                on first use.
            </summary>
            <param name="owner">The owner <see cref="T:System.Data.Entity.DbContext"/>.</param>
            <param name="internalConnection">Responsible for creating a connection lazily when the context is used for the first time.</param>
            <param name="model">The model, or null if it will be created by convention</param>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.GetObjectContextWithoutDatabaseInitialization">
            <summary>
                Returns the underlying <see cref="P:System.Data.Entity.Internal.LazyInternalContext.ObjectContext"/> without causing the underlying database to be created
                or the database initialization strategy to be executed.
                This is used to get a context that can then be used for database creation/initialization.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.SaveChanges">
            <summary>
                Saves all changes made in this context to the underlying database, but only if the
                context has been initialized. If the context has not been initialized, then this
                method does nothing because there is nothing to do; in particular, it does not
                cause the context to be initialized.
            </summary>
            <returns>The number of objects written to the underlying database.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.DisposeContext">
            <summary>
                Disposes the context. The underlying <see cref="P:System.Data.Entity.Internal.LazyInternalContext.ObjectContext"/> is also disposed.
                The connection to the database (<see cref="T:System.Data.Common.DbConnection"/> object) is also disposed if it was created by
                the context, otherwise it is not disposed.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.OverrideConnection(System.Data.Entity.Internal.IInternalConnection)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.InitializeContext">
            <summary>
                Initializes the underlying <see cref="P:System.Data.Entity.Internal.LazyInternalContext.ObjectContext"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.CreateModel(System.Data.Entity.Internal.LazyInternalContext)">
            <summary>
                Creates an immutable, cacheable representation of the model defined by this builder.
                This model can be used to create an <see cref="P:System.Data.Entity.Internal.LazyInternalContext.ObjectContext"/> or can be passed to a <see cref="T:System.Data.Entity.DbContext"/>
                constructor to create a <see cref="T:System.Data.Entity.DbContext"/> for this model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.CreateModelBuilder">
            <summary>
                Creates and configures the <see cref="T:System.Data.Entity.DbModelBuilder"/> instance that will be used to build the
                <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel"/>.
            </summary>
            <returns>The builder.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.MarkDatabaseNotInitialized">
            <summary>
            Marks the database as having not been initialized. This is called when the app calls Database.Delete so
            that the database if the app attempts to then use the database again it will be re-initialized automatically.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.MarkDatabaseInitialized">
            <summary>
                Marks the database as having been initialized without actually running the <see cref="T:System.Data.Entity.IDatabaseInitializer`1"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase">
            <summary>
                Runs the <see cref="T:System.Data.Entity.IDatabaseInitializer`1"/> unless it has already been run or there
                is no initializer for this context type in which case this method does nothing.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(System.Action{System.Data.Entity.Internal.InternalContext})">
            <summary>
                Performs some action (which may do nothing) in such a way that it is guaranteed only to be run
                once for the model and connection in this app domain, unless it fails by throwing an exception,
                in which case it will be re-tried next time the context is initialized.
            </summary>
            <param name = "action">The action.</param>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.ObjectContext">
            <summary>
                Returns the underlying <see cref="P:System.Data.Entity.Internal.LazyInternalContext.ObjectContext"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.CodeFirstModel">
            <summary>
            The compiled model created from the Code First pipeline, or null if Code First was
            not used to create this context.
            Causes the Code First pipeline to be run to create the model if it has not already been
            created.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.ObjectContextInUse">
            <summary>
                The <see cref="P:System.Data.Entity.Internal.LazyInternalContext.ObjectContext"/> actually being used, which may be the
                temp context for initialization or the real context.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.Connection">
            <summary>
                The connection underlying this context.  Accessing this property does not cause the context
                to be initialized, only its connection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.OriginalConnectionString">
            <summary>
            The connection string as originally applied to the context. This is used to perform operations
            that need the connection string in a non-mutated form, such as with security info still intact.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.ConnectionStringOrigin">
            <summary>
                Returns the origin of the underlying connection string.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.AppConfig">
            <summary>
                Gets or sets an object representing a config file used for looking for DefaultConnectionFactory entries
                and connection strings.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.ConnectionStringName">
            <summary>
                Gets the name of the underlying connection string.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.ModelProviderInfo">
            <summary>
                Gets or sets the provider details to be used when building the EDM model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.ProviderName">
            <inheritdoc/>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.OnModelCreating">
            <summary>
                Gets or sets a custom OnModelCreating action.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.DefaultInitializer">
            <summary>
                Gets the default database initializer to use for this context if no other has been registered.
                For code first this property returns a <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1"/> instance.
                For database/model first, this property returns null.
            </summary>
            <value>The default initializer.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.LazyLoadingEnabled">
            <summary>
                Gets or sets a value indicating whether lazy loading is enabled.
                If the <see cref="P:System.Data.Entity.Internal.LazyInternalContext.ObjectContext"/> exists, then this property acts as a wrapper over the flag stored there.
                If the <see cref="P:System.Data.Entity.Internal.LazyInternalContext.ObjectContext"/> has not been created yet, then we store the value given so we can later
                use it when we create the <see cref="P:System.Data.Entity.Internal.LazyInternalContext.ObjectContext"/>.  This allows the flag to be changed, for example in
                a DbContext constructor, without it causing the <see cref="P:System.Data.Entity.Internal.LazyInternalContext.ObjectContext"/> to be created.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.ProxyCreationEnabled">
            <summary>
                Gets or sets a value indicating whether proxy creation is enabled.
                If the ObjectContext exists, then this property acts as a wrapper over the flag stored there.
                If the ObjectContext has not been created yet, then we store the value given so we can later
                use it when we create the ObjectContext.  This allows the flag to be changed, for example in
                a DbContext constructor, without it causing the ObjectContext to be created.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.DbQueryProvider">
            <summary>
                A wrapping query provider that performs expression transformation and then delegates
                to the <see cref="T:System.Data.Objects.ObjectQuery"/> provider.  The <see cref="T:System.Linq.IQueryable"/> objects returned are always instances
                of <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1"/>. This provider is associated with generic <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1"/> objects.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryProvider.#ctor(System.Data.Entity.Internal.InternalContext,System.Linq.IQueryProvider)">
            <summary>
                Creates a provider that wraps the given provider.
            </summary>
            <param name = "provider">The provider to wrap.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
                Performs expression replacement and then delegates to the wrapped provider before wrapping
                the returned <see cref="T:System.Data.Objects.ObjectQuery"/> as a <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
                Performs expression replacement and then delegates to the wrapped provider before wrapping
                the returned <see cref="T:System.Data.Objects.ObjectQuery"/> as a <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1"/> where T is determined
                from the element type of the ObjectQuery.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
                By default, calls the same method on the wrapped provider.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
                By default, calls the same method on the wrapped provider.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryProvider.CreateQuery(System.Data.Objects.ObjectQuery)">
            <summary>
                Creates an appropriate generic IQueryable using Reflection and the underlying ElementType of
                the given ObjectQuery.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryProvider.CreateObjectQuery(System.Linq.Expressions.Expression)">
            <summary>
                Performs expression replacement and then delegates to the wrapped provider to create an
                <see cref="T:System.Data.Objects.ObjectQuery"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryProvider.CreateInternalQuery(System.Data.Objects.ObjectQuery)">
            <summary>
                Wraps the given <see cref="T:System.Data.Objects.ObjectQuery"/> as a <see cref="T:System.Data.Entity.Internal.Linq.InternalQuery`1"/> where T is determined
                from the element type of the ObjectQuery.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.DbQueryProvider.InternalContext">
            <summary>
                Gets the internal context.
            </summary>
            <value>The internal context.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.DbQueryVisitor">
            <summary>
                A LINQ expression visitor that finds <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/> uses with equivalent
                <see cref="T:System.Data.Objects.ObjectQuery"/> instances.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                Replaces calls to DbContext.Set() with an expression for the equivalent <see cref="T:System.Data.Objects.ObjectQuery"/>.
            </summary>
            <param name="node">The node to replace.</param>
            <returns>A new node, which may have had the replacement made.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
                Replaces a <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/> or <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1"/> property with a constant expression
                for the underlying <see cref="T:System.Data.Objects.ObjectQuery"/>.
            </summary>
            <param name="node">The node to replace.</param>
            <returns>A new node, which may have had the replacement made.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
                Processes the fields in each constant expression and replaces <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/> instances with
                the underlying ObjectQuery instance.  This handles cases where the query has a closure
                containing <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/> values.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryVisitor.GetContextFromConstantExpression(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <summary>
                Gets a <see cref="T:System.Data.Entity.DbContext"/> value from the given member, or returns null
                if the member doesn't contain a DbContext instance.
            </summary>
            <param name="expression">The expression for the object for the member, which may be null for a static member.</param>
            <param name="member">The member.</param>
            <returns>The context or null.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryVisitor.GetContextFromMember(System.Reflection.MemberInfo,System.Object)">
            <summary>
                Gets the <see cref="T:System.Data.Entity.DbContext"/> instance from the given instance or static member, returning null
                if the member does not contain a DbContext instance.
            </summary>
            <param name="member">The member.</param>
            <param name="value">The value of the object to get the instance from, or null if the member is static.</param>
            <returns>The context instance or null.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryVisitor.CreateObjectQueryConstant(System.Object)">
            <summary>
                Takes a <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1"/> or <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/> and creates an expression
                for the underlying <see cref="T:System.Data.Objects.ObjectQuery`1"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryVisitor.ExtractObjectQuery(System.Object)">
            <summary>
                Takes a <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1"/> or <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/> and extracts the underlying <see cref="T:System.Data.Objects.ObjectQuery`1"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.IInternalQuery">
            <summary>
                A non-generic interface implemented by <see cref="T:System.Data.Entity.Internal.Linq.InternalQuery`1"/> that allows operations on
                any query object without knowing the type to which it applies.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.IInternalQuery`1">
            <summary>
                An interface implemented by <see cref="T:System.Data.Entity.Internal.Linq.InternalQuery`1"/>.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.IInternalSet">
            <summary>
                A non-generic interface implemented by <see cref="T:System.Data.Entity.Internal.Linq.InternalSet`1"/> that allows operations on
                any set object without knowing the type to which it applies.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.IInternalSet`1">
            <summary>
                An interface implemented by <see cref="T:System.Data.Entity.Internal.Linq.InternalSet`1"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.InternalDbQuery`1">
            <summary>
                An instance of this internal class is created whenever an instance of the public <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/>
                class is needed. This allows the public surface to be non-generic, while the runtime type created
                still implements <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalDbQuery`1.#ctor(System.Data.Entity.Internal.Linq.IInternalQuery{`0})">
            <summary>
                Creates a new query that will be backed by the given internal query object.
            </summary>
            <param name = "internalQuery">The backing query.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalDbQuery`1.Include(System.String)">
            <summary>
                See comments in <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalDbQuery`1.AsNoTracking">
            <summary>
                See comments in <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalDbQuery`1.GetEnumerator">
            <summary>
                Gets the enumeration of this query causing it to be executed against the store.
            </summary>
            <returns>An enumerator for the query</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalDbQuery`1.InternalQuery">
            <summary>
                Gets the underlying internal query object.
            </summary>
            <value>The internal query.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.InternalDbSet`1">
            <summary>
                An instance of this internal class is created whenever an instance of the public <see cref="T:System.Data.Entity.DbSet`1"/>
                class is needed. This allows the public surface to be non-generic, while the runtime type created
                still implements <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalDbSet`1.#ctor(System.Data.Entity.Internal.Linq.IInternalSet{`0})">
            <summary>
                Creates a new set that will be backed by the given internal set.
            </summary>
            <param name = "internalSet">The internal set.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalDbSet`1.Create(System.Data.Entity.Internal.InternalContext,System.Data.Entity.Internal.Linq.IInternalSet)">
            <summary>
                Creates an instance of this class.  This method is used with CreateDelegate to cache a delegate
                that can create a generic instance without calling MakeGenericType every time.
            </summary>
            <param name = "internalContext"></param>
            <param name = "internalSet">The internal set to wrap, or null if a new internal set should be created.</param>
            <returns>The set.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalDbSet`1.Include(System.String)">
            <summary>
                See comments in <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalDbSet`1.AsNoTracking">
            <summary>
                See comments in <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalDbSet`1.Find(System.Object[])">
            <summary>
                See comments in <see cref="T:System.Data.Entity.DbSet`1"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalDbSet`1.Create">
            <summary>
                See comments in <see cref="T:System.Data.Entity.DbSet`1"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalDbSet`1.Create(System.Type)">
            <summary>
                See comments in <see cref="T:System.Data.Entity.DbSet`1"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalDbSet`1.GetEnumerator">
            <summary>
                Gets the enumeration of this query causing it to be executed against the store.
            </summary>
            <returns>An enumerator for the query</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalDbSet`1.InternalQuery">
            <summary>
                Gets the underlying internal query object.
            </summary>
            <value>The internal query.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalDbSet`1.InternalSet">
            <summary>
                Gets the underlying internal set.
            </summary>
            <value>The internal set.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalDbSet`1.Local">
            <summary>
                See comments in <see cref="T:System.Data.Entity.DbSet`1"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.InternalQuery`1">
            <summary>
                An InternalQuery underlies every instance of DbSet and DbQuery.  It acts to lazily initialize a InternalContext as well
                as an ObjectQuery and EntitySet the first time that it is used.  The InternalQuery also acts to expose necessary
                information to other parts of the design in a controlled manner without adding a lot of internal methods and
                properties to the DbSet and DbQuery classes themselves.
            </summary>
            <typeparam name = "TElement">The type of entity to query for.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.#ctor(System.Data.Entity.Internal.InternalContext)">
            <summary>
                Creates a new query that will be backed by the given InternalContext.
            </summary>
            <param name = "internalContext">The backing context.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.#ctor(System.Data.Entity.Internal.InternalContext,System.Data.Objects.ObjectQuery)">
            <summary>
                Creates a new internal query based on the information in an existing query together with
                a new underlying ObjectQuery.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.ResetQuery">
            <summary>
                Resets the query to its uninitialized state so that it will be re-lazy initialized the next
                time it is used.  This allows the ObjectContext backing a DbContext to be switched out.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.Include(System.String)">
            <summary>
                Updates the underlying ObjectQuery with the given include path.
            </summary>
            <param name = "path">The include path.</param>
            <returns>A new query containing the defined include path.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.AsNoTracking">
            <summary>
                Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns> A new query with NoTracking applied.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.InitializeQuery(System.Data.Objects.ObjectQuery{`0})">
            <summary>
                Performs lazy initialization of the underlying ObjectContext, ObjectQuery, and EntitySet objects
                so that the query can be used.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> representation of the underlying query, equivalent
                to ToTraceString on ObjectQuery.
            </summary>
            <returns>
                The query string.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.GetEnumerator">
            <summary>
                Gets the enumeration of this query causing it to be executed against the store.
            </summary>
            <returns>An enumerator for the query</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.System#Data#Entity#Internal#Linq#IInternalQuery#GetEnumerator">
            <summary>
                Gets the enumeration of this query causing it to be executed against the store.
            </summary>
            <returns>An enumerator for the query</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalQuery`1.InternalContext">
            <summary>
                The underlying InternalContext.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalQuery`1.ObjectQuery">
            <summary>
                The underlying ObjectQuery.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalQuery`1.System#Data#Entity#Internal#Linq#IInternalQuery#ObjectQuery">
            <summary>
                The underlying ObjectQuery.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalQuery`1.Expression">
            <summary>
                The LINQ query expression.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalQuery`1.ObjectQueryProvider">
            <summary>
                The LINQ query provider for the underlying <see cref="P:System.Data.Entity.Internal.Linq.InternalQuery`1.ObjectQuery"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalQuery`1.ElementType">
            <summary>
                The IQueryable element type.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.#ctor(System.Data.Entity.Internal.InternalContext)">
            <summary>
                Creates a new query that will be backed by the given InternalContext.
            </summary>
            <param name = "internalContext">The backing context.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.ResetQuery">
            <summary>
                Resets the set to its uninitialized state so that it will be re-lazy initialized the next
                time it is used.  This allows the ObjectContext backing a DbContext to be switched out.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.Find(System.Object[])">
            <summary>
                Finds an entity with the given primary key values.
                If an entity with the given primary key values exists in the context, then it is
                returned immediately without making a request to the store.  Otherwise, a request
                is made to the store for an entity with the given primary key values and this entity,
                if found, is attached to the context and returned.  If no entity is found in the
                context or the store, then null is returned.
            </summary>
            <remarks>
                The ordering of composite key values is as defined in the EDM, which is in turn as defined in
                the designer, by the Code First fluent API, or by the DataMember attribute.
            </remarks>
            <param name="keyValues">The values of the primary key for the entity to be found.</param>
            <returns>The entity found, or null.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if multiple entities exist in the context with the primary key values given.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the type of entity is not part of the data model for this context.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the types of the key values do not match the types of the key values for the entity type to be found.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.FindInStateManager(System.Data.Entity.Internal.WrappedEntityKey)">
            <summary>
                Finds an entity in the state manager with the given primary key values, or returns null
                if no such entity can be found.  This includes looking for Added entities with the given
                key values.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.FindInStore(System.Data.Entity.Internal.WrappedEntityKey,System.String)">
            <summary>
                Finds an entity in the store with the given primary key values, or returns null
                if no such entity can be found.  This code is adapted from TryGetObjectByKey to
                include type checking in the query.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.Attach(System.Object)">
            <summary>
                Attaches the given entity to the context underlying the set.  That is, the entity is placed
                into the context in the Unchanged state, just as if it had been read from the database.
            </summary>
            <remarks>
                Attach is used to repopulate a context with an entity that is known to already exist in the database.
                SaveChanges will therefore not attempt to insert an attached entity into the database because
                it is assumed to already be there.
                Note that entities that are already in the context in some other state will have their state set
                to Unchanged.  Attach is a no-op if the entity is already in the context in the Unchanged state.
                This method is virtual so that it can be mocked.
            </remarks>
            <param name = "entity">The entity to attach.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.Add(System.Object)">
            <summary>
                Adds the given entity to the context underlying the set in the Added state such that it will
                be inserted into the database when SaveChanges is called.
            </summary>
            <remarks>
                Note that entities that are already in the context in some other state will have their state set
                to Added.  Add is a no-op if the entity is already in the context in the Added state.
                This method is virtual so that it can be mocked.
            </remarks>
            <param name = "entity">The entity to add.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.Remove(System.Object)">
            <summary>
                Marks the given entity as Deleted such that it will be deleted from the database when SaveChanges
                is called.  Note that the entity must exist in the context in some other state before this method
                is called.
            </summary>
            <remarks>
                Note that if the entity exists in the context in the Added state, then this method
                will cause it to be detached from the context.  This is because an Added entity is assumed not to
                exist in the database such that trying to delete it does not make sense.
                This method is virtual so that it can be mocked.
            </remarks>
            <param name = "entity">The entity to remove.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.ActOnSet(System.Action,System.Data.EntityState,System.Object,System.String)">
            <summary>
                This method checks whether an entity is already in the context.  If it is, then the state
                is changed to the new state given.  If it isn't, then the action delegate is executed to
                either Add or Attach the entity.
            </summary>
            <param name = "action">A delegate to Add or Attach the entity.</param>
            <param name = "newState">The new state to give the entity if it is already in the context.</param>
            <param name = "entity">The entity.</param>
            <param name = "methodName">Name of the method.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.Create">
            <summary>
                Creates a new instance of an entity for the type of this set.
                Note that this instance is NOT added or attached to the set.
                The instance returned will be a proxy if the underlying context is configured to create
                proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <returns>The entity instance, which may be a proxy.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.Create(System.Type)">
            <summary>
                Creates a new instance of an entity for the type of this set or for a type derived
                from the type of this set.
                Note that this instance is NOT added or attached to the set.
                The instance returned will be a proxy if the underlying context is configured to create
                proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <param name = "derivedEntityType">The type of entity to create.</param>
            <returns> The entity instance, which may be a proxy. </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.Initialize">
            <summary>
                Performs lazy initialization of the underlying ObjectContext, ObjectQuery, and EntitySet objects
                so that the query can be used.
                This method is virtual so that it can be mocked.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.TryInitialize">
            <summary>
                Attempts to perform lazy initialization of the underlying ObjectContext, ObjectQuery, and EntitySet objects
                so that o-space loading has happened and the query can be used. This method doesn't throw if the type
                for the set is not mapped.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.CreateObjectQuery(System.Boolean)">
            <summary>
                Creates an underlying <see cref="T:System.Data.Objects.ObjectQuery`1"/> for this set.
            </summary>
            <param name="asNoTracking">if set to <c>true</c> then the query is set to be no-tracking.</param>
            <returns>The query.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> representation of the underlying query, equivalent
                to ToTraceString on ObjectQuery.
            </summary>
            <returns>
                The query string.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.Include(System.String)">
            <summary>
                Updates the underlying ObjectQuery with the given include path.
            </summary>
            <param name = "path">The include path.</param>
            <returns>A new query containing the defined include path.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.AsNoTracking">
            <summary>
                Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns> A new query with NoTracking applied.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.ExecuteSqlQuery(System.String,System.Boolean,System.Object[])">
            <summary>
                Executes the given SQL query against the database materializing entities into the entity set that
                backs this set.
            </summary>
            <param name = "sql">The SQL quey.</param>
            <param name = "asNoTracking">if <c>true</c> then the entities are not tracked, otherwise they are.</param>
            <param name = "parameters">The parameters.</param>
            <returns>The query results.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator">
            <summary>
                Gets the enumeration of this query causing it to be executed against the store.
            </summary>
            <returns>An enumerator for the query</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.Local">
            <summary>
                Gets the ObservableCollection representing the local view for the set based on this query.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.ObjectQuery">
            <summary>
                The underlying ObjectQuery.  Accessing this property will trigger lazy initialization of the query.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.EntitySetName">
            <summary>
                The underlying EntitySet name.  Accessing this property will trigger lazy initialization of the query.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.QuotedEntitySetName">
            <summary>
                The underlying EntitySet name, quoted for ESQL.  Accessing this property will trigger lazy initialization of the query.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.EntitySet">
            <summary>
                The underlying EntitySet.  Accessing this property will trigger lazy initialization of the query.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.EntitySetBaseType">
            <summary>
                The base type for the underlying entity set.  Accessing this property will trigger lazy initialization of the query.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.InternalContext">
            <summary>
                The underlying InternalContext.  Accessing this property will trigger lazy initialization of the query.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.Expression">
            <summary>
                The LINQ query expression.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.ObjectQueryProvider">
            <summary>
                The LINQ query provider for the underlying <see cref="P:System.Data.Entity.Internal.Linq.InternalSet`1.ObjectQuery"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.NonGenericDbQueryProvider">
            <summary>
                A wrapping query provider that performs expression transformation and then delegates
                to the <see cref="T:System.Data.Objects.ObjectQuery"/> provider.  The <see cref="T:System.Linq.IQueryable"/> objects returned
                are always instances of <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1"/> when the generic CreateQuery method is
                used and are instances of <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/> when the non-generic CreateQuery method
                is used.  This provider is associated with non-generic <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/> objects.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.NonGenericDbQueryProvider.#ctor(System.Data.Entity.Internal.InternalContext,System.Linq.IQueryProvider)">
            <summary>
                Creates a provider that wraps the given provider.
            </summary>
            <param name = "provider">The provider to wrap.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.NonGenericDbQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
                Performs expression replacement and then delegates to the wrapped provider before wrapping
                the returned <see cref="T:System.Data.Objects.ObjectQuery"/> as a <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.NonGenericDbQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
                Delegates to the wrapped provider except returns instances of <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.NonGenericDbQueryProvider.CreateQuery(System.Data.Objects.ObjectQuery)">
            <summary>
                Creates an appropriate generic IQueryable using Reflection and the underlying ElementType of
                the given ObjectQuery.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.ObservableBackedBindingList`1">
            <summary>
                Extends <see cref="T:System.Data.Entity.Internal.SortableBindingList`1"/> to create a sortable binding list that stays in
                sync with an underlying <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.  That is, when items are added
                or removed from the binding list, they are added or removed from the ObservableCollecion, and
                vice-versa.
            </summary>
            <typeparam name="T">The list element type.</typeparam>
        </member>
        <member name="T:System.Data.Entity.Internal.SortableBindingList`1">
            <summary>
                An extended BindingList implementation that implements sorting.
                This class was adapted from the LINQ to SQL class of the same name.
            </summary>
            <typeparam name = "T">The element type.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Internal.SortableBindingList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.SortableBindingList`1"/> class with the
                the given underlying list.  Note that sorting is dependent on having an actual <see cref="T:System.Collections.Generic.List`1"/>
                rather than some other ICollection implementation.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.SortableBindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
                Applies sorting to the list.
            </summary>
            <param name = "prop">The property to sort by.</param>
            <param name = "direction">The sort direction.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.SortableBindingList`1.RemoveSortCore">
            <summary>
                Stops sorting.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.SortableBindingList`1.IsSortedCore">
            <summary>
                Gets a value indicating whether this list is sorted.
            </summary>
            <value>
                <c>true</c> if this instance is sorted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Internal.SortableBindingList`1.SortDirectionCore">
            <summary>
                Gets the sort direction.
            </summary>
            <value>The sort direction.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.SortableBindingList`1.SortPropertyCore">
            <summary>
                Gets the sort property being used to sort.
            </summary>
            <value>The sort property.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.SortableBindingList`1.SupportsSortingCore">
            <summary>
                Returns <c>true</c> indicating that this list supports sorting.
            </summary>
            <value><c>true</c>.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.SortableBindingList`1.PropertyComparer">
            <summary>
                Implements comparing for the <see cref="T:System.Data.Entity.Internal.SortableBindingList`1"/> implementation.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.SortableBindingList`1.PropertyComparer.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.SortableBindingList`1.PropertyComparer"/> class
                for sorting the list.
            </summary>
            <param name="prop">The property to sort by.</param>
            <param name="direction">The sort direction.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.SortableBindingList`1.PropertyComparer.Compare(`0,`0)">
            <summary>
                Compares two instances of items in the list.
            </summary>
            <param name = "left">The left item to compare.</param>
            <param name = "right">The right item to compare.</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Entity.Internal.SortableBindingList`1.PropertyComparer.CanSort(System.Type)">
            <summary>
                Determines whether this instance can sort for the specified type.
            </summary>
            <param name = "type">The type.</param>
            <returns>
                <c>true</c> if this instance can sort for the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.SortableBindingList`1.PropertyComparer.CanSortWithIComparable(System.Type)">
            <summary>
                Determines whether this instance can sort for the specified type using IComparable.
            </summary>
            <param name = "type">The type.</param>
            <returns>
                <c>true</c> if this instance can sort for the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.SortableBindingList`1.PropertyComparer.CanSortWithToString(System.Type)">
            <summary>
                Determines whether this instance can sort for the specified type using ToString.
            </summary>
            <param name = "type">The type.</param>
            <returns>
                <c>true</c> if this instance can sort for the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
            <summary>
                Initializes a new instance of a binding list backed by the given <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>
            </summary>
            <param name="obervableCollection">The obervable collection.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.AddNewCore">
            <summary>
                Creates a new item to be added to the binding list.
            </summary>
            <returns>The new item.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.CancelNew(System.Int32)">
            <summary>
                Cancels adding of a new item that was started with AddNew.
            </summary>
            <param name = "itemIndex">Index of the item.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.ClearItems">
            <summary>
                Removes all items from the binding list and underlying ObservableCollection.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.EndNew(System.Int32)">
            <summary>
                Ends the process of adding a new item that was started with AddNew.
            </summary>
            <param name = "itemIndex">Index of the item.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.InsertItem(System.Int32,`0)">
            <summary>
                Inserts the item into the binding list at the given index.
            </summary>
            <param name = "index">The index.</param>
            <param name = "item">The item.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.RemoveItem(System.Int32)">
            <summary>
                Removes the item at the specified index.
            </summary>
            <param name = "index">The index.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.SetItem(System.Int32,`0)">
            <summary>
                Sets the item into the list at the given position.
            </summary>
            <param name = "index">The index to insert at.</param>
            <param name = "item">The item.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.ObservableCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Event handler to update the binding list when the underlying observable collection changes.
            </summary>
            <param name = "sender">The sender.</param>
            <param name = "e">Data indicating how the collection has changed.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.AddToObservableCollection(`0)">
            <summary>
                Adds the item to the underlying observable collection.
            </summary>
            <param name = "item">The item.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.RemoveFromObservableCollection(`0)">
            <summary>
                Removes the item from the underlying from observable collection.
            </summary>
            <param name = "item">The item.</param>
        </member>
        <member name="T:System.Data.Entity.Internal.RetryAction`1">
            <summary>
                Adapted from <see cref="T:System.Lazy`1"/> to allow the initializer to take an input object and
                to do one-time initialization that only has side-effects and doesn't return a value.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Internal.RetryAction`1.#ctor(System.Action{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.RetryAction`1"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.RetryAction`1.PerformAction(`0)">
            <summary>
                Performs the action unless it has already been successfully performed before.
            </summary>
            <param name = "input">The input to the action; ignored if the action has already succeeded.</param>
        </member>
        <member name="T:System.Data.Entity.Internal.RetryLazy`2">
            <summary>
                Adapted from <see cref="T:System.Lazy`1"/> to allow the initializer to take an input object and
                to retry initialization if it has previously failed.
            </summary>
            <remarks>
                This class can only be used to initialize reference types that will not be null when
                initialized.
            </remarks>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Internal.RetryLazy`2.#ctor(System.Func{`0,`1})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.RetryLazy`2"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.RetryLazy`2.GetValue(`0)">
            <summary>
                Gets the value, possibly by running the initializer if it has not been run before or
                if all previous times it ran resulted in exceptions.
            </summary>
            <param name = "input">The input to the initializer; ignored if initialization has already succeeded.</param>
            <returns>The initialized object.</returns>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.ComplexPropertyValidator">
            <summary>
                Validates a property of a given EDM complex type.
            </summary>
            <remarks>
                This is a composite validator for a complex property of an entity.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.PropertyValidator">
            <summary>
                Validates a property of a given EDM property type.
            </summary>
            <remarks>
                This is a composite validator for a property of an entity or a complex type.
            </remarks>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.PropertyValidator._propertyValidators">
            <summary>
                Simple validators for the corresponding property.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.PropertyValidator._propertyName">
            <summary>
                Name of the property the validator was created for.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.PropertyValidator.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Internal.Validation.IValidator})">
            <summary>
                Creates an instance of <see cref="T:System.Data.Entity.Internal.Validation.PropertyValidator"/> for a given EDM property.
            </summary>
            <param name="propertyName">The EDM property name.</param>
            <param name="propertyValidators">Validators used to validate the given property.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.PropertyValidator.Validate(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
                Validates a property.
            </summary>
            <param name="entityValidationContext">Validation context. Never null.</param>
            <param name="property">Property to validate. Never null.</param>
            <returns>Validation errors as <see cref="T:System.Collections.Generic.IEnumerable`1"/>. Empty if no errors. Never null.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Internal.Validation.PropertyValidator.PropertyAttributeValidators">
            <summary>
                Simple validators for the corresponding property.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Validation.PropertyValidator.PropertyName">
            <summary>
                Gets the name of the property the validator was created for.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.ComplexPropertyValidator._complexTypeValidator">
            <summary>
                The complex type validator.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ComplexPropertyValidator.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Internal.Validation.IValidator},System.Data.Entity.Internal.Validation.ComplexTypeValidator)">
            <summary>
                Creates an instance of <see cref="T:System.Data.Entity.Internal.Validation.ComplexPropertyValidator"/> for a given complex property.
            </summary>
            <param name="propertyName">The complex property name.</param>
            <param name="propertyValidators">Validators used to validate the given property.</param>
            <param name="complexTypeValidator">Complex type validator.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ComplexPropertyValidator.Validate(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
                Validates a complex property.
            </summary>
            <param name="entityValidationContext">Validation context. Never null.</param>
            <param name="property">Property to validate. Never null.</param>
            <returns>Validation errors as <see cref="T:System.Collections.Generic.IEnumerable`1"/>. Empty if no errors. Never null.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.ComplexTypeValidator">
            <summary>
                Validator used to validate a property of a given EDM ComplexType.
            </summary>
            <remarks>
                This is a composite validator.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.TypeValidator">
            <summary>
                Validator used to validate an entity of a given EDM Type.
            </summary>
            <remarks>
                This is a composite validator for an EDM Type.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.TypeValidator.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Internal.Validation.PropertyValidator},System.Collections.Generic.IEnumerable{System.Data.Entity.Internal.Validation.IValidator})">
            <summary>
                Creates an instance <see cref="T:System.Data.Entity.Internal.Validation.EntityValidator"/> for a given EDM type.
            </summary>
            <param name="propertyValidators">Property validators.</param>
            <param name="typeLevelValidators">Type level validators.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.TypeValidator.Validate(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
                Validates an instance.
            </summary>
            <param name="entityValidationContext">Entity validation context. Must not be null.</param>
            <param name="property">The entry for the complex property. Null if validating an entity.</param>
            <returns><see cref="T:System.Data.Entity.Validation.DbEntityValidationResult"/> instance. Never null.</returns>
            <remarks>
                Protected so it doesn't appear on EntityValidator.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.TypeValidator.ValidateProperties(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalPropertyEntry,System.Collections.Generic.List{System.Data.Entity.Validation.DbValidationError})">
            <summary>
                Validates type properties. Any validation errors will be added to <paramref name = "validationErrors" />
                collection.
            </summary>
            <param name = "entityValidationContext">
                Validation context. Must not be null.
            </param>
            <param name = "validationErrors">
                Collection of validation errors. Any validation errors will be added to it.
            </param>
            <param name = "parentProperty">The entry for the complex property. Null if validating an entity.</param>
            <remarks>
                Note that <paramref name = "validationErrors" /> will be modified by this method. Errors should be only added,
                never removed or changed. Taking a collection as a modifiable parameter saves a couple of memory allocations
                and a merge of validation error lists per entity.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.TypeValidator.GetPropertyValidator(System.String)">
            <summary>
                Returns a validator for a child property.
            </summary>
            <param name = "propertyName">Name of the child property for which to return a validator.</param>
            <returns>
                Validator for a child property. Possibly null if there are no validators for requested property.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ComplexTypeValidator.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Internal.Validation.PropertyValidator},System.Collections.Generic.IEnumerable{System.Data.Entity.Internal.Validation.IValidator})">
            <summary>
                Creates an instance <see cref="T:System.Data.Entity.Internal.Validation.EntityValidator"/> for a given EDM complex type.
            </summary>
            <param name="propertyValidators">Property validators.</param>
            <param name="typeLevelValidators">Type level validators.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ComplexTypeValidator.Validate(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
                Validates an instance.
            </summary>
            <param name="entityValidationContext">Entity validation context. Must not be null.</param>
            <param name="property">The entry for the complex property. Null if validating an entity.</param>
            <returns><see cref="T:System.Data.Entity.Validation.DbEntityValidationResult"/> instance. Never null.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ComplexTypeValidator.ValidateProperties(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalPropertyEntry,System.Collections.Generic.List{System.Data.Entity.Validation.DbValidationError})">
            <summary>
                Validates type properties. Any validation errors will be added to <paramref name = "validationErrors" />
                collection.
            </summary>
            <param name = "entityValidationContext">
                Validation context. Must not be null.
            </param>
            <param name = "validationErrors">
                Collection of validation errors. Any validation errors will be added to it.
            </param>
            <param name = "parentProperty">The entry for the complex property. Null if validating an entity.</param>
            <remarks>
                Note that <paramref name = "validationErrors" /> will be modified by this method. Errors should be only added,
                never removed or changed. Taking a collection as a modifiable parameter saves a couple of memory allocations
                and a merge of validation error lists per entity.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.EntityValidationContext">
            <summary>
                Contains information needed to validate an entity or its properties.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.EntityValidationContext._entityEntry">
            <summary>
                The entity being validated or the entity that owns the property being validated.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidationContext.#ctor(System.Data.Entity.Internal.InternalEntityEntry,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
                Initializes a new instance of EntityValidationContext class.
            </summary>
            <param name = "entityEntry">
                The entity being validated or the entity that owns the property being validated.
            </param>
            <param name = "externalValidationContexts">
                External contexts needed for validation.
            </param>
        </member>
        <member name="P:System.Data.Entity.Internal.Validation.EntityValidationContext.ExternalValidationContext">
            <summary>
                External context needed for validation.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Validation.EntityValidationContext.InternalEntity">
            <summary>
                Gets the entity being validated or the entity that owns the property being validated.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.EntityValidator">
            <summary>
                Validator used to validate an entity of a given EDM EntityType.
            </summary>
            <remarks>
                This is a top level, composite validator. This is also an entry point to getting an entity
                validated as validation of an entity is always started by calling Validate method on this type.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidator.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Internal.Validation.PropertyValidator},System.Collections.Generic.IEnumerable{System.Data.Entity.Internal.Validation.IValidator})">
            <summary>
                Creates an instance <see cref="T:System.Data.Entity.Internal.Validation.EntityValidator"/> for a given EDM entity type.
            </summary>
            <param name="propertyValidators">Property validators.</param>
            <param name="typeLevelValidators">Entity type level validators.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidator.Validate(System.Data.Entity.Internal.Validation.EntityValidationContext)">
            <summary>
                Validates an entity.
            </summary>
            <param name="entityValidationContext">Entity validation context. Must not be null.</param>
            <returns><see cref="T:System.Data.Entity.Validation.DbEntityValidationResult"/> instance. Never null.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidator.ValidateProperties(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalPropertyEntry,System.Collections.Generic.List{System.Data.Entity.Validation.DbValidationError})">
            <summary>
                Validates type properties. Any validation errors will be added to <paramref name = "validationErrors" />
                collection.
            </summary>
            <param name = "entityValidationContext">
                Validation context. Must not be null.
            </param>
            <param name = "validationErrors">
                Collection of validation errors. Any validation errors will be added to it.
            </param>
            <param name = "parentProperty">The entry for the complex property. Null if validating an entity.</param>
            <remarks>
                Note that <paramref name = "validationErrors" /> will be modified by this method. Errors should be only added,
                never removed or changed. Taking a collection as a modifiable parameter saves a couple of memory allocations
                and a merge of validation error lists per entity.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.EntityValidatorBuilder">
            <summary>
                Builds validators based on <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s specified on entity CLR types and properties
                as well as based on presence of <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject"/> implementation on entity and complex
                type CLR types. It's not sealed and not static for mocking purposes.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidatorBuilder.BuildEntityValidator(System.Data.Entity.Internal.InternalEntityEntry)">
            <summary>
                Builds an <see cref="T:System.Data.Entity.Internal.Validation.EntityValidator"/> for the given <paramref name="entityEntry"/>.
            </summary>
            <param name="entityType">The entity entry to build the validator for.</param>
            <param name="targetType">Whether the currently processed type is the target type or one of the ancestor types.
            </param>
            <returns>
                <see cref="T:System.Data.Entity.Internal.Validation.EntityValidator"/> for the given <paramref name="entityEntry"/>. Possibly null 
                if no validation has been specified for this entity type.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidatorBuilder.BuildComplexTypeValidator(System.Type,System.Data.Metadata.Edm.ComplexType)">
            <summary>
                Builds the validator for a given <paramref name="complexType"/> and the corresponding
                <paramref name="clrType"/>.
            </summary>
            <param name="clrType">The CLR type that corresponds to the EDM complex type.</param>
            <param name="complexType">The EDM complex type that type level validation is built for.</param>
            <returns>A <see cref="T:System.Data.Entity.Internal.Validation.ComplexTypeValidator"/> for the given complex type. May be null if no validation specified.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidatorBuilder.BuildTypeValidator``1(System.Type,System.Collections.Generic.IEnumerable{System.Data.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Metadata.Edm.NavigationProperty},System.Func{System.Collections.Generic.IEnumerable{System.Data.Entity.Internal.Validation.PropertyValidator},System.Collections.Generic.IEnumerable{System.Data.Entity.Internal.Validation.IValidator},``0})">
            <summary>
                Extracted method from BuildEntityValidator and BuildComplexTypeValidator
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidatorBuilder.BuildValidatorsForProperties(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Collections.Generic.IEnumerable{System.Data.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Metadata.Edm.NavigationProperty})">
            <summary>
                Build validators for the <paramref name = "clrProperties" /> and the corresponding <paramref name = "edmProperties" />
                or <paramref name = "navigationProperties" />.
            </summary>
            <param name = "clrProperties">Properties to build validators for.</param>
            <param name = "edmProperties">Non-navigation EDM properties.</param>
            <param name = "navigationProperties">Navigation EDM properties.</param>
            <returns>A list of validators. Possibly empty, never null.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidatorBuilder.BuildPropertyValidator(System.Reflection.PropertyInfo,System.Data.Metadata.Edm.EdmProperty,System.Boolean)">
            <summary>
                Builds a <see cref="T:System.Data.Entity.Internal.Validation.PropertyValidator"/> for the given <paramref name="edmProperty"/> and the corresponding
                <paramref name="clrProperty"/>. If the property is a complex type, type level validators will be built here as
                well.
            </summary>
            <param name="clrProperty">The CLR property to build the validator for.</param>
            <param name="edmProperty">The EDM property to build the validator for.</param>
            <returns>
                <see cref="T:System.Data.Entity.Internal.Validation.PropertyValidator"/> for the given <paramref name="edmProperty"/>. Possibly null
                if no validation has been specified for this property.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidatorBuilder.BuildPropertyValidator(System.Reflection.PropertyInfo)">
            <summary>
                Builds a <see cref="T:System.Data.Entity.Internal.Validation.PropertyValidator"/> for the given transient <paramref name="clrProperty"/>.
            </summary>
            <param name="clrProperty">The CLR property to build the validator for.</param>
            <returns>
                <see cref="T:System.Data.Entity.Internal.Validation.PropertyValidator"/> for the given <paramref name="clrProperty"/>. Possibly null
                if no validation has been specified for this property.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidatorBuilder.BuildValidationAttributeValidators(System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
                Builds <see cref="T:System.Data.Entity.Internal.Validation.ValidationAttributeValidator"/>s for given <paramref name="attributes"/> that derive from
                <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>.
            </summary>
            <param name="attributes">Attributes used to build validators.</param>
            <returns>
                A list of <see cref="T:System.Data.Entity.Internal.Validation.ValidationAttributeValidator"/>s built from <paramref name="attributes"/>. 
                Possibly empty, never null. 
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidatorBuilder.GetPublicInstanceProperties(System.Type)">
            <summary>
                Returns all non-static non-indexed CLR properties from the <paramref name="type"/>.
            </summary>
            <param name="type">The CLR <see cref="T:System.Type"/> to get the properties from.</param>
            <returns>
                A collection of CLR properties. Possibly empty, never null.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidatorBuilder.BuildFacetValidators(System.Reflection.PropertyInfo,System.Data.Metadata.Edm.EdmMember,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
                Builds validators based on the facets of <paramref name = "edmProperty" />:
                * If .Nullable facet set to false adds a validator equivalent to the RequiredAttribute
                * If the .MaxLength facet is specified adds a validator equivalent to the MaxLengthAttribute.
                However the validator isn't added if .IsMaxLength has been set to true.
            </summary>
            <param name = "clrProperty">The CLR property to build the facet validators for.</param>
            <param name = "edmProperty">The property for which facet validators will be created</param>
            <returns>A collection of validators.</returns>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.IValidator">
            <summary>
                Abstracts simple validators used to validate entities and properties.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.IValidator.Validate(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
                Validates an entity or a property.
            </summary>
            <param name="entityValidationContext">Validation context. Never null.</param>
            <param name="property">Property to validate. Can be null for type level validation.</param>
            <returns>Validation error as<see cref="T:System.Collections.Generic.IEnumerable`1"/>. Empty if no errors. Never null.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.IValidatorContracts.System#Data#Entity#Internal#Validation#IValidator#Validate(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
                Contract for IValidator.Validate method.
            </summary>
            <param name = "entityValidationContext">Validation context.</param>
            <param name = "property">Property.</param>
            <returns>Nothing - always throws.</returns>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.ValidatableObjectValidator">
            <summary>
                Validates entities or complex types implementing IValidatableObject interface.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.ValidatableObjectValidator._displayAttribute">
            <summary>
                Display attribute used to specify the display name for an entity or complex property.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ValidatableObjectValidator.Validate(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
                Validates an entity or a complex type implementing IValidatableObject interface.
                This method is virtual to allow mocking.
            </summary>
            <param name="entityValidationContext">Validation context. Never null.</param>
            <param name="property">
                Property to validate. Null if this is the entity that will be validated. Never null if this 
                is the complex type that will be validated.
            </param>
            <returns>Validation error as <see cref="T:System.Collections.Generic.IEnumerable`1"/>. Empty if no errors. Never null.
            </returns>
            <remarks>
                Note that <paramref name="property"/> is used to figure out what needs to be validated. If it not null the complex
                type will be validated otherwise the entity will be validated.
                Also if this is an IValidatableObject complex type but the instance (.CurrentValue) is null we won't validate
                anything and will not return any errors. The reason for this is that Validation is supposed to validate using
                information the user provided and not some additional implicit rules. (ObjectContext will throw for operations
                that involve null complex properties).
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.ValidationAttributeValidator">
            <summary>
                Validates a property, complex property or an entity using validation attributes the property 
                or the complex/entity type is decorated with.
            </summary>
            <remarks>
                Note that this class is used for validating primitive properties using attributes declared on the property 
                (property level validation) and complex properties and entities using attributes declared on the type
                (type level validation).
            </remarks>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.ValidationAttributeValidator._displayAttribute">
            <summary>
                Display attribute used to specify the display name for a property or entity.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.ValidationAttributeValidator._validationAttribute">
            <summary>
                Validation attribute used to validate a property or an entity.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ValidationAttributeValidator.#ctor(System.ComponentModel.DataAnnotations.ValidationAttribute,System.ComponentModel.DataAnnotations.DisplayAttribute)">
            <summary>
                Creates an instance of <see cref="T:System.Data.Entity.Internal.Validation.ValidationAttributeValidator"/> class.
            </summary>
            <param name="validationAttribute">
                Validation attribute used to validate a property or an entity.
            </param>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ValidationAttributeValidator.Validate(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
                Validates a property or an entity.
            </summary>
            <param name="entityValidationContext">Validation context. Never null.</param>
            <param name="property">Property to validate. Null for entity validation. Not null for property validation.
            </param>
            <returns>
                Validation errors as <see cref="T:System.Collections.Generic.IEnumerable`1"/>. Empty if no errors, never null.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.ValidationProvider">
            <summary>
                Used to cache and retrieve generated validators and to create context for validating entities or properties.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.ValidationProvider._entityValidators">
            <summary>
                Collection of validators keyed by the entity CLR type. Note that if there's no validation for a given type
                it will be associated with a null validator.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ValidationProvider.#ctor(System.Data.Entity.Internal.Validation.EntityValidatorBuilder)">
            <summary>
                Initializes a new instance of <see cref="T:System.Data.Entity.Internal.Validation.ValidationProvider"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ValidationProvider.GetEntityValidator(System.Data.Entity.Internal.InternalEntityEntry)">
            <summary>
                Returns a validator to validate <paramref name="entityEntry"/>.
            </summary>
            <param name="entityEntry">Entity the validator is requested for.</param>
            <returns>
                <see cref="T:System.Data.Entity.Internal.Validation.EntityValidator"/> to validate <paramref name="entityEntry"/>. Possibly null if no validation 
                has been specified for the entity.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ValidationProvider.GetPropertyValidator(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
                Returns a validator to validate <paramref name = "property" />.
            </summary>
            <param name = "property">Navigation property the validator is requested for.</param>
            <returns>
                Validator to validate <paramref name = "property" />. Possibly null if no validation 
                has been specified for the requested property.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ValidationProvider.GetValidatorForProperty(System.Data.Entity.Internal.Validation.EntityValidator,System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
                Gets a validator for the <paramref name = "memberEntry" />.
            </summary>
            <param name = "entityValidator">Entity validator.</param>
            <param name = "memberEntry">Property to get a validator for.</param>
            <returns>
                Validator to validate <paramref name = "memberEntry" />. Possibly null if there is no validation for the 
                <paramref name = "memberEntry" />.
            </returns>
            <remarks>
                For complex properties this method walks up the type hierarchy to get to the entity level and then goes down
                and gets a validator for the child property that is an ancestor of the property to validate. If a validator
                returned for an ancestor is null it means that there is no validation defined beneath and the method just 
                propagates (and eventually returns) null.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ValidationProvider.GetEntityValidationContext(System.Data.Entity.Internal.InternalEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
                Creates <see cref="T:System.Data.Entity.Internal.Validation.EntityValidationContext"/> for <paramref name="entityEntry"/>.
            </summary>
            <param name="entityEntry">Entity entry for which a validation context needs to be created.</param>
            <param name="items">User defined dictionary containing additional info for custom validation. This parameter is optional and can be null.</param>
            <returns>An instance of <see cref="T:System.Data.Entity.Internal.Validation.EntityValidationContext"/> class.</returns>
            <seealso cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})"/>
        </member>
        <member name="T:System.Data.Entity.Internal.WrappedEntityKey">
            <summary>
                A wrapper around EntityKey that allows key/values pairs that have null values to
                be used.  This allows Added entities with null key values to be searched for in
                the ObjectStateManager.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Internal.WrappedEntityKey._keyValuePairs">
            The key name/key value pairs, where some key values may be null
        </member>
        <member name="M:System.Data.Entity.Internal.WrappedEntityKey.#ctor(System.Data.Metadata.Edm.EntitySet,System.String,System.Object[],System.String)">
            <summary>
                Creates a new WrappedEntityKey instance.
            </summary>
            <param name = "entitySet">The entity set that the key belongs to.</param>
            <param name = "entitySetName">The fully qualified name of the given entity set.</param>
            <param name = "keyValues">The key values, which may be null or contain null values.</param>
            <param name = "keyValuesParamName">The name of the parameter passed for keyValue by the user, which is used when throwing exceptions.</param>
        </member>
        <member name="P:System.Data.Entity.Internal.WrappedEntityKey.HasNullValues">
            <summary>
                True if any of the key values are null, which means that the EntityKey will also be null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.WrappedEntityKey.EntityKey">
            <summary>
                An actual EntityKey, or null if any of the key values are null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.WrappedEntityKey.KeyValuePairs">
            <summary>
                The key name/key value pairs of the key, in which some of the key values may be null.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
            <summary>
                Allows configuration to be performed for an complex type in a model.
            
                A ComplexTypeConfiguration can be obtained via the ComplexType method on
                <see cref="T:System.Data.Entity.DbModelBuilder"/> or a custom type derived from ComplexTypeConfiguration
                can be registered via the Configurations property on <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
            <typeparam name="TComplexType">The complex type to be configured.</typeparam>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
            <summary>
                Allows configuration to be performed for a type in a model.
            </summary>
            <typeparam name = "TStructuralType">The type to be configured.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Configures a <see cref = "T:System.struct" /> property that is defined on this type.
            </summary>
            <typeparam name = "T">The type of the property being configured.</typeparam>
            <param name = "propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to configure the property.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
            <summary>
                Configures a <see cref = "T:System.struct?" /> property that is defined on this type.
            </summary>
            <typeparam name = "T">The type of the property being configured.</typeparam>
            <param name = "propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to configure the property.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeometry}})">
            <summary>
              Configures a <see cref = "T:DbGeometry" /> property that is defined on this type.
            </summary>
            <param name = "propertyExpression">
              A lambda expression representing the property to be configured.
              C#: t => t.MyProperty   
              VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to configure the property.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeography}})">
            <summary>
              Configures a <see cref = "T:DbGeography" /> property that is defined on this type.
            </summary>
            <param name = "propertyExpression">
              A lambda expression representing the property to be configured.
              C#: t => t.MyProperty   
              VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to configure the property.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
                Configures a <see cref = "T:System.string" /> property that is defined on this type.
            </summary>
            <param name = "propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to configure the property.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
            <summary>
                Configures a <see cref = "T:System.byte[]" /> property that is defined on this type.
            </summary>
            <param name = "propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to configure the property.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
                Configures a <see cref = "T:System.decimal" /> property that is defined on this type.
            </summary>
            <param name = "propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to configure the property.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
            <summary>
                Configures a <see cref = "T:System.decimal?" /> property that is defined on this type.
            </summary>
            <param name = "propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to configure the property.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
            <summary>
                Configures a <see cref = "T:System.DateTime" /> property that is defined on this type.
            </summary>
            <param name = "propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to configure the property.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
            <summary>
                Configures a <see cref = "T:System.DateTime?" /> property that is defined on this type.
            </summary>
            <param name = "propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to configure the property.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
            <summary>
                Configures a <see cref = "T:System.DateTimeOffset" /> property that is defined on this type.
            </summary>
            <param name = "propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to configure the property.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
            <summary>
                Configures a <see cref = "T:System.DateTimeOffset?" /> property that is defined on this type.
            </summary>
            <param name = "propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to configure the property.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
            <summary>
                Configures a <see cref = "T:System.TimeSpan" /> property that is defined on this type.
            </summary>
            <param name = "propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to configure the property.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
            <summary>
                Configures a <see cref = "T:System.TimeSpan?" /> property that is defined on this type.
            </summary>
            <param name = "propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to configure the property.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Excludes a property from the model so that it will not be mapped to the database.
            </summary>
            <typeparam name = "TProperty">The type of the property to be ignored.</typeparam>
            <param name = "propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
            <summary>
                Initializes a new instance of ComplexTypeConfiguration
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
            <summary>
                Allows derived configuration classes for entities and complex types to be registered with a <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
            <remarks>
                Derived configuration classes are created by deriving from <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration"/>
                or <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration"/> and using a type to be included in the model as the generic
                parameter.
            
                Configuration can be performed without creating derived configuration classes via the Entity and ComplexType
                methods on <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
            <summary>
                Adds an <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration"/> to the <see cref="T:System.Data.Entity.DbModelBuilder"/>.
                Only one <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration"/> can be added for each type in a model.
            </summary>
            <typeparam name="TEntityType">The entity type being configured.</typeparam>
            <param name="entityTypeConfiguration">The entity type configuration to be added.</param>
            <returns>The same ConfigurationRegistrar instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
            <summary>
                Adds an <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration"/> to the <see cref="T:System.Data.Entity.DbModelBuilder"/>.
                Only one <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration"/> can be added for each type in a model.
            </summary>
            <typeparam name="TComplexType">The complex type being configured.</typeparam>
            <param name="complexTypeConfiguration">The complex type configuration to be added</param>
            <returns>The same ConfigurationRegistrar instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
            <summary>
                Allows the conventions used by a <see cref="T:System.Data.Entity.DbModelBuilder"/> instance to be customized.
                Currently removal of one or more default conventions is the only supported operation.
                The default conventions can be found in the System.Data.Entity.ModelConfiguration.Conventions namespace.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
            <summary>
                Disables a convention for the <see cref="T:System.Data.Entity.DbModelBuilder"/>.
                The default conventions that are available for removal can be found in the System.Data.Entity.ModelConfiguration.Conventions namespace.
            </summary>
            <typeparam name="TConvention">The type of the convention to be disabled.</typeparam>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
            <summary>
                Configures the table and column mapping for an entity type or a sub-set of properties from an entity type.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
            <typeparam name="TEntityType">The entity type to be mapped.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Configures the properties that will be included in this mapping fragment.
                If this method is not called then all properties that have not yet been 
                included in a mapping fragment will be configured.
            </summary>
            <typeparam name = "TObject">An anonymous type including the properties to be mapped.</typeparam>
            <param name = "propertiesExpression">
                A lambda expression to an anonymous type that contains the properties to be mapped.
                C#: t => new { t.Id, t.Property1, t.Property2 }
                VB.Net: Function(t) New With { p.Id, t.Property1, t.Property2 }
            </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
            <summary>
                Re-maps all properties inherited from base types.
            
                When configuring a derived type to be mapped to a separate table this will cause all properties to 
                be included in the table rather than just the non-inherited properties. This is known as
                Table per Concrete Type (TPC) mapping.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
            <summary>
                Configures the table name to be mapped to.
            </summary>
            <param name = "tableName">Name of the table.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
            <summary>
                Configures the table name and schema to be mapped to.
            </summary>
            <param name = "tableName">Name of the table.</param>
            <param name = "schemaName">Schema of the table.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
            <summary>
                Configures the discriminator column used to differentiate between types in an inheritance hierarchy.
            </summary>
            <param name = "discriminator">The name of the discriminator column.</param>
            <returns>A configuration object to further configure the discriminator column and values.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Configures the discriminator condition used to differentiate between types in an inheritance hierarchy.
            </summary>
            <typeparam name = "TProperty">The type of the property being used to discriminate between types.</typeparam>
            <param name = "property">
                A lambda expression representing the property being used to discriminate between types.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object to further configure the discriminator condition.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.Mapping.ForeignKeyPrimitiveOperations.MoveForeignKeyConstraint(System.Data.Entity.Edm.Db.DbTableMetadata,System.Data.Entity.Edm.Db.DbTableMetadata,System.Data.Entity.Edm.Db.DbForeignKeyConstraintMetadata)">
            <summary>
                Moves a foreign key constraint from oldTable to newTable and updates column references
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.Mapping.ForeignKeyPrimitiveOperations.MoveAllForeignKeyConstraintsForColumn(System.Data.Entity.Edm.Db.DbTableMetadata,System.Data.Entity.Edm.Db.DbTableMetadata,System.Data.Entity.Edm.Db.DbTableColumnMetadata)">
            <summary>
                Move any FK constraints that are now completely in newTable and used to refer to oldColumn
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
            <summary>
                Configures a condition used to discriminate between types in an inheritance hierarchy based on the values assigned to a property.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
            <summary>
                Configures the condition to require a value in the property.
            
                Rows that do not have a value assigned to column that this property is stored in are 
                assumed to be of the base type of this entity type.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.Mapping.EntityMappingService.Analyze">
            <summary>
                Populate the table mapping structure
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.Mapping.EntityMappingService.ConfigureAssociationSetMappingForeignKeys(System.Data.Entity.Edm.EdmEntitySet)">
            <summary>
                Sets nullability for association set mappings' foreign keys for 1:* and 1:0..1 associations
                when no base types share the the association set mapping's table
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.Mapping.EntityMappingService.ConfigureTypeMappings(System.Data.Entity.ModelConfiguration.Configuration.Mapping.TableMapping,System.Collections.Generic.Dictionary{System.Data.Entity.Edm.EdmEntityType,System.Data.Entity.Edm.Db.Mapping.DbEntityTypeMapping},System.Data.Entity.Edm.EdmEntityType,System.Data.Entity.Edm.Db.Mapping.DbEntityTypeMappingFragment,System.Data.Entity.Edm.Db.Mapping.DbEntityTypeMappingFragment)">
            <summary>
                Makes sure only the required property mappings are present
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.Mapping.EntityMappingService.FindPropertyEntityTypeMapping(System.Data.Entity.ModelConfiguration.Configuration.Mapping.TableMapping,System.Data.Entity.Edm.EdmEntitySet,System.Data.Entity.Edm.EdmEntityType,System.Boolean,System.Data.Entity.Edm.Db.Mapping.DbEntityTypeMapping@,System.Data.Entity.Edm.Db.Mapping.DbEntityTypeMappingFragment@)">
            <summary>
                Determines if the table and entity type need mapping, and if not, removes the existing entity type mapping
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
            <summary>
                Configures a database column used to store a string values.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
            <summary>
                Configures the column to allow the maximum length supported by the database provider.
            </summary>
            <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})" -->
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
            <summary>
                Configures the column to be fixed length.
                Use HasMaxLength to set the length that the property is fixed to.
            </summary>
            <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
            <summary>
                Configures the column to be variable length.
                Columns are variable length by default.
            </summary>
            <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
            <summary>
                Configures the column to be optional.
            </summary>
            <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
            <summary>
                Configures the column to be required.
            </summary>
            <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
            <summary>
                Configures the data type of the database column.
            </summary>
            <param name = "columnType">Name of the database provider specific data type.</param>
            <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
            <summary>
                Configures the order of the database column.
            </summary>
            <param name = "columnOrder">The order that this column should appear in the database table.</param>
            <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
            <summary>
                Configures the column to support Unicode string content.
            </summary>
            <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
            <summary>
                Configures whether or not the column supports Unicode string content.
            </summary>
            <param name = "unicode">
                Value indicating if the column supports Unicode string content or not.
                Specifying 'null' will remove the Unicode facet from the column.
                Specifying 'null' will cause the same runtime behavior as specifying 'false'.
            </param>
            <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
            <summary>
                Configures a discriminator column used to differentiate between types in an inheritance hierarchy.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
            <summary>
                Configures the discriminator value used to identify the entity type being 
                configured from other types in the inheritance hierarchy.
            </summary>
            <typeparam name = "T">Type of the discriminator value.</typeparam>
            <param name = "value">The value to be used to identify the entity type.</param>
            <returns>A configuration object to configure the column used to store discriminator values.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
            <summary>
                Configures the discriminator value used to identify the entity type being 
                configured from other types in the inheritance hierarchy.
            </summary>
            <typeparam name = "T">Type of the discriminator value.</typeparam>
            <param name = "value">The value to be used to identify the entity type.</param>
            <returns>A configuration object to configure the column used to store discriminator values.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
            <summary>
                Configures the discriminator value used to identify the entity type being 
                configured from other types in the inheritance hierarchy.
            </summary>
            <param name = "value">The value to be used to identify the entity type.</param>
            <returns>A configuration object to configure the column used to store discriminator values.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModelConfiguration.NormalizeConfigurations">
            <summary>
                Initializes configurations in the ModelConfiguration so that configuration data
                is in a single place
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
            <summary>
                Configures a many relationship from an entity type.
            </summary>
            <typeparam name = "TEntityType">The entity type that the relationship originates from.</typeparam>
            <typeparam name = "TTargetEntityType">The entity type that the relationship targets.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
            <summary>
                Configures the relationship to be many:many with a navigation property on the other side of the relationship.
            </summary>
            <param name = "navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
            <summary>
                Configures the relationship to be many:many without a navigation property on the other side of the relationship.
            </summary>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
                Configures the relationship to be many:required with a navigation property on the other side of the relationship.
            </summary>
            <param name = "navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
            <summary>
                Configures the relationship to be many:required without a navigation property on the other side of the relationship.
            </summary>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
                Configures the relationship to be many:optional with a navigation property on the other side of the relationship.
            </summary>
            <param name = "navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
            <summary>
                Configures the relationship to be many:optional without a navigation property on the other side of the relationship.
            </summary>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
            <summary>
                Configures an optional relationship from an entity type.
            </summary>
            <typeparam name = "TEntityType">The entity type that the relationship originates from.</typeparam>
            <typeparam name = "TTargetEntityType">The entity type that the relationship targets.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
            <summary>
                Configures the relationship to be optional:many with a navigation property on the other side of the relationship.
            </summary>
            <param name = "navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
            <summary>
                Configures the relationship to be optional:many without a navigation property on the other side of the relationship.
            </summary>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
                Configures the relationship to be optional:required with a navigation property on the other side of the relationship.
            </summary>
            <param name = "navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
            <summary>
                Configures the relationship to be optional:required without a navigation property on the other side of the relationship.
            </summary>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
                Configures the relationship to be optional:optional with a navigation property on the other side of the relationship.
                The entity type being configured will be the dependent and contain a foreign key to the principal. 
                The entity type that the relationship targets will be the principal in the relationship.
            </summary>
            <param name = "navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
            <summary>
                Configures the relationship to be optional:optional without a navigation property on the other side of the relationship.
                The entity type being configured will be the dependent and contain a foreign key to the principal. 
                The entity type that the relationship targets will be the principal in the relationship.
            </summary>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
                Configures the relationship to be optional:optional with a navigation property on the other side of the relationship.
                The entity type being configured will be the principal in the relationship. 
                The entity type that the relationship targets will be the dependent and contain a foreign key to the principal.
            </summary>
            <param name = "navigationPropertyExpression">
                A lambda expression representing the navigation property on the other end of the relationship.
            </param>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
            <summary>
                Configures the relationship to be optional:optional without a navigation property on the other side of the relationship.
                The entity type being configured will be the principal in the relationship. 
                The entity type that the relationship targets will be the dependent and contain a foreign key to the principal.
            </summary>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
            <summary>
                Configures an required relationship from an entity type.
            </summary>
            <typeparam name = "TEntityType">The entity type that the relationship originates from.</typeparam>
            <typeparam name = "TTargetEntityType">The entity type that the relationship targets.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
            <summary>
                Configures the relationship to be required:many with a navigation property on the other side of the relationship.
            </summary>
            <param name = "navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
            <summary>
                Configures the relationship to be required:many without a navigation property on the other side of the relationship.
            </summary>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
                Configures the relationship to be required:optional with a navigation property on the other side of the relationship.
            </summary>
            <param name = "navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
            <summary>
                Configures the relationship to be required:optional without a navigation property on the other side of the relationship.
            </summary>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
                Configures the relationship to be required:required with a navigation property on the other side of the relationship.
                The entity type being configured will be the dependent and contain a foreign key to the principal. 
                The entity type that the relationship targets will be the principal in the relationship.
            </summary>
            <param name = "navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
            <summary>
                Configures the relationship to be required:required without a navigation property on the other side of the relationship.
                The entity type being configured will be the dependent and contain a foreign key to the principal. 
                The entity type that the relationship targets will be the principal in the relationship.
            </summary>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
                Configures the relationship to be required:required with a navigation property on the other side of the relationship.
                The entity type being configured will be the principal in the relationship. 
                The entity type that the relationship targets will be the dependent and contain a foreign key to the principal.
            </summary>
            <param name = "navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
            <summary>
                Configures the relationship to be required:required without a navigation property on the other side of the relationship.
                The entity type being configured will be the principal in the relationship. 
                The entity type that the relationship targets will be the dependent and contain a foreign key to the principal.
            </summary>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.Properties.PropertyConfiguration">
            <summary>
                Base class for configuring a property on an entity type or complex type.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.ModelConfiguration.Configuration.Properties.Navigation.NavigationPropertyConfiguration.IsNavigationPropertyDeclaringTypePrincipal">
            <summary>
                True if the NavigationProperty's declaring type is the principal end, false if it is not, null if it is not known
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
            <summary>
                Base class for performing configuration of a relationship.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
            <summary>
                Configures a relationship that can support cascade on delete functionality.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
            <summary>
                Configures cascade delete to be on for the relationship.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
            <summary>
                Configures whether or not cascade delete is on for the relationship.
            </summary>
            <param name = "value">Value indicating if cascade delete is on or not.</param>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
            <summary>
                Configures a relationship that can support foreign key properties that are exposed in the object model.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
            <typeparam name="TDependentEntityType">The dependent entity type.</typeparam>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
            <summary>
                Configures a relationship that can only support foreign key properties that are not exposed in the object model.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
            <summary>
                Configures the relationship to use foreign key property(s) that are not exposed in the object model.
                The column(s) and table can be customized by specifying a configuration action.
                If an empty configuration action is specified then column name(s) will be generated by convention.
                If foreign key properties are exposed in the object model then use the HasForeignKey method.
                Not all relationships support exposing foreign key properties in the object model.
            </summary>
            <param name = "configurationAction">Action that configures the foreign key column(s) and table.</param>
            <returns>
                A configuration object that can be used to further configure the relationship.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Configures the relationship to use foreign key property(s) that are exposed in the object model.
                If the foreign key property(s) are not exposed in the object model then use the Map method.
            </summary>
            <typeparam name = "TKey">The type of the key.</typeparam>
            <param name = "foreignKeyExpression">
                A lambda expression representing the property to be used as the foreign key. 
                If the foreign key is made up of multiple properties then specify an anonymous type including the properties. 
                When using multiple foreign key properties, the properties must be specified in the same order that the
                the primary key properties were configured for the principal entity type.
            </param>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
            <summary>
                Configures the table and column mapping of a relationship that does not expose foreign key properties in the object model.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
            <summary>
                Configures the name of the column(s) for the foreign key.
            </summary>
            <param name = "keyColumnNames">
                The foreign key column names.
                When using multiple foreign key properties, the properties must be specified in the same order that the
                the primary key properties were configured for the target entity type.
            </param>
            <returns>The same ForeignKeyAssociationMappingConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
            <summary>
                Configures the table name that the foreign key column(s) reside in.
                The table that is specified must already be mapped for the entity type.
            
                If you want the foreign key(s) to reside in their own table then use the Map method
                on <see cref = "T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> to perform 
                entity splitting to create the table with just the primary key property. Foreign keys can 
                then be added to the table via this method.
            </summary>
            <param name = "tableName">Name of the table.</param>
            <returns>The same ForeignKeyAssociationMappingConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
            <summary>
                Configures the table name and schema that the foreign key column(s) reside in.
                The table that is specified must already be mapped for the entity type.
            
                If you want the foreign key(s) to reside in their own table then use the Map method
                on <see cref = "T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> to perform 
                entity splitting to create the table with just the primary key property. Foreign keys can 
                then be added to the table via this method.
            </summary>
            <param name = "tableName">Name of the table.</param>
            <param name = "schemaName">Schema of the table.</param>
            <returns>The same ForeignKeyAssociationMappingConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
            <summary>
                Configures the table and column mapping of a many:many relationship.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
            <summary>
                Configures the join table name for the relationship.
            </summary>
            <param name = "tableName">Name of the table.</param>
            <returns>The same ManyToManyAssociationMappingConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
            <summary>
                Configures the join table name and schema for the relationship.
            </summary>
            <param name = "tableName">Name of the table.</param>
            <param name = "schemaName">Schema of the table.</param>
            <returns>The same ManyToManyAssociationMappingConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
            <summary>
                Configures the name of the column(s) for the left foreign key.
                The left foreign key represents the navigation property specified in the HasMany call.
            </summary>
            <param name = "keyColumnNames">
                The foreign key column names.
                When using multiple foreign key properties, the properties must be specified in the same order that the
                the primary key properties were configured for the target entity type.
            </param>
            <returns>The same ManyToManyAssociationMappingConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
            <summary>
                Configures the name of the column(s) for the right foreign key.
                The right foreign key represents the navigation property specified in the WithMany call.
            </summary>
            <param name = "keyColumnNames">
                The foreign key column names.
                When using multiple foreign key properties, the properties must be specified in the same order that the
                the primary key properties were configured for the target entity type.
            </param>
            <returns>The same ManyToManyAssociationMappingConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration">
            <summary>
                Configures a many:many relationship.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
            <summary>
                Configures the foreign key column(s) and table used to store the relationship.
            </summary>
            <param name = "configurationAction">Action that configures the foreign key column(s) and table.</param>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
            <summary>
                Used to configure a <see cref="T:System.byte[]"/> property of an entity type or complex type.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
            <summary>
                Used to configure a property with length facets for an entity type or complex type. 
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
            <summary>
                Used to configure a primitive property of an entity type or complex type. 
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
            <summary>
                Configures the property to be optional.
                The database column used to store this property will be nullable.
            </summary>
            <returns>The same PrimitivePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
            <summary>
                Configures the property to be required.
                The database column used to store this property will be non-nullable.
            </summary>
            <returns>The same PrimitivePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
            <summary>
                Configures how values for the property are generated by the database.
            </summary>
            <param name = "databaseGeneratedOption">
                The pattern used to generate values for the property in the database.
                Setting 'null' will remove the database generated pattern facet from the property.
                Setting 'null' will cause the same runtime behavior as specifying 'None'.
            </param>
            <returns>The same PrimitivePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
            <summary>
                Configures the property to be used as an optimistic concurrency token.
            </summary>
            <returns>The same PrimitivePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
            <summary>
                Configures whether or not the property is to be used as an optimistic concurrency token.
            </summary>
            <param name = "concurrencyToken">
                Value indicating if the property is a concurrency token or not.
                Specifying 'null' will remove the concurrency token facet from the property.
                Specifying 'null' will cause the same runtime behavior as specifying 'false'.
            </param>
            <returns>The same PrimitivePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
            <summary>
                Configures the data type of the database column used to store the property.
            </summary>
            <param name = "columnType">Name of the database provider specific data type.</param>
            <returns>The same PrimitivePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
            <summary>
                Configures the name of the database column used to store the property.
            </summary>
            <param name = "columnName">The name of the column.</param>
            <returns>The same PrimitivePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
            <summary>
                Configures the order of the database column used to store the property.
                This method is also used to specify key ordering when an entity type has a composite key.
            </summary>
            <param name = "columnOrder">The order that this column should appear in the database table.</param>
            <returns>The same PrimitivePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
            <summary>
                Configures the property to allow the maximum length supported by the database provider.
            </summary>
            <returns>The same LengthPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
            <summary>
                Configures the property to have the specified maximum length.
            </summary>
            <param name = "value">
                The maximum length for the property.
                Setting 'null' will remove any maximum length restriction from the property and a default length will be used for the database column.
            </param>
            <returns>The same LengthPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
            <summary>
                Configures the property to be fixed length.
                Use HasMaxLength to set the length that the property is fixed to.
            </summary>
            <returns>The same LengthPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
            <summary>
                Configures the property to be variable length.
                Properties are variable length by default.
            </summary>
            <returns>The same LengthPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
            <summary>
                Configures the property to allow the maximum length supported by the database provider.
            </summary>
            <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
            <summary>
                Configures the property to have the specified maximum length.
            </summary>
            <param name = "value">
                The maximum length for the property.
                Setting 'null' will remove any maximum length restriction from the property.
            </param>
            <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
            <summary>
                Configures the property to be fixed length.
                Use HasMaxLength to set the length that the property is fixed to.
            </summary>
            <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
            <summary>
                Configures the property to be variable length.
                <see cref = "T:System.byte[]" /> properties are variable length by default.
            </summary>
            <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
            <summary>
                Configures the property to be optional.
                The database column used to store this property will be nullable.
                <see cref = "T:System.byte[]" /> properties are optional by default.
            </summary>
            <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
            <summary>
                Configures the property to be required.
                The database column used to store this property will be non-nullable.
            </summary>
            <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
            <summary>
                Configures how values for the property are generated by the database.
            </summary>
            <param name = "databaseGeneratedOption">
                The pattern used to generate values for the property in the database.
                Setting 'null' will remove the database generated pattern facet from the property.
                Setting 'null' will cause the same runtime behavior as specifying 'None'.
            </param>
            <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
            <summary>
                Configures the property to be used as an optimistic concurrency token.
            </summary>
            <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
            <summary>
                Configures whether or not the property is to be used as an optimistic concurrency token.
            </summary>
            <param name = "concurrencyToken">
                Value indicating if the property is a concurrency token or not.
                Specifying 'null' will remove the concurrency token facet from the property.
                Specifying 'null' will cause the same runtime behavior as specifying 'false'.
            </param>
            <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
            <summary>
                Configures the name of the database column used to store the property.
            </summary>
            <param name = "columnName">The name of the column.</param>
            <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
            <summary>
                Configures the data type of the database column used to store the property.
            </summary>
            <param name = "columnType">Name of the database provider specific data type.</param>
            <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
            <summary>
                Configures the order of the database column used to store the property.
                This method is also used to specify key ordering when an entity type has a composite key.
            </summary>
            <param name = "columnOrder">The order that this column should appear in the database table.</param>
            <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
            <summary>
                Configures the property to be a row version in the database.
                The actual data type will vary depending on the database provider being used.
                Setting the property to be a row version will automatically configure it to be an
                optimistic concurrency token.
            </summary>
            <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
            <summary>
                Used to configure a <see cref="T:System.DateTime"/> property of an entity type or complex type. 
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
            <summary>
                Configures the property to be optional.
                The database column used to store this property will be nullable.
            </summary>
            <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
            <summary>
                Configures the property to be required.
                The database column used to store this property will be non-nullable.
                <see cref = "T:System.DateTime" /> properties are required by default.
            </summary>
            <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
            <summary>
                Configures how values for the property are generated by the database.
            </summary>
            <param name = "databaseGeneratedOption">
                The pattern used to generate values for the property in the database.
                Setting 'null' will remove the database generated pattern facet from the property.
                Setting 'null' will cause the same runtime behavior as specifying 'None'.
            </param>
            <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
            <summary>
                Configures the property to be used as an optimistic concurrency token.
            </summary>
            <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
            <summary>
                Configures whether or not the property is to be used as an optimistic concurrency token.
            </summary>
            <param name = "concurrencyToken">
                Value indicating if the property is a concurrency token or not.
                Specifying 'null' will remove the concurrency token facet from the property.
                Specifying 'null' will cause the same runtime behavior as specifying 'false'.
            </param>
            <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
            <summary>
                Configures the name of the database column used to store the property.
            </summary>
            <param name = "columnName">The name of the column.</param>
            <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
            <summary>
                Configures the data type of the database column used to store the property.
            </summary>
            <param name = "columnType">Name of the database provider specific data type.</param>
            <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
            <summary>
                Configures the order of the database column used to store the property.
                This method is also used to specify key ordering when an entity type has a composite key.
            </summary>
            <param name = "columnOrder">The order that this column should appear in the database table.</param>
            <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
            <summary>
                Configures the precision of the property.
                If the database provider does not support precision for the data type of the column then the value is ignored.
            </summary>
            <param name = "value">Precision of the property.</param>
            <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
            <summary>
                Used to configure a <see cref="T:System.decimal"/> property of an entity type or complex type. 
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
            <summary>
                Configures the property to be optional.
                The database column used to store this property will be nullable.
            </summary>
            <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
            <summary>
                Configures the property to be required.
                The database column used to store this property will be non-nullable.
                <see cref = "T:System.decimal" /> properties are required by default.
            </summary>
            <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
            <summary>
                Configures how values for the property are generated by the database.
            </summary>
            <param name = "databaseGeneratedOption">
                The pattern used to generate values for the property in the database.
                Setting 'null' will remove the database generated pattern facet from the property.
                Setting 'null' will cause the same runtime behavior as specifying 'None'.
            </param>
            <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
            <summary>
                Configures the property to be used as an optimistic concurrency token.
            </summary>
            <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
            <summary>
                Configures whether or not the property is to be used as an optimistic concurrency token.
            </summary>
            <param name = "concurrencyToken">
                Value indicating if the property is a concurrency token or not.
                Specifying 'null' will remove the concurrency token facet from the property.
                Specifying 'null' will cause the same runtime behavior as specifying 'false'.
            </param>
            <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
            <summary>
                Configures the name of the database column used to store the property.
            </summary>
            <param name = "columnName">The name of the column.</param>
            <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
            <summary>
                Configures the data type of the database column used to store the property.
            </summary>
            <param name = "columnType">Name of the database provider specific data type.</param>
            <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
            <summary>
                Configures the order of the database column used to store the property.
                This method is also used to specify key ordering when an entity type has a composite key.
            </summary>
            <param name = "columnOrder">The order that this column should appear in the database table.</param>
            <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
            <summary>
                Configures the precision and scale of the property.
            </summary>
            <param name = "precision">The precision of the property.</param>
            <param name = "scale">The scale of the property.</param>
            <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
            <summary>
                Used to configure a <see cref="T:System.string"/> property of an entity type or complex type.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
            <summary>
                Configures the property to allow the maximum length supported by the database provider.
            </summary>
            <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
            <summary>
                Configures the property to have the specified maximum length.
            </summary>
            <param name = "value">
                The maximum length for the property.
                Setting 'null' will remove any maximum length restriction from the property and a default length will be used for the database column..
            </param>
            <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
            <summary>
                Configures the property to be fixed length.
                Use HasMaxLength to set the length that the property is fixed to.
            </summary>
            <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
            <summary>
                Configures the property to be variable length.
                <see cref = "T:System.string" /> properties are variable length by default.
            </summary>
            <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
            <summary>
                Configures the property to be optional.
                The database column used to store this property will be nullable.
                <see cref = "T:System.string" /> properties are optional by default.
            </summary>
            <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
            <summary>
                Configures the property to be required.
                The database column used to store this property will be non-nullable.
            </summary>
            <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
            <summary>
                Configures how values for the property are generated by the database.
            </summary>
            <param name = "databaseGeneratedOption">
                The pattern used to generate values for the property in the database.
                Setting 'null' will remove the database generated pattern facet from the property.
                Setting 'null' will cause the same runtime behavior as specifying 'None'.
            </param>
            <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
            <summary>
                Configures the property to be used as an optimistic concurrency token.
            </summary>
            <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
            <summary>
                Configures whether or not the property is to be used as an optimistic concurrency token.
            </summary>
            <param name = "concurrencyToken">
                Value indicating if the property is a concurrency token or not.
                Specifying 'null' will remove the concurrency token facet from the property.
                Specifying 'null' will cause the same runtime behavior as specifying 'false'.
            </param>
            <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
            <summary>
                Configures the name of the database column used to store the property.
            </summary>
            <param name = "columnName">The name of the column.</param>
            <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
            <summary>
                Configures the data type of the database column used to store the property.
            </summary>
            <param name = "columnType">Name of the database provider specific data type.</param>
            <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
            <summary>
                Configures the order of the database column used to store the property.
                This method is also used to specify key ordering when an entity type has a composite key.
            </summary>
            <param name = "columnOrder">The order that this column should appear in the database table.</param>
            <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
            <summary>
                Configures the property to support Unicode string content.
            </summary>
            <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
            <summary>
                Configures whether or not the property supports Unicode string content.
            </summary>
            <param name = "unicode">
                Value indicating if the property supports Unicode string content or not.
                Specifying 'null' will remove the Unicode facet from the property.
                Specifying 'null' will cause the same runtime behavior as specifying 'false'.
            </param>
            <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.Properties.Primitive.OverridableConfigurationParts">
            <summary>
                Indicates what parts of a configuration are overridable.
            </summary>
        </member>
        <member name="F:System.Data.Entity.ModelConfiguration.Configuration.Properties.Primitive.OverridableConfigurationParts.None">
            <summary>
                Nothing in the configuration is overridable.
            </summary>
        </member>
        <member name="F:System.Data.Entity.ModelConfiguration.Configuration.Properties.Primitive.OverridableConfigurationParts.OverridableInCSpace">
            <summary>
                The configuration values related to C-Space are overridable.
            </summary>
        </member>
        <member name="F:System.Data.Entity.ModelConfiguration.Configuration.Properties.Primitive.OverridableConfigurationParts.OverridableInSSpace">
            <summary>
                The configuration values only related to S-Space are overridable.
            </summary>
        </member>
        <member name="P:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration.IsReplaceable">
            <summary>
                True if this configuration can be replaced in the model configuration, false otherwise
                This is only set to true for configurations that are registered automatically via the DbContext
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeConfigurationConvention`3">
            <summary>
                Base class for conventions that process CLR attributes found in the model.
            </summary>
            <typeparam name = "TMemberInfo">The type of member to look for.</typeparam>
            <typeparam name = "TConfiguration">The type of the configuration to look for.</typeparam>
            <typeparam name = "TAttribute">The type of the attribute to look for.</typeparam>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
            <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute"/> found on properties in the model
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
            <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute"/> found on properties in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
            <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute"/> found on properties in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
            <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/> found on foreign key properties in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
            <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute"/> found on properties in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
            <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute"/> found on properties in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
            <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute"/> found on properties in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
            <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute"/> found on properties in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
            <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> found on navigation properties in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
            <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> found on primitive properties in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
            <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute"/> found on properties in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
            <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute"/> found on properties in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
            <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute"/> found on types in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
            <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute"/> found on types in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
            <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute"/> found on types in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
            <summary>
                Convention to detect navigation properties to be inverses of each other when only one pair 
                of navigation properties exists between the related types.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
            <summary>
                Convention to configure a type as a complex type if it has no primary key, no mapped base type and no navigation properties.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnTypeCasingConvention">
            <summary>
                Convention to convert any data types that were explicitly specified, via data annotations or <see cref="T:System.Data.Entity.DbModelBuilder"/> API, 
                to be lower case. The default SqlClient provider is case sensitive and requires data types to be lower case. This convention
                allows the <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttrbiute"/> and <see cref="T:System.Data.Entity.DbModelBuilder"/> API to be case insensitive.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
            <summary>
                Convention to add a cascade delete to the join table from both tables involved in a many to many relationship.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
            <summary>
                Convention to ensure an invalid/unsupported mapping is not created when mapping inherited properties
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
            <summary>
                Convention to set the table name to be a pluralized version of the entity type name.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
            <summary>
                Convention to set precision to 18 and scale to 2 for decimal properties.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
            <summary>
                Convention to move primary key properties to appear first.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
            <summary>
                Convention to distinguish between optional and required relationships based on CLR nullability of the foreign key property.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
            <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/> found on navigation properties in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
            <summary>
                Convention to detect primary key properties. 
                Recognized naming patterns in order of precedence are:
                1. 'Id'
                2. [type name]Id
                Primary key detection is case insensitive.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
            <summary>
                Convention to discover foreign key properties whose names are a combination
                of the dependent navigation property name and the principal type primary key property name(s).
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
            <summary>
                Convention to enable cascade delete for any required relationships.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
            <summary>
                Convention to configure the primary key(s) of the dependent entity type as foreign key(s) in a one:one relationship.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
            <summary>
                Convention to set the entity set name to be a pluralized version of the entity type name.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
            <summary>
                Convention to discover foreign key properties whose names match the principal type primary key property name(s).
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
            <summary>
                Convention to set a default maximum length of 128 for properties whose type supports length facets.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
            <summary>
                Convention to set a default maximum length of 4000 for properties whose type supports length facets when SqlCe is the provider.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
            <summary>
                Convention to configure integer primary keys to be identity.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.IsNonTableSplittingForeignKey(System.Data.Entity.Edm.EdmAssociationType,System.Data.Entity.Edm.EdmProperty)">
            <summary>
            Checks for the PK property being an FK in a different table. A PK which is also an FK but
            in the same table is used for table splitting and can still be an identity column because
            the update pipeline is only inserting into one column of one table.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
            <summary>
                Convention to discover foreign key properties whose names are a combination
                of the principal type name and the principal type primary key property name(s).
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Design.PluralizationServices.BidirectionalDictionary`2">
            <summary>
                This class provide service for both the singularization and pluralization, it takes the word pairs
                in the ctor following the rules that the first one is singular and the second one is plural.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Design.PluralizationServices.PluralizationService.CreateService(System.Globalization.CultureInfo)">
            <summary>
                Factory method for PluralizationService. Only support english pluralization.
                Please set the PluralizationService on the System.Data.Entity.Design.EntityModelSchemaGenerator
                to extend the service to other locales.
            </summary>
            <param name = "culture">CultureInfo</param>
            <returns>PluralizationService</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Design.PluralizationServices.EnglishPluralizationService.Capitalize(System.String,System.Func{System.String,System.String})">
            <summary>
                captalize the return word if the parameter is capitalized
                if word is "Table", then return "Tables"
            </summary>
            <param name = "word"></param>
            <param name = "action"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Design.PluralizationServices.EnglishPluralizationService.GetSuffixWord(System.String,System.String@)">
            <summary>
                separate one combine word in to two parts, prefix word and the last word(suffix word)
            </summary>
            <param name = "word"></param>
            <param name = "prefixWord"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Design.PluralizationServices.EnglishPluralizationService.IsNoOpWord(System.String)">
            <summary>
                return true when the word is "[\s]*" or leading or tailing with spaces
                or contains non alphabetical characters
            </summary>
            <param name = "word"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Design.PluralizationServices.EnglishPluralizationService.AddWord(System.String,System.String)">
            <summary>
                This method allow you to add word to internal PluralizationService of English.
                If the singluar or the plural value was already added by this method, then an ArgumentException will be thrown.
            </summary>
            <param name = "singular"></param>
            <param name = "plural"></param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Edm.EdmAssociationTypeExtensions.TryGuessPrincipalAndDependentEnds(System.Data.Entity.Edm.EdmAssociationType,System.Data.Entity.Edm.EdmAssociationEnd@,System.Data.Entity.Edm.EdmAssociationEnd@)">
            <summary>
                Attempt to determine the principal and dependent ends of this association.
            
                The following table illustrates the solution space.
             
                Source | Target || Prin  | Dep   |
                -------|--------||-------|-------|
                1      | 1      || -     | -     | 
                1      | 0..1   || Sr    | Ta    |
                1      | *      || Sr    | Ta    |
                0..1   | 1      || Ta    | Sr    |
                0..1   | 0..1   || -     | -     |
                0..1   | *      || Sr    | Ta    |
                *      | 1      || Ta    | Sr    |
                *      | 0..1   || Ta    | Sr    |
                *      | *      || -     | -     |
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
            <summary>
                Allows configuration to be performed for an entity type in a model.
            
                An EntityTypeConfiguration can be obtained via the Entity method on
                <see cref="T:System.Data.Entity.DbModelBuilder"/> or a custom type derived from EntityTypeConfiguration
                can be registered via the Configurations property on <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
            <summary>
                Initializes a new instance of EntityTypeConfiguration
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Configures the primary key property(s) for this entity type.
            </summary>
            <typeparam name = "TKey">The type of the key.</typeparam>
            <param name = "keyExpression">
                A lambda expression representing the property to be used as the primary key. 
                C#: t => t.Id   
                VB.Net: Function(t) t.Id
            
                If the primary key is made up of multiple properties then specify an anonymous type including the properties. 
                C#: t => new { t.Id1, t.Id2 }
                VB.Net: Function(t) New With { t.Id1, t.Id2 }
            </param>
            <returns>The same EntityTypeConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
            <summary>
                Configures the entity set name to be used for this entity type.
                The entity set name can only be configured for the base type in each set.
            </summary>
            <param name = "entitySetName">The name of the entity set.</param>
            <returns>The same EntityTypeConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
            <summary>
                Configures the table name that this entity type is mapped to.
            </summary>
            <param name = "tableName">The name of the table.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
            <summary>
                Configures the table name that this entity type is mapped to.
            </summary>
            <param name = "tableName">The name of the table.</param>
            <param name = "schemaName">The database schema of the table.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
            <summary>
                Allows advanced configuration related to how this entity type is mapped to the database schema.
                By default, any configuration will also apply to any type derived from this entity type.
            
                Derived types can be configured via the overload of Map that configures a derived type or
                by using an EntityTypeConfiguration for the derived type.
            
                The properties of an entity can be split between multiple tables using multiple Map calls.
            
                Calls to Map are additive, subsequent calls will not override configuration already preformed via Map.
            </summary>
            <param name="entityMappingConfigurationAction">An action that performs configuration against an <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1"/>.</param>
            <returns>The same EntityTypeConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
            <summary>
                Allows advanced configuration related to how a derived entity type is mapped to the database schema.
                Calls to Map are additive, subsequent calls will not override configuration already preformed via Map.
            </summary>
            <typeparam name="TDerived">The derived entity type to be configured.</typeparam>
            <param name="derivedTypeMapConfigurationAction">An action that performs configuration against an <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1"/>.</param>
            <returns>The same EntityTypeConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Configures an optional relationship from this entity type.
                Instances of the entity type will be able to be saved to the database without this relationship being specified.
                The foreign key in the database will be nullable.
            </summary>
            <typeparam name = "TTargetEntity">The type of the entity at the other end of the relationship.</typeparam>
            <param name = "navigationPropertyExpression">
                A lambda expression representing the navigation property for the relationship.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Configures a required relationship from this entity type.
                Instances of the entity type will not be able to be saved to the database unless this relationship is specified.
                The foreign key in the database will be non-nullable.
            </summary>
            <typeparam name = "TTargetEntity">The type of the entity at the other end of the relationship.</typeparam>
            <param name = "navigationPropertyExpression">
                A lambda expression representing the navigation property for the relationship.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
            <summary>
                Configures a many relationship from this entity type.
            </summary>
            <typeparam name = "TTargetEntity">The type of the entity at the other end of the relationship.</typeparam>
            <param name = "navigationPropertyExpression">
                A lambda expression representing the navigation property for the relationship.
                C#: t => t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
            <returns>A configuration object that can be used to further configure the relationship.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Mappers.NavigationPropertyMapper">
            <summary>
                Handles mapping from a CLR property to an EDM assocation and nav. prop.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
            <summary>
                Exception thrown by <see cref="T:System.Data.Entity.DbModelBuilder"/> during model creation when an invalid model is generated.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
            <summary>
                Initializes a new instance of ModelValidationException
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
            <summary>
                Initializes a new instance of ModelValidationException
            </summary>
            <param name = "message">The exception message.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of ModelValidationException
            </summary>
            <param name = "message">The exception message.</param>
            <param name = "innerException">The inner exception.</param>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Utilities.RuntimeFailureMethods">
            <summary>
                Code Contracts hook methods - Called when contracts fail. Here we detect the most common preconditions
                so we can throw the correct exceptions. It also means that we can write preconditions using the
                simplest Contract.Requires() form.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Utilities.TypeExtensions.IsNullable(System.Type)">
            <summary>
                Returns true if a variable of this type can be assigned a null value
            </summary>
            <param name = "type"></param>
            <returns>
                True if a reference type or a nullable value type,
                false otherwise
            </returns>
        </member>
        <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
            <summary>
                Exception thrown from <see cref="M:System.Data.Entity.DbContext.SaveChanges"/> when validating entities fails.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
            <summary>
                Initializes a new instance of DbEntityValidationException
            </summary>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
            <summary>
                Initializes a new instance of DbEntityValidationException
            </summary>
            <param name = "message">The exception message.</param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
            <summary>
                Initializes a new instance of DbEntityValidationException
            </summary>
            <param name = "message">The exception message.</param>
            <param name = "entityValidationResults">Validation results.</param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of DbEntityValidationException
            </summary>
            <param name = "message">The exception message.</param>
            <param name = "innerException">The inner exception.</param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
            <summary>
                Initializes a new instance of DbEntityValidationException
            </summary>
            <param name = "message">The exception message.</param>
            <param name = "entityValidationResults">Validation results.</param>
            <param name = "innerException">The inner exception.</param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.SubscribeToSerializeObjectState">
            <summary>
                Subscribes the SerializeObjectState event.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
            <summary>
                Validation results.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Validation.DbEntityValidationException.DbEntityValidationExceptionState">
            <summary>
                Holds exception state that will be serialized when the exception is serialized.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Validation.DbEntityValidationException.DbEntityValidationExceptionState._entityValidationResults">
            <summary>
                Validation results.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.DbEntityValidationExceptionState.CompleteDeserialization(System.Object)">
            <summary>
                Completes the deserialization.
            </summary>
            <param name = "deserialized">The deserialized object.</param>
        </member>
        <member name="P:System.Data.Entity.Validation.DbEntityValidationException.DbEntityValidationExceptionState.EntityValidationErrors">
            <summary>
                Validation results.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
            <summary>
                Represents validation results for single entity.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Validation.DbEntityValidationResult._entry">
            <summary>
                Entity entry the results applies to. Never null.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Validation.DbEntityValidationResult._validationErrors">
            <summary>
                List of <see cref="T:System.Data.Entity.Validation.DbValidationError"/> instances. Never null. Can be empty meaning the entity is valid.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
            <summary>
                Creates an instance of <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult"/> class.
            </summary>
            <param name="entry">
                Entity entry the results applies to. Never null.
            </param>
            <param name="validationErrors">
                List of <see cref="T:System.Data.Entity.Validation.DbValidationError"/> instances. Never null. Can be empty meaning the entity is valid.
            </param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Internal.InternalEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
            <summary>
                Creates an instance of <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult"/> class.
            </summary>
            <param name="entry">
                Entity entry the results applies to. Never null.
            </param>
            <param name="validationErrors">
                List of <see cref="T:System.Data.Entity.Validation.DbValidationError"/> instances. Never null. Can be empty meaning the entity is valid.
            </param>
        </member>
        <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
            <summary>
                Gets an instance of <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> the results applies to.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
            <summary>
                Gets validation errors. Never null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
            <summary>
                Gets an indicator if the entity is valid.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
            <summary>
                Exception thrown from <see cref="M:System.Data.Entity.DbContext.GetValidationErrors"/> when an exception is thrown from the validation
                code.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
            <summary>
                Initializes a new instance of DbUnexpectedValidationException
            </summary>
            <param name = "message">The exception message.</param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
            <summary>
                Initializes a new instance of DbUnexpectedValidationException
            </summary>
            <param name = "message">The exception message.</param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of DbUnexpectedValidationException
            </summary>
            <param name = "message">The exception message.</param>
            <param name = "innerException">The inner exception.</param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of DbUnexpectedValidationException with the specified serialization info and
                context.
            </summary>
            <param name = "info">The serialization info.</param>
            <param name = "context">The streaming context.</param>
        </member>
        <member name="T:System.Data.Entity.Validation.DbValidationError">
            <summary>
                Validation error. Can be either entity or property level validation error.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Validation.DbValidationError._propertyName">
            <summary>
                Name of the invalid property. Can be null (e.g. for entity level validations)
            </summary>
        </member>
        <member name="F:System.Data.Entity.Validation.DbValidationError._errorMessage">
            <summary>
                Validation error message.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
            <summary>
                Creates an instance of <see cref="T:System.Data.Entity.Validation.DbValidationError"/>.
            </summary>
            <param name="propertyName">Name of the invalid property. Can be null.</param>
            <param name="errorMessage">Validation error message. Can be null.</param>
        </member>
        <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
            <summary>
                Gets name of the invalid property.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
            <summary>
                Gets validation error message.
            </summary>
        </member>
    </members>
</doc>
