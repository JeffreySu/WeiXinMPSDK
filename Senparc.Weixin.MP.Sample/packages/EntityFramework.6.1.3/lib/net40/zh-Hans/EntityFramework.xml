<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EntityFramework</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute">
      <summary>表示置于属性 (property) 上的某个属性 (attribute)，以指示该属性 (property) 映射到的数据库列具有索引。</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor">
      <summary>为将按约定命名并且没有指定列顺序、群集或唯一性的索引初始化新的 <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> 实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String)">
      <summary>为具有给定名称并且没有指定列顺序、群集或唯一性的索引初始化新的 <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> 实例。</summary>
      <param name="name">索引名称。</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String,System.Int32)">
      <summary>为具有给定名称和列顺序，但没有指定群集或唯一性的索引初始化新的 <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> 实例。</summary>
      <param name="name">索引名称。</param>
      <param name="order">一个将用于确定多列索引的列顺序的数字。</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
      <summary>确定此属性是否指定与给定属性相同的名称和配置。</summary>
      <returns>如果其他对象等于此对象，则为 true，否则为 false。</returns>
      <param name="other">要比较的属性。</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.Object)">
      <summary>确定此属性是否指定与给定属性相同的名称和配置。</summary>
      <returns>如果其他对象等于此对象，则为 true，否则为 false。</returns>
      <param name="obj">要比较的属性。</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered">
      <summary>获取或设置一个值以指示索引是否定义群集索引。</summary>
      <returns>如果索引定义群集索引，则为 true，如果索引定义非群集索引，则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClusteredConfigured">
      <summary>获取或设置 <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered" /> 是否已设置为一个值。</summary>
      <returns>如果 <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered" /> 已设置为一个值，则为 true；否则为 false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique">
      <summary>获取或设置一个值以指示是否定义唯一索引。</summary>
      <returns>为 true，则定义唯一索引；为 false，则定义非唯一索引。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUniqueConfigured">
      <summary>获取或设置 <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique" /> 是否已设置为一个值。</summary>
      <returns>如果 <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique" /> 已设置为一个值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Name">
      <summary>获取或设置索引名称。</summary>
      <returns>索引名称。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Order">
      <summary>获取或设置确定多列索引的列排序的数字。如果没有指定列顺序，它将为 -1。</summary>
      <returns>确定多列索引的列排序的数字，或者如果已指定列顺序，则为 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.TypeId">
      <summary>为每个对象实例获取或设置不同的 ID，以便类型描述符不会尝试将所有 IndexAttribute 实例组合成单个实例。</summary>
      <returns>每个对象实例的不同 ID。</returns>
    </member>
    <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
      <summary>IDatabaseInitializer 的实现，它仅在数据库不存在时重新创建数据库并选择重新设置数据库的种子。若要设置数据库的种子，请创建一个派生类并重写 Seed 方法。</summary>
      <typeparam name="TContext"> 上下文的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
      <summary>     执行策略以初始化给定上下文的数据库。</summary>
      <param name="context"> 上下文。</param>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
      <summary>应重写以向上下文实际添加数据来设置种子的方法。默认实现不执行任何操作。</summary>
      <param name="context"> 要设置种子的上下文。 </param>
    </member>
    <member name="T:System.Data.Entity.Database">
      <summary>从 <see cref="T:System.Data.Entity.DbContext" /> 对象获取此类的实例，并且可使用该实例管理支持 DbContext 或连接的实际数据库。这包括对数据库执行创建、删除和存在性检查操作。请注意通过使用此类的静态方法，您只需使用一个连接（即无需完整上下文）即可对数据库执行删除和存在性检查。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.BeginTransaction">
      <summary>对基础存储连接开始一个事务</summary>
      <returns>一个包装对基础存储的事务对象的访问的 <see cref="T:System.Data.Entity.DbContextTransaction" /> 对象</returns>
    </member>
    <member name="M:System.Data.Entity.Database.BeginTransaction(System.Data.IsolationLevel)">
      <summary>使用指定的隔离级别对基础存储连接开始一个事务</summary>
      <returns>一个包装对基础存储的事务对象的访问的 <see cref="T:System.Data.Entity.DbContextTransaction" /> 对象</returns>
      <param name="isolationLevel">用于创建基础存储事务的数据库隔离级别</param>
    </member>
    <member name="P:System.Data.Entity.Database.CommandTimeout">
      <summary>获取或设置所有上下文操作的超时值（以秒为单位）。默认值为 null，null 值指示将使用基础提供程序的默认值。</summary>
      <returns>超时值（秒）；使用提供程序默认值时为 null。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
      <summary>检查数据库是否与当前 Code First 模型兼容。</summary>
      <returns>如果上下文中的模型哈希与数据库中的模型哈希匹配，则为 true；否则为 false。</returns>
      <param name="throwIfNoMetadata">如果设置为 true，则当未在数据库中找到任何模型元数据时，将引发异常。如果设置为 false，则当未找到元数据时，此方法将返回 true。</param>
    </member>
    <member name="P:System.Data.Entity.Database.Connection">
      <summary>返回此上下文使用的连接。如果连接不存在，这可能会导致创建连接。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.Create">
      <summary>在数据库服务器上为支持上下文中定义的模型创建一个新的数据库。请注意，在运行数据库初始化策略之前调用此方法将禁止执行该策略。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.CreateIfNotExists">
      <summary>在数据库服务器上为支持上下文中定义的模型创建一个新的数据库（但仅在该服务器上没有带相同名称的数据库时这样做）。</summary>
      <returns>如果数据库不存在且已创建，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Database.CurrentTransaction">
      <summary>获取基础存储连接在其中登记的事务。可能为 null。</summary>
    </member>
    <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
      <summary>在从数据库名称或连接字符串创建 <see cref="T:System.Data.Common.DbConnection" /> 时要使用的连接工厂。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.Delete">
      <summary>如果数据库服务器上存在数据库，则删除该数据库；否则不执行任何操作。从初始值设定项之外调用此方法会将数据库标记为尚未初始化。这意味着如果在删除数据库后尝试再次使用它，则将再次运行所有初始值设定项集，通常将尝试再次自动创建数据库。</summary>
      <returns>如果数据库以前存在且已被删除，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
      <summary>如果数据库服务器上存在数据库，则删除该数据库；否则不执行任何操作。</summary>
      <returns>如果数据库以前存在且已被删除，则为 true；否则为 false。</returns>
      <param name="existingConnection">与数据库的现有连接。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.String)">
      <summary>如果数据库服务器上存在数据库，则删除该数据库；否则不执行任何操作。按照 <see cref="T:System.Data.Entity.DbContext" /> 类的文档中描述的方法，使用给定的数据库名称或连接字符串创建与数据库的连接。</summary>
      <returns>如果数据库以前存在且已被删除，则为 true；否则为 false。</returns>
      <param name="nameOrConnectionString">数据库名称或数据库的连接字符串。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Equals(System.Object)">
      <summary>确定指定的数据库是否等于当前数据库。</summary>
      <returns>如果指定的数据库等于当前数据库，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的数据库。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>对数据库执行给定的 DDL/DML 命令。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>执行命令后由数据库返回的结果。</returns>
      <param name="transactionalBehavior">对于此命令控制事务的创建。</param>
      <param name="sql">命令字符串。</param>
      <param name="parameters">要应用于命令字符串的参数。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
      <summary>对数据库执行给定的 DDL/DML 命令。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>执行命令后由数据库返回的结果。</returns>
      <param name="sql">命令字符串。</param>
      <param name="parameters">要应用于命令字符串的参数。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>对数据库异步执行给定的 DDL/DML 命令。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示异步操作的任务。任务结果包含执行命令后由数据库返回的结果。</returns>
      <param name="transactionalBehavior">对于此命令控制事务的创建。</param>
      <param name="sql">命令字符串。</param>
      <param name="parameters">要应用于命令字符串的参数。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>对数据库异步执行给定的 DDL/DML 命令。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示异步操作的任务。任务结果包含执行命令后由数据库返回的结果。</returns>
      <param name="transactionalBehavior">对于此命令控制事务的创建。</param>
      <param name="sql">命令字符串。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">要应用于命令字符串的参数。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.String,System.Object[])">
      <summary>对数据库异步执行给定的 DDL/DML 命令。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示异步操作的任务。任务结果包含执行命令后由数据库返回的结果。</returns>
      <param name="sql">命令字符串。</param>
      <param name="parameters">要应用于命令字符串的参数。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>对数据库异步执行给定的 DDL/DML 命令。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示异步操作的任务。任务结果包含执行命令后由数据库返回的结果。</returns>
      <param name="sql">命令字符串。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">要应用于命令字符串的参数。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists">
      <summary>检查服务器上是否存在数据库。</summary>
      <returns>如果数据库存在，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
      <summary>检查服务器上是否存在数据库。</summary>
      <returns>如果数据库存在，则为 true；否则为 false。</returns>
      <param name="existingConnection">与数据库的现有连接。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.String)">
      <summary>检查服务器上是否存在数据库。按照 <see cref="T:System.Data.Entity.DbContext" /> 类的文档中描述的方法，使用给定的数据库名称或连接字符串创建与数据库的连接。</summary>
      <returns>如果数据库存在，则为 true；否则为 false。</returns>
      <param name="nameOrConnectionString">数据库名称或数据库的连接字符串。</param>
    </member>
    <member name="M:System.Data.Entity.Database.GetHashCode">
      <summary>返回此数据库的哈希函数。</summary>
      <returns>此数据库的哈希函数。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
      <summary>在此上下文上运行注册的 <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />。如果将“force”设置为 true，则将运行初始值设定项，不管它之前是否已运行。如果在应用程序正在运行时删除了数据库并且需要重新初始化数据库时，则这样做会很有用。如果将“force”设置为 false，则仅在尚未为此应用程序域中的此上下文、模型和连接运行初始值设定项的情况下运行它。当必须确保在开始某些操作之前已创建数据库并设定其种子时（这样偷懒的做法会导致问题，例如，当操作是事务的一部分时），通常会使用此方法。</summary>
      <param name="force">如果设置为 true，则将运行初始值设定项，即使它之前已运行过也是如此。</param>
    </member>
    <member name="P:System.Data.Entity.Database.Log">
      <summary>设置此属性以将 <see cref="T:System.Data.Entity.DbContext" /> 生成的 SQL 记录到给定委托。例如，若要记录到控制台，请将此属性设置为 <see cref="M:System.Console.Write(System.String)" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>设置要用于给定上下文类型的数据库初始值设定项。当给定的 <see cref="T:System.Data.Entity.DbContext" /> 类型首次用于访问数据库时调用数据库初始值设定项。Code First 上下文的默认策略是 <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" /> 的实例。</summary>
      <param name="strategy">要使用的初始值设定项或 null，后者对于指定的上下文类型禁用初始化。</param>
      <typeparam name="TContext">上下文的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
      <summary>创建一个原始 SQL 查询，该查询将返回给定泛型类型的元素。类型可以是包含与从查询返回的列名匹配的属性的任何类型，也可以是简单的基元类型。该类型不必是实体类型。即使返回对象的类型是实体类型，上下文也决不会跟踪此查询的结果。使用 <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" /> 方法可返回上下文跟踪的实体。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.Database.SqlQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.Database.SqlQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1" /> 对象，此对象在枚举时将执行查询。</returns>
      <param name="sql">SQL 查询字符串。</param>
      <param name="parameters">要应用于 SQL 查询字符串的参数。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
      <typeparam name="TElement">查询所返回对象的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
      <summary>创建一个原始 SQL 查询，该查询将返回给定类型的元素。类型可以是包含与从查询返回的列名匹配的属性的任何类型，也可以是简单的基元类型。该类型不必是实体类型。即使返回对象的类型是实体类型，上下文也决不会跟踪此查询的结果。使用 <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" /> 方法可返回上下文跟踪的实体。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> 对象，此对象在枚举时将执行查询。</returns>
      <param name="elementType">查询所返回对象的类型。</param>
      <param name="sql">SQL 查询字符串。</param>
      <param name="parameters">要应用于 SQL 查询字符串的参数。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ToString">
      <summary>返回数据库的字符串表示形式。</summary>
      <returns>数据库的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.UseTransaction(System.Data.Common.DbTransaction)">
      <summary>如果您希望实体框架在外部事务内执行命令，则允许用户传递在 <see cref="T:System.Data.Entity.Database" /> 对象外创建的数据库事务。或者，传递 null 以清除该事务的框架知识。</summary>
      <param name="transaction">外部事务</param>
      <exception cref="T:System.InvalidOperationException">如果事务已完成，则引发此异常</exception>
      <exception cref="T:System.InvalidOperationException">如果与 <see cref="T:System.Data.Entity.Database" /> 对象关联的连接已在 <see cref="T:System.Transactions.TransactionScope" /> 事务中登记，则引发此异常</exception>
      <exception cref="T:System.InvalidOperationException">如果与 <see cref="T:System.Data.Entity.Database" /> 对象关联的连接已参与事务，则引发此异常</exception>
      <exception cref="T:System.InvalidOperationException">如果与事务关联的连接不匹配实体框架的连接，则引发此异常</exception>
    </member>
    <member name="T:System.Data.Entity.DbConfiguration">
      <summary>从该类派生的类可与从 <see cref="T:System.Data.Entity.DbContext" /> 派生的类放置在同一个程序集中，以便定义应用程序的实体框架配置。通过调用受保护的方法并且在派生类型的构造函数中设置该类的受保护的属性，对配置进行设置。还可以在应用程序的配置文件中注册要使用的类型。有关实体框架配置的更多信息，请参见 http://go.microsoft.com/fwlink/?LinkId=260883。</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.DbConfiguration" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>将 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 实例添加到用于解决实体框架所需依赖项的解决程序的责任链中。</summary>
      <param name="resolver">要添加的解析程序。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>将 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 实例添加到用于解决实体框架所需依赖项的解决程序的责任链中。</summary>
      <param name="resolver">要添加的解析程序。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddInterceptor(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)">
      <summary>在应用程序启动时注册 <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor" />。请注意，还可使用 <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> 随时添加和删除侦听器。</summary>
      <param name="interceptor">要注册的侦听器。</param>
    </member>
    <member name="P:System.Data.Entity.DbConfiguration.DependencyResolver">
      <summary>获取要用于解析实体框架中的服务依赖项的 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />。</summary>
      <returns>要用于解析实体框架中的服务依赖项的 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />。</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.Equals(System.Object)">
      <summary>指定此实例是否等于指定对象。</summary>
      <returns>如果此实例等于特定对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.GetHashCode">
      <summary>获取与此实例关联的哈希代码。</summary>
      <returns>与此实例关联的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Reflection.Assembly)">
      <summary>尝试从给定程序集发现和加载 <see cref="T:System.Data.Entity.DbConfiguration" />。此方法应由工具使用以确保将正确配置加载到应用程序域中。工具应在访问 <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver" /> 属性之前使用此方法。如果工具知道要使用的 <see cref="T:System.Data.Entity.DbContext" /> 类型，则应使用 <see cref="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)" /> 方法，因为这会增加找到正确配置的机会。</summary>
      <param name="assemblyHint">要用于配置发现的 <see cref="T:System.Reflection.Assembly" />。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)">
      <summary>尝试发现和加载与给定 <see cref="T:System.Data.Entity.DbContext" /> 类型关联的 <see cref="T:System.Data.Entity.DbConfiguration" />。此方法应由工具使用以确保将正确配置加载到应用程序域中。工具应在访问 <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver" /> 属性之前使用此方法。</summary>
      <param name="contextType">要用于配置发现的 <see cref="T:System.Data.Entity.DbContext" /> 类型。</param>
    </member>
    <member name="E:System.Data.Entity.DbConfiguration.Loaded">
      <summary>在 DbConfiguration 已构造后、但在锁定可供使用之前在 EF 初始化过程中发生。</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.MemberwiseClone">
      <summary>创建当前 <see cref="T:System.Object" /> 的浅表副本。</summary>
      <returns>当前 <see cref="T:System.Object" /> 的浅表副本。</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetConfiguration(System.Data.Entity.DbConfiguration)">
      <summary>此应用程序域的 <see cref="T:System.Data.Entity.DbConfiguration" /> 的单一实例。可以在使用任何实体框架功能之前在应用程序启动时对此进行设置，并且在之后应被视作只读的。</summary>
      <param name="configuration">
        <see cref="T:System.Data.Entity.DbConfiguration" /> 的实例。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory``1(System.Func{``0})">
      <summary>从派生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 的类的构造函数调用此方法以设置工厂，从而允许 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 创建不具有公共无参数构造函数的上下文的实例。</summary>
      <param name="factory">用于创建上下文实例的委托。</param>
      <typeparam name="TContext">应对其使用工厂的上下文类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory(System.Type,System.Func{System.Data.Entity.DbContext})">
      <summary>从派生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 的类的构造函数调用此方法以设置工厂，从而允许 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 创建不具有公共无参数构造函数的上下文的实例。</summary>
      <param name="contextType">应对其使用工厂的上下文类型。</param>
      <param name="factory">用于创建上下文实例的委托。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>从自 <see cref="T:System.Data.Entity.DbConfiguration" /> 派生的类的构造函数调用此方法，以便设置要用于给定上下文类型的数据库初始值。当给定的 <see cref="T:System.Data.Entity.DbContext" /> 类型首次用于访问数据库时调用数据库初始值设定项。Code First 上下文的默认策略是 <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" /> 的实例。</summary>
      <param name="initializer">要使用的初始值设定项或 null，后者对于指定的上下文类型禁用初始化。</param>
      <typeparam name="TContext">上下文的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseLogFormatter(System.Func{System.Data.Entity.DbContext,System.Action{System.String},System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter})">
      <summary>从派生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 的类的构造函数调用此方法，以为 <see cref="T:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter" /> 的类型设置要与 <see cref="P:System.Data.Entity.Database.Log" /> 一起使用的工厂。</summary>
      <param name="logFormatterFactory">一个将创建格式化程序实例的委托。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultConnectionFactory(System.Data.Entity.Infrastructure.IDbConnectionFactory)">
      <summary>设置 <see cref="T:System.Data.Entity.Infrastructure.IDbConnectionFactory" />，它用于在没有提供或没有可由 <see cref="T:System.Data.Entity.DbContext" /> 发现的其他连接字符串或连接的情况下按照约定创建连接。请注意，只要安装了 EntityFramework NuGet 包，就可以在 app.config 或 web.config 文件中设置默认连接工厂。与所有配置文件设置一样，在配置文件中设置的默认连接工厂将优先于使用此方法进行的任何设置。因此，必须首先从配置文件中删除该设置，然后调用此方法才会起作用。从自 <see cref="T:System.Data.Entity.DbConfiguration" /> 派生的类的构造函数调用此方法，以便更改要使用的默认连接工厂。</summary>
      <param name="connectionFactory">连接工厂。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>从派生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 的类的构造函数调用此方法，以设置一个 <see cref="T:System.Func`3" /> 委托，该委托将用于为任何 <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" /> 创建默认 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" />。仅当 <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" /> 中没有显式设置工厂且没有使用 <see cref="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" /> 方法为正在使用的提供程序注册工厂时，才会使用此默认工厂。</summary>
      <param name="factory">一个工厂，用于为表示默认架构的给定 <see cref="T:System.Data.Common.DbConnection" /> 和 <see cref="T:System.String" /> 创建 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> 实例。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultSpatialServices(System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>从派生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 的类的构造函数调用此方法，以设置将在需要空间提供程序且无法找到特定于提供程序的空间提供程序时使用的 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 的全局实例。通常，特定于提供程序的空间提供程序是从 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> 实现中获取的，通过解析 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 的服务以将提供程序固定名称作为键传递，可返回此实现。但是，这并不适用于 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 和 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 的独立实例，因为无法知道要使用的空间提供程序。因此，在创建 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 和 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 的独立实例时会始终使用全局空间提供程序。</summary>
      <param name="spatialProvider">空间提供程序。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
      <summary>从派生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 的类的构造函数调用此方法，以注册 <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" />。</summary>
      <param name="transactionHandlerFactory">一个返回事务处理程序的新实例的函数。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy})">
      <summary>从派生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 的类的构造函数调用此方法，以注册要用于给定固定名称所表示的提供程序的 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />。</summary>
      <param name="providerInvariantName">ADO.NET 提供程序固定名称，指示此执行策略将用于的 ADO.NET 连接的类型。</param>
      <param name="getExecutionStrategy">返回执行策略的新实例的函数。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy},System.String)">
      <summary>从派生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 的类的构造函数调用此方法，以注册要用于给定固定名称所表示的提供程序及给定服务器名称的 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />。</summary>
      <param name="providerInvariantName">ADO.NET 提供程序固定名称，指示此执行策略将用于的 ADO.NET 连接的类型。</param>
      <param name="getExecutionStrategy">返回执行策略的新实例的函数。</param>
      <param name="serverName">将与连接字符串中的服务器名称进行匹配的字符串。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>从派生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 的类的构造函数调用此方法，以设置一个 <see cref="T:System.Func`3" /> 委托，该委托允许为不具有显式工厂集的任何 <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" /> 的给定提供程序创建自定义的 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" />。</summary>
      <param name="providerInvariantName">此生成器应该用于的 ADO.NET 提供程序的固定名称。</param>
      <param name="factory">一个工厂，用于为表示默认架构的给定 <see cref="T:System.Data.Common.DbConnection" /> 和 <see cref="T:System.String" /> 创建 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> 实例。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetManifestTokenResolver(System.Data.Entity.Infrastructure.IManifestTokenResolver)">
      <summary>从自 <see cref="T:System.Data.Entity.DbConfiguration" /> 派生的类的构造函数调用此方法，以便设置 <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver" /> 的实现，该实现允许无需打开连接即可从连接获取提供程序清单标记。</summary>
      <param name="resolver">清单标记解析程序。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})">
      <summary>从派生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 的类的构造函数调用此方法，以便为  <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 的实现设置工厂，从而允许将 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 实例所表示的自定义注释序列化到 EDMX XML 以及从中进行序列化。</summary>
      <param name="annotationName">将由此序列化程序处理的自定义注释的名称。</param>
      <param name="serializerFactory">一个将用于创建序列化程序实例的委托。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetMigrationSqlGenerator(System.String,System.Func{System.Data.Entity.Migrations.Sql.MigrationSqlGenerator})">
      <summary>从派生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 的类的构造函数调用此方法，以注册要用于给定固定名称所表示的提供程序的 <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" />。</summary>
      <param name="providerInvariantName">此生成器应该用于的 ADO.NET 提供程序的固定名称。</param>
      <param name="sqlGenerator">每次调用时都返回 SQL 生成器的新实例的委托。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetModelCacheKey(System.Func{System.Data.Entity.DbContext,System.Data.Entity.Infrastructure.IDbModelCacheKey})">
      <summary>从派生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 的类的构造函数调用此方法，以便将 <see cref="T:System.Func`2" /> 设置为模型缓存键工厂，该工厂允许使用键来缓存要更改的 <see cref="T:System.Data.Entity.DbContext" /> 后的模型。</summary>
      <param name="keyFactory">键工厂。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetPluralizationService(System.Data.Entity.Infrastructure.Pluralization.IPluralizationService)">
      <summary>从自 <see cref="T:System.Data.Entity.DbConfiguration" /> 派生的类的构造函数调用此方法，以便设置复数形式服务。</summary>
      <param name="pluralizationService">要使用的复数形式服务。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactory(System.String,System.Data.Common.DbProviderFactory)">
      <summary>从自 <see cref="T:System.Data.Entity.DbConfiguration" /> 派生的类的构造函数调用此方法，以便注册 ADO.NET 提供程序。</summary>
      <param name="providerInvariantName">ADO.NET 提供程序固定名称，指示此提供程序将用于的 ADO.NET 连接的类型。</param>
      <param name="providerFactory">提供程序实例。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactoryResolver(System.Data.Entity.Infrastructure.IDbProviderFactoryResolver)">
      <summary>从自 <see cref="T:System.Data.Entity.DbConfiguration" /> 派生的类的构造函数调用此方法，以便设置 <see cref="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver" /> 的实现，该实现允许在默认实现不足的情况下从 <see cref="T:System.Data.Common.DbConnection" /> 获取 <see cref="T:System.Data.Common.DbProviderFactory" />。</summary>
      <param name="providerFactoryResolver">提供程序工厂服务。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderServices(System.String,System.Data.Entity.Core.Common.DbProviderServices)">
      <summary>从自 <see cref="T:System.Data.Entity.DbConfiguration" /> 派生的类的构造函数调用此方法，以便注册实体框架提供程序。</summary>
      <param name="providerInvariantName">ADO.NET 提供程序固定名称，指示此提供程序将用于的 ADO.NET 连接的类型。</param>
      <param name="provider">提供程序实例。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo,System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>从派生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 的类的构造函数调用此方法，以设置要用于特定提供程序和提供程序清单标记的 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 的实现。</summary>
      <param name="key">
        <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> 指示将使用此空间提供程序的 ADO.NET 连接的类型。</param>
      <param name="spatialProvider">空间提供程序。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.String,System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>从派生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 的类的构造函数调用此方法，以设置要用于具有任何清单标记的特定提供程序的 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 的实现。</summary>
      <param name="providerInvariantName">ADO.NET 提供程序固定名称，指示将使用此空间提供程序的 ADO.NET 连接的类型。</param>
      <param name="spatialProvider">空间提供程序。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTableExistenceChecker(System.String,System.Data.Entity.Infrastructure.TableExistenceChecker)">
      <summary>从自 <see cref="T:System.Data.Entity.DbConfiguration" /> 派生的类的构造函数调用此方法，以注册给定提供程序的数据库表的存在检查器。</summary>
      <param name="providerInvariantName">ADO.NET 提供程序固定名称，指示此提供程序将用于的 ADO.NET 连接的类型。</param>
      <param name="tableExistenceChecker">要使用的表存在检查器。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
      <summary>从派生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 的类的构造函数调用此方法，以注册要用于给定固定名称所表示的提供程序的 <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" />。</summary>
      <param name="providerInvariantName">ADO.NET 提供程序固定名称，指示将使用此事务处理程序的 ADO.NET 连接的类型。</param>
      <param name="transactionHandlerFactory">一个返回事务处理程序的新实例的函数。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)">
      <summary>从派生自 <see cref="T:System.Data.Entity.DbConfiguration" /> 的类的构造函数调用此方法，以注册要用于给定固定名称所表示的提供程序及给定服务器名称的 <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" />。</summary>
      <param name="providerInvariantName">ADO.NET 提供程序固定名称，指示将使用此事务处理程序的 ADO.NET 连接的类型。</param>
      <param name="transactionHandlerFactory">一个返回事务处理程序的新实例的函数。</param>
      <param name="serverName">将与连接字符串中的服务器名称进行匹配的字符串。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.DbConfigurationTypeAttribute">
      <summary>可将此属性置于 <see cref="T:System.Data.Entity.DbContext" /> 的子类上，以指示 <see cref="T:System.Data.Entity.DbConfiguration" /> 的子类，后者表示应用程序的基于代码的配置与上下文类型处于不同的程序集中。</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.String)">
      <summary>指示应对此应用程序的基于代码的配置使用由给定程序集限定名称表示的 <see cref="T:System.Data.Entity.DbConfiguration" /> 的子类。</summary>
      <param name="configurationTypeName">要使用的 <see cref="T:System.Data.Entity.DbConfiguration" /> 类型。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.Type)">
      <summary>指示应对此应用程序的基于代码的配置使用 <see cref="T:System.Data.Entity.DbConfiguration" /> 的给定子类。</summary>
      <param name="configurationType">要使用的 <see cref="T:System.Data.Entity.DbConfiguration" /> 类型。</param>
    </member>
    <member name="P:System.Data.Entity.DbConfigurationTypeAttribute.ConfigurationType">
      <summary>获取应对此应用程序的基于代码的配置使用的 <see cref="T:System.Data.Entity.DbConfiguration" /> 的子类。</summary>
      <returns>应对此应用程序的基于代码的配置使用的 <see cref="T:System.Data.Entity.DbConfiguration" /> 的子类。</returns>
    </member>
    <member name="T:System.Data.Entity.DbContext">
      <summary>DbContext 实例表示工作单元和存储库模式的组合，可用来查询数据库并将更改组合在一起，这些更改稍后将作为一个单元写回存储区中。DbContext 在概念上与 ObjectContext 类似。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor">
      <summary>使用约定构造一个新的上下文实例以创建将连接到的数据库的名称。按照约定，该名称是派生上下文类的全名（命名空间与类名称的组合）。请参见有关这如何用于创建连接的类备注。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
      <summary>通过现有连接来连接到数据库以构造一个新的上下文实例。如果 <paramref name="contextOwnsConnection" /> 是 false，则释放上下文时将不会释放该连接。</summary>
      <param name="existingConnection">要用于新的上下文的现有连接。</param>
      <param name="contextOwnsConnection">如果设置为 true，则释放上下文时将释放该连接；否则调用方必须释放该连接。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
      <summary>通过使用现有连接来连接到数据库以构造一个新的上下文实例，并从给定模型初始化该实例。如果 <paramref name="contextOwnsConnection" /> 是 false，则释放上下文时将不会释放该连接。</summary>
      <param name="existingConnection">要用于新的上下文的现有连接。</param>
      <param name="model">支持此上下文的模型。</param>
      <param name="contextOwnsConnection">如果设置为 true，则释放上下文时将释放该连接；否则调用方必须释放该连接。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Core.Objects.ObjectContext,System.Boolean)">
      <summary>围绕现有 ObjectContext 构造一个新的上下文实例。</summary>
      <param name="objectContext">要使用新的上下文包装的现有 ObjectContext。</param>
      <param name="dbContextOwnsObjectContext">如果设置为 true，则释放 DbContext 时将释放 ObjectContext；否则调用方必须释放该连接。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>使用约定构造一个新的上下文实例以创建将连接到的数据库的名称，并从给定模型初始化该名称。按照约定，该名称是派生上下文类的全名（命名空间与类名称的组合）。请参见有关这如何用于创建连接的类备注。</summary>
      <param name="model">支持此上下文的模型。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
      <summary>可以将给定字符串用作将连接到的数据库的名称或连接字符串来构造一个新的上下文实例。请参见有关这如何用于创建连接的类备注。</summary>
      <param name="nameOrConnectionString">数据库名称或连接字符串。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>可以将给定字符串用作将连接到的数据库的名称或连接字符串来构造一个新的上下文实例，并从给定模型初始化该实例。请参见有关这如何用于创建连接的类备注。</summary>
      <param name="nameOrConnectionString">数据库名称或连接字符串。</param>
      <param name="model">支持此上下文的模型。</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.ChangeTracker">
      <summary>提供对用于处理实体的更改跟踪的上下文功能的访问。</summary>
      <returns>一个用于访问处理更改跟踪的功能的对象。</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Configuration">
      <summary>提供对上下文的配置选项的访问。</summary>
      <returns>一个用于访问配置选项的对象。</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Database">
      <summary>为此上下文创建一个数据库实例，该上下文允许您对基础数据库执行创建/删除/存在性检查操作。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose">
      <summary>调用受保护的 Dispose 方法。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
      <summary>释放上下文。在以下情况下也将释放基础 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />：它由此上下文创建，或者在创建此上下文时将所有权传递给了此上下文。在以下情况下也将释放与数据库的连接（<see cref="T:System.Data.Common.DbConnection" /> 对象）：它由此上下文创建，或者在创建此上下文时将所有权传递给了此上下文。</summary>
      <param name="disposing">如果为 true，则同时释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
      <summary>获取给定实体的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 对象，以便提供对与该实体有关的信息的访问以及对实体执行操作的功能。</summary>
      <returns>实体的项。</returns>
      <param name="entity">实体。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
      <summary>获取给定实体的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 对象，以便提供对与该实体有关的信息的访问以及对实体执行操作的功能。</summary>
      <returns>实体的项。</returns>
      <param name="entity">实体。</param>
      <typeparam name="TEntity">实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
      <summary>确定指定的 DbContext 是否等于当前 DbContext。</summary>
      <returns>如果指定的 DbContext 等于当前 DbContext，则为 true；否则为 false。</returns>
      <param name="obj">要与当前 DbContext 进行比较的 DbContext。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetHashCode">
      <summary>返回此 DBContext 的哈希函数。</summary>
      <returns>此 DBContext 的哈希函数。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetType">
      <summary>返回当前 DbContext 的类型。</summary>
      <returns>当前 DbContext 的类型。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
      <summary>验证跟踪实体，并返回包含验证结果的 <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> 的集合。</summary>
      <returns>无效实体的验证结果集合。集合决不为 null，且不得包含 null 值或有效实体的结果。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>在完成对派生上下文的模型的初始化后，并在该模型已锁定并用于初始化上下文之前，将调用此方法。虽然此方法的默认实现不执行任何操作，但可在派生类中重写此方法，这样便能在锁定模型之前对其进行进一步的配置。</summary>
      <param name="modelBuilder">定义要创建的上下文的模型的生成器。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChanges">
      <summary>将在此上下文中所做的所有更改保存到基础数据库。</summary>
      <returns>已写入基础数据库的对象的数目。</returns>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">向数据库发送更新时出错。</exception>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">数据库命令未影响预期行数。这通常指示存在乐观并发冲突；即，某行自对它查询以来已在数据库中发生更改。</exception>
      <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">保存已中止，因为实体属性值的验证失败。</exception>
      <exception cref="T:System.NotSupportedException">尝试使用不支持的行为，如对相同上下文实例并发执行多个异步命令。</exception>
      <exception cref="T:System.ObjectDisposedException">上下文或连接已释放。</exception>
      <exception cref="T:System.InvalidOperationException">向数据库发送命令之前或之后，尝试在上下文中处理实体时发生错误。</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChangesAsync">
      <summary>将在此上下文中所做的所有更改异步保存到基础数据库。</summary>
      <returns>表示异步保存操作的任务。任务结果包含已写入基础数据库的对象数目。</returns>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">向数据库发送更新时出错。</exception>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">数据库命令未影响预期行数。这通常指示存在乐观并发冲突；即，某行自对它查询以来已在数据库中发生更改。</exception>
      <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">保存已中止，因为实体属性值的验证失败。</exception>
      <exception cref="T:System.NotSupportedException">尝试使用不支持的行为，如对相同上下文实例并发执行多个异步命令。</exception>
      <exception cref="T:System.ObjectDisposedException">上下文或连接已释放。</exception>
      <exception cref="T:System.InvalidOperationException">向数据库发送命令之前或之后，尝试在上下文中处理实体时发生错误。</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChangesAsync(System.Threading.CancellationToken)">
      <summary>将在此上下文中所做的所有更改异步保存到基础数据库。</summary>
      <returns>表示异步保存操作的任务。任务结果包含已写入基础数据库的对象数目。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">在已释放上下文时引发。</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set``1">
      <summary>针对对上下文和基础存储中给定类型的实体的访问返回一个 <see cref="T:System.Data.Entity.DbSet`1" /> 实例。</summary>
      <returns>给定实体类型的集。</returns>
      <typeparam name="TEntity">应为其返回一个集的类型实体。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
      <summary>针对对上下文和基础存储中给定类型的实体的访问返回一个非泛型 <see cref="T:System.Data.Entity.DbSet" /> 实例。</summary>
      <returns>给定实体类型的集。</returns>
      <param name="entityType">应为其返回一个集的实体的类型。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>扩展点允许用户重写仅验证添加的实体和修改的实体的默认行为。</summary>
      <returns>如果继续验证，则为 true；否则为 false。</returns>
      <param name="entityEntry">应验证的 DbEntityEntry 实例。</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>返回基础化此上下文的实体框架 ObjectContext。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.ToString">
      <summary>返回 DbContext 的字符串表示形式。</summary>
      <returns>DbContext 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>扩展点允许用户自定义实体的验证或筛选出验证结果。由 <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> 调用。</summary>
      <returns>实体验证结果。重写时可能为 null。</returns>
      <param name="entityEntry">要验证的 DbEntityEntry 实例。</param>
      <param name="items">包含用于自定义验证的附加信息的用户定义的字典。它将被传递给 <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> 并将作为 <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" /> 公开。此参数是可选的，并且可为 null。</param>
    </member>
    <member name="T:System.Data.Entity.DbContextTransaction">
      <summary>包装对基础存储连接的事务对象的访问并确保实体框架在该事务的上下文内对数据库执行命令。通过对 <see cref="T:System.Data.Entity.DbContext" /><see cref="T:System.Data.Entity.Database" />  对象调用 BeginTransaction() 来检索此类的实例。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Commit">
      <summary>提交基础存储事务。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Dispose">
      <summary>清除此事务对象并确保实体框架不再使用该事务。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Dispose(System.Boolean)">
      <summary>释放此事务对象占用的资源。</summary>
      <param name="disposing">如果为 true，则同时释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Equals(System.Object)">
      <summary>确定此实例是否与指定对象相同。</summary>
      <returns>如果此实例与指定对象相同，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.GetType">
      <summary>获取与此实例关联的基础类型。</summary>
      <returns>与此实例关联的基础类型。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Rollback">
      <summary>回滚基础存储事务。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="P:System.Data.Entity.DbContextTransaction.UnderlyingTransaction">
      <summary>获取基础化此上下文事务的数据库（存储）事务。</summary>
      <returns>基础化此上下文事务的数据库（存储）事务。</returns>
    </member>
    <member name="T:System.Data.Entity.DbFunctionAttribute">
      <summary>指示给定的方法是 EDM 函数的代理。</summary>
    </member>
    <member name="M:System.Data.Entity.DbFunctionAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.DbFunctionAttribute" /> 类的新实例。</summary>
      <param name="namespaceName">映射到的函数的命名空间。</param>
      <param name="functionName">映射到的函数的名称。</param>
    </member>
    <member name="P:System.Data.Entity.DbFunctionAttribute.FunctionName">
      <summary>映射到的函数的名称。</summary>
      <returns>映射到的函数的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.DbFunctionAttribute.NamespaceName">
      <summary>映射到的函数的命名空间。</summary>
      <returns>映射到的函数的命名空间。</returns>
    </member>
    <member name="T:System.Data.Entity.DbFunctions">
      <summary>提供在 <see cref="T:System.Data.Entity.DbContext" /> 或 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> LINQ to Entities 查询中使用的公开 EDM 规范函数的公共语言运行时 (CLR) 方法。</summary>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddDays EDM 函数以将指定的天数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="dateValue">输入日期/时间。</param>
      <param name="addValue">要添加的天数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddDays EDM 函数以将指定的天数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="dateValue">输入日期/时间。</param>
      <param name="addValue">要添加的天数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddHours EDM 函数以将指定的小时数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的小时数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddHours EDM 函数以将指定的小时数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的小时数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddHours EDM 函数以将指定的小时数加到某个时间跨度。</summary>
      <returns>所得到的时间跨度。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的小时数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMicroseconds EDM 函数以将指定的微秒数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的微秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMicroseconds EDM 函数以将指定的微秒数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的微秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMicroseconds EDM 函数以将指定的微秒数加到某个时间跨度。</summary>
      <returns>所得到的时间跨度。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的微秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMilliseconds EDM 函数以将指定的毫秒数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的毫秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMilliseconds EDM 函数以将指定的毫秒数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的毫秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMilliseconds EDM 函数以将指定的毫秒数加到某个时间跨度。</summary>
      <returns>所得到的时间跨度。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的毫秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMinutes EDM 函数以将指定的分钟数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的分钟数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMinutes EDM 函数以将指定的分钟数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的分钟数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMinutes EDM 函数以将指定的分钟数加到某个时间跨度。</summary>
      <returns>所得到的时间跨度。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的分钟数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMonths EDM 函数以将指定的月数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="dateValue">输入日期/时间。</param>
      <param name="addValue">要添加的月数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMonths EDM 函数以将指定的月数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="dateValue">输入日期/时间。</param>
      <param name="addValue">要添加的月数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddNanoseconds EDM 函数以将指定的纳秒数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的纳秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddNanoseconds EDM 函数以将指定的纳秒数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的纳秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddNanoseconds EDM 函数以将指定的纳秒数加到某个时间跨度。</summary>
      <returns>所得到的时间跨度。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的纳秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddSeconds EDM 函数以将指定的秒数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddSeconds EDM 函数以将指定的秒数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddSeconds EDM 函数以将指定的秒数加到某个时间跨度。</summary>
      <returns>所得到的时间跨度。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddYears EDM 函数以将指定的年数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="dateValue">输入日期/时间。</param>
      <param name="addValue">要添加的年数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddYears EDM 函数以将指定的年数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="dateValue">输入日期/时间。</param>
      <param name="addValue">要添加的年数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AsNonUnicode(System.String)">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法充当确保将输入作为非 Unicode 字符串处理的运算符。</summary>
      <returns>作为非 Unicode 字符串处理的输入字符串。</returns>
      <param name="value">输入字符串。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AsUnicode(System.String)">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法充当确保将输入作为 Unicode 字符串处理的运算符。</summary>
      <returns>作为 Unicode 字符串处理的输入字符串。</returns>
      <param name="value">输入字符串。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 CreateDateTime EDM 函数以创建新的 <see cref="T:System.DateTime" /> 对象。</summary>
      <returns>新的日期/时间。</returns>
      <param name="year">年。</param>
      <param name="month">月（从 1 开始）。</param>
      <param name="day">日（从 1 开始）。</param>
      <param name="hour">小时。</param>
      <param name="minute">分钟。</param>
      <param name="second">秒，根据需要可包括秒的分数部分。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 CreateDateTimeOffset EDM 函数以创建新的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>新的日期/时间。</returns>
      <param name="year">年。</param>
      <param name="month">月（从 1 开始）。</param>
      <param name="day">日（从 1 开始）。</param>
      <param name="hour">小时。</param>
      <param name="minute">分钟。</param>
      <param name="second">秒，根据需要可包括秒的分数部分。</param>
      <param name="timeZoneOffset">新日期的时区偏移量部分。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 CreateTime EDM 函数以创建新的 <see cref="T:System.TimeSpan" /> 对象。</summary>
      <returns>新的时间跨度。</returns>
      <param name="hour">小时。</param>
      <param name="minute">分钟。</param>
      <param name="second">秒，根据需要可包括秒的分数部分。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffDays EDM 函数以计算两个日期/时间间隔的天数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的天数。</returns>
      <param name="dateValue1">第一个日期/时间。</param>
      <param name="dateValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffDays EDM 函数以计算两个日期/时间间隔的天数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的天数。</returns>
      <param name="dateValue1">第一个日期/时间。</param>
      <param name="dateValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffHours EDM 函数以计算两个日期/时间间隔的小时数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的小时数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffHours EDM 函数以计算两个日期/时间间隔的小时数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的小时数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffHours EDM 函数以计算两个时间跨度间隔的小时数。</summary>
      <returns>第一个时间跨度和第二个时间跨度间隔的小时数。</returns>
      <param name="timeValue1">第一个时间跨度。</param>
      <param name="timeValue2">第二个时间跨度。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMicroseconds EDM 函数以计算两个日期/时间间隔的微秒数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的微秒数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMicroseconds EDM 函数以计算两个日期/时间间隔的微秒数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的微秒数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMicroseconds EDM 函数以计算两个时间跨度间隔的微秒数。</summary>
      <returns>第一个时间跨度和第二个时间跨度间隔的微秒数。</returns>
      <param name="timeValue1">第一个时间跨度。</param>
      <param name="timeValue2">第二个时间跨度。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMilliseconds EDM 函数以计算两个日期/时间间隔的毫秒数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的毫秒数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMilliseconds EDM 函数以计算两个日期/时间间隔的毫秒数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的毫秒数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMilliseconds EDM 函数以计算两个时间跨度间隔的毫秒数。</summary>
      <returns>第一个时间跨度和第二个时间跨度间隔的毫秒数。</returns>
      <param name="timeValue1">第一个时间跨度。</param>
      <param name="timeValue2">第二个时间跨度。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMinutes EDM 函数以计算两个日期/时间间隔的分钟数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的分钟数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMinutes EDM 函数以计算两个日期/时间间隔的分钟数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的分钟数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMinutes EDM 函数以计算两个时间跨度间隔的分钟数。</summary>
      <returns>第一个时间跨度和第二个时间跨度间隔的分钟数。</returns>
      <param name="timeValue1">第一个时间跨度。</param>
      <param name="timeValue2">第二个时间跨度。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMonths EDM 函数以计算两个日期/时间间隔的月数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的月数。</returns>
      <param name="dateValue1">第一个日期/时间。</param>
      <param name="dateValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMonths EDM 函数以计算两个日期/时间间隔的月数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的月数。</returns>
      <param name="dateValue1">第一个日期/时间。</param>
      <param name="dateValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffNanoseconds EDM 函数以计算两个日期/时间间隔的纳秒数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的纳秒数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffNanoseconds EDM 函数以计算两个日期/时间间隔的纳秒数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的纳秒数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffNanoseconds EDM 函数以计算两个时间跨度间隔的纳秒数。</summary>
      <returns>第一个时间跨度和第二个时间跨度间隔的纳秒数。</returns>
      <param name="timeValue1">第一个时间跨度。</param>
      <param name="timeValue2">第二个时间跨度。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffSeconds EDM 函数以计算两个日期/时间间隔的秒数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的秒数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffSeconds EDM 函数以计算两个日期/时间间隔的秒数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的秒数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffSeconds EDM 函数以计算两个时间跨度间隔的秒数。</summary>
      <returns>第一个时间跨度和第二个时间跨度间隔的秒数。</returns>
      <param name="timeValue1">第一个时间跨度。</param>
      <param name="timeValue2">第二个时间跨度。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffYears EDM 函数以计算两个日期/时间间隔的年数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的年数。</returns>
      <param name="dateValue1">第一个日期/时间。</param>
      <param name="dateValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffYears EDM 函数以计算两个日期/时间间隔的年数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的年数。</returns>
      <param name="dateValue1">第一个日期/时间。</param>
      <param name="dateValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 GetTotalOffsetMinutes EDM 函数以返回指定的日期/时间偏移 UTC 的分钟数。该值通常介于 +780 到 -780 之间（+ 或 - 13 小时）。</summary>
      <returns>输入对 UTC 的偏移量。</returns>
      <param name="dateTimeOffsetArgument">要使用的日期/时间值。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Left 函数以返回字符串中最左侧指定数目的字符。</summary>
      <returns>包含从输入字符串左侧算起的所请求的字符数的字符串。</returns>
      <param name="stringArgument">输入字符串。</param>
      <param name="length">要返回的字符数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Reverse(System.String)">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Reverse 函数以返回其字符顺序反转的指定字符串。</summary>
      <returns>以反转字符顺序显示的输入字符串。</returns>
      <param name="stringArgument">输入字符串。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Right 函数以返回字符串中最右侧指定数目的字符。</summary>
      <returns>包含从输入字符串右侧算起的所请求的字符数的字符串。</returns>
      <param name="stringArgument">输入字符串。</param>
      <param name="length">要返回的字符数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDev EDM 函数以计算集合的标准差。</summary>
      <returns>标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDev EDM 函数以计算集合的标准差。</summary>
      <returns>标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDev EDM 函数以计算集合的标准差。</summary>
      <returns>标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDev EDM 函数以计算集合的标准差。</summary>
      <returns>标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDev EDM 函数以计算集合的标准差。</summary>
      <returns>标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDev EDM 函数以计算集合的标准差。</summary>
      <returns>标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDev EDM 函数以计算集合的标准差。</summary>
      <returns>标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDev EDM 函数以计算集合的标准差。</summary>
      <returns>标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDevP EDM 函数以计算总体的标准差。</summary>
      <returns>总体的标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDevP EDM 函数以计算总体的标准差。</summary>
      <returns>总体的标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDevP EDM 函数以计算总体的标准差。</summary>
      <returns>总体的标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDevP EDM 函数以计算总体的标准差。</summary>
      <returns>总体的标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDevP EDM 函数以计算总体的标准差。</summary>
      <returns>总体的标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDevP EDM 函数以计算总体的标准差。</summary>
      <returns>总体的标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDevP EDM 函数以计算总体的标准差。</summary>
      <returns>总体的标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDevP EDM 函数以计算总体的标准差。</summary>
      <returns>总体的标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Truncate EDM 函数以将指定的值截断为指定的位数。</summary>
      <returns>截整值。</returns>
      <param name="value">要截断的值。</param>
      <param name="digits">要保留的位数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Truncate EDM 函数以将指定的值截断为指定的位数。</summary>
      <returns>截整值。</returns>
      <param name="value">要截断的值。</param>
      <param name="digits">要保留的位数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 TruncateTime EDM 函数以返回清除了时间部分的指定日期。</summary>
      <returns>清除了时间部分的输入日期。</returns>
      <param name="dateValue">要使用的日期/时间值。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 TruncateTime EDM 函数以返回清除了时间部分的指定日期。</summary>
      <returns>清除了时间部分的输入日期。</returns>
      <param name="dateValue">要使用的日期/时间值。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Var EDM 函数以计算集合的方差。</summary>
      <returns>方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Var EDM 函数以计算集合的方差。</summary>
      <returns>方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Var EDM 函数以计算集合的方差。</summary>
      <returns>方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Var EDM 函数以计算集合的方差。</summary>
      <returns>方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Var EDM 函数以计算集合的方差。</summary>
      <returns>方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Var EDM 函数以计算集合的方差。</summary>
      <returns>方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Var EDM 函数以计算集合的方差。</summary>
      <returns>方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Var EDM 函数以计算集合的方差。</summary>
      <returns>方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 VarP EDM 函数以计算总体的方差。</summary>
      <returns>总体的方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 VarP EDM 函数以计算总体的方差。</summary>
      <returns>总体的方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 VarP EDM 函数以计算总体的方差。</summary>
      <returns>总体的方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 VarP EDM 函数以计算总体的方差。</summary>
      <returns>总体的方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 VarP EDM 函数以计算总体的方差。</summary>
      <returns>总体的方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 VarP EDM 函数以计算总体的方差。</summary>
      <returns>总体的方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 VarP EDM 函数以计算总体的方差。</summary>
      <returns>总体的方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 VarP EDM 函数以计算总体的方差。</summary>
      <returns>总体的方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilder">
      <summary>DbModelBuilder 用于将 CLR 类映射到数据库架构。此以代码为中心的方法称作“Code First”，可用于生成实体数据模型 (EDM) 模型。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.DbModelBuilder" /> 类的新实例。发现初始模型的过程将使用您计算机上安装的实体框架的最新版本中所包含的一组约定。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>初始化 <see cref="T:System.Data.Entity.DbModelBuilder" /> 类的新实例，它将使用一组特定的约定来发现初始模型。</summary>
      <param name="modelBuilderVersion">要使用的约定的版本。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
      <summary>使用此生成器基于执行的配置来创建一个 <see cref="T:System.Data.Entity.Infrastructure.DbModel" />。连接用于确定要使用的数据库提供程序，因为这会影响生成的模型的数据库层。</summary>
      <returns>已生成的模型。</returns>
      <param name="providerConnection">用来确定提供程序信息的连接。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>使用此生成器基于执行的配置来创建一个 <see cref="T:System.Data.Entity.Infrastructure.DbModel" />。必须指定提供程序信息，因为这会影响生成的模型的数据库层。对于 SqlClient，固定名称为“System.Data.SqlClient”，清单标记为版本年份（例如，“2005”、“2008”等）。</summary>
      <returns>已生成的模型。</returns>
      <param name="providerInfo">模型将用于的数据库提供程序。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
      <summary>将一个类型注册为模型中的复杂类型，并返回一个可用来配置复杂类型的对象。可对同一类型多次调用此方法以执行多行配置。</summary>
      <returns>指定的复杂类型的配置对象。</returns>
      <typeparam name="TComplexType">要注册或配置的类型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
      <summary>获取此 DbModelBuilder 的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" />。注册器允许使用此生成器来注册派生的实体和复杂类型配置。</summary>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
      <summary>提供对处理约定的此 DbModelBuilder 的设置的访问。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
      <summary>将实体类型注册为模型的一部分，并返回一个可用来配置实体的对象。可对同一实体多次调用此方法以执行多行配置。</summary>
      <returns>指定的实体类型的配置对象。</returns>
      <typeparam name="TEntityType">要注册或配置的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)">
      <summary>指定 <see cref="T:System.Data.Entity.DbModelBuilder" /> 是否等于指定的对象。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.DbModelBuilder" /> 等于指定的对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.HasDefaultSchema(System.String)">
      <summary>配置默认数据库架构名称。此默认数据库架构名称用于不具有显式配置的架构名称的数据库对象。</summary>
      <returns>同一个 DbModelBuilder 实例，以便多个调用可以链接在一起。</returns>
      <param name="schema">默认数据库架构的名称。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
      <summary>从模型中排除类型。这用于在初始模型发现期间从根据约定添加的模型中移除类型。</summary>
      <returns>同一个 DbModelBuilder 实例，以便多个调用可以链接在一起。</returns>
      <typeparam name="T">要排除的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>从模型中排除指定的类型。这用于在初始模型发现期间从根据约定添加的模型中移除类型。</summary>
      <returns>同一个 DbModelBuilder 实例，以便多个调用可以链接在一起。</returns>
      <param name="types">要从模型中排除的类型。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Properties">
      <summary>开始配置适用于模型中所有属性的轻型约定。</summary>
      <returns>约定的配置对象。</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Properties``1">
      <summary>开始配置适用于模型中指定类型的所有基元属性的轻型约定。</summary>
      <returns>约定的配置对象。</returns>
      <typeparam name="T">此约定将适用于的属性类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.RegisterEntityType(System.Type)">
      <summary>将实体类型注册为模型的一部分。</summary>
      <param name="entityType">要注册的类型。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ToString">
      <summary>返回 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Types``1">
      <summary>开始配置应用于模型中从泛型参数指定的类型派生或实现泛型参数指定的类型的所有实体和复杂类型的轻型约定。此方法不会将类型注册为模型的一部分。</summary>
      <returns>约定的配置对象。</returns>
      <typeparam name="T">此约定将适用于的实体类型或复杂类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Types">
      <summary>开始配置应用于模型中所有实体和复杂类型的轻型约定。</summary>
      <returns>约定的配置对象。</returns>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersion">
      <summary>可直接将此枚举中的值提供给 <see cref="T:System.Data.Entity.DbModelBuilder" /> 类，也可以在应用到派生自 <see cref="T:System.Data.Entity.DbContext" /> 的类的 <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> 中使用该值。使用的值可定义在从代码生成模型（也称为“Code First”）时应使用的 DbContext 和 DbModelBuilder 约定的版本。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
      <summary>     指示应使用 <see cref="T:System.Data.Entity.DbModelBuilder" /> 和 <see cref="T:System.Data.Entity.DbContext" /> 约定的最新版本。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
      <summary>     指示应使用实体框架 4.1 版附带的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 和 <see cref="T:System.Data.Entity.DbContext" /> 约定的版本。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
      <summary>     指示应使用实体框架 5.0 版附带的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 和 <see cref="T:System.Data.Entity.DbContext" /> 约定的版本。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
      <summary>指示面向 .Net Framework 4 时，应使用实体框架 5.0 版附带的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 和 <see cref="T:System.Data.Entity.DbContext" /> 约定的版本。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V6_0">
      <summary>     指示应使用实体框架 6.0 版附带的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 和 <see cref="T:System.Data.Entity.DbContext" /> 约定的版本。</summary>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
      <summary>此特性可应用于派生自 <see cref="T:System.Data.Entity.DbContext" /> 的类，以便在从代码生成模型（也称为“Code First”）时设置应使用的 DbContext 和 <see cref="T:System.Data.Entity.DbModelBuilder" /> 约定的版本。有关 DbModelBuilder 版本的详细信息，请参见 <see cref="T:System.Data.Entity.DbModelBuilderVersion" /> 枚举。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>初始化 <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> 类的新实例。</summary>
      <param name="version">要使用的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 约定版本。</param>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
      <summary>获取 <see cref="T:System.Data.Entity.DbModelBuilder" /> 约定版本。</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 约定版本。</returns>
    </member>
    <member name="T:System.Data.Entity.DbSet">
      <summary>非泛型版本的 <see cref="T:System.Data.Entity.DbSet`1" />，可在生成时不知道实体类型时使用。</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.#ctor">
      <summary>从派生类型的构造函数中进行调用时，创建一个 <see cref="T:System.Data.Entity.DbSet" /> 实例，它将用作 DbSet 的测试替身。将由测试替身使用的方法和属性必须由测试替身来实现，除了 AsNoTracking、AsStreaming 和 Include，它们的默认实现是空操作。</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
      <summary>将给定实体以“已添加”状态添加到集的基础上下文中，这样一来，当调用 SaveChanges 时，会将该实体插入到数据库中。</summary>
      <returns>实体。</returns>
      <param name="entity">要添加的实体。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.AddRange(System.Collections.IEnumerable)">
      <summary>将给定实体集合添加到基础化集的上下文中（每个实体都置于“已添加”状态），这样当调用 SaveChanges 时，会将它插入到数据库中。</summary>
      <returns>实体集合。</returns>
      <param name="entities">要添加的实体集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
      <summary>将给定实体附加到集的基础上下文中。也就是说，将实体以“未更改”的状态放置到上下文中，就好像从数据库读取了该实体一样。</summary>
      <returns>实体。</returns>
      <param name="entity">要附加的实体。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Cast``1">
      <summary>返回等效泛型 <see cref="T:System.Data.Entity.DbSet`1" /> 对象。</summary>
      <returns>泛型集对象。</returns>
      <typeparam name="TEntity">已为其创建集的实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create">
      <summary>为此集的类型创建新的实体实例。请注意此实例不会添加或附加到此集。如果基础上下文配置为创建代理且实体类型满足创建代理的要求，则返回的实例将是一个代理。</summary>
      <returns>实体实例，可能为代理。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
      <summary>为此集的类型或派生自此集类型的类型创建新的实体实例。请注意此实例不会添加或附加到此集。如果基础上下文配置为创建代理且实体类型满足创建代理的要求，则返回的实例将是一个代理。</summary>
      <returns>实体实例，可能为代理。</returns>
      <param name="derivedEntityType">要创建的实体的类型。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Equals(System.Object)">
      <summary>返回指定的集是否等于当前集。</summary>
      <returns>如果指定的对象等于当前集，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的集。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
      <summary>查找带给定主键值的实体。如果上下文中存在带给定主键值的实体，则立即返回该实体，而不会向存储区发送请求。否则，会向存储区发送查找带给定主键值的实体的请求，如果找到该实体，则将其附加到上下文并返回。如果未在上下文或存储区中找到实体，则返回 null。</summary>
      <returns>找到的实体或为 null。</returns>
      <param name="keyValues">要查找的实体的主键值。</param>
      <exception cref="T:System.InvalidOperationException">如果上下文中存在具有给定主键值的多个实体，则引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">如果实体类型不是此上下文的数据模型的一部分，则引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">如果键值的类型与要查找的实体类型的键值类型不匹配，则引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">在已释放上下文时引发。</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.FindAsync(System.Object[])">
      <summary>异步查找带给定主键值的实体。如果上下文中存在带给定主键值的实体，则立即返回该实体，而不会向存储区发送请求。否则，会向存储区发送查找带给定主键值的实体的请求，如果找到该实体，则将其附加到上下文并返回。如果未在上下文或存储区中找到实体，则返回 null。</summary>
      <returns>表示异步查找操作的任务。任务结果包含找到的实体或 null。</returns>
      <param name="keyValues">要查找的实体的主键值。</param>
      <exception cref="T:System.InvalidOperationException">如果上下文中存在具有给定主键值的多个实体，则引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">如果实体类型不是此上下文的数据模型的一部分，则引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">如果键值的类型与要查找的实体类型的键值类型不匹配，则引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">在已释放上下文时引发。</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.FindAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>异步查找带给定主键值的实体。如果上下文中存在带给定主键值的实体，则立即返回该实体，而不会向存储区发送请求。否则，会向存储区发送查找带给定主键值的实体的请求，如果找到该实体，则将其附加到上下文并返回。如果未在上下文或存储区中找到实体，则返回 null。</summary>
      <returns>表示异步查找操作的任务。任务结果包含找到的实体或 null。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="keyValues">要查找的实体的主键值。</param>
      <exception cref="T:System.InvalidOperationException">如果上下文中存在具有给定主键值的多个实体，则引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">如果实体类型不是此上下文的数据模型的一部分，则引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">如果键值的类型与要查找的实体类型的键值类型不匹配，则引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">在已释放上下文时引发。</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetHashCode">
      <summary>返回指定集的哈希函数。</summary>
      <returns>集的哈希函数。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetType">
      <summary>获取当前集的类型。</summary>
      <returns>当前集的类型。</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet.Local">
      <summary>获取 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />，它表示此集中的所有“已添加”、“未更改”和“已修改”实体的本地视图。在上下文中添加或删除实体时，该本地视图将保持同步。同样，在本地视图中添加或删除实体也会自动在上下文中添加或删除实体。</summary>
      <returns>本地视图。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
      <summary>将给定实体标记为“已删除”，这样一来，当调用 SaveChanges 时，将从数据库中删除该实体。请注意，在调用此方法之前，该实体必须以另一种状态存在于该上下文中。</summary>
      <returns>实体。</returns>
      <param name="entity">要删除的实体。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.RemoveRange(System.Collections.IEnumerable)">
      <summary>从基础化集的上下文中删除给定实体集合（每个实体都置于“已删除”状态），这样当调用 SaveChanges 时，会从数据库中删除它。</summary>
      <returns>实体集合。</returns>
      <param name="entities">要删除的实体集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
      <summary>创建一个原始 SQL 查询，该查询将返回此集中的实体。默认情况下，上下文会跟踪返回的实体；可通过对返回的 <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> 调用 AsNoTracking 来更改此设置。请注意返回实体的类型始终是此集的类型，而不会是派生的类型。如果查询的一个或多个表可能包含其他实体类型的数据，则必须编写适当的 SQL 查询以确保只返回适当类型的实体。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> 对象，此对象在枚举时将执行查询。</returns>
      <param name="sql">SQL 查询字符串。</param>
      <param name="parameters">要应用于 SQL 查询字符串的参数。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
    </member>
    <member name="T:System.Data.Entity.DbSet`1">
      <summary>DbSet 表示上下文中给定类型的所有实体的集合或可从数据库中查询的给定类型的所有实体的集合。可以使用 DbContext.Set 方法从 DbContext 中创建 DbSet 对象。</summary>
      <typeparam name="TEntity">定义集的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.#ctor">
      <summary>从派生类型的构造函数中进行调用时，创建一个 <see cref="T:System.Data.Entity.DbSet`1" /> 实例，它将用作 DbSet 的测试替身。将由测试替身使用的方法和属性必须由测试替身来实现，除了 AsNoTracking、AsStreaming 和 Include，它们的默认实现是空操作。</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
      <summary>将给定实体以“已添加”状态添加到集的基础上下文中，这样一来，当调用 SaveChanges 时，会将该实体插入到数据库中。</summary>
      <param name="entity">要添加的实体。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>将给定实体集合添加到基础化集的上下文中（每个实体都置于“已添加”状态），这样当调用 SaveChanges 时，会将它插入到数据库中。</summary>
      <returns>实体集合。</returns>
      <param name="entities">要添加的实体集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
      <summary>将给定实体附加到集的基础上下文中。也就是说，将实体以“未更改”的状态放置到上下文中，就好像从数据库读取了该实体一样。</summary>
      <param name="entity">要附加的实体。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create">
      <summary>为此集的类型创建新的实体实例。请注意此实例不会添加或附加到此集。如果基础上下文配置为创建代理且实体类型满足创建代理的要求，则返回的实例将是一个代理。</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create``1">
      <summary>为此集的类型或派生自此集类型的类型创建新的实体实例。请注意此实例不会添加或附加到此集。如果基础上下文配置为创建代理且实体类型满足创建代理的要求，则返回的实例将是一个代理。</summary>
      <typeparam name="TDerivedEntity">要创建的实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Equals(System.Object)">
      <summary>确定指定的 DbSet 是否等于当前 DbSet。</summary>
      <returns>如果指定的 DbSet 等于当前 DbSet，则为 true；否则为 false。</returns>
      <param name="obj">要与当前 DbSet 进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
      <summary>查找带给定主键值的实体。如果上下文中存在带给定主键值的实体，则立即返回该实体，而不会向存储区发送请求。否则，会向存储区发送查找带给定主键值的实体的请求，如果找到该实体，则将其附加到上下文并返回。如果未在上下文或存储区中找到实体，则返回 null。</summary>
      <returns>找到的实体或为 null。</returns>
      <param name="keyValues">要查找的实体的主键值。</param>
      <exception cref="T:System.InvalidOperationException">如果上下文中存在具有给定主键值的多个实体，则引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">如果实体类型不是此上下文的数据模型的一部分，则引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">如果键值的类型与要查找的实体类型的键值类型不匹配，则引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">在已释放上下文时引发。</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.FindAsync(System.Object[])">
      <summary>异步查找带给定主键值的实体。如果上下文中存在带给定主键值的实体，则立即返回该实体，而不会向存储区发送请求。否则，会向存储区发送查找带给定主键值的实体的请求，如果找到该实体，则将其附加到上下文并返回。如果未在上下文或存储区中找到实体，则返回 null。</summary>
      <returns>表示异步查找操作的任务。任务结果包含找到的实体或 null。</returns>
      <param name="keyValues">要查找的实体的主键值。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.FindAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>异步查找带给定主键值的实体。如果上下文中存在带给定主键值的实体，则立即返回该实体，而不会向存储区发送请求。否则，会向存储区发送查找带给定主键值的实体的请求，如果找到该实体，则将其附加到上下文并返回。如果未在上下文或存储区中找到实体，则返回 null。</summary>
      <returns>表示异步查找操作的任务。任务结果包含找到的实体或 null。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="keyValues">要查找的实体的主键值。</param>
      <exception cref="T:System.InvalidOperationException">如果上下文中存在具有给定主键值的多个实体，则引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">如果实体类型不是此上下文的数据模型的一部分，则引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">如果键值的类型与要查找的实体类型的键值类型不匹配，则引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">在已释放上下文时引发。</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetHashCode">
      <summary>返回此 DbSet 的哈希函数。</summary>
      <returns>此 DbSet 的哈希函数。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetType">
      <summary>返回当前 DbSet 的类型。</summary>
      <returns>当前 DbSet 的类型。</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet`1.Local">
      <summary>获取 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />，它表示此集中的所有“已添加”、“未更改”和“已修改”实体的本地视图。在上下文中添加或删除实体时，该本地视图将保持同步。同样，在本地视图中添加或删除实体也会自动在上下文中添加或删除实体。</summary>
      <returns>本地视图。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet">
      <summary>返回等效非泛型 <see cref="T:System.Data.Entity.DbSet" /> 对象。</summary>
      <returns>非泛型集对象。</returns>
      <param name="entry">泛型集对象。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
      <summary>将给定实体标记为“已删除”，这样一来，当调用 SaveChanges 时，将从数据库中删除该实体。请注意，在调用此方法之前，该实体必须以另一种状态存在于该上下文中。</summary>
      <param name="entity">要删除的实体。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>从基础化集的上下文中删除给定实体集合（每个实体都置于“已删除”状态），这样当调用 SaveChanges 时，会从数据库中删除它。</summary>
      <returns>实体集合。</returns>
      <param name="entities">要删除的实体集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
      <summary>创建一个原始 SQL 查询，该查询将返回此集中的实体。默认情况下，上下文会跟踪返回的实体；可通过对返回的 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> 调用 AsNoTracking 来更改此设置。请注意返回实体的类型始终是此集的类型，而不会是派生的类型。如果查询的一个或多个表可能包含其他实体类型的数据，则必须编写适当的 SQL 查询以确保只返回适当类型的实体。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> 对象，此对象在枚举时将执行查询。</returns>
      <param name="sql">SQL 查询字符串。</param>
      <param name="parameters">要应用于 SQL 查询字符串的参数。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
      <summary>IDatabaseInitializer 的实现，它总是会在首次在应用程序域中使用上下文时，重新创建数据库并可以选择重新设置数据库的种子。若要设置数据库的种子，请创建一个派生类并重写 Seed 方法。</summary>
      <typeparam name="TContext">上下文的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
      <summary>执行策略以初始化给定上下文的数据库。</summary>
      <param name="context">上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
      <summary>应重写以向上下文实际添加数据来设置种子的方法。默认实现不执行任何操作。</summary>
      <param name="context">要设置种子的上下文。</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
      <summary>IDatabaseInitializer 的实现，它仅在模型自数据库创建后发生更改时删除数据库、重新创建数据库并选择重新设置数据库的种子。</summary>
      <typeparam name="TContext">上下文的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
      <summary>执行策略以初始化给定上下文的数据库。</summary>
      <param name="context">上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
      <summary>应重写以向上下文实际添加数据来设置种子的方法。默认实现不执行任何操作。</summary>
      <param name="context">要设置种子的上下文。</param>
    </member>
    <member name="T:System.Data.Entity.EntityState">
      <summary>     描述实体的状态。</summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Added">
      <summary>     实体将由上下文跟踪，但是在数据库中还不存在。</summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Deleted">
      <summary>     实体将由上下文跟踪并存在于数据库中，但是已被标记为在下次调用 SaveChanges 时从数据库中删除。</summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Detached">
      <summary>该实体未由上下文跟踪。刚使用新运算符或某个 <see cref="T:System.Data.Entity.DbSet" /> Create 方法创建实体后，实体就处于此状态。</summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Modified">
      <summary>     实体将由上下文跟踪并存在于数据库中，已修改其中的一些或所有属性值。 </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Unchanged">
      <summary>     实体将由上下文跟踪并存在于数据库中，其属性值与数据库中的值相同。</summary>
    </member>
    <member name="T:System.Data.Entity.IDatabaseInitializer`1">
      <summary>此接口的实现用于在首次使用 <see cref="T:System.Data.Entity.DbContext" /> 派生类的实例时初始化基础数据库。此初始化可以有条件地创建数据库和/或使用数据设置其种子。使用 <see cref="T:System.Data.Entity.Database" /> 类的静态 InitializationStrategy 属性设置所用的策略。提供以下实现：<see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" />、     <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" />、<see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />。</summary>
      <typeparam name="TContext">此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。 有关协变和逆变的详细信息，请参阅。</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>     执行策略以初始化给定上下文的数据库。</summary>
      <param name="context"> 上下文。 </param>
    </member>
    <member name="T:System.Data.Entity.IDbSet`1">
      <summary>
        <see cref="T:System.Data.Entity.IDbSet`1" /> 表示上下文中给定类型的所有实体的集合或可从数据库中查询的给定类型的所有实体的集合。<see cref="T:System.Data.Entity.DbSet`1" /> 是 IDbSet 的具体实现。</summary>
      <typeparam name="TEntity">定义集的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
      <summary>将给定实体以“已添加”状态添加到集的基础上下文中，这样一来，当调用 SaveChanges 时，会将该实体插入到数据库中。</summary>
      <returns>实体。</returns>
      <param name="entity">要添加的实体。</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
      <summary>将给定实体附加到集的基础上下文中。也就是说，将实体以“未更改”的状态放置到上下文中，就好像从数据库读取了该实体一样。</summary>
      <returns>实体。</returns>
      <param name="entity">要附加的实体。</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create">
      <summary>为此集的类型创建新的实体实例。请注意此实例不会添加或附加到此集。如果基础上下文配置为创建代理且实体类型满足创建代理的要求，则返回的实例将是一个代理。</summary>
      <returns>实体实例，可能为代理。</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create``1">
      <summary>为此集的类型或派生自此集类型的类型创建新的实体实例。请注意此实例不会添加或附加到此集。如果基础上下文配置为创建代理且实体类型满足创建代理的要求，则返回的实例将是一个代理。</summary>
      <returns>实体实例，可能为代理。</returns>
      <typeparam name="TDerivedEntity">要创建的实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
      <summary>查找带给定主键值的实体。如果上下文中存在带给定主键值的实体，则立即返回该实体，而不会向存储区发送请求。否则，会向存储区发送查找带给定主键值的实体的请求，如果找到该实体，则将其附加到上下文并返回。如果未在上下文或存储区中找到实体，则返回 null。</summary>
      <returns>找到的实体或为 null。</returns>
      <param name="keyValues">要查找的实体的主键值。</param>
    </member>
    <member name="P:System.Data.Entity.IDbSet`1.Local">
      <summary>获取 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />，它表示此集中的所有“已添加”、“未更改”和“已修改”实体的本地视图。在上下文中添加或删除实体时，该本地视图将保持同步。同样，在本地视图中添加或删除实体也会自动在上下文中添加或删除实体。</summary>
      <returns>本地视图。</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
      <summary>将给定实体标记为“已删除”，这样一来，当调用 SaveChanges 时，将从数据库中删除该实体。请注意，在调用此方法之前，该实体必须以另一种状态存在于该上下文中。</summary>
      <returns>实体。</returns>
      <param name="entity">要删除的实体。</param>
    </member>
    <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
      <summary>将使用 Code First 迁移将数据库更新到最新版本的 <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> 的实现。</summary>
      <typeparam name="TContext">上下文的类型。</typeparam>
      <typeparam name="TMigrationsConfiguration">初始化过程中要使用的迁移配置的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
      <summary>初始化 MigrateDatabaseToLatestVersion 类的新实例，该类将使用通过默认构造函数或已注册工厂（如果适用）构造的上下文中的连接信息。</summary>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.Boolean)">
      <summary>初始化 MigrateDatabaseToLatestVersion 类的新实例，该类指定是否使用触发初始化的上下文中的连接信息来执行迁移。</summary>
      <param name="useSuppliedContext">如果设置为 true，则初始值设定项使用触发初始化的上下文中的连接信息来运行。否则，从使用默认构造函数或已注册工厂（如果适用）构造的上下文中获取连接信息。</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.Boolean,`1)">
      <summary>初始化 MigrateDatabaseToLatestVersion 类的新实例，该类指定是否使用触发初始化的上下文中的连接信息来执行迁移。也允许指定在初始化期间要使用的迁移配置。</summary>
      <param name="useSuppliedContext">如果设置为 true，则初始值设定项使用触发初始化的上下文中的连接信息来运行。否则，从使用默认构造函数或已注册工厂（如果适用）构造的上下文中获取连接信息。</param>
      <param name="configuration">在初始化期间要使用的迁移配置。</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
      <summary>初始化将使用配置文件中的特定连接字符串连接到数据库以执行迁移的 MigrateDatabaseToLatestVersion 类的新实例。</summary>
      <param name="connectionStringName">用于迁移的连接字符串的名称。</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
      <summary>初始化给定上下文的数据库。</summary>
      <param name="context">上下文。</param>
    </member>
    <member name="T:System.Data.Entity.NullDatabaseInitializer`1">
      <summary>不执行任何操作的 <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> 的实现。使用此初始值设定项将禁用给定上下文类型的数据库初始化。将此类的实例传递给 <see cref="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})" /> 将等效于传递 null。正在使用 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 解析初始值设定项时，此类的实例必须用于禁用初始化。</summary>
      <typeparam name="TContext">上下文的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.NullDatabaseInitializer`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.NullDatabaseInitializer`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.NullDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>执行策略以初始化给定上下文的数据库。</summary>
      <param name="context">上下文。</param>
    </member>
    <member name="T:System.Data.Entity.ObservableCollectionExtensions">
      <summary>
        <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> 的扩展方法。</summary>
    </member>
    <member name="M:System.Data.Entity.ObservableCollectionExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary>返回 <see cref="T:System.ComponentModel.BindingList`1" /> 实现，该实现与给定的 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> 保持同步。</summary>
      <returns>绑定列表。</returns>
      <param name="source">绑定列表将与其保持同步的集合。</param>
      <typeparam name="T">元素类型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.QueryableExtensions">
      <summary>提供用于 Entity Framework LINQ 查询的有用扩展方法。</summary>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>异步确定序列的所有元素是否满足条件。</summary>
      <returns>表示异步操作的任务。如果源序列的每个元素都通过了指定谓词中的测试，则任务结果包含 true；否则为 false。</returns>
      <param name="source">要测试其元素是否满足某个条件的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>异步确定序列的所有元素是否满足条件。</summary>
      <returns>表示异步操作的任务。如果源序列的每个元素都通过了指定谓词中的测试，则任务结果包含 true；否则为 false。</returns>
      <param name="source">要测试其元素是否满足某个条件的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 是 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0})">
      <summary>异步确定序列是否包含任何元素。</summary>
      <returns>表示异步操作的任务。如果源序列包含任何元素，则任务结果包含 true；否则包含 false。</returns>
      <param name="source">要检查为空的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>异步确定序列的任何元素是否满足条件。</summary>
      <returns>表示异步操作的任务。如果源序列的任何元素通过指定谓词中的测试，则任务结果包含 true；否则包含 false。</returns>
      <param name="source">要测试其元素是否满足某个条件的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>异步确定序列的任何元素是否满足条件。</summary>
      <returns>表示异步操作的任务。如果源序列的任何元素通过指定谓词中的测试，则任务结果包含 true；否则包含 false。</returns>
      <param name="source">要测试其元素是否满足某个条件的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>异步确定序列是否包含任何元素。</summary>
      <returns>表示异步操作的任务。如果源序列包含任何元素，则任务结果包含 true；否则包含 false。</returns>
      <param name="source">要检查为空的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking(System.Linq.IQueryable)">
      <summary>返回一个新查询，其中返回的实体将不会在 <see cref="T:System.Data.Entity.DbContext" /> 或 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中进行缓存。此方法通过调用基础查询对象的 AsNoTracking 方法来运行。如果基础查询对象没有 AsNoTracking 方法，则调用此方法将不会有任何影响。</summary>
      <returns>应用 NoTracking 的新查询，如果不支持 NoTracking，则为源查询。</returns>
      <param name="source">源查询。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
      <summary>返回一个新查询，其中返回的实体将不会在 <see cref="T:System.Data.Entity.DbContext" /> 或 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中进行缓存。此方法通过调用基础查询对象的 AsNoTracking 方法来运行。如果基础查询对象没有 AsNoTracking 方法，则调用此方法将不会有任何影响。</summary>
      <returns>应用 NoTracking 的新查询，如果不支持 NoTracking，则为源查询。</returns>
      <param name="source">源查询。</param>
      <typeparam name="T">元素类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming(System.Linq.IQueryable)">
      <summary>返回将流式处理结果而非缓存它的新查询。此方法通过调用基础查询对象的 AsStreaming 方法来运行。如果基础查询对象没有 AsStreaming 方法，则调用此方法将不会有任何影响。</summary>
      <returns>应用 AsStreaming 的新查询，如果不支持 AsStreaming，则为源查询。</returns>
      <param name="source">要应用 AsStreaming 的 <see cref="T:System.Linq.IQueryable" />。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming``1(System.Linq.IQueryable{``0})">
      <summary>返回将流式处理结果而非缓存它的新查询。此方法通过调用基础查询对象的 AsStreaming 方法来运行。如果基础查询对象没有 AsStreaming 方法，则调用此方法将不会有任何影响。</summary>
      <returns>应用 AsStreaming 的新查询，如果不支持 AsStreaming，则为源查询。</returns>
      <param name="source">要应用 AsStreaming 的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="T">
        <paramref name="source" /> 的元素的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal})">
      <summary>异步计算 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Decimal" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double})">
      <summary>异步计算 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Double" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32})">
      <summary>异步计算 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Int32" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64})">
      <summary>异步计算 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Int64" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的可为 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的可为 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的可为 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的可为 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的可为 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的可为 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的可为 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的可为 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的可为 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的可为 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single})">
      <summary>异步计算 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Single" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>异步计算 <see cref="T:System.Decimal" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Decimal" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>异步计算 <see cref="T:System.Double" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Double" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>异步计算 <see cref="T:System.Int32" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Int32" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>异步计算 <see cref="T:System.Int64" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Int64" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Decimal" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Decimal" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Double" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Double" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Int32" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Int32" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Int64" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Int64" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Single" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Single" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>异步计算 <see cref="T:System.Single" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Single" /> 值序列的平均值，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0)">
      <summary>通过使用默认的相等比较器异步确定序列是否包含指定的元素。</summary>
      <returns>表示异步操作的任务。如果输入序列包含指定的值，则任务结果包含 true；否则包含 false。</returns>
      <param name="source">一个返回其单个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="item">要在序列中定位的对象。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)">
      <summary>通过使用默认的相等比较器异步确定序列是否包含指定的元素。</summary>
      <returns>表示异步操作的任务。如果输入序列包含指定的值，则任务结果包含 true；否则包含 false。</returns>
      <param name="source">一个返回其单个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="item">要在序列中定位的对象。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0})">
      <summary>异步返回序列中的元素数。</summary>
      <returns>表示异步操作的任务。任务结果包含输入序列中的元素数。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>异步返回满足条件的序列中的元素数。</summary>
      <returns>表示异步操作的任务。任务结果包含满足谓词函数中条件的序列中的元素数。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">满足谓词函数中条件的 <paramref name="source" /> 中的元素数大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>异步返回满足条件的序列中的元素数。</summary>
      <returns>表示异步操作的任务。任务结果包含满足谓词函数中条件的序列中的元素数。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">满足谓词函数中条件的 <paramref name="source" /> 中的元素数大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>异步返回序列中的元素数。</summary>
      <returns>表示异步操作的任务。任务结果包含输入序列中的元素数。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0})">
      <summary>异步返回序列的第一个元素。</summary>
      <returns>表示异步操作的任务。任务结果包含 <paramref name="source" /> 中的第一个元素。</returns>
      <param name="source">一个返回其第一个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">源序列为空。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>异步返回满足指定条件的序列的第一个元素。</summary>
      <returns>表示异步操作的任务。任务结果包含通过 <paramref name="predicate" /> 中测试的 <paramref name="source" /> 中的第一个元素。</returns>
      <param name="source">一个返回其第一个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>异步返回满足指定条件的序列的第一个元素。</summary>
      <returns>表示异步操作的任务。任务结果包含通过 <paramref name="predicate" /> 中测试的 <paramref name="source" /> 中的第一个元素。</returns>
      <param name="source">一个返回其第一个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>异步返回序列的第一个元素。</summary>
      <returns>表示异步操作的任务。任务结果包含 <paramref name="source" /> 中的第一个元素。</returns>
      <param name="source">一个返回其第一个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">源序列为空。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0})">
      <summary>异步返回序列的第一个元素；如果序列不包含任何元素，则返回默认值。</summary>
      <returns>表示异步操作的任务。如果 <paramref name="source" /> 为空，则任务结果包含 default (<paramref name="TSource" />)；否则，包含 <paramref name="source" /> 中的第一个元素。</returns>
      <param name="source">一个返回其第一个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>异步返回满足指定条件的序列的第一个元素；如果未找到此类元素，则返回默认值。</summary>
      <returns>表示异步操作的任务。如果 <paramref name="source" /> 为空或没有元素通过 <paramref name="predicate" /> 所指定的测试，则任务结果包含 default (<paramref name="TSource" />)；否则它包含通过 <paramref name="predicate" /> 所指定的测试的 <paramref name="source" /> 中的第一个元素。</returns>
      <param name="source">一个返回其第一个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>异步返回满足指定条件的序列的第一个元素；如果未找到此类元素，则返回默认值。</summary>
      <returns>表示异步操作的任务。如果 <paramref name="source" /> 为空或没有元素通过 <paramref name="predicate" /> 所指定的测试，则任务结果包含 default (<paramref name="TSource" />)；否则它包含通过 <paramref name="predicate" /> 所指定的测试的 <paramref name="source" /> 中的第一个元素。</returns>
      <param name="source">一个返回其第一个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 具有多个元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>异步返回序列的第一个元素；如果序列不包含任何元素，则返回默认值。</summary>
      <returns>表示异步操作的任务。如果 <paramref name="source" /> 为空，则任务结果包含 default (<paramref name="TSource" />)；否则，包含 <paramref name="source" /> 中的第一个元素。</returns>
      <param name="source">一个返回其第一个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object})">
      <summary>异步枚举查询结果并对每个元素执行指定的操作。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="source">要枚举的 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="action">要对每个元素执行的操作。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object},System.Threading.CancellationToken)">
      <summary>异步枚举查询结果并对每个元素执行指定的操作。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="source">要枚举的 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="action">要对每个元素执行的操作。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0})">
      <summary>异步枚举查询结果并对每个元素执行指定的操作。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="source">要枚举的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="action">要对每个元素执行的操作。</param>
      <typeparam name="T">
        <paramref name="source" /> 的元素的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)">
      <summary>异步枚举查询结果并对每个元素执行指定的操作。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="source">要枚举的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="action">要对每个元素执行的操作。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="T">
        <paramref name="source" /> 的元素的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include(System.Linq.IQueryable,System.String)">
      <summary>指定要包括在查询结果中的相关对象。</summary>
      <returns>一个新的 <see cref="T:System.Linq.IQueryable" />，它具有定义的查询路径。</returns>
      <param name="source">要在其上调用 Include 的源 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="path">要在查询结果中返回的相关对象列表（以点号分隔）。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>指定要包括在查询结果中的相关对象。</summary>
      <returns>一个新的 IQueryable&amp;lt;T&amp;gt;，它具有定义的查询路径。</returns>
      <param name="source">要在其上调用 Include 的源 IQueryable。</param>
      <param name="path">表示要包括的路径的 lambda 表达式。</param>
      <typeparam name="T">要查询的实体类型。</typeparam>
      <typeparam name="TProperty">要包含的导航属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
      <summary>指定要包括在查询结果中的相关对象。</summary>
      <returns>一个新的 <see cref="T:System.Linq.IQueryable`1" />，它具有定义的查询路径。</returns>
      <param name="source">要在其上调用 Include 的源 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="path">要在查询结果中返回的相关对象列表（以点号分隔）。</param>
      <typeparam name="T">要查询的实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Load(System.Linq.IQueryable)">
      <summary>枚举服务器查询等查询，例如 <see cref="T:System.Data.Entity.DbSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 的查询，以及查询结果将加载到关联的 <see cref="T:System.Data.Entity.DbContext" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或客户端上的其他缓存中的其他查询。这等效于调用 ToList 然后丢弃该列表，而不会产生实际创建该列表的开销。</summary>
      <param name="source">源查询。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable)">
      <summary>异步枚举服务器查询等查询，例如 <see cref="T:System.Data.Entity.DbSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 的查询，以及查询结果将加载到关联的 <see cref="T:System.Data.Entity.DbContext" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或客户端上的其他缓存中的其他查询。这等效于调用 ToList 然后丢弃该列表，而不会产生实际创建该列表的开销。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="source">源查询。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
      <summary>异步枚举服务器查询等查询，例如 <see cref="T:System.Data.Entity.DbSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 的查询，以及查询结果将加载到关联的 <see cref="T:System.Data.Entity.DbContext" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或客户端上的其他缓存中的其他查询。这等效于调用 ToList 然后丢弃该列表，而不会产生实际创建该列表的开销。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="source">源查询。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0})">
      <summary>异步返回表示序列中的总元素数的 <see cref="T:System.Int64" />。</summary>
      <returns>表示异步操作的任务。任务结果包含输入序列中的元素数。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>异步返回表示满足条件的序列中元素数的 <see cref="T:System.Int64" />。</summary>
      <returns>表示异步操作的任务。任务结果包含满足谓词函数中条件的序列中的元素数。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">满足谓词函数中条件的 <paramref name="source" /> 中的元素数大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>异步返回表示满足条件的序列中元素数的 <see cref="T:System.Int64" />。</summary>
      <returns>表示异步操作的任务。任务结果包含满足谓词函数中条件的序列中的元素数。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">满足谓词函数中条件的 <paramref name="source" /> 中的元素数大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>异步返回表示序列中的总元素数的 <see cref="T:System.Int64" />。</summary>
      <returns>表示异步操作的任务。任务结果包含输入序列中的元素数。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0})">
      <summary>异步返回序列的最大值。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中的最大值。</returns>
      <param name="source">包含用于确定最大值的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>对序列的每个元素异步调用投影函数，并返回最大结果值。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中的最大值。</returns>
      <param name="source">包含用于确定最大值的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="selector" /> 表示的函数返回的值类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
      <summary>对序列的每个元素异步调用投影函数，并返回最大结果值。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中的最大值。</returns>
      <param name="source">包含用于确定最大值的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="selector" /> 表示的函数返回的值类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>异步返回序列的最大值。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中的最大值。</returns>
      <param name="source">包含用于确定最大值的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0})">
      <summary>异步返回序列的最小值。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中的最小值。</returns>
      <param name="source">包含用于确定最小值的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>对序列的每个元素异步调用投影函数，并返回最小结果值。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中的最小值。</returns>
      <param name="source">包含用于确定最小值的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="selector" /> 表示的函数返回的值类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
      <summary>对序列的每个元素异步调用投影函数，并返回最小结果值。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中的最小值。</returns>
      <param name="source">包含用于确定最小值的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="selector" /> 表示的函数返回的值类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>异步返回序列的最小值。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中的最小值。</returns>
      <param name="source">包含用于确定最小值的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0})">
      <summary>异步返回序列的唯一元素；如果序列中并非恰好包含一个元素，则引发异常。</summary>
      <returns>表示异步操作的任务。任务结果包含输入序列的单个元素。</returns>
      <param name="source">一个返回其单个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">源序列为空。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>异步返回满足指定条件的序列的唯一元素；如果有多个这样的元素，则引发异常。</summary>
      <returns>表示异步操作的任务。任务结果包含满足 <paramref name="predicate" /> 中条件的输入序列的单个元素。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IQueryable`1" />，用于返回单个元素。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。</exception>
      <exception cref="T:System.InvalidOperationException">多个元素满足 <paramref name="predicate" /> 中的条件。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>异步返回满足指定条件的序列的唯一元素；如果有多个这样的元素，则引发异常。</summary>
      <returns>表示异步操作的任务。任务结果包含满足 <paramref name="predicate" /> 中条件的输入序列的单个元素。</returns>
      <param name="source">一个返回其单个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。</exception>
      <exception cref="T:System.InvalidOperationException">多个元素满足 <paramref name="predicate" /> 中的条件。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>异步返回序列的唯一元素；如果序列中并非恰好包含一个元素，则引发异常。</summary>
      <returns>表示异步操作的任务。任务结果包含输入序列的单个元素。</returns>
      <param name="source">一个返回其单个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 具有多个元素。</exception>
      <exception cref="T:System.InvalidOperationException">源序列为空。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0})">
      <summary>异步返回序列中的唯一元素；如果该序列为空，则返回默认值；如果该序列包含多个元素，此方法将引发异常。</summary>
      <returns>表示异步操作的任务。任务结果包含输入序列的单个元素；如果该序列不包含元素，则任务结果包含 default (<paramref name="TSource" />)。</returns>
      <param name="source">一个返回其单个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 具有多个元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>异步返回满足指定条件的序列的唯一元素；如果此类元素不存在，则返回默认值；如果有多个元素满足该条件，此方法将引发异常。</summary>
      <returns>表示异步操作的任务。任务结果包含满足 <paramref name="predicate" /> 中条件的输入序列的单个元素；如果没有找到此类元素，则任务结果包含 default (<paramref name="TSource" />)。</returns>
      <param name="source">一个返回其单个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>异步返回满足指定条件的序列的唯一元素；如果此类元素不存在，则返回默认值；如果有多个元素满足该条件，此方法将引发异常。</summary>
      <returns>表示异步操作的任务。任务结果包含满足 <paramref name="predicate" /> 中条件的输入序列的单个元素；如果没有找到此类元素，则任务结果包含 default (<paramref name="TSource" />)。</returns>
      <param name="source">一个返回其单个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>异步返回序列中的唯一元素；如果该序列为空，则返回默认值；如果该序列包含多个元素，此方法将引发异常。</summary>
      <returns>表示异步操作的任务。任务结果包含输入序列的单个元素；如果该序列不包含元素，则任务结果包含 default (<paramref name="TSource" />)。</returns>
      <param name="source">一个返回其单个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 具有多个元素。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Skip``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>跳过序列中指定数量的元素，然后返回剩余的元素。</summary>
      <returns>一个序列，其中包含输入序列中指定索引后出现的元素。</returns>
      <param name="source">要从中返回元素的序列。</param>
      <param name="countAccessor">计算结果为要跳过的元素数的表达式。</param>
      <typeparam name="TSource">source 的元素的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal})">
      <summary>异步计算 <see cref="T:System.Decimal" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">一个要计算其总和的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Decimal" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">一个要计算其总和的 <see cref="T:System.Decimal" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double})">
      <summary>异步计算 <see cref="T:System.Double" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">一个要计算其总和的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Double" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">一个要计算其总和的 <see cref="T:System.Double" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32})">
      <summary>异步计算 <see cref="T:System.Int32" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">一个要计算其总和的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Int32" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">一个要计算其总和的 <see cref="T:System.Int32" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64})">
      <summary>异步计算 <see cref="T:System.Int64" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">一个要计算其总和的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Int64" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">一个要计算其总和的 <see cref="T:System.Int64" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Decimal" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">要计算其总和的可为 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Decimal" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">要计算其总和的可为 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Double" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">要计算其总和的可为 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Double" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">要计算其总和的可为 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Int32" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">要计算其总和的可为 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Int32" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">要计算其总和的可为 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Int64" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">要计算其总和的可为 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Int64" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">要计算其总和的可为 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Single" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">要计算其总和的可为 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Single" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">要计算其总和的可为 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single})">
      <summary>异步计算 <see cref="T:System.Single" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">一个要计算其总和的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Single" /> 值序列的总和。</summary>
      <returns>表示异步操作的任务。任务结果包含序列中值的总和。</returns>
      <param name="source">一个要计算其总和的 <see cref="T:System.Single" /> 值序列。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>异步计算 <see cref="T:System.Decimal" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Decimal" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>异步计算 <see cref="T:System.Double" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Double" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>异步计算 <see cref="T:System.Int32" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Int32" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>异步计算 <see cref="T:System.Int64" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Int64" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Decimal" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Decimal" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Double" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Double" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Int32" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Int32" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Int64" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Int64" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>异步计算可为 null 的 <see cref="T:System.Single" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
      <summary>异步计算可为 null 的 <see cref="T:System.Single" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>异步计算 <see cref="T:System.Single" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
      <summary>异步计算 <see cref="T:System.Single" /> 值序列的总和，该序列是通过对输入序列中的每个元素调用投影函数而获得的。</summary>
      <returns>表示异步操作的任务。任务结果包含投影值的总和。</returns>
      <param name="source">一个类型为 <paramref name="TSource" /> 的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不实现 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>从序列开始处起，返回指定数量的连续元素。</summary>
      <returns>一个序列，其中包含输入序列开头的指定数量的元素。</returns>
      <param name="source">要从中返回元素的序列。</param>
      <param name="countAccessor">计算结果为要返回的元素数的表达式。</param>
      <typeparam name="TSource">source 的元素的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0})">
      <summary>通过异步枚举从 <see cref="T:System.Linq.IQueryable`1" /> 创建数组。</summary>
      <returns>表示异步操作的任务。任务结果包含一个数组，该数组包含输入序列的元素。</returns>
      <param name="source">要从中创建数组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>通过异步枚举从 <see cref="T:System.Linq.IQueryable`1" /> 创建数组。</summary>
      <returns>表示异步操作的任务。任务结果包含一个数组，该数组包含输入序列的元素。</returns>
      <param name="source">要从中创建数组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1})">
      <summary>从 <see cref="T:System.Linq.IQueryable`1" /> 创建 <see cref="T:System.Collections.Generic.Dictionary`2" />，方法是：根据指定的键选择器函数来异步枚举它。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，后者包含所选的键和值。</returns>
      <param name="source">一个将从中创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>从 <see cref="T:System.Linq.IQueryable`1" /> 创建 <see cref="T:System.Collections.Generic.Dictionary`2" />，方法是：根据指定的键选择器函数和比较器来异步枚举它。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，后者包含所选的键和值。</returns>
      <param name="source">一个将从中创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
      <summary>从 <see cref="T:System.Linq.IQueryable`1" /> 创建 <see cref="T:System.Collections.Generic.Dictionary`2" />，方法是：根据指定的键选择器函数和比较器来异步枚举它。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，后者包含所选的键和值。</returns>
      <param name="source">一个将从中创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>从 <see cref="T:System.Linq.IQueryable`1" /> 创建 <see cref="T:System.Collections.Generic.Dictionary`2" />，方法是：根据指定的键选择器函数和元素选择器函数来异步枚举它。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，后者包含从输入序列选择的类型 <paramref name="TElement" /> 的值。</returns>
      <param name="source">一个将从中创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键类型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>从 <see cref="T:System.Linq.IQueryable`1" /> 创建 <see cref="T:System.Collections.Generic.Dictionary`2" />，方法是：根据指定的键选择器函数、比较器和元素选择器函数来异步枚举它。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，后者包含从输入序列选择的类型 <paramref name="TElement" /> 的值。</returns>
      <param name="source">一个将从中创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键类型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
      <summary>从 <see cref="T:System.Linq.IQueryable`1" /> 创建 <see cref="T:System.Collections.Generic.Dictionary`2" />，方法是：根据指定的键选择器函数、比较器和元素选择器函数来异步枚举它。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，后者包含从输入序列选择的类型 <paramref name="TElement" /> 的值。</returns>
      <param name="source">一个将从中创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键类型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
      <summary>从 <see cref="T:System.Linq.IQueryable`1" /> 创建 <see cref="T:System.Collections.Generic.Dictionary`2" />，方法是：根据指定的键选择器函数和元素选择器函数来异步枚举它。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，后者包含从输入序列选择的类型 <paramref name="TElement" /> 的值。</returns>
      <param name="source">一个将从中创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键类型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
      <summary>从 <see cref="T:System.Linq.IQueryable`1" /> 创建 <see cref="T:System.Collections.Generic.Dictionary`2" />，方法是：根据指定的键选择器函数来异步枚举它。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，后者包含所选的键和值。</returns>
      <param name="source">一个将从中创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable)">
      <summary>通过异步枚举从 <see cref="T:System.Linq.IQueryable" /> 创建 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.List`1" />，后者包含输入序列的元素。</returns>
      <param name="source">一个将从中创建 <see cref="T:System.Collections.Generic.List`1" /> 的 <see cref="T:System.Linq.IQueryable" />。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
      <summary>通过异步枚举从 <see cref="T:System.Linq.IQueryable" /> 创建 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.List`1" />，后者包含输入序列的元素。</returns>
      <param name="source">一个将从中创建 <see cref="T:System.Collections.Generic.List`1" /> 的 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0})">
      <summary>通过异步枚举从 <see cref="T:System.Linq.IQueryable`1" /> 创建 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.List`1" />，后者包含输入序列的元素。</returns>
      <param name="source">一个将从中创建 <see cref="T:System.Collections.Generic.List`1" /> 的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>通过异步枚举从 <see cref="T:System.Linq.IQueryable`1" /> 创建 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.List`1" />，后者包含输入序列的元素。</returns>
      <param name="source">一个要从中创建列表的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 的元素的类型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.TransactionalBehavior">
      <summary>在执行数据库命令或查询期间控制事务创建行为。</summary>
    </member>
    <member name="F:System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction">
      <summary>如果存在现有事务，则使用它，否则在没有事务的情况下执行命令或查询。</summary>
    </member>
    <member name="F:System.Data.Entity.TransactionalBehavior.EnsureTransaction">
      <summary>如果不存在任何事务，则使用新事务进行操作。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntityCommandCompilationException">
      <summary>表示在尝试准备或执行 CommandCompilation 时出现的失败。此异常旨在提供一个常见异常，人们可以捕获该异常以便在使用 EntityCommand 执行语句时承载提供程序异常（SqlException、OracleException）。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" /> 的新实例，没有消息，没有内部异常。可能不应该存在，但它有益于 FxCop。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String)">
      <summary>使用消息（但没有内部异常）初始化 <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" /> 的新实例。可能不应该存在，但它有益于 FxCop。</summary>
      <param name="message">消息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String,System.Exception)">
      <summary>使用消息和内部异常实例初始化 <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" /> 的新实例。</summary>
      <param name="message">消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityCommandExecutionException">
      <summary>表示在尝试准备或执行 CommandExecution 时出现的失败。此异常旨在提供一个常见异常，人们可以捕获该异常以便在使用 EntityCommand 执行语句时承载提供程序异常（SqlException、OracleException）。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor">
      <summary>初始化 EntityCommandExecutionException 的新实例，没有消息，没有内部异常。可能不应该存在，但它有益于 FxCop。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String)">
      <summary>使用消息（但没有内部异常）初始化 EntityCommandExecutionException 的新实例。可能不应该存在，但它有益于 FxCop。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String,System.Exception)">
      <summary>使用消息和内部异常实例初始化 EntityCommandExecutionException 的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致此当前异常的内部异常。</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityException">
      <summary>提供实体客户端使用的异常。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Data.Entity.Core.EntityException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.EntityException" /> 类的新实例。</summary>
      <param name="info">序列化信息。</param>
      <param name="context">流上下文。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String)">
      <summary>初始化接受预先格式化消息的 <see cref="T:System.Data.Entity.Core.EntityException" /> 类的新实例。</summary>
      <param name="message">本地化的错误消息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String,System.Exception)">
      <summary>初始化接受预先格式化消息和内部异常的 <see cref="T:System.Data.Entity.Core.EntityException" /> 类的新实例。</summary>
      <param name="message">本地化的错误消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityKey">
      <summary>表示实体的标识符。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.EntityKey" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>使用给定的键值初始化 <see cref="T:System.Data.Entity.Core.EntityKey" /> 类的新实例。</summary>
      <param name="qualifiedEntitySetName">实体的 EntitySet 名称，由 EntityContainer 名称限定。</param>
      <param name="entityKeyValues">标识实体的键-值对。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.EntityKeyMember})">
      <summary>使用给定的键值初始化 <see cref="T:System.Data.Entity.Core.EntityKey" /> 类的新实例。</summary>
      <param name="qualifiedEntitySetName">实体的 EntitySet 名称，由 EntityContainer 名称限定。</param>
      <param name="entityKeyValues">标识实体的键-值对。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.String,System.Object)">
      <summary>使用给定单个键名称和值初始化 <see cref="T:System.Data.Entity.Core.EntityKey" /> 类的新实例。</summary>
      <param name="qualifiedEntitySetName">实体的 EntitySet 名称，由 EntityContainer 名称限定。</param>
      <param name="keyName">标识实体的键名称。</param>
      <param name="keyValue">标识实体的键值。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityContainerName">
      <summary>获取或设置 EntityContainer 名称，该名称标识包含实体的实体容器。</summary>
      <returns>EntityContainer 名称，该名称标识包含实体的实体容器。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityKeyValues">
      <summary>获取或设置标识实体的键值。</summary>
      <returns>标识实体的键值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityNotValidKey">
      <summary>获取单一 <see cref="T:System.Data.Entity.Core.EntityKey" />，其标识因失败的 TREAT 操作产生的实体。</summary>
      <returns>标识因失败的 TREAT 操作产生的实体的单一 <see cref="T:System.Data.Entity.Core.EntityKey" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntitySetName">
      <summary>获取或设置 EntitySet 名称，该名称标识包含实体的实体集。</summary>
      <returns>EntitySet 名称，用于标识包含实体的实体集。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Data.Entity.Core.EntityKey)">
      <summary>指示此实例是否与给定的键相等的值。</summary>
      <returns>如果此实例与给定的键相等，则为 true；否则为 false。</returns>
      <param name="other">要与此实例进行比较的键。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Object)">
      <summary>指示此实例是否与给定的键相等的值。</summary>
      <returns>如果此实例与给定的键相等，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的键。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.GetEntitySet(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>从给定的元数据工作区按实体容器名称和实体集名称获取此实体键的实体集。</summary>
      <returns>给定工作区中此实体键的实体集。</returns>
      <param name="metadataWorkspace">要在其中查找实体集的工作区。</param>
      <exception cref="T:System.ArgumentException">在工作区中找不到该实体集。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.GetHashCode">
      <summary>返回基于值的哈希代码，以便允许在哈希表中使用 EntityKey。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的哈希值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.IsTemporary">
      <summary>获取一个值，该值指示此键是否为临时键。</summary>
      <returns>如果此键是临时键，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.NoEntitySetKey">
      <summary>获取用来标识只读实体的单一 <see cref="T:System.Data.Entity.Core.EntityKey" />。</summary>
      <returns>用来标识只读实体的单一 <see cref="T:System.Data.Entity.Core.EntityKey" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>在反序列化此 <see cref="T:System.Data.Entity.Core.EntityKey" /> 后调用。</summary>
      <param name="context">序列化上下文。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
      <summary>在反序列化此 <see cref="T:System.Data.Entity.Core.EntityKey" /> 后调用。</summary>
      <param name="context">序列化上下文。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.op_Equality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
      <summary>指示两个键是否相等的值。</summary>
      <returns>如果两个键相等，则为 true；否则为 false。</returns>
      <param name="key1">要比较的键。</param>
      <param name="key2">要比较的键。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.op_Inequality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
      <summary>指示两个键是否不相等的值。</summary>
      <returns>如果两个键不相等，则为 true；否则为 false。</returns>
      <param name="key1">要比较的键。</param>
      <param name="key2">要比较的键。</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityKeyMember">
      <summary>与作为 EntityKey 的一部分的键有关的信息。键成员包含键名称和值。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor">
      <summary>创建空的 EntityKeyMember。此构造函数由序列化过程使用。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor(System.String,System.Object)">
      <summary>     使用指定的键名称和值创建一个新的 EntityKeyMember。</summary>
      <param name="keyName"> 键名称</param>
      <param name="keyValue"> 键值</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKeyMember.Key">
      <summary>     键名称</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.ToString">
      <summary>     返回 EntityKeyMember 的字符串表示形式</summary>
      <returns> EntityKeyMember 的字符串表示形式 </returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKeyMember.Value">
      <summary>     键值</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntitySqlException">
      <summary>表示一个 eSQL Query 编译异常；可能导致引发此异常的异常条件的类别主要是：1) 语法错误：在查询文本分析期间和在某一给定查询与 eSQL 形式语法不符时引发；2) 语义错误：在 eSQL 语言的语义规则未满足时（例如元数据或架构信息等不准确或未提供、类型验证错误、作用域规则冲突、未定义变量的用户等）引发。有关更多信息，请参见 eSQL 语言规范。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor">
      <summary>使用一般性错误消息初始化 <see cref="T:System.Data.Entity.Core.EntitySqlException" /> 的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String)">
      <summary>使用给定的消息初始化 <see cref="T:System.Data.Entity.Core.EntitySqlException" /> 的新实例。</summary>
      <param name="message">错误消息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String,System.Exception)">
      <summary>使用给定的消息和 innerException 实例初始化 <see cref="T:System.Data.Entity.Core.EntitySqlException" /> 的新实例。</summary>
      <param name="message">错误消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.Column">
      <summary>获取发生错误的大致列号。</summary>
      <returns>发生错误的大致列号。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorContext">
      <summary>获取发生错误的大致上下文（如果有）。</summary>
      <returns>发生错误的大致上下文（如果有）。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorDescription">
      <summary>获取解释未接受查询或空 String.Empty 的原因的错误说明</summary>
      <returns>解释未接受查询或空 String.Empty 的原因的错误说明。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.Line">
      <summary>获取发生错误的大致行号</summary>
      <returns>发生错误的大致行号。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.IExtendedDataRecord">
      <summary>提供支持结构化类型和丰富元数据信息的 DataRecord 接口。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo">
      <summary>获取描述记录内容的 DataRecordInfo 属性。</summary>
      <returns>描述记录内容的 DataRecordInfo 属性。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataReader(System.Int32)">
      <summary>以 DbDataReader 对象的形式返回嵌套的读取器。</summary>
      <returns>作为 DbDataReader 对象的嵌套读取器。</returns>
      <param name="i">列的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataRecord(System.Int32)">
      <summary>使用指定的索引获取一个 DbDataRecord 对象。</summary>
      <returns>DbDataRecord 对象。</returns>
      <param name="i">行的索引。</param>
    </member>
    <member name="T:System.Data.Entity.Core.InvalidCommandTreeException">
      <summary>     引发来指示命令目录树无效。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor">
      <summary>     使用默认消息构造一个新的 InvalidCommandTreeException。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String)">
      <summary>     使用指定的消息构造一个新的 InvalidCommandTreeException。</summary>
      <param name="message"> 异常消息</param>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String,System.Exception)">
      <summary>     使用指定的消息和内部异常构造一个新的 InvalidCommandTreeException。</summary>
      <param name="message"> 异常消息。</param>
      <param name="innerException"> 导致此 InvalidCommandTreeException 的异常。 </param>
    </member>
    <member name="T:System.Data.Entity.Core.MappingException">
      <summary>映射异常类。请注意，此类具有状态 - 因此，即使您更改其内部，也可能是重大更改</summary>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor">
      <summary>     具有默认消息的构造函数</summary>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String)">
      <summary>     默认构造函数</summary>
      <param name="message"> 本地化的错误消息</param>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String,System.Exception)">
      <summary>     构造函数</summary>
      <param name="message"> 本地化的错误消息</param>
      <param name="innerException"> 内部异常 </param>
    </member>
    <member name="T:System.Data.Entity.Core.MetadataException">
      <summary>     元数据异常类</summary>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor">
      <summary>     具有默认消息的构造函数</summary>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String)">
      <summary>     默认构造函数</summary>
      <param name="message"> 本地化的错误消息</param>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String,System.Exception)">
      <summary>     构造函数</summary>
      <param name="message"> 本地化的错误消息</param>
      <param name="innerException"> 内部异常 </param>
    </member>
    <member name="T:System.Data.Entity.Core.ObjectNotFoundException">
      <summary>在存储区中找不到请求的对象时将引发此异常。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" /> 类的新实例。</summary>
      <param name="message">本地化的错误消息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" /> 类的新实例以及初始化获取消息和内部异常的构造函数的新实例。</summary>
      <param name="message">本地化的错误消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="T:System.Data.Entity.Core.OptimisticConcurrencyException">
      <summary>在更新操作与并发约束冲突时将会引发此异常。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> 类的新实例。</summary>
      <param name="message">与异常关联的消息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> 类的新实例。</summary>
      <param name="message">与异常关联的消息。</param>
      <param name="innerException">导致异常的错误。</param>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> 类的新实例。</summary>
      <param name="message">消息。</param>
      <param name="innerException">导致异常的错误。</param>
      <param name="stateEntries">状态项。</param>
    </member>
    <member name="T:System.Data.Entity.Core.PropertyConstraintException">
      <summary>表示属性约束异常类。请注意，此类具有状态 - 因此，即使您更改其内部，也可能是重大更改。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> 类的新实例。</summary>
      <param name="message">本地化的错误消息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.Exception)">
      <summary>使用提供的消息和内部异常初始化 <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> 类的新实例</summary>
      <param name="message">本地化的错误消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> 类的新实例。</summary>
      <param name="message">本地化的错误消息。</param>
      <param name="propertyName">属性名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> 类的新实例。</summary>
      <param name="message">本地化的错误消息。</param>
      <param name="propertyName">属性名称。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="P:System.Data.Entity.Core.PropertyConstraintException.PropertyName">
      <summary>获取违反了约束的属性的名称。</summary>
      <returns>违反了约束的属性的名称。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.ProviderIncompatibleException">
      <summary>在存储提供程序表现出的行为与实体客户端提供程序不兼容时引发的异常。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> 类的新实例。</summary>
      <param name="message">描述此异常的错误消息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和内部异常初始化 <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> 类的新实例。</summary>
      <param name="message">描述此异常的错误消息。</param>
      <param name="innerException">造成当前异常的内部异常。</param>
    </member>
    <member name="T:System.Data.Entity.Core.UpdateException">
      <summary>在将更改保存到存储区期间引发的异常无法更新。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Data.Entity.Core.UpdateException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化数据初始化 <see cref="T:System.Data.Entity.Core.UpdateException" /> 类的新实例。</summary>
      <param name="info">包含有关异常的序列化信息的对象。</param>
      <param name="context">有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String)">
      <summary>初始化带有错误消息的 <see cref="T:System.Data.Entity.Core.UpdateException" /> 类的新实例。</summary>
      <param name="message">描述此异常的错误消息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception)">
      <summary>初始化带有错误消息和内部异常的 <see cref="T:System.Data.Entity.Core.UpdateException" /> 类的新实例。</summary>
      <param name="message">描述此异常的错误消息。</param>
      <param name="innerException">造成当前异常的内部异常。</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
      <summary>初始化带有错误消息、内部异常和状态条目的 <see cref="T:System.Data.Entity.Core.UpdateException" /> 类的新实例。</summary>
      <param name="message">描述此异常的错误消息。</param>
      <param name="innerException">造成当前异常的内部异常。</param>
      <param name="stateEntries">错误中暗含的状态条目。</param>
    </member>
    <member name="P:System.Data.Entity.Core.UpdateException.StateEntries">
      <summary>获取错误中暗含的状态条目。</summary>
      <returns>错误中暗含的状态条目。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DataRecordInfo">
      <summary>提供一个简单方法以便访问类型信息和列信息的 DataRecordInfo 类。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DataRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember})">
      <summary>使用数据字段的可枚举集合初始化一个特定类型的新 <see cref="T:System.Data.Common.DbDataRecord" /> 对象。</summary>
      <param name="metadata">此对象表示的类型的元数据，由 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 提供。</param>
      <param name="memberInfo">表示列信息的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" /> 对象的可枚举集合。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.FieldMetadata">
      <summary>获取此 <see cref="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo" /> 对象的 <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.RecordType">
      <summary>获取此对象的类型信息作为 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbCommandDefinition">
      <summary>表示准备好的命令定义，可以缓存和重复使用以便避免重新准备命令。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor(System.Data.Common.DbCommand,System.Func{System.Data.Common.DbCommand,System.Data.Common.DbCommand})">
      <summary>使用提供的 <see cref="T:System.Data.Common.DbCommand" /> 初始化 <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" /> 类的新实例。</summary>
      <param name="prototype">提供的 <see cref="T:System.Data.Common.DbCommand" />。</param>
      <param name="cloneMethod">用于克隆 <see cref="T:System.Data.Common.DbCommand" /> 的方法</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.CreateCommand">
      <summary>创建和返回可执行的 DbCommand 对象。</summary>
      <returns>用于数据库的命令。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbProviderManifest">
      <summary>所有 CLR 类型的元数据接口</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.DbProviderManifest" /> 类的新实例。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.CollationFacetName">
      <summary>排序规则方面的名称</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinition">
      <summary>要传递给 GetInformation 以便获取 ConceptualSchemaDefinition 的值</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3">
      <summary>要传递给 GetInformation 以便获取 ConceptualSchemaDefinitionVersion3 的值</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.DefaultValueFacetName">
      <summary>DefaultValue 方面的名称</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.EscapeLikeArgument(System.String)">
      <summary>提供程序编写人员应重写此方法，以返回带有已转义的通配符和转义符的参数。仅当 SupportsEscapingLikeArgument 返回 true 时才使用此方法。</summary>
      <returns>带有已转义的通配符和转义符的参数。</returns>
      <param name="argument">要转义的参数。</param>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.FixedLengthFacetName">
      <summary>FixedLength 方面的名称</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetDbInformation(System.String)">
      <summary>在派生类中重写时，此方法返回特定于提供程序的信息。</summary>
      <returns>表示基础数据存储目录的映射的 XmlReader 对象。</returns>
      <param name="informationType">要返回的信息的类型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetEdmType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>在派生类中重写时，此方法将指定的存储类型以及该类型的一组方面映射到 EDM 类型。</summary>
      <returns>描述 EDM 类型以及该类型的一组方面的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 实例。</returns>
      <param name="storeType">TypeUsage 实例，它描述要映射到 EDM 类型的存储类型以及该类型的一组方面。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>返回特定类型的 FacetDescription 对象。</summary>
      <returns>用于指定的 EDM 类型的 FacetDescription 对象。</returns>
      <param name="edmType">要返回方面描述的 EDM 类型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetInformation(System.String)">
      <summary>获取特定于提供程序的信息。</summary>
      <returns>特定于提供程序的信息。</returns>
      <param name="informationType">要返回的信息的类型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreFunctions">
      <summary>在派生类中重写时，返回提供程序清单支持的 EDM 函数的集合。</summary>
      <returns>EDM 函数的集合。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>在派生类中重写时，此方法将指定的 EDM 类型以及该类型的一组方面映射到存储类型。</summary>
      <returns>TypeUsage 实例，它描述存储类型以及该类型的一组方面。</returns>
      <param name="edmType">TypeUsage 实例，它描述要映射到存储类型的 EDM 类型以及该类型的一组方面。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreTypes">
      <summary>在派生类中重写时，返回数据源支持的一组基元类型。</summary>
      <returns>数据源支持的一组类型。</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.IsStrictFacetName">
      <summary>IsStrict 方面的名称</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.MaxLengthFacetName">
      <summary>MaxLength 方面的名称</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbProviderManifest.NamespaceName">
      <summary>获取此提供程序清单使用的命名空间。</summary>
      <returns>此提供程序清单使用的命名空间。</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.NullableFacetName">
      <summary>Nullable 方面的名称</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.PrecisionFacetName">
      <summary>Precision 方面的名称</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ScaleFacetName">
      <summary>Scale 方面的名称</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.SridFacetName">
      <summary>SRID 方面的名称</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinition">
      <summary>要传递给 GetInformation 以便获取 StoreSchemaDefinition 的值</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinitionVersion3">
      <summary>要传递给 GetInformation 以便获取 StoreSchemaDefinitionVersion3 的值</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMapping">
      <summary>要传递给 GetInformation 以便获取 StoreSchemaMapping 的值</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMappingVersion3">
      <summary>要传递给 GetInformation 以便获取 StoreSchemaMappingVersion3 的值</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)">
      <summary>指示提供程序是否支持在 Like 表达式中使用转义字符串作为模式。</summary>
      <returns>如果此提供程序支持在 Like 表达式中使用转义字符串作为模式，则返回 true；否则返回 false。</returns>
      <param name="escapeCharacter">如果提供程序支持转义，则为要用作转义符的字符。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsInExpression">
      <summary>返回一个布尔值，该布尔值指定提供程序是否可处理包含 DbInExpression 的实例的表达式目录树。默认实现返回 false 以保证向后兼容性。派生类可以重写此方法。</summary>
      <returns>false</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.UnicodeFacetName">
      <summary>Unicode 方面的名称</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbProviderServices">
      <summary>用于生成命令定义的工厂；使用该对象的类型作为提供程序工厂上 IServiceProvider.GetService 方法的参数；</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>添加一个 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />，它将用于在使用应用程序配置文件中的某一项或通过 <see cref="T:System.Data.Entity.DbConfiguration" /> 中基于代码的注册将某派生类型注册为 EF 提供程序时解析附加的默认提供程序服务。</summary>
      <param name="resolver">要添加的解析程序。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CloneDbCommand(System.Data.Common.DbCommand)">
      <summary>请参见问题 2390 - 在 DbCommand 上克隆 DesignTimeVisible 属性可能导致死锁。因此此处允许重写子类。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> 的克隆版本</returns>
      <param name="fromDbCommand">要克隆的 <see cref="T:System.Data.Common.DbCommand" /> 对象</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbCommand)">
      <summary>基于原型命令创建默认的 DbCommandDefinition 对象。此方法旨在使提供程序编写者从命令生成默认命令定义。注意：这将克隆原型</summary>
      <returns>可执行的命令定义对象</returns>
      <param name="prototype">原型命令</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>若给定命令目录树，创建命令定义对象。</summary>
      <returns>可执行的命令定义对象</returns>
      <param name="commandTree">语句的命令目录树</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>从指定的清单和命令目录树创建命令定义。</summary>
      <returns>已创建的命令定义。</returns>
      <param name="providerManifest">清单。</param>
      <param name="commandTree">命令目录树。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>创建一个由连接指示的数据库并且基于 storeItemCollection 的内容创建架构对象（表、主键、外键）。</summary>
      <param name="connection">与需要创建并且用 storeItemCollection 参数指示的存储对象进行填充的不存在的数据库的连接。</param>
      <param name="commandTimeout">创建数据库所需的任何命令的执行超时。</param>
      <param name="storeItemCollection">创建脚本所应基于的所有存储项的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>基于 StoreItemCollection 参数的内容并针对与提供程序清单标记相对应的数据库版本，生成可创建架构对象（表、主键、外键）的数据定义语言 (DDL) 脚本。</summary>
      <returns>基于 StoreItemCollection 参数的内容并针对与提供程序清单标记相对应的数据库版本创建架构对象的 DDL 脚本。</returns>
      <param name="providerManifestToken">标识目标版本的提供程序清单标记。</param>
      <param name="storeItemCollection">数据库的结构。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDbCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>为指定的提供程序清单和命令目录树创建命令定义对象。</summary>
      <returns>可执行的命令定义对象。</returns>
      <param name="providerManifest">以前从存储提供程序检索的提供程序清单。</param>
      <param name="commandTree">语句的命令目录树。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>返回一个值，该值指示服务器上是否存在给定数据库。</summary>
      <returns>如果提供程序仅基于连接就可推导数据库，则为 true。</returns>
      <param name="connection">与通过此方法检查其是否存在的数据库的连接。</param>
      <param name="commandTimeout">确定数据库是否存在所需的任何命令的执行超时。</param>
      <param name="storeItemCollection">模型中所有存储项的集合。该参数不再用于确定数据库是否存在。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})">
      <summary>返回一个值，该值指示服务器上是否存在给定数据库。</summary>
      <returns>如果提供程序仅基于连接就可推导数据库，则为 true。</returns>
      <param name="connection">与通过此方法检查其是否存在的数据库的连接。</param>
      <param name="commandTimeout">确定数据库是否存在所需的任何命令的执行超时。</param>
      <param name="storeItemCollection">模型中所有存储项的集合。该参数不再用于确定数据库是否存在。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>创建一个由连接指示的数据库并且基于 StoreItemCollection 的内容创建架构对象（表、主键、外键）。</summary>
      <param name="connection">与需要创建并且用 storeItemCollection 参数指示的存储对象进行填充的不存在的数据库的连接。</param>
      <param name="commandTimeout">创建数据库所需的任何命令的执行超时。</param>
      <param name="storeItemCollection">创建脚本所应基于的所有存储项的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>基于 StoreItemCollection 参数的内容并针对与提供程序清单标记相对应的数据库版本，生成可创建架构对象（表、主键、外键）的数据定义语言 (DDL) 脚本。</summary>
      <returns>基于 StoreItemCollection 参数的内容并针对与提供程序清单标记相对应的数据库版本创建架构对象的 DDL 脚本。</returns>
      <param name="providerManifestToken">标识目标版本的提供程序清单标记。</param>
      <param name="storeItemCollection">数据库的结构。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>返回一个值，该值指示服务器上是否存在给定数据库。</summary>
      <returns>如果提供程序仅基于连接就可推导数据库，则为 true。</returns>
      <param name="connection">与通过此方法检查其是否存在的数据库的连接。</param>
      <param name="commandTimeout">确定数据库是否存在所需的任何命令的执行超时。</param>
      <param name="storeItemCollection">模型中所有存储项的集合。该参数不再用于确定数据库是否存在。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})">
      <summary>返回一个值，该值指示服务器上是否存在给定数据库。</summary>
      <returns>如果提供程序仅基于连接就可推导数据库，则为 true。</returns>
      <param name="connection">与通过此方法检查其是否存在的数据库的连接。</param>
      <param name="commandTimeout">确定数据库是否存在所需的任何命令的执行超时。</param>
      <param name="storeItemCollection">模型中所有存储项的集合。该参数不再用于确定数据库是否存在。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>删除指定的数据库。</summary>
      <param name="connection">到某个需要删除的现有数据库的连接。</param>
      <param name="commandTimeout">删除数据库所需的任何命令的执行超时。</param>
      <param name="storeItemCollection">模型中所有存储项的集合。该参数不再用于删除数据库。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbGetSpatialServices(System.String)">
      <summary>为 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> 获取空间服务。</summary>
      <returns>空间服务。</returns>
      <param name="manifestToken">与提供程序清单关联的标记信息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>删除指定的数据库。</summary>
      <param name="connection">到某个需要删除的现有数据库的连接。</param>
      <param name="commandTimeout">删除数据库所需的任何命令的执行超时。</param>
      <param name="storeItemCollection">模型中所有存储项的集合。该参数不再用于删除数据库。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.ExpandDataDirectory(System.String)">
      <summary>如果给定路径以 |DataDirectory| 开头则展开该路径中的 |DataDirectory| 并且返回扩展的路径；如果给定路径未以 |DataDirectory| 开头，则返回给定字符串。</summary>
      <returns>展开的路径。</returns>
      <param name="path">要展开的路径。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetConceptualSchemaDefinition(System.String)">
      <summary>返回表示 CSDL 说明的 XML 读取器</summary>
      <returns>表示 CSDL 说明的 XmlReader</returns>
      <param name="csdlName">CSDL 说明的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifest(System.String)">
      <summary>在派生类中重写时，返回派生自 DbProviderManifest 的类的实例。</summary>
      <returns>表示提供程序清单的 DbProviderManifest 对象。</returns>
      <param name="manifestToken">与提供程序清单关联的标记信息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>返回给定连接的提供程序清单标记。</summary>
      <returns>指定连接的提供程序清单标记。</returns>
      <param name="connection">从中查找清单标记的连接。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>为 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> 获取空间数据读取器。</summary>
      <returns>空间数据读取器。</returns>
      <param name="fromReader">空间数据来自于的读取器。</param>
      <param name="manifestToken">与提供程序清单关联的标记信息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection)">
      <summary>获取将用于执行使用指定连接的方法的 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> 的一个新实例。</returns>
      <param name="connection">数据库连接</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection,System.String)">
      <summary>获取将用于执行使用指定连接的方法的 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />。此重载应由派生类用于与包装提供程序兼容。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> 的一个新实例。</returns>
      <param name="connection">数据库连接</param>
      <param name="providerInvariantName">提供程序固定名</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderFactory(System.Data.Common.DbConnection)">
      <summary>基于指定的 DbConnection 检索 DbProviderFactory。</summary>
      <returns>检索到的 DbProviderFactory。</returns>
      <param name="connection">要使用的连接。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifest(System.String)">
      <summary>使用指定的版本信息返回提供程序清单。</summary>
      <returns>使用指定版本信息的提供程序清单。</returns>
      <param name="manifestToken">与提供程序清单关联的标记信息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>返回给定连接的提供程序清单标记。</summary>
      <returns>提供程序清单标记。</returns>
      <param name="connection">到提供程序的连接。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderServices(System.Data.Common.DbConnection)">
      <summary>返回给定连接的提供程序。</summary>
      <returns>基于指定连接实例化的 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />。</returns>
      <param name="connection">到提供程序的连接。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetService(System.Type,System.Object)">
      <summary>在使用应用程序配置文件中的某一项或通过 <see cref="T:System.Data.Entity.DbConfiguration" /> 中基于代码的注册将某一派生类型注册为 EF 提供程序时调用，用于解析附加的默认提供程序服务。此类中此方法的实现使用通过 AddDependencyResolver 方法添加的解析程序来解析依赖项。</summary>
      <returns>给定类型的实例；如果无法解析服务，则为 null。</returns>
      <param name="type">要解析的服务的类型。</param>
      <param name="key">为解析服务提供附加信息的可选键。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetServices(System.Type,System.Object)">
      <summary>在使用应用程序配置文件中的某一项或通过 <see cref="T:System.Data.Entity.DbConfiguration" /> 中基于代码的注册将某一派生类型注册为 EF 提供程序时调用，用于解析附加的默认提供程序服务。此类中此方法的实现使用通过 AddDependencyResolver 方法添加的解析程序来解析依赖项。</summary>
      <returns>满足给定类型和键的所有注册的服务；如果没有，则为空枚举。</returns>
      <param name="type">要解析的服务的类型。</param>
      <param name="key">为解析服务提供附加信息的可选键。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>为 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> 获取空间数据读取器。</summary>
      <returns>空间数据读取器。</returns>
      <param name="fromReader">空间数据来自于的读取器。</param>
      <param name="manifestToken">与提供程序清单关联的清单标记。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>为 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> 获取空间服务。</summary>
      <returns>空间服务。</returns>
      <param name="key">有关将对其使用空间服务的数据库的信息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.String)">
      <summary>为 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> 获取空间服务。</summary>
      <returns>空间服务。</returns>
      <param name="manifestToken">与提供程序清单关联的标记信息。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.RegisterInfoMessageHandler(System.Data.Common.DbConnection,System.Action{System.String})">
      <summary>注册一个处理程序，以处理来自数据库提供程序的非错误消息。</summary>
      <param name="connection">用来接收信息的连接。</param>
      <param name="handler">用于处理消息的处理程序。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.SetDbParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>为给定的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 设置参数值和适当的方面。</summary>
      <param name="parameter">参数。</param>
      <param name="parameterType">参数的类型。</param>
      <param name="value">参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.SetParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>为给定的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 设置参数值和适当的方面。</summary>
      <param name="parameter">参数。</param>
      <param name="parameterType">参数的类型。</param>
      <param name="value">参数的值。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest">
      <summary>接受 XmlReader 的 ProviderManifest 的专用化</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest" /> 类的新实例。</summary>
      <param name="reader">一个 <see cref="T:System.Xml.XmlReader" /> 对象，该对象提供对提供程序清单文件中的 XML 数据的访问。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>返回指定的 Entity Data Model (EDM) 类型的方面说明列表。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含指定的 EDM 类型的方面说明列表。</returns>
      <param name="edmType">要为其检索方面说明的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreFunctions">
      <summary>返回提供程序支持的函数的列表。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含提供程序支持的函数的列表。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreTypes">
      <summary>返回存储提供程序支持的基元类型的列表。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含存储提供程序支持的基元类型的列表。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.NamespaceName">
      <summary>获取此提供程序清单支持的命名空间名称。</summary>
      <returns>此提供程序清单支持的命名空间名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType">
      <summary>获取指定的存储类型名称的最佳映射等效 Entity Data Model (EDM) 类型。</summary>
      <returns>指定的存储类型名称的最佳映射等效 EDM 类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType">
      <summary>获取指定的存储类型名称的最佳映射等效存储基元类型。</summary>
      <returns>指定的存储类型名称的最佳映射等效存储基元类型。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntityRecordInfo">
      <summary>提供一个简单方法以便访问类型信息和列信息的 EntityRecordInfo 类。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntityRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Metadata.Edm.EntitySet)">
      <summary>使用数据字段的可枚举集合、特定键和实体集信息初始化特定实体类型的 <see cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" /> 类的新实例。</summary>
      <param name="metadata">实体的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />，由该 <see cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" /> 对象描述的 <see cref="T:System.Data.Common.DbDataRecord" /> 表示。</param>
      <param name="memberInfo">表示列信息的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" /> 对象的可枚举集合。</param>
      <param name="entityKey">实体的键。</param>
      <param name="entitySet">该实体所属的实体集。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntityRecordInfo.EntityKey">
      <summary>获取实体的 <see cref="T:System.Data.Entity.Core.EntityKey" />。</summary>
      <returns>实体的键。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.FieldMetadata">
      <summary>在列序号和 MemberMetadata 之间提供关联的 FieldMetadata 类。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.FieldMetadata.#ctor(System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>使用指定的序号值和字段类型初始化新的 <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> 对象。</summary>
      <param name="ordinal">用于指定元数据位置的整数。</param>
      <param name="fieldType">字段类型。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.FieldMetadata.FieldType">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> 对象的字段类型。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> 对象的字段类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.FieldMetadata.Ordinal">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> 对象的序号。</summary>
      <returns>表示序号值的整数。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor">
      <summary>表示实现要派生自的 IExpressionVisitor 接口的类型的抽象基类型。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>实现命令目录树的访问者模式。</summary>
      <param name="commandTree">命令目录树。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitDeleteCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree)">
      <summary>实现删除命令目录树的访问者模式。</summary>
      <param name="deleteTree">删除命令目录树。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitFunctionCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree)">
      <summary>实现函数命令目录树的访问者模式。</summary>
      <param name="functionTree">函数命令目录树。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitInsertCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree)">
      <summary>实现插入命令目录树的访问者模式。</summary>
      <param name="insertTree">插入命令目录树。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClause(System.Data.Entity.Core.Common.CommandTrees.DbModificationClause)">
      <summary>实现修改子句的访问者模式。</summary>
      <param name="modificationClause">修改子句。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClauses(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause})">
      <summary>实现修改子句的集合的访问者模式。</summary>
      <param name="modificationClauses">修改子句。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree)">
      <summary>实现查询命令目录树的访问者模式。</summary>
      <param name="queryTree">查询命令目录树。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitSetClause(System.Data.Entity.Core.Common.CommandTrees.DbSetClause)">
      <summary>实现 set 子句的访问者模式。</summary>
      <param name="setClause">set 子句。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitUpdateCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree)">
      <summary>实现更新命令目录树的访问者模式。</summary>
      <param name="updateTree">更新命令目录树。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor">
      <summary>实现要派生自的 IExpressionVisitor 接口的类型的抽象基类型。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbAndExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbApplyExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbArithmeticExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbCaseExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbCastExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbComparisonExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbConstantExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbCrossJoinExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DeRefExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbDistinctExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbElementExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbEntityRefExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbExceptExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>遇到其他无法识别的类型的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 时进行调用。</summary>
      <param name="expression">表达式</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
      <exception cref="T:System.NotSupportedException">如果调用此方法，则始终引发，因为它指示 <paramref name="expression" /> 属于不支持的类型</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbFilterExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbFunctionExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbInExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbIntersectExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbIsEmptyExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbIsNullExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbIsOfExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbJoinExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbLambdaExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbLikeExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbLimitExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbNewInstanceExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbNotExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbNullExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbOfTypeExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbOrExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbParameterReferenceExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbProjectExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbPropertyExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbQuantifierExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbRefExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbRefKeyExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbRelationshipNavigationExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbScanExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbSkipExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbSortExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbTreatExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbUnionAllExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbVariableReferenceExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
      <summary>用于访问指定的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> 的方便的方法。</summary>
      <param name="aggregate">要访问的聚合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="aggregate" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregateList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbAggregate})">
      <summary>用于访问列表中的每个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" />（如果列表是非 null 的）的方便的方法。</summary>
      <param name="aggregates">要访问的聚合的列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="aggregates" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitBinaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression)">
      <summary>用于访问指定的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression" /> 的方便的方法。</summary>
      <param name="expression">要访问的 DbBinaryExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>用于访问指定的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 的方便的方法（如果非 null）。</summary>
      <param name="expression">要访问的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>用于在访问了 DbExpressionBinding 后进行后处理的方便的方法。</summary>
      <param name="binding">以前访问的 DbExpressionBinding。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>用于访问指定的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> 的方便的方法。</summary>
      <param name="binding">要访问的 DbExpressionBinding。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>用于访问给定列表中的每个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />（如果列表是非 null 的）的方便的方法。</summary>
      <param name="expressionList">要访问的表达式的列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expressionList" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingMid(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>指示 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> 的分组键已访问并且现在将要访问聚合的方便的方法。</summary>
      <param name="binding">DbGroupByExpression 的 DbGroupExpressionBinding</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>用于在访问了 DbGroupExpressionBinding 后进行后处理的方便的方法。</summary>
      <param name="binding">以前访问的 DbGroupExpressionBinding。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>用于访问指定的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> 的方便的方法。</summary>
      <param name="binding">要访问的 DbGroupExpressionBinding。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPost(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>用于在访问了 DbLambda 后进行后处理的方便的方法。</summary>
      <param name="lambda">以前访问的 DbLambda。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPre(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>指示现在将要访问的 Lambda <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> 的正文的方便方法。</summary>
      <param name="lambda">将要访问的 DbLambda。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> 为 null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitUnaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression)">
      <summary>用于访问指定的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression" /> 的方便的方法。</summary>
      <param name="expression">要访问的 DbUnaryExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate">
      <summary>聚合是伪表达式。聚合在外观上与表达式相似，但其可以出现的位置有严格的限制 - 只能出现在 group-by 表达式的聚合子句中。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.Arguments">
      <summary>     获取定义要聚合的参数的表达式列表。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.ResultType">
      <summary>     获取此聚合的结果类型。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression">
      <summary>     表示两个 Boolean 参数之间的逻辑与运算。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression">
      <summary>     表示一个应用运算，它是对指定输入集中的每个元素的指定 functor 调用。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Apply">
      <summary>     获取 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />，它指定对输入集中的每个元素调用的 functor。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Input">
      <summary>     获取用于指定输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression">
      <summary>     表示应用于两个数值参数的算术运算（加法、减法、乘法、除法、取模或求反）。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Arguments">
      <summary>     获取用于定义当前参数的表达式列表。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression">
      <summary>     接受两个表达式操作数的表达式的抽象基类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Left">
      <summary>     获取定义左边参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Right">
      <summary>     获取定义右边参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression">
      <summary>     表示 Case When...Then...Else 逻辑运算。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Else">
      <summary>     获取此 DbCaseExpression 的 Else 子句。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Then">
      <summary>     获取此 DbCaseExpression 的 Then 子句。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.When">
      <summary>     获取此 DbCaseExpression 的 When 子句。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression">
      <summary>     表示应用于多态参数的强制转换运算。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree">
      <summary>表示删除、查询、插入和更新 DbCommandTree 类型的抽象基类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.CommandTreeKind">
      <summary>获取此命令目录树的类型。</summary>
      <returns>此命令目录树的类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.DataSpace">
      <summary>获取此命令目录树所使用的元数据必须驻留于其中的数据空间。</summary>
      <returns>此命令目录树所使用的元数据必须驻留于其中的数据空间。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.MetadataWorkspace">
      <summary>获取此命令目录树使用的元数据工作区。</summary>
      <returns>此命令目录树使用的元数据工作区。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.Parameters">
      <summary>获取在此命令目录树中可以引用的每个参数的名称和相应类型。</summary>
      <returns>在此命令目录树中可以引用的每个参数的名称和相应类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.ToString">
      <summary>返回 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> 的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> 的字符串表示形式。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.UseDatabaseNullSemantics">
      <summary>获取命令目录树是否使用数据库的 null 语义。</summary>
      <returns>命令目录树使用数据库的 null 语义。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind">
      <summary>描述不同的数据库命令。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Delete">
      <summary>指定删除命令。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Function">
      <summary>指定函数命令。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Insert">
      <summary>指定插入命令。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Query">
      <summary>指定查询命令。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Update">
      <summary>指定更新命令。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression">
      <summary>     表示应用于两个参数的比较运算（相等、大于、大于或等于、小于、小于或等于、不相等）。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression">
      <summary>     表示常量值。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Value">
      <summary>     获取常量值。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression">
      <summary>     表示给定集合参数之间的无条件联接运算</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Inputs">
      <summary>     获取一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> 列表，该列表提供要联接的输入集。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree">
      <summary>表示用一个规范命令目录树代表的单行删除操作。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree" /> 类的新实例。</summary>
      <param name="metadata">元数据工作区。</param>
      <param name="dataSpace">数据空间。</param>
      <param name="target">数据库表达式绑定。</param>
      <param name="predicate">数据库表达式。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.CommandTreeKind">
      <summary>获取此命令目录树的类型。</summary>
      <returns>此命令目录树的类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.Predicate">
      <summary>获取一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它指定用于确定目标集合中应删除的成员的谓词。</summary>
      <returns>用于确定目标集合中应删除的成员的谓词。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression">
      <summary>     使用指定的 Ref 表示给定实体的检索。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression">
      <summary>     表示从指定的集操作数中删除重复的元素。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression">
      <summary>表示指定的集操作数到单一实例的转换。如果该集为空，则转换将返回 null；否则，该转换将返回集中的元素之一。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression">
      <summary>     表示作为 Ref 对指定实体的引用的检索。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression">
      <summary>     表示左右操作数之间的集减法运算。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>表示所有表达式的基类型。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>实现不生成结果值的表达式访问者的访问者模式接口。</summary>
      <param name="visitor">DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>实现生成特定类型的结果值的表达式访问者的访问者模式接口方法。</summary>
      <returns>
        <paramref name="TResultType" /> 的一个实例。</returns>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> 生成的结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前 DbExpression 实例。</summary>
      <returns>如果指定的对象等于当前 DbExpression 实例，则为 true；否则为 false。</returns>
      <param name="obj">要与当前 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 进行比较的对象。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ExpressionKind">
      <summary>获取表达式的类型，类型指示该表达式的运算。</summary>
      <returns>表达式的类型，指示该表达式的运算。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBinary(System.Byte[])">
      <summary>创建表示指定的二进制值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，可以为 null。</summary>
      <returns>表示指定的二进制值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value"> 返回的表达式应基于的二进制值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBoolean(System.Nullable{System.Boolean})">
      <summary>创建表示指定的（可以为 null）布尔值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示指定的布尔值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">返回的表达式应基于的布尔值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromByte(System.Nullable{System.Byte})">
      <summary>创建表示指定的（可以为 null）字节值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示指定的字节值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">返回的表达式应基于的字节值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTime(System.Nullable{System.DateTime})">
      <summary>创建表示指定的（可以为 null）<see cref="T:System.DateTime" /> 值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示指定的 DateTime 值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">返回的表达式应基于的 DateTime 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTimeOffset(System.Nullable{System.DateTimeOffset})">
      <summary>创建表示指定（可为空值的） <see cref="T:System.DateTimeOffset" /> 值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示指定的 DateTimeOffset 值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">返回的表达式应基于的 DateTimeOffset 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDecimal(System.Nullable{System.Decimal})">
      <summary>创建表示指定的（可以为 null）十进制值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示指定的十进制值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">返回的表达式应基于的十进制值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDouble(System.Nullable{System.Double})">
      <summary>创建表示指定的（可以为 null）双精度值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示指定的双精度值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">返回的表达式应基于的双精度值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeography(System.Data.Entity.Spatial.DbGeography)">
      <summary>创建表示指定的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 值的 <see cref="T:System.Data.Entity.Spatial.DbGeography" />，可以为 null。</summary>
      <returns>表示指定的 DbGeography 值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">返回的表达式应基于的 DbGeography 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeometry(System.Data.Entity.Spatial.DbGeometry)">
      <summary>创建表示指定的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 值的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" />，可以为 null。</summary>
      <returns>表示指定的 DbGeometry 值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">返回的表达式应基于的 DbGeometry 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGuid(System.Nullable{System.Guid})">
      <summary>创建表示指定（可为空值的) <see cref="T:System.Guid" /> 值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示指定的 Guid 值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">返回的表达式应基于的 Guid 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt16(System.Nullable{System.Int16})">
      <summary>创建表示指定的（可以为 null）Int16 值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示指定的 Int16 值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">返回的表达式应基于的 Int16 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt32(System.Nullable{System.Int32})">
      <summary>创建表示指定的（可以为 null）Int32 值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示指定的 Int32 值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">返回的表达式应基于的 Int32 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt64(System.Nullable{System.Int64})">
      <summary>创建表示指定的（可以为 null）Int64 值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示指定的 Int64 值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">返回的表达式应基于的 Int64 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromSingle(System.Nullable{System.Single})">
      <summary>创建表示指定的（可以为 null）单精度值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示指定的单精度值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">返回的表达式应基于的单精度值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromString(System.String)">
      <summary>创建表示指定的字符串值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示指定的字符串值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">返回的表达式应基于的字符串值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.GetHashCode">
      <summary>用作此类型的哈希函数。</summary>
      <returns>返回当前表达式的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Byte[])~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>将一个 8 位无符号整数数组转换成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示转换后的 8 位无符号整数数组。</returns>
      <param name="value">一个 8 位无符号整数数组。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeography)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>将一个 DbGeography 对象转换成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示转换后的 DbGeography 对象的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">DbGeography 对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeometry)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>将一个 DBGeometry 对象转换成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示转换后的 DbGeography 对象的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">DbGeometry 对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Boolean})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null 的布尔对象转换为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示转换后的可以为 null 的布尔对象的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">可以为 null 的布尔对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Byte})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null 的 8 位无符号整数转换成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示转换后的 8 位无符号整数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">可以为 null 的 8 位无符号整数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTime})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null 的 <see cref="T:System.DateTime" /> 对象转换成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个表示 <see cref="T:System.DateTime" /> 对象的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">可为 null 的 <see cref="T:System.DateTime" /> 对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTimeOffset})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null 的 <see cref="T:System.DateTimeOffset" /> 对象转换成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个表示可以为 null 的 <see cref="T:System.DateTime" /> 的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">可为 null 的 <see cref="T:System.DateTime" /> 对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Decimal})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null 的十进制对象转换为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示可以为 null 的十进制对象的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">可以为 null 的十进制对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Double})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null 的双精度对象转换为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示可以为 null 的双精度对象的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">可以为 null 的双精度对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Guid})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null 的 Guid 对象转换为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示可为 null 的 <see cref="T:System.Guid" /> 对象。</returns>
      <param name="value">可为 null 的 <see cref="T:System.Guid" /> 对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int16})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null 的 16 位无符号整数转换成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示可为 null 的 16 位无符号整数。</returns>
      <param name="value">可以为 null 的 16 位无符号整数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int32})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null 的 32 位无符号整数转换成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示可为 null 的 32 位无符号整数。</returns>
      <param name="value">可以为 null 的 32 位无符号整数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int64})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null 的 64 位无符号整数转换成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，表示可为 null 的 64 位无符号整数。</returns>
      <param name="value">可以为 null 的 64 位无符号整数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Single})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>将一个可以为 null 的单精度浮点数字转换成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个表示单精度浮点数字的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">单精度浮点数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.String)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>转换 Unicode 字符 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 的有序集合。</summary>
      <returns>表示 Unicode 字符的有序集合的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">Unicode 字符的有序集合。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ResultType">
      <summary>获取表达式的结果类型的类型元数据。</summary>
      <returns>表达式的结果类型的类型元数据。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding">
      <summary>描述表达式的绑定。在概念上与 C# 中的 foreach 循环类似。DbExpression 属性定义要循环访问的集合，而 Var 属性提供一个方式以便在迭代过程中引用该集合的当前元素。DbExpressionBinding 用于描述关系表达式（例如 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />、<see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> 和 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />）的集参数。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Expression">
      <summary>     获取用于定义输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Variable">
      <summary>     获取引用元素变量的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableName">
      <summary>     获取指定给元素变量的名称。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableType">
      <summary>     获取元素变量的类型元数据。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind">
      <summary>     描述表达式的不同“种类”（类）</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.All">
      <summary>     全部为 True。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.And">
      <summary>     逻辑与。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Any">
      <summary>     任何项均为 True。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Case">
      <summary>     条件 Case 语句。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Cast">
      <summary>     多态类型转换。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Constant">
      <summary>     一个常量值。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossApply">
      <summary>     Cross Apply</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossJoin">
      <summary>     交叉联接</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Deref">
      <summary>     引用。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Distinct">
      <summary>     重复删除。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Divide">
      <summary>     除法。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Element">
      <summary>     集到单一转换。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.EntityRef">
      <summary>     实体引用值检索。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Equals">
      <summary>     相等</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Except">
      <summary>     Set 减法</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Filter">
      <summary>     限制。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.FullOuterJoin">
      <summary>     完全外部联接</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Function">
      <summary>     独立函数的调用</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThan">
      <summary>     大于。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThanOrEquals">
      <summary>     大于或等于。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GroupBy">
      <summary>     分组。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.In">
      <summary>     在其中。 </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.InnerJoin">
      <summary>     内部联接</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Intersect">
      <summary>     交集。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsEmpty">
      <summary>     空集确定。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsNull">
      <summary>     Null 确定。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOf">
      <summary>     类型比较（指定的类型或子类型）。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOfOnly">
      <summary>     类型比较（仅限指定的类型）。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Lambda">
      <summary>     lambda 函数的应用</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LeftOuterJoin">
      <summary>     左外部联接</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThan">
      <summary>     小于。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThanOrEquals">
      <summary>     小于或等于。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Like">
      <summary>     字符串比较。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Limit">
      <summary>     结果计数限制 (TOP n)。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Minus">
      <summary>     减法。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Modulo">
      <summary>     取模。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Multiply">
      <summary>     乘法。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NewInstance">
      <summary>     实例、行和集构造。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Not">
      <summary>     逻辑非。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NotEquals">
      <summary>     不相等。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Null">
      <summary>     Null。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType">
      <summary>     按类型（或子类型）的集成员。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly">
      <summary>     按（确切）类型的集成员。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Or">
      <summary>     逻辑或。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OuterApply">
      <summary>     Outer Apply。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.ParameterReference">
      <summary>     对参数的引用。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Plus">
      <summary>     加法。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Project">
      <summary>     投影。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Property">
      <summary>     静态或实例属性检索。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Ref">
      <summary>     引用。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RefKey">
      <summary>     引用键值检索。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RelationshipNavigation">
      <summary>     （组合或关联）关系的导航。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Scan">
      <summary>     实体集或关系集扫描。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Skip">
      <summary>     跳过有序集合中的元素。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Sort">
      <summary>     排序。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Treat">
      <summary>     类型转换。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnaryMinus">
      <summary>     求反。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnionAll">
      <summary>     并集（包含重复项）。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.VariableReference">
      <summary>     对变量的引用。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder">
      <summary>确保某一给定表达式目录树中的所有元数据都来自指定的元数据工作区，并且可能在需要时将表达式重新绑定和重新生成到适当的替代元数据。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder" /> 类的新实例。</summary>
      <param name="targetWorkspace">目标工作区。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>实现检索实例属性的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>实现对实体集的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="entitySet">实体集。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>实现函数的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="functionMetadata">函数元数据。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>实现类型的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="type">类型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>实现类型用法的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="type">类型。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor">
      <summary>应由不返回结果值的访问者实现的表达式访问者模式抽象基类。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>DbAndExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbAndExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>DbApplyExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbApplyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>DbArithmeticExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbArithmeticExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>DbCaseExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbCaseExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>DbCastExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbCastExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>DbComparisonExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbComparisonExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>DbConstantExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbConstantExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>DbCrossJoinExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbCrossJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>DbDerefExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbDerefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>DbDistinctExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbDistinctExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>DbElementExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbElementExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>DbEntityRefExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbEntityRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>DbExceptExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbExceptExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>遇到其他无法识别的类型的表达式时进行调用。</summary>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>DbFilterExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbFilterExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>DbFunctionExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbFunctionExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>DbGroupByExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbGroupByExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>DbInExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbInExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>DbIntersectExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbIntersectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>DbIsEmptyExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbIsEmptyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>DbIsNullExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbIsNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>DbIsOfExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbIsOfExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>DbJoinExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>DbLambdaExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbLambdaExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>DbLikeExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbLikeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>DbLimitExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbLimitExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>DbNewInstanceExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbNewInstanceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>DbNotExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbNotExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>DbNullExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>DbOfTypeExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbOfTypeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>DbOrExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbOrExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>DbParameterReferenceExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbParameterReferenceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>DbProjectExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbProjectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>DbPropertyExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbPropertyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>DbQuantifierExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbQuantifierExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>DbRefExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>DbRefKeyExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbRefKeyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>DbRelationshipNavigationExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbRelationshipNavigationExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>DbScanExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbScanExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>DbSkipExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbSkipExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>DbSortExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbSortExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>DbTreatExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbTreatExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>DbUnionAllExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbUnionAllExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>DbVariableReferenceExpression 的访问者模式方法。</summary>
      <param name="expression">正在访问的 DbVariableReferenceExpression。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1">
      <summary>     应由返回特定类型的结果值的访问者实现的表达式访问者模式抽象基类。</summary>
      <typeparam name="TResultType"> 访问者生成的结果值的类型。     </typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>     DbAndExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbAndExpression。 </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>     DbApplyExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbApplyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>     DbArithmeticExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbArithmeticExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>     DbCaseExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbCaseExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>     DbCastExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbCastExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>     DbComparisonExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbComparisonExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>     DbConstantExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbConstantExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>     DbCrossJoinExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbCrossJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>     DbDerefExpression 的访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbDerefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>     DbDistinctExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbDistinctExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>     DbElementExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbElementExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>     DbEntityRefExpression 的访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbEntityRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>     DbExceptExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbExceptExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>     遇到其他无法识别的类型的表达式时进行调用。</summary>
      <param name="expression"> 表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>     DbFilterExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbFilterExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>     DbFunctionExpression 的访问者模式方法</summary>
      <param name="expression"> 正在访问的 DbFunctionExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>     DbGroupByExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbGroupByExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>     DbInExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbInExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>     DbIntersectExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbIntersectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>     DbIsEmptyExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbIsEmptyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>     DbIsNullExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbIsNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>     DbIsOfExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbIsOfExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>     DbJoinExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>     DbLambdaExpression 的访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbLambdaExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>     DbLikeExpression 的访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbLikeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>     DbLimitExpression 的访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbLimitExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>     DbNewInstanceExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbNewInstanceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>     DbNotExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbNotExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>     DbNullExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>     DbOfTypeExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbOfTypeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>     DbOrExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbOrExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>     DbParameterReferenceExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbParameterReferenceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>     DbProjectExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbProjectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>     DbPropertyExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbPropertyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>     DbQuantifierExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbQuantifierExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>     DbRefExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>     DbRefKeyExpression 的访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbRefKeyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>     DbRelationshipNavigationExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbRelationshipNavigationExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>     DbScanExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbScanExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>     DbSkipExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbSkipExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>     DbSortExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbSortExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>     DbTreatExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbTreatExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>     DbUnionAllExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbUnionAllExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>     DbVariableReferenceExpression 的类型化访问者模式方法。</summary>
      <param name="expression"> 正在访问的 DbVariableReferenceExpression。 </param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression">
      <summary>     表示一个谓词，该谓词应用于某一输入集以便生成满足它的一组元素。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Input">
      <summary>     获取用于指定输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Predicate">
      <summary>     获取指定用于筛选输入集的谓词的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate">
      <summary>     对应于聚合函数的调用的聚合类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Distinct">
      <summary>     获取一个值，该值指示是否以不同风格应用聚合函数</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Function">
      <summary>     获取指定要调用的聚合函数的方法元数据。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree">
      <summary>表示以规范命令树表示的函数调用。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage}})">
      <summary>构造一个新的 DbFunctionCommandTree，它使用指定的元数据工作区、数据空间和函数元数据。</summary>
      <param name="metadata">命令目录树应使用的元数据工作区。</param>
      <param name="dataSpace">在此命令目录树中使用的表达式中的元数据必须属于的逻辑“空间”。</param>
      <param name="edmFunction">要调用的 EDM 函数。</param>
      <param name="resultType">函数的结果类型。</param>
      <param name="parameters">与要调用的函数关联的参数。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.CommandTreeKind">
      <summary>获取或设置命令目录树类型。</summary>
      <returns>命令目录树类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction">
      <summary>获取表示要调用的函数的 <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction" />。</summary>
      <returns>表示要调用的函数的 <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.ResultType">
      <summary>获取函数的结果类型；当前被约束为 RowTypes 的集合。与典型的 RowType 实例不同，仅指示名称/类型不是参数顺序。</summary>
      <returns>函数的结果类型。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression">
      <summary>     表示对函数的调用。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Arguments">
      <summary>     获取 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 列表，该列表提供函数的参数。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Function">
      <summary>     获取要调用的函数的元数据。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate">
      <summary>表示构成组的元素的集合。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression">
      <summary>     表示一个分组运算，分组运算是根据指定的键表达式将输入集中的元素分组，后接指定聚合函数的应用。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Aggregates">
      <summary>     获取 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> 列表，该列表提供要应用的聚合函数。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Input">
      <summary>     获取 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />，它指定输入集，并提供对集元素和组元素变量的访问。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Keys">
      <summary>     获取 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 列表，该列表提供分组键。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding">
      <summary>定义输入集到 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> 的绑定。除了 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> 的属性之外，DbGroupExpressionBinding 还通过 &lt;seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable" /&gt; 变量引用提供对组元素的访问，并且通过 &lt;seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate" /&gt; 属性提供对组聚合的访问。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Expression">
      <summary>     获取用于定义输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate">
      <summary>     获取 DbGroupAggregate，它表示组的元素集合。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable">
      <summary>     获取引用组元素变量的 DbVariableReferenceExpression。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableName">
      <summary>     获取指定给组元素变量的名称。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableType">
      <summary>     获取组元素变量的类型元数据。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Variable">
      <summary>     获取引用元素变量的 DbVariableReferenceExpression。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableName">
      <summary>     获取指定给元素变量的名称。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableType">
      <summary>     获取元素变量的类型元数据。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression">
      <summary>     表示一个布尔表达式，该布尔表达式测试某一指定的项是否与列表中的任何元素匹配。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Item">
      <summary>     获取指定要匹配的项的 DbExpression。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.List">
      <summary>     获取要针对某一匹配进行测试的 DbExpression 的列表。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree">
      <summary>表示用一个规范命令目录树代表的单行插入操作。如果设置了 <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning" /> 属性，此命令将返回一个读取器；否则，它将返回一个指示受影响的行数的标量值。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree" /> 类的新实例。</summary>
      <param name="metadata">元数据。</param>
      <param name="dataSpace">数据空间。</param>
      <param name="target">数据库目标。</param>
      <param name="setClauses">确定插入的行中的列值的 Set 子句。</param>
      <param name="returning">指定要基于修改的行返回的结果投影的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.CommandTreeKind">
      <summary>获取命令目录树类型。</summary>
      <returns>命令目录树类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning">
      <summary>获取一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它指定要基于修改的行返回的结果投影。如果为 null，则指示不应从此命令返回任何结果。</summary>
      <returns>指定要基于修改的行返回的结果投影的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses">
      <summary>获取确定插入的行中的列值的 Set 子句。</summary>
      <returns>确定插入的行中的列值的 Set 子句。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression">
      <summary>     表示左右操作数之间的交集运算。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression">
      <summary>     表示应用于单集参数的空集确定。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression">
      <summary>     表示应用于单个参数的 null 确定。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression">
      <summary>     表示单个参数针对指定类型的类型比较。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.OfType">
      <summary>     获取参数的类型元数据将与其进行比较的类型元数据。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression">
      <summary>     表示在指定的联接条件下，在给定的集合参数之间进行的内部、左外部或完全外部联接运算。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.JoinCondition">
      <summary>     获取定义要应用的联接条件的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Left">
      <summary>     获取提供左输入的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Right">
      <summary>     获取提供右输入的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression">
      <summary>     表示 Lambda 函数的应用。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Arguments">
      <summary>     获取一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 列表，该列表提供 Lambda 函数应该应用于的参数。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Lambda">
      <summary>     获取表示此表达式应用的 Lambda 函数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression">
      <summary>     表示针对指定的模式与可选的转义字符串进行的字符串比较</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Argument">
      <summary>     获取一个表达式，它指定要针对给定模式进行比较的字符串</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Escape">
      <summary>     获取一个表达式，它提供用于比较的可选的转义字符串</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Pattern">
      <summary>     获取一个表达式，它指定比较给定字符串时所针对的模式</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression">
      <summary>     表示将参数集合中的元素数限制为指定的限值。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Argument">
      <summary>     获取指定输入集合的表达式。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Limit">
      <summary>     获取指定从输入集合中返回的元素数限制的表达式。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.WithTies">
      <summary>     获取限制操作是否将包括等值结果，在存在等值时，这可以生成比该限值指定的结果更多的结果。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationClause">
      <summary>在插入或更新修改操作中指定单个子句，请参见 <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses" /> 和 <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses" /></summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree">
      <summary>     表示以规范命令目录树表示的 DML 操作</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree.Target">
      <summary>     获取为 DML 操作指定目标表的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression">
      <summary>     表示给定类型（包括集类型和记录类型）的新实例的构造。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Arguments">
      <summary>     获取一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 列表，该列表可为新实例提供属性/列值或集元素。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression">
      <summary>     表示对单个 Boolean 参数执行的逻辑非运算。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression">
      <summary>     表示 null。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression">
      <summary>     表示从给定的集参数中检索属于指定类型的元素。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.OfType">
      <summary>     获取应从集参数中检索的元素类型的元数据。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression">
      <summary>     表示两个 Boolean 参数的逻辑或。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression">
      <summary>     表示对在包含此表达式的命令目录树上声明的参数的引用。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.ParameterName">
      <summary>     获取所引用的参数的名称。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression">
      <summary>     表示给定值集在指定输入集上的投影。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Input">
      <summary>     获取用于指定输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Projection">
      <summary>     获取定义投影的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression">
      <summary>提供用于检索实例属性的方法和属性。此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>为不生成结果值的表达式实现访问者模式。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>为生成特定类型的结果值的表达式实现访问者模式。</summary>
      <returns>一个由 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> 生成的特定类型结果值。</returns>
      <param name="visitor">生成特定类型结果值的类型化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。</param>
      <typeparam name="TResultType">访问者生成的结果类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor 为 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Instance">
      <summary>获取 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它定义应从中检索属性的实例。</summary>
      <returns>用于定义应从中检索属性的实例的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)~System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}">
      <summary>允许隐式强制转换为 <see cref="T:System.Collections.Generic.KeyValuePair`2" />。</summary>
      <returns>转换后的值。</returns>
      <param name="value">要转换的表达式。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Property">
      <summary>获取要检索的属性的属性元数据。</summary>
      <returns>要检索的属性的属性元数据。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.ToKeyValuePair">
      <summary>基于此属性表达式创建一个新的键/值对。</summary>
      <returns>具有从 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> 派生的键和值的新键/值对。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression">
      <summary>     表示对指定输入集中的元素执行的指定种类（Any、All）的限定符操作。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Input">
      <summary>     获取用于指定输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Predicate">
      <summary>     获取应为输入集中的每个元素计算的 Boolean 谓词。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree">
      <summary>表示一项以规范命令目录树形式表示的查询操作。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>初始化使用指定元数据工作区的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> 类的新实例。</summary>
      <param name="metadata">命令目录树应使用的元数据工作区。</param>
      <param name="dataSpace">在此命令目录树中使用的表达式中的元数据必须属于的逻辑“空间”。</param>
      <param name="query">一个定义查询逻辑的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadata" /> 或 <paramref name="query" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataSpace" /> 不表示有效数据空间。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean)">
      <summary>初始化使用指定元数据工作区的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> 类的新实例。</summary>
      <param name="metadata">命令目录树应使用的元数据工作区。</param>
      <param name="dataSpace">在此命令目录树中使用的表达式中的元数据必须属于的逻辑“空间”。</param>
      <param name="query">一个定义查询逻辑的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="validate">若为 true，则验证树；否则为 false。在设置为 false 时，将禁用对目录树的验证。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadata" /> 或 <paramref name="query" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataSpace" /> 不表示有效数据空间。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> 类的新实例。</summary>
      <param name="metadata">命令目录树应使用的元数据工作区。</param>
      <param name="dataSpace">在此命令目录树中使用的表达式中的元数据必须属于的逻辑“空间”。</param>
      <param name="query">一个定义查询逻辑的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="validate">若为 true，则验证树；否则为 false。在设置为 false 时，将禁用对目录树的验证。</param>
      <param name="useDatabaseNullSemantics">若为 true，则使用数据库 null 语义；否则为 false。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.CommandTreeKind">
      <summary>获取此命令目录树的类型。</summary>
      <returns>此命令目录树的类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query">
      <summary>获取定义查询逻辑的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>一个定义查询逻辑的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression">
      <summary>     表示对某一给定实体集中的特定实例的（强类型）引用。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.EntitySet">
      <summary>     获取包含该实例的实体集的元数据。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression">
      <summary>     表示将指定引用的键值作为行检索。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression">
      <summary>     表示给定“源”角色、“目标”角色和源角色的实例的情况下关系的导航（组合或关联）</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom">
      <summary>     获取要从其开始导航的关系端的元数据</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateTo">
      <summary>     获取要导航到的关系端的元数据</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigationSource">
      <summary>     获取 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它指定应从其开始导航的“源”关系端的实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Relationship">
      <summary>     获取要导航的关系的元数据</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression">
      <summary>     表示某一给定实体集的所有元素的“扫描”。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Target">
      <summary>     获取所引用的实体集或关系集的元数据。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause">
      <summary>     指定用于设置属性值的修改操作中的子句。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Property">
      <summary>     获取一个指定应更新的属性的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Value">
      <summary>     获取一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它指定用于更新属性的新值。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression">
      <summary>     表示应用在给定排序键中描述的顺序后输入集的指定数目的元素的跳过操作。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Count">
      <summary>     获取指定要在输入集合中跳过的元素数的表达式。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Input">
      <summary>     获取用于指定输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.SortOrder">
      <summary>     获取一个定义排序顺序的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> 列表。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause">
      <summary>     指定可在 DbSortExpression 中用作排序顺序的一部分的排序关键字。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Ascending">
      <summary>     获取一个布尔值，该值指示此排序关键字是否按升序排序。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Collation">
      <summary>     获取一个字符串值，该值指定此排序关键字的排序规则。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Expression">
      <summary>     获取为此排序关键字提供值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression">
      <summary>     表示一项基于给定的排序关键字应用于指定输入集中的元素的排序操作。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Input">
      <summary>     获取用于指定输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.SortOrder">
      <summary>     获取一个定义排序顺序的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> 列表。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression">
      <summary>     表示单个参数向指定类型的类型转换。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression">
      <summary>     接受单个表达式操作数的表达式的抽象基类型</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression.Argument">
      <summary>     获取定义参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression">
      <summary>     表示左右操作数之间的 set 联合（不移除重复项）运算。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree">
      <summary>表示一项以命令目录树形式表示的单行更行操作。此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree" /> 类的新实例。</summary>
      <param name="metadata">将对其运行此命令的模型。</param>
      <param name="dataSpace">数据空间。</param>
      <param name="target">数据操作语言 (DML) 操作的目标表。</param>
      <param name="predicate">一个谓词，用于确定目标集合中应更新的成员。</param>
      <param name="setClauses">定义更新操作的更新 Set 子句列表。</param>
      <param name="returning">一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它指定要基于修改的行返回的结果投影。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.CommandTreeKind">
      <summary>获取此命令目录树的类型。</summary>
      <returns>此命令目录树的类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Predicate">
      <summary>获取一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它指定用于确定目标集合中应更新的成员的谓词。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，指定用于确定目标集合中应更新的成员的谓词。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Returning">
      <summary>获取一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它指定要基于修改的行返回的结果投影。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它指定要基于修改的行返回的结果投影。如果为 null，则指示不应从此命令返回任何结果。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses">
      <summary>获取定义更新操作的更新 Set 子句列表。</summary>
      <returns>定义更新操作的更新 Set 子句列表。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression">
      <summary>     表示对当前处于范围内的某个变量的引用。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     不生成结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> DbExpressionVisitor 的实例。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     生成特定类型的结果值的表达式访问者的访问者模式方法。</summary>
      <param name="visitor"> 生成 TResultType 类型的结果值的类型化 DbExpressionVisitor 的一个实例。</param>
      <typeparam name="TResultType">     visitor 生成的结果类型</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.VariableName">
      <summary>     获取所引用的变量的名称。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor">
      <summary>从给定的根表达式访问表达式目录树的每个元素。如果任何元素发生更改，则目录树将被重新生成回根目录并且返回新的根表达式；否则，返回原始根表达式。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>当使用指定的范围变量进入表达式访问者的范围时表示事件。</summary>
      <param name="scopeVariables">范围变量的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope">
      <summary>退出表达式访问者的范围。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>用表达式访问者的新表达式替换旧表达式。</summary>
      <param name="oldExpression">旧表达式。</param>
      <param name="newExpression">新表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>当重新绑定表达式访问者的变量时表示事件。</summary>
      <param name="fromVarRef">变量的位置。</param>
      <param name="toVarRef">重新绑定的变量的引用。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>实现逻辑与表达式的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbAndExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>为调用指定输入集中每个元素的指定函数实现访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbApplyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>实现应用于数值参数的算术运算的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbArithmeticExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>实现 When、Then 和 Else 子句的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbCaseExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>实现将单个参数转换为指定类型的类型转换的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbCastExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>实现应用于两个参数的比较运算的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbComparisonExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>实现不同类型常量的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbConstantExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>实现给定集合参数之间的无条件联接操作的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbCrossJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>实现基于指定引用检索实体的表达式的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbDerefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>实现从指定的集参数中删除的重复元素的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbDistinctExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>实现指定的集参数到单一实例的转换的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbElementExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>实现从基础实体实例提取引用的表达式的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbEntityRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>实现左操作数和右操作数之间设置的减法运算的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbExceptExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>实现表达式类型所需的基本功能的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>实现应用于筛选输入集的谓语的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbFilterExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>实现调用某个函数的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbFunctionExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>通过运算实现针对某个组的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbGroupByExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>实现 DbInExpression 的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbInExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>实现左操作数和右操作数之间设置的交集运算的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbIntersectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>实现应用于单集参数的空集确定的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbIsEmptyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>实现应用于单个参数的 null 确定的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbIsNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>实现将单个参数与指定类型进行比较的类型比较的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbIsOfExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>实现指定联接条件下给定集合参数之间内部联接、左外部联接或完全外部联接运算的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>实现将 lambda 函数应用于 DbExpression 对象所表示的参数的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbLambdaExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>实现与带有可选转义字符串的指定模式进行字符串比较的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbLikeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>实现将参数集合中的元素数目限制为指定限值的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbLimitExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>实现构建给定类型的新实例（包括集和记录类型）的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbNewInstanceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>实现单个布尔参数的逻辑非运算的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbNotExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>实现对类型化 null 文本的引用的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>实现根据给定集参数检索指定类型的元素的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbOfTypeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>实现两个布尔参数的逻辑或的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbOrExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>实现对包含此表达式的命令目录树中所声明参数的引用的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbParameterReferenceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>实现对指定表达式的给定输入集的投影的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbProjectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>实现检索实例属性的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbPropertyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>实现对指定输入集元素执行的指定类型的限定符运算的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbQuantifierExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>实现对实体集内特定实例的强类型引用的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>实现根据基础引用值检索键值的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbRefKeyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>实现关系导航的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbRelationshipNavigationExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>实现对 Target 属性所指示的实体集或关系集的扫描的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbScanExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>实现 skip 表达式的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbSkipExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>实现可用作排序顺序一部分的排序关键字的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbSortExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>实现应用于多态参数的类型转换运算的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbTreatExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>实现左操作数和右操作数之间设置的并集运算的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbUnionAllExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>实现对当前处于范围内的变量的引用的访问者模式。</summary>
      <returns>实现的访问者。</returns>
      <param name="expression">正在访问的 DbVariableReferenceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
      <summary>实现对聚合的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="aggregate">要访问的聚合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>实现对实体集的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="entitySet">实体集。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>实现表达式的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="expression">表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>实现表达式绑定的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="binding">表达式绑定。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
      <summary>实现表达式绑定列表的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="list">表达式绑定列表。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>实现表达式列表的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="list">表达式列表。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>实现函数的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="functionMetadata">函数元数据。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate(System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate)">
      <summary>实现函数聚合的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="aggregate">聚合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate)">
      <summary>实现组聚合的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="aggregate">聚合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>实现组表达式绑定的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="binding">绑定。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>实现 Lambda 函数的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="lambda">Lambda 函数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause(System.Data.Entity.Core.Common.CommandTrees.DbSortClause)">
      <summary>实现排序子句的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="clause">排序子句。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
      <summary>实现排序顺序的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="sortOrder">排序顺序。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>实现类型的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="type">类型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>实现类型用法的访问者模式。</summary>
      <returns>实现的访问者模式。</returns>
      <param name="type">类型。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder">
      <summary>提供一个用于构造 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 的 API，并且允许该 API 作为针对表达式类型本身的扩展方法来访问。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" />。</summary>
      <returns>具有对给定函数和参数的引用的一个新的函数聚合。该函数聚合的 Distinct 属性将具有值 false。</returns>
      <param name="function">定义聚合运算的函数。</param>
      <param name="argument">要对其计算聚合函数的参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 或 <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 不是聚合函数，或者具有多个实参；或者 <paramref name="argument" /> 的结果类型不相等或不能提升为 <paramref name="function" /> 的形参类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建以不同风格应用的一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" />。</summary>
      <returns>具有对给定函数和参数的引用的一个新的函数聚合。该函数聚合的 Distinct 属性将具有值 true。</returns>
      <param name="function">定义聚合运算的函数。</param>
      <param name="argument">要对其计算聚合函数的参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 或 <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 不是聚合函数，或者具有多个实参；或者 <paramref name="argument" /> 的结果类型不相等或不能提升为 <paramref name="function" /> 的形参类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />，它确定给定的谓词是否适用于输入集的所有元素。</summary>
      <returns>表示 All 运算的一个新的 DbQuantifierExpression。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <param name="predicate">一个方法，它表示要为输入集的每个成员计算的谓词。此方法必须生成一个表达式，该表达式具有提供谓词逻辑的 Boolean 结果类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="predicate" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> 生成的表达式不具有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />，它确定给定的谓词是否适用于输入集的所有元素。</summary>
      <returns>表示 All 运算的一个新的 DbQuantifierExpression。</returns>
      <param name="input">一个指定输入集的表达式绑定。</param>
      <param name="predicate">一个表达式，它表示要针对输入集的每个成员计算的谓词。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> 生成的表达式不具有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" />，它对左边参数和右边参数执行逻辑与运算。</summary>
      <returns>具有指定参数的新 DbAndExpression。</returns>
      <param name="left">指定左边参数的布尔表达式。</param>
      <param name="right">指定右边参数的布尔表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 或 <paramref name="right" /> 不具有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它确定指定的集参数是否非空。</summary>
      <returns>一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />，它使用指定的参数应用于新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />，它确定给定的谓词是否适用于输入集的任何元素。</summary>
      <returns> 表示 Any 运算的一个新的 DbQuantifierExpression。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <param name="predicate">一个方法，它表示要为输入集的每个成员计算的谓词。此方法必须生成一个表达式，该表达式具有提供谓词逻辑的 Boolean 结果类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="predicate" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> 生成的表达式不具有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />，它确定给定的谓词是否适用于输入集的任何元素。</summary>
      <returns>表示 Any 运算的一个新的 DbQuantifierExpression。</returns>
      <param name="input">一个指定输入集的表达式绑定。</param>
      <param name="predicate">一个表达式，它表示要针对输入集的每个成员计算的谓词。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> 不具有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbAggregate,System.String)">
      <summary>以键/值对对象的形式返回指定参数。</summary>
      <returns>键/值对对象。</returns>
      <param name="value">键/值对中的值。</param>
      <param name="alias">键/值对中的键。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>以键/值对对象的形式返回指定参数。</summary>
      <returns>键/值对对象。</returns>
      <param name="value">键/值对中的值。</param>
      <param name="alias">键/值对中的键。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />，它使用生成的变量名称绑定给定的表达式。</summary>
      <returns>具有指定的表达式和生成的变量名称的一个新的表达式绑定。</returns>
      <param name="input">要绑定的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />，它使用指定的变量名称绑定给定的表达式。</summary>
      <returns>具有指定表达式和变量名称的一个新的表达式绑定。</returns>
      <param name="input">要绑定的表达式。</param>
      <param name="varName">应该用于绑定的变量名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="varName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />。</summary>
      <returns>具有指定事例和默认结果的一个新的 DbCaseExpression。</returns>
      <param name="whenExpressions">为每个事例提供条件的表达式的列表。</param>
      <param name="thenExpressions">提供每个事例的结果的表达式列表。</param>
      <param name="elseExpression">定义没有匹配事例时的结果的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="whenExpressions" /> 或 <paramref name="thenExpressions" /> 为 null 或包含 null，或者 <paramref name="elseExpression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="whenExpressions" /> 或 <paramref name="thenExpressions" /> 为空，或者 <paramref name="whenExpressions" /> 包含带有非布尔结果类型的表达式，或者没有适用于 <paramref name="thenExpressions" /> 和 <paramref name="elseExpression" /> 中所有表达式的通用结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" />，它将强制转换运算应用于一个多态参数。</summary>
      <returns>具有指定的参数和目标类型的一个新的 DbCastExpression。</returns>
      <param name="argument">应对其应用强制转换的参数。</param>
      <param name="toType">指定要强制转换为的类型的类型元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="toType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>使用给定的常量值创建一个具有指定基元类型的新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />。</summary>
      <returns>具有给定值和 <paramref name="constantType" /> 结果类型的一个新的 DbConstantExpression。</returns>
      <param name="constantType">常量值的类型。</param>
      <param name="value">要表示的常量值。</param>
      <exception cref="T:System.ArgumentNullException">valueconstantType</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是有效常量类型的实例，<paramref name="constantType" /> 不表示基元类型，或者 <paramref name="value" /> 所属的基元类型与 <paramref name="constantType" /> 表示的基元类型不同。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Object)">
      <summary>使用给定的常量值创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />。</summary>
      <returns>具有给定值的一个新的 DbConstantExpression。</returns>
      <param name="value">要表示的常量值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是有效常量类型的实例。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />，它对基于键值对特定实体的引用进行编码。</summary>
      <returns>一个新的 DbRefExpression，它引用在给定实体集中具有指定键值的元素。</returns>
      <param name="entitySet">引用的元素所在的实体集。</param>
      <param name="keyValues">提供键值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 的集合。在数目、类型和顺序上，这些表达式必须匹配引用的实体类型的键属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 为 null，或者 <paramref name="keyValues" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" /> 的计数与 <paramref name="entitySet" /> 的元素类型声明的键成员的计数不符，或者 <paramref name="keyValues" /> 所包含表达式的结果类型与对应的键成员的类型不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />，它对基于键值对特定实体的引用进行编码。</summary>
      <returns>一个新的 DbRefExpression，它引用在给定实体集中具有指定键值的元素。</returns>
      <param name="entitySet">引用的元素所在的实体集。</param>
      <param name="keyValues">提供键值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 的集合。在数目、类型和顺序上，这些表达式必须匹配引用的实体类型的键属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 为 null，或者 <paramref name="keyValues" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" /> 的计数与 <paramref name="entitySet" /> 的元素类型声明的键成员的计数不符，或者 <paramref name="keyValues" /> 所包含表达式的结果类型与对应的键成员的类型不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />，它对基于键值对给定类型的特定实体的引用进行编码。</summary>
      <returns>一个新的 DbRefExpression，它引用在给定实体集中具有指定键值的元素。</returns>
      <param name="entitySet">引用的元素所在的实体集。</param>
      <param name="entityType">引用的实体的特定类型。此实体类型必须与实体集的元素类型处于同一层次结构。</param>
      <param name="keyValues">提供键值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 的集合。在数目、类型和顺序上，这些表达式必须匹配引用的实体类型的键属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 或 <paramref name="entityType" /> 为 null，或者 <paramref name="keyValues" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> 不是来自 <paramref name="entitySet" /> 的元素类型所在的层次结构（子类型、超类型或相同类型）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" /> 的计数与 <paramref name="entitySet" /> 的元素类型声明的键成员的计数不符，或者 <paramref name="keyValues" /> 所包含表达式的结果类型与对应的键成员的类型不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />，它对基于键值对给定类型的特定实体的引用进行编码。</summary>
      <returns>一个新的 DbRefExpression，它引用在给定实体集中具有指定键值的元素。</returns>
      <param name="entitySet">引用的元素所在的实体集。</param>
      <param name="entityType">引用的实体的特定类型。此实体类型必须与实体集的元素类型处于同一层次结构。</param>
      <param name="keyValues">提供键值的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 的集合。在数目、类型和顺序上，这些表达式必须匹配引用的实体类型的键属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 或 <paramref name="entityType" /> 为 null，或者 <paramref name="keyValues" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> 不是来自 <paramref name="entitySet" /> 的元素类型所在的类型层次结构（子类型、超类型或相同类型）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" /> 的计数与 <paramref name="entitySet" /> 的元素类型声明的键成员的计数不符，或者 <paramref name="keyValues" /> 所包含表达式的结果类型与对应的键成员的类型不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />，它为给定输入集的每个元素计算一次给定的 <paramref name="apply" /> 表达式，并生成具有相应 input 和 apply 列的行集合。不包括 <paramref name="apply" /> 计算结果为空集的行。</summary>
      <returns>具有指定的输入和应用绑定以及 CrossApply 的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的一个新的 DbApplyExpression。</returns>
      <param name="source">指定输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="apply">一个方法，它指定要对输入集的每个成员计算一次的逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="apply" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="apply" /> 的结果包含为 Null 的名称或表达式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="apply" /> 的结果包含在表达式绑定中无效的名称或表达式。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />，它为给定输入集的每个元素计算一次给定的 <paramref name="apply" /> 表达式，并生成具有相应 input 和 apply 列的行集合。不包括 <paramref name="apply" /> 计算结果为空集的行。</summary>
      <returns>具有指定的输入和应用绑定以及 CrossApply 的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的一个新的 DbApplyExpression。</returns>
      <param name="input">指定输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="apply">一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />，它指定要对输入集的每个成员计算一次的逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="apply" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" />，它无条件联接输入表达式绑定列表指定的集。</summary>
      <returns>具有 CrossJoin 的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的一个新的 DbCrossJoinExpression，它表示输入集的无条件联接。</returns>
      <param name="inputs">指定输入集的表达式绑定列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputs" /> 包含的表达式绑定数目少于 2。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" />，它根据给定的引用表达式检索特定实体。</summary>
      <returns>检索指定实体的一个新的 DbDerefExpression。</returns>
      <param name="argument">一个提供引用的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。此表达式必须具有引用类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有引用结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" />，它从给定的集参数中删除重复项。</summary>
      <returns>一个新的 DbDistinctExpression，它表示应用于指定集参数的不同运算。</returns>
      <param name="argument">定义要对其执行不同运算的集的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有引用结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />，它用左边参数除以右边参数。</summary>
      <returns>表示除法运算的一个新的 DbArithmeticExpression。</returns>
      <param name="left">一个指定左边参数的表达式。</param>
      <param name="right">一个指定右边参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用数值结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" />，它将一个集转换为单一实例。</summary>
      <returns>一个 DbElementExpression，它表示从集参数到单一实例的转换。</returns>
      <param name="argument">一个指定输入集的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有引用结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />，它比较左边参数和右边参数是否相等。</summary>
      <returns>表示相等比较的一个新的 DbComparisonExpression。</returns>
      <param name="left">一个指定左边参数的表达式。</param>
      <param name="right">一个指定右边参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用数值结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" />，它计算从左边集参数中减去右边集参数的结果。</summary>
      <returns>一个新的 DbExceptExpression，它表示从左边参数中减去右边参数之差。</returns>
      <param name="left">一个定义左边集参数的表达式。</param>
      <param name="right">一个定义右边集参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用数值结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它确定指定的集参数是否非空。</summary>
      <returns>一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />，它使用指定的参数应用于新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />。</returns>
      <param name="argument">一个指定输入集的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有集合结果类型。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False">
      <summary>使用布尔值 false 创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />。</summary>
      <returns>带布尔值 false 的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />，它使用指定的谓词筛选给定输入集中的元素。</summary>
      <returns>生成筛选的集的一个新的 DbFilterExpression。</returns>
      <param name="input">一个指定输入集的表达式绑定。</param>
      <param name="predicate">一个表达式，它表示要针对输入集的每个成员计算的谓词。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> 有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />，它按照指定的联接条件联接左边表达式和右边表达式指定的集，并且使用 FullOuterJoin 作为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 为 FullOuterJoin 的新的 DbJoinExpression，它表示基于给定联接条件应用于左边输入集和右边输入集的完全外部联接运算。</returns>
      <param name="left">一个指定左边集参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="right">一个指定右边集参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="joinCondition">一个表示联接条件的方法。此方法必须生成一个具有布尔结果类型的表达式，该表达式提供联接条件的逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 或 <paramref name="right" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="joinCondition" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> 生成的表达式不具有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />，它按照指定的联接条件联接左边表达式绑定和右边表达式绑定指定的集，并且使用 FullOuterJoin 作为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 为 FullOuterJoin 的新的 DbJoinExpression，它表示基于给定联接条件应用于左边输入集和右边输入集的完全外部联接运算。</returns>
      <param name="left">一个指定左边集参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="right">一个指定右边集参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="joinCondition">一个指定联接条件的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> 有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" />，它以结构化形式检索指定实体的引用。</summary>
      <returns>检索对指定实体的引用的一个新的 DbEntityRefExpression。</returns>
      <param name="argument">提供实体的表达式。此表达式必须具有实体结果类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有实体结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" />，它以结构化形式检索指定引用的键值。</summary>
      <returns>检索指定引用的键值的一个新的 DbRefKeyExpression。</returns>
      <param name="argument">提供引用的表达式。此表达式的引用类型必须具有实体元素类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有实体结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />，它确定左边参数是否大于右边参数。</summary>
      <returns>表示大于比较的一个新的 DbComparisonExpression。</returns>
      <param name="left">一个指定左边参数的表达式。</param>
      <param name="right">一个指定右边参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用的可进行顺序比较的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />，它确定左边参数是否大于或等于右边参数。</summary>
      <returns>表示大于或等于比较的一个新的 DbComparisonExpression。</returns>
      <param name="left">一个指定左边参数的表达式。</param>
      <param name="right">一个指定右边参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">left 或 right 为 null。</exception>
      <exception cref="T:System.ArgumentException">left 与 right 之间不存在任何常用的可进行顺序比较的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>对指定参数创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate" />。</summary>
      <returns>一个新的组聚合，它表示按给定参数引用的组的元素。</returns>
      <param name="argument">通过其执行嵌套运算的参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的组表达式绑定，该绑定使用生成的变量名称和组变量名称来绑定给定的表达式。</summary>
      <returns>一个新的组表达式绑定，该绑定具有指定的表达式以及生成的变量名称和组变量名称。</returns>
      <param name="input">要绑定的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String,System.String)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />，它使用指定的变量名称和组变量名称来绑定给定的表达式。</summary>
      <returns>具有指定的表达式、变量名称和组变量名称的一个新的组表达式绑定。</returns>
      <param name="input">要绑定的表达式。</param>
      <param name="varName">应该用于绑定的变量名称。</param>
      <param name="groupVarName">在分组表达式中使用新的组表达式绑定时应该用于引用该组的变量名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="varName" /> 或 <paramref name="groupVarName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbAggregate}})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />，它根据指定的组键对输入集的元素进行分组并应用给定的聚合。</summary>
      <returns>具有指定的输入集、分组键和聚合的一个新的 DbGroupByExpression。</returns>
      <param name="input">指定输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />。</param>
      <param name="keys">定义分组列的字符串表达式对的列表。</param>
      <param name="aggregates">指定要应用的聚合的表达式列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="keys" /> 或 <paramref name="aggregates" /> 为 null，<paramref name="keys" /> 包含为 null 的键列名称或表达式，或者聚合包含为 null 的聚合列名称或 <paramref name="aggregate" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keys" /> 和 <paramref name="aggregates" /> 均为空，或指定了无效或重复的列名称。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.In(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression})">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" />，它将指定表达式的结果与指定列表中常量表达式的结果进行匹配。</summary>
      <returns>如果 DbConstantExpression 列表非空，则为具有指定参数的一个新的 DbInExpression；否则为 false 常量表达式。</returns>
      <param name="expression">要匹配的 DbExpression。</param>
      <param name="list">要针对某一匹配进行测试的 DbConstantExpression 的列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="list" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> 的结果类型与来自 <paramref name="list" /> 的表达式的结果类型不同。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />，它按照指定的联接条件联接左边表达式和右边表达式指定的集，并且使用 InnerJoin 作为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />。</summary>
      <returns>一个 InnerJoin 为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的新的 DbJoinExpression，它表示基于给定联接条件应用于左边输入集和右边输入集的内部联接运算。</returns>
      <param name="left">一个指定左边集参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="right">一个指定右边集参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="joinCondition">一个表示联接条件的方法。此方法必须生成一个具有布尔结果类型的表达式，该表达式提供联接条件的逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 或 <paramref name="right" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="joinCondition" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> 生成的表达式不具有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />，它按照指定的联接条件联接左边表达式和右边表达式指定的集，并且使用 InnerJoin 作为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />。</summary>
      <returns>一个 InnerJoin 为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的新的 DbJoinExpression，它表示基于给定联接条件应用于左边输入集和右边输入集的内部联接运算。</returns>
      <param name="left">一个指定左边集参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="right">一个指定右边集参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="joinCondition">一个指定联接条件的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> 有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" />，它计算左边集参数和右边集参数的交集。</summary>
      <returns>一个新的 DbIntersectExpression，它表示左边参数和右边参数的交集。</returns>
      <param name="left">一个定义左边集参数的表达式。</param>
      <param name="right">一个定义右边集参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 right 为 <paramref name="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />，它表示对给定参数应用指定的 Lambda 函数。</summary>
      <returns>表示 Lambda 函数应用的一个新的 DbLambdaExpression。</returns>
      <param name="lambda">一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> 实例，它表示要应用的 Lambda 函数。</param>
      <param name="arguments">提供参数的表达式列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> 为 null，或者 <paramref name="arguments" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 的计数与 <paramref name="lambda" /> 声明的变量数目不相等，或者 <paramref name="arguments" /> 所包含表达式的结果类型不等于或不可提升为对应的变量类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />，它表示对给定参数应用指定的 Lambda 函数。</summary>
      <returns>表示 Lambda 函数应用的一个新的 DbLambdaExpression。</returns>
      <param name="lambda">一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> 实例，它表示要应用的 Lambda 函数。</param>
      <param name="arguments">提供参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> 为 null，或者 <paramref name="arguments" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 的计数与 <paramref name="lambda" /> 声明的变量数目不相等，或者 <paramref name="arguments" /> 所包含表达式的结果类型不等于或不可提升为对应的变量类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它表示使用给定的参数调用指定的函数。</summary>
      <returns>表示函数调用的一个新的 DbFunctionExpression。</returns>
      <param name="function">要调用的函数的元数据。</param>
      <param name="arguments">为函数提供参数的表达式列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 为 null，或者 <paramref name="arguments" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 的计数与 <paramref name="function" /> 声明的变量数目不相等，或者 <paramref name="arguments" /> 所包含表达式的结果类型不等于或不可提升为对应的变量类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它表示使用给定的参数调用指定的函数。</summary>
      <returns>表示函数调用的一个新的 DbFunctionExpression。</returns>
      <param name="function">要调用的函数的元数据。</param>
      <param name="arguments">为函数提供参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 为 null，或者 <paramref name="arguments" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 的计数与 <paramref name="function" /> 声明的变量数目不相等，或者 <paramref name="arguments" /> 所包含表达式的结果类型不等于或不可提升为对应的变量类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />，它确定指定的集参数是否为空集。</summary>
      <returns>具有指定参数的一个新的 DbIsEmptyExpression。</returns>
      <param name="argument">一个指定输入集的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 没有集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" />，它确定指定的参数是否为 null。</summary>
      <returns>具有指定参数的一个新的 DbIsNullExpression。</returns>
      <param name="argument">指定参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 有一个集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" />，它确定给定的参数是否为指定的类型或子类型。</summary>
      <returns>具有指定的实例和类型以及 DbExpressionKind IsOf 的一个新的 DbIsOfExpression。</returns>
      <param name="argument">指定实例的表达式。</param>
      <param name="type">类型元数据，它指定应与实例的结果类型进行比较的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 与 <paramref name="argument" /> 的结果类型不处于相同的类型层次结构中。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> 表达式，该表达式确定给定的参数是否属于指定的类型且只属于该类型（而非子类型）。</summary>
      <returns>具有指定的实例和类型以及 DbExpressionKind IsOfOnly 的一个新的 DbIsOfExpression。</returns>
      <param name="argument">指定实例的表达式。</param>
      <param name="type">类型元数据，它指定应与实例的结果类型进行比较的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 与 <paramref name="argument" /> 的结果类型不处于相同的类型层次结构中。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />，它基于指定的外部键和内部键之间的相等条件联接外部表达式和内部表达式指定的集，并且使用 InnerJoin 作为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />。</summary>
      <returns>一个 InnerJoin 为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的新的 DbJoinExpression，它表示基于比较外部键值和内部键值是否相等的联接条件应用于左边输入集和右边输入集的内部联接运算。</returns>
      <param name="outer">指定外部集参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="inner">指定内部集参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="outerKey">一个方法，它指定如何从外部集的元素派生外部键值。</param>
      <param name="innerKey">一个方法，它指定如何从内部集的元素派生内部键值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKey" /> 或 <paramref name="innerKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outerKey" /> 或 <paramref name="innerKey" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="outerKey" /> 或 <paramref name="innerKey" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outerKey" /> 或 <paramref name="innerKey" /> 生成的表达式不能比较是否相等。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />，它对外部和内部表达式指定的集投影指定的选择器，基于指定的外部键和内部键之间的相等条件进行联接，并且使用 InnerJoin 作为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />。</summary>
      <returns>一个新的 DbProjectExpression，它使用指定的选择器作为其投影并且使用一个新的 DbJoinExpression 作为其输入。输入 DbJoinExpression 是使用 InnerJoin 的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 创建的，它表示基于比较外部键值和内部键值是否相等的联接条件应用于左边输入集和右边输入集的内部联接运算。</returns>
      <param name="outer">指定外部集参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="inner">指定内部集参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="outerKey">一个方法，它指定如何从外部集的元素派生外部键值。</param>
      <param name="innerKey">一个方法，它指定如何从内部集的元素派生内部键值。</param>
      <param name="selector">一个方法，它指定如何从内部和外部集的元素派生结果集的元素。此方法必须生成与 Join 兼容且可以解析为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 的类型的实例。备注中说明了针对 <paramref name="TSelector" /> 的兼容性要求。</param>
      <typeparam name="TSelector">选择器的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKey" />、<paramref name="innerKey" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="outerKey" /> 或 <paramref name="innerKey" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentNullException">在转换为 DbExpression 之后 <paramref name="selector" /> 的结果为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outerKey" /> 和 <paramref name="innerKey" /> 生成的表达式不能比较是否相等。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="selector" /> 的结果与 SelectMany 不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>使用指定的内联 Lambda 函数实现和形参创建 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />。</summary>
      <returns>一个新的 DbLambda，它描述具有指定主体和形参的内联 Lambda 函数。</returns>
      <param name="body">一个定义 Lambda 函数的逻辑的表达式。</param>
      <param name="variables">一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> 集合，该集合表示 Lambda 函数的形参。这些变量可以有效地在 <paramref name="body" /> 表达式中使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> 为 null 或包含 null，或者 <paramref name="body" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> 包含多个具有相同变量名称的元素。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>使用指定的内联 Lambda 函数实现和形参创建 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />。</summary>
      <returns>一个新的 DbLambda，它描述具有指定主体和形参的内联 Lambda 函数。</returns>
      <param name="body">一个定义 Lambda 函数的逻辑的表达式。</param>
      <param name="variables">一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> 集合，该集合表示 Lambda 函数的形参。这些变量可以有效地在 body 表达式中使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> 为 null 或包含 null，或者 <paramref name="body" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> 包含多个具有相同变量名称的元素。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />，它按照指定的联接条件联接左边表达式和右边表达式指定的集，并且使用 LeftOuterJoin 作为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 为 LeftOuterJoin 的新的 DbJoinExpression，它表示基于给定联接条件应用于左边输入集和右边输入集的左外部联接运算。</returns>
      <param name="left">一个指定左边集参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="right">一个指定右边集参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="joinCondition">一个表示联接条件的方法。此方法必须生成一个具有布尔结果类型的表达式，该表达式提供联接条件的逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 或 <paramref name="right" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="joinCondition" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> 生成的表达式不具有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />，它按照指定的联接条件联接左边表达式绑定和右边表达式绑定指定的集，并且使用 LeftOuterJoin 作为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 为 LeftOuterJoin 的新的 DbJoinExpression，它表示基于给定联接条件应用于左边输入集和右边输入集的左外部联接运算。</returns>
      <param name="left">一个指定左边集参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="right">一个指定右边集参数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="joinCondition">一个指定联接条件的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> 有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />，它确定左边参数是否小于右边参数。</summary>
      <returns>表示小于比较的一个新的 DbComparisonExpression。</returns>
      <param name="left">一个指定左边参数的表达式。</param>
      <param name="right">一个指定右边参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用的可进行顺序比较的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />，它确定左边参数是否小于或等于右边参数。</summary>
      <returns>表示小于或等于比较的一个新的 DbComparisonExpression。</returns>
      <param name="left">一个指定左边参数的表达式。</param>
      <param name="right">一个指定右边参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用的可进行顺序比较的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />，它将指定的输入字符串与给定的模式进行比较。</summary>
      <returns>具有指定输入、模式和 null 转义的一个新的 DbLikeExpression。</returns>
      <param name="argument">指定输入字符串的表达式。</param>
      <param name="pattern">指定模式字符串的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 或 <paramref name="pattern" /> 不具有字符串结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />，它使用可选转义符将指定的输入字符串与给定的模式进行比较。</summary>
      <returns>具有指定的输入、模式和转义符的一个新的 DbLikeExpression。</returns>
      <param name="argument">指定输入字符串的表达式。</param>
      <param name="pattern">指定模式字符串的表达式。</param>
      <param name="escape">指定转义字符串的可选表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />、<paramref name="pattern" /> 或转义符为 <paramref name="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />、<paramref name="pattern" /> 或转义符不具有字符串结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />，它将参数集合中的元素数目限制为指定的计数限值。输出中不包括等值结果。</summary>
      <returns>一个新的 DbLimitExpression，它具有指定参数以及不包括等值结果的计数限值。</returns>
      <param name="argument">一个指定输入集合的表达式。</param>
      <param name="count">指定限值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="count" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 不具有集合结果类型，或者 <paramref name="count" /> 不具有等同于或可提升为 64 位整数类型的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />，它从左边参数中减去右边参数。</summary>
      <returns>表示减法运算的一个新的 DbArithmeticExpression。</returns>
      <param name="left">一个指定左边参数的表达式。</param>
      <param name="right">一个指定右边参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用的可进行顺序比较的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />，它计算左边参数除以右边参数所得的余数。</summary>
      <returns>表示取模运算的一个新的 DbArithmeticExpression。</returns>
      <param name="left">一个指定左边参数的表达式。</param>
      <param name="right">一个指定右边参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用的可进行顺序比较的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />，它用左边参数乘以右边参数。</summary>
      <returns>表示乘法运算的一个新的 DbArithmeticExpression。</returns>
      <param name="left">一个指定左边参数的表达式。</param>
      <param name="right">一个指定右边参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用的可进行顺序比较的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />，它表示组合或关联的导航。</summary>
      <returns>一个新的 DbRelationshipNavigationExpression，它表示从指定的导航源实例的指定关系类型的指定源和目标关系端的导航。</returns>
      <param name="navigateFrom">一个表达式，它指定应作为导航起点的实例。</param>
      <param name="fromEnd">属性的元数据，表示作为导航的源的关系端。</param>
      <param name="toEnd">属性的元数据，表示作为导航的目标的关系端。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fromEnd" />、<paramref name="toEnd" /> 或 <paramref name="NavigateForm" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromEnd" /> 和 <paramref name="toEnd" /> 不是由相同关系类型声明的，或者 <paramref name="navigateFrom" /> 的结果类型与 <paramref name="fromEnd" /> 的属性类型不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.String,System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />，它表示组合或关联的导航。</summary>
      <returns>一个新的 DbRelationshipNavigationExpression，它表示从指定的导航源实例的指定关系类型的指定源和目标关系端的导航。</returns>
      <param name="type">表示关系的关系类型的元数据。</param>
      <param name="fromEndName">关系类型的属性名称，它表示作为导航的源的关系端。</param>
      <param name="toEndName">关系类型的属性名称，它表示作为导航的目标的关系端。</param>
      <param name="navigateFrom">一个表达式，它指定应作为导航起点的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />
        <paramref name="fromEndName" />、<paramref name="toEndName" /> 或 <paramref name="NavigateForm" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 与此命令目录树的元数据工作区不关联，或者 <paramref name="navigateFrom" /> 与其他命令目录树相关联，或者 <paramref name="type" /> 未声明具有 <paramref name="toEndName" /> 或 <paramref name="fromEndName" /> 名称的关系端属性，或者 <paramref name="navigateFrom" /> 具有与 <paramref name="fromEndName" /> 不兼容的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />，它对参数值求反。</summary>
      <returns>表示求反运算的一个新的 DbArithmeticExpression。</returns>
      <param name="argument">指定参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不存在针对 <paramref name="argument" /> 的任何数值结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />。如果类型参数为集合类型，则参数将指定集合的元素。否则，参数将用作新实例中的属性值或列值。</summary>
      <returns>具有指定的类型和参数的一个新的 DbNewInstanceExpression。</returns>
      <param name="instanceType">新实例的类型。</param>
      <param name="arguments">指定新实例的值的表达式，根据实例的类型对其进行解释。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceType" /> 或 <paramref name="arguments" /> 为 null，或者 <paramref name="arguments" /> 包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 为空，或者包含的表达式的结果类型与 <paramref name="instanceType" /> 的要求不匹配（在备注部分中进行了说明）。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />。如果类型参数为集合类型，则参数将指定集合的元素。否则，参数将用作新实例中的属性值或列值。</summary>
      <returns>具有指定的类型和参数的一个新的 DbNewInstanceExpression。</returns>
      <param name="instanceType">新实例的类型。</param>
      <param name="arguments">指定新实例的值的表达式，根据实例的类型对其进行解释。</param>
      <exception cref="T:System.ArgumentNullException">instanceTypeargumentsarguments</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instanceType" /> 或 <paramref name="arguments" /> 为 null，或者 <paramref name="arguments" /> 包含 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />，它构造一个包含指定元素的集合。集合的类型基于元素的通用类型。如果不存在通用元素类型，将引发异常。</summary>
      <returns>具有指定的集合类型和参数的一个新的 DbNewInstanceExpression。</returns>
      <param name="elements">提供集合元素的表达式列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" /> 为空，或包含不存在通用结果类型的表达式。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />，它构造一个包含指定元素的集合。集合的类型基于元素的通用类型。如果不存在通用元素类型，将引发异常。</summary>
      <returns>具有指定的集合类型和参数的一个新的 DbNewInstanceExpression。</returns>
      <param name="elements">提供集合元素的表达式列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> 为 null 或包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" /> 为空，或包含不存在通用结果类型的表达式。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />，它构造指定集合类型的空集合。</summary>
      <returns>具有指定的集合类型和空 Arguments 列表的一个新的 DbNewInstanceExpression。</returns>
      <param name="collectionType">要创建的集合的类型元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collectionType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionType" /> 不是集合类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />，它生成具有指定的命名列和给定值并且指定为表达式的一行。</summary>
      <returns>表示行的构造的一个新的 DbNewInstanceExpression。</returns>
      <param name="columnValues">定义行的结构和值的字符串-DbExpression 键/值对的列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="columnValues" /> 为 null，或者包含具有 null 列名或表达式的元素。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnValues" /> 为空，或包含重复的或无效的列名称。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />，它对给定的参数执行逻辑求反运算。</summary>
      <returns>使用指定参数的一个新的 DbNotExpression。</returns>
      <param name="argument">一个指定参数的布尔表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">参数不具有布尔结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />，它比较左边参数和右边参数是否不相等。</summary>
      <returns>表示不相等比较的一个新的 DbComparisonExpression。</returns>
      <param name="left">一个指定左边参数的表达式。</param>
      <param name="right">一个指定右边参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用的可进行相等比较的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />，它表示类型化的 null 值。</summary>
      <returns>DbNullExpression 的实例。</returns>
      <param name="nullType">null 值的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullType" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />，它生成一个集，该集由属于指定类型的给定输入集的元素构成。</summary>
      <returns>具有指定的集参数和类型以及 <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType" /> 为 ExpressionKind 的一个新的 DbOfTypeExpression。</returns>
      <param name="argument">指定输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="type">要使输入集的元素包括在结果集中，这些元素必须具有的类型的类型元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 不具有集合结果 <paramref name="type" />，或者类型所处于的类型层次结构与 <paramref name="argument" /> 的集合结果类型的元素类型不同。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />，它生成一个集，该集由恰好属于指定类型的给定输入集的元素构成。</summary>
      <returns>具有指定的集参数和类型以及 <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly" /> 为 ExpressionKind 的一个新的 DbOfTypeExpression。</returns>
      <param name="argument">指定输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="type">要使输入集的元素包括在结果集中，这些元素必须严格匹配的类型的类型元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 不具有集合结果 <paramref name="type" />，或者类型所处于的类型层次结构与 <paramref name="argument" /> 的集合结果类型的元素类型不同。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" />，它对左边参数和右边参数执行逻辑或运算。</summary>
      <returns> 具有指定参数的一个新的 DbOrExpression。</returns>
      <param name="left"> 指定左边参数的布尔表达式。</param>
      <param name="right"> 指定右边参数的布尔表达式。</param>
      <exception cref="T:System.ArgumentNullException">leftright</exception>
      <exception cref="T:System.ArgumentException">leftright</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，它使用升序排序顺序和默认排序规则按照指定的排序键对给定的输入集进行排序。</summary>
      <returns>表示排序依据运算的一个新的 DbSortExpression。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <param name="sortKey">一个方法，该方法指定在给定输入集的成员时如何派生排序键表达式。此方法必须生成一个具有可比较顺序的结果类型（该类型提供排序键定义）的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="sortKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="sortKey" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> 生成的表达式不具有可比较顺序的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，它使用升序排序顺序和指定排序规则按照指定的排序键对给定的输入集进行排序。</summary>
      <returns>表示排序依据运算的一个新的 DbSortExpression。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <param name="sortKey">一个方法，该方法指定在给定输入集的成员时如何派生排序键表达式。此方法必须生成一个具有可比较顺序的结果类型（该类型提供排序键定义）的表达式。</param>
      <param name="collation">排序所依据的排序规则</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" /> 或 <paramref name="collation" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="sortKey" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> 生成的表达式不具有可比较顺序的字符串结果类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 为空，或者只包含空白字符。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，它使用降序排序顺序和默认排序规则按照指定的排序键对给定的输入集进行排序。</summary>
      <returns>表示排序依据运算的一个新的 DbSortExpression。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <param name="sortKey">一个方法，该方法指定在给定输入集的成员时如何派生排序键表达式。此方法必须生成一个具有可比较顺序的结果类型（该类型提供排序键定义）的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="sortKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="sortKey" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> 生成的表达式不具有可比较顺序的字符串结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，它使用降序排序顺序和默认排序规则按照指定的排序键对给定的输入集进行排序。</summary>
      <returns>表示排序依据运算的一个新的 DbSortExpression。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <param name="sortKey">一个方法，该方法指定在给定输入集的成员时如何派生排序键表达式。此方法必须生成一个具有可比较顺序的结果类型（该类型提供排序键定义）的表达式。</param>
      <param name="collation">排序所依据的排序规则</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" /> 或 <paramref name="collation" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="sortKey" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> 生成的表达式不具有可比较顺序的字符串结果类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 为空，或者只包含空白字符。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />，它为给定输入集的每个元素计算一次给定的 <paramref name="apply" /> 表达式，并生成具有相应 input 和 apply 列的行集合。其 <paramref name="apply" /> 计算结果为空集的行具有值为 null 的 apply 列值。</summary>
      <returns>具有指定的输入和应用绑定且 OuterApply 为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的一个新的 DbApplyExpression。</returns>
      <param name="source">指定输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="apply">一个方法，它指定要对输入集的每个成员计算一次的逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="apply" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentNullException">apply 的结果包含为 null 的名称或表达式。</exception>
      <exception cref="T:System.ArgumentException">apply 的结果包含在表达式绑定中无效的名称或表达式。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />，它为给定输入集的每个元素计算一次给定的 <paramref name="apply" /> 表达式，并生成具有相应 input 和 apply 列的行集合。其 <paramref name="apply" /> 计算结果为空集的行具有值为 null 的 apply 列值。</summary>
      <returns>具有指定的输入和应用绑定且 OuterApply 为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的一个新的 DbApplyExpression。</returns>
      <param name="input">指定输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="apply">一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />，它指定要对输入集的每个成员计算一次的逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="apply" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />，它使用指定的名称和类型引用参数。</summary>
      <returns>表示对具有指定名称和类型的参数的引用的 DbParameterReferenceExpression；表达式的结果类型将与 <paramref name="type" /> 相同。</returns>
      <param name="type">引用参数的类型。</param>
      <param name="name">引用参数的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />，它将左边参数与右边参数相加。</summary>
      <returns>表示加法运算的一个新的 DbArithmeticExpression。</returns>
      <param name="left">一个指定左边参数的表达式。</param>
      <param name="right">一个指定右边参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">left 与 right 之间不存在任何常用数值结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />，它对给定的输入集投影指定的表达式。</summary>
      <returns>表示投影运算的一个新的 DbProjectExpression。</returns>
      <param name="input">一个指定输入集的表达式绑定。</param>
      <param name="projection">要对集投影的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="projection" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />，它表示对指定属性的检索。</summary>
      <returns>表示属性检索的一个新的 DbPropertyExpression。</returns>
      <param name="instance">要从中检索属性的实例。如果该属性是静态的，则可能为 null。</param>
      <param name="propertyMetadata">要检索的属性的元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyMetadata" /> 为 null，或者 <paramref name="instance" /> 为 null 并且属性不是静态的。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />，它表示对指定导航属性的检索。</summary>
      <returns>表示导航属性检索的一个新的 DbPropertyExpression。</returns>
      <param name="instance">要从中检索导航属性的实例。</param>
      <param name="navigationProperty">要检索的导航属性的元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigationProperty" /> 为 null 或 <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />，它表示对指定关系端成员的检索。</summary>
      <returns>表示关系端成员检索的一个新的 DbPropertyExpression。</returns>
      <param name="instance">要从中检索关系端成员的实例。</param>
      <param name="relationshipEnd">要检索的关系端成员的元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipEnd" /> 为 null，或者 <paramref name="instance" /> 为 null 并且属性不是静态的。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />，它表示从给定实例中检索具有指定名称的实例属性。</summary>
      <returns>表示属性检索的一个新的 DbPropertyExpression。</returns>
      <param name="instance">要从中检索属性的实例。</param>
      <param name="propertyName">要检索的属性的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 为 null，或者 <paramref name="instance" /> 为 null 并且属性不是静态的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">没有具有指定名称的属性是由 <paramref name="instance" /> 类型声明的。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />，它对基于键值对特定实体的引用进行编码。</summary>
      <returns>一个新的 DbRefExpression，它引用在给定实体集中具有指定键值的元素。</returns>
      <param name="entitySet">引用的元素所在的实体集。</param>
      <param name="keyRow">一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它使用与引用的实体类型的 Key 属性在数目、类型和顺序上相匹配的列构造一个记录。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 或 <paramref name="keyRow" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">keyRow</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />，它对基于键值对特定实体的引用进行编码。</summary>
      <returns>一个新的 DbRefExpression，它引用在给定实体集中具有指定键值的元素。</returns>
      <param name="entitySet">引用的元素所在的实体集。</param>
      <param name="keyRow">一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它使用与引用的实体类型的 Key 属性在数目、类型和顺序上相匹配的列构造一个记录。</param>
      <param name="entityType">引用应针对的实体的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" />、<paramref name="keyRow" /> 或 <paramref name="entityType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> 与实体集的实体类型不处于相同的类型层次结构，或者 <paramref name="keyRow" /> 不具有与引用的实体集的实体类型的键属性匹配的记录结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" />，它引用指定的实体集或关系集。</summary>
      <returns>基于指定的实体或关系集的一个新的 DbScanExpression。</returns>
      <param name="targetSet">要引用的实体或关系集的元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetSet" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />，它对给定的输入集选择指定的表达式。</summary>
      <returns> 表示选择运算的一个新的 DbProjectExpression。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <param name="projection">一个方法，该方法指定在给定输入集的成员时如何派生投影的表达式。此方法必须生成与 Select 兼容且可以解析为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 的类型的实例。备注中说明了针对 <paramref name="TProjection" /> 的兼容性要求。</param>
      <typeparam name="TProjection">
        <paramref name="projection" /> 的方法结果类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="projection" /> 为 null</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="projection" /> 的结果为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />，它为给定输入集的每个元素计算一次给定的 <paramref name="apply" /> 表达式，并生成具有相应 input 和 apply 列的行集合。不包括 <paramref name="apply" /> 计算结果为空集的行。然后创建了 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />，它对每一行选择指定的 <paramref name="selector" />，并且生成结果的整个集合。</summary>
      <returns>一个新的 DbProjectExpression，它从具有指定输入和应用绑定且 CrossApply 为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的一个新的 DbApplyExpression 中选择 apply 列。</returns>
      <param name="source">指定输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="apply">一个方法，它表示要对输入集的每个成员计算一次的逻辑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="apply" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="apply" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="apply" /> 生成的表达式不具有集合类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />，它为给定输入集的每个元素计算一次给定的 <paramref name="apply" /> 表达式，并生成具有相应 input 和 apply 列的行集合。不包括 <paramref name="apply" /> 计算结果为空集的行。然后创建了 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />，它对每一行选择指定的 <paramref name="selector" />，并且生成结果的整个集合。</summary>
      <returns>一个新的 DbProjectExpression，它从具有指定输入和应用绑定且 CrossApply 为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> 的一个新的 DbApplyExpression 中选择给定选择器的结果。</returns>
      <param name="source">指定输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="apply">一个方法，它表示要对输入集的每个成员计算一次的逻辑。</param>
      <param name="selector">一个方法，它指定如何在给定输入集和应用集的元素的情况下派生结果集的元素。此方法必须生成与 SelectMany 兼容且可以解析为 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 的类型的实例。备注中说明了针对 <paramref name="TSelector" /> 的兼容性要求。</param>
      <typeparam name="TSelector">
        <paramref name="selector" /> 的方法结果类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="apply" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="apply" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentNullException">在转换为 DbExpression 时 <paramref name="selector" /> 的结果为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="apply" /> 生成的表达式不具有集合类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SetClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个表示将属性设置为值的新 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause" />。</summary>
      <returns>新创建的 set 子句。</returns>
      <param name="property">要设置的属性。</param>
      <param name="value">要将属性设置为的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />，它在跳过指定数目的元素之前，按照指定的排序规范对给定的输入集进行排序。</summary>
      <returns>表示跳过操作的一个新的 DbSkipExpression。</returns>
      <param name="input">一个指定输入集的表达式绑定。</param>
      <param name="sortOrder">确定应如何对输入集元素进行排序的排序规范列表。</param>
      <param name="count">一个表达式，它指定要在有序集中跳过的元素数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="sortOrder" /> 或 <paramref name="count" /> 为 null，或者 <paramref name="sortOrder" /> 包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortOrder" /> 为空，或者 <paramref name="count" /> 不是 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> 或 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />，或者具有不等同于或不能提升为 64 位整数类型的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />，它从给定的有序输入集中跳过指定数目的元素。</summary>
      <returns>表示跳过操作的一个新的 DbSkipExpression。</returns>
      <param name="argument">指定有序输入集的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />。</param>
      <param name="count">一个表达式，它指定要在有序集中跳过的元素数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="count" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Count" /> 不是 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> 或 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />，或者具有不等同于或不能提升为 64 位整数类型的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，它按照指定的排序规范对给定的输入集进行排序。</summary>
      <returns>表示排序运算的一个新的 DbSortExpression。</returns>
      <param name="input">一个指定输入集的表达式绑定。</param>
      <param name="sortOrder">确定应如何对输入集元素进行排序的排序规范列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="sortOrder" /> 为 null，或者 <paramref name="sortOrder" /> 包含 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortOrder" /> 为空。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />，它将参数集合中的元素数目限制为指定的计数限值。输出中不包括等值结果。</summary>
      <returns>一个新的 DbLimitExpression，它具有指定参数以及不包括等值结果的计数限值。</returns>
      <param name="argument">一个指定输入集合的表达式。</param>
      <param name="count">指定限值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="count" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 不具有集合结果类型，或者 <paramref name="count" /> 不具有等同于或可提升为 64 位整数类型的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建具有排序顺序的一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，它包括给定顺序输入集的排序顺序以及按升序排序顺序的指定排序键和默认排序规则。</summary>
      <returns>表示新的整体的排序依据运算的一个新的 DbSortExpression。</returns>
      <param name="source">指定有序输入集的 DbSortExpression。</param>
      <param name="sortKey">一个方法，该方法指定在给定输入集的成员时如何派生附加排序键表达式。此方法必须生成一个具有可比较顺序的结果类型（该类型提供排序键定义）的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="sortKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="sortKey" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> 生成的表达式不具有可比较顺序的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>创建具有排序顺序的一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，它包括给定顺序输入集的排序顺序以及按升序排序顺序的指定排序键和指定的排序规则。</summary>
      <returns>表示新的整体的排序依据运算的一个新的 DbSortExpression。</returns>
      <param name="source">指定有序输入集的 DbSortExpression。</param>
      <param name="sortKey">一个方法，该方法指定在给定输入集的成员时如何派生附加排序键表达式。此方法必须生成一个具有可比较顺序的结果类型（该类型提供排序键定义）的表达式。</param>
      <param name="collation">排序所依据的排序规则</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" /> 或 <paramref name="collation" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="sortKey" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> 生成的表达式不具有可比较顺序的字符串结果类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 为空，或者只包含空白字符。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建具有排序顺序的一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，它包括给定顺序输入集的排序顺序以及按降序排序顺序的指定排序键和默认排序规则。</summary>
      <returns>表示新的整体的排序依据运算的一个新的 DbSortExpression。</returns>
      <param name="source">指定有序输入集的 DbSortExpression。</param>
      <param name="sortKey">一个方法，该方法指定在给定输入集的成员时如何派生附加排序键表达式。此方法必须生成一个具有可比较顺序的结果类型（该类型提供排序键定义）的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="sortKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="sortKey" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> 生成的表达式不具有可比较顺序的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>创建具有排序顺序的一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />，它包括给定顺序输入集的排序顺序以及按降序排序顺序的指定排序键和指定的排序规则。</summary>
      <returns>表示新的整体的排序依据运算的一个新的 DbSortExpression。</returns>
      <param name="source">指定有序输入集的 DbSortExpression。</param>
      <param name="sortKey">一个方法，该方法指定在给定输入集的成员时如何派生附加排序键表达式。此方法必须生成一个具有可比较顺序的结果类型（该类型提供排序键定义）的表达式。</param>
      <param name="collation">排序所依据的排序规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" /> 或 <paramref name="collation" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="sortKey" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 没有集合结果类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> 生成的表达式不具有可比较顺序的字符串结果类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 为空，或者只包含空白字符。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>使用升序排序顺序和默认排序规则创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" />。</summary>
      <returns>使用给定的排序关键字和升序排序顺序的一个新的排序子句。</returns>
      <param name="key">定义排序键的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 不具有可比较顺序的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>使用升序排序顺序和指定的排序规则创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" />。</summary>
      <returns>具有给定的排序键和排序规则以及升序排序顺序的一个新的排序语句。</returns>
      <param name="key">定义排序键的表达式。</param>
      <param name="collation">排序所依据的排序规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 为空，或者只包含空白字符。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 不具有可比较顺序的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>使用降序排序顺序和默认排序规则创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" />。</summary>
      <returns>具有给定排序键和降序排序顺序的一个新的排序语句。</returns>
      <param name="key">定义排序键的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 不具有可比较顺序的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>使用降序排序顺序和指定的排序规则创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" />。</summary>
      <returns>具有给定的排序键和排序规则以及降序排序顺序的一个新的排序语句。</returns>
      <param name="key">定义排序键的表达式。</param>
      <param name="collation">排序所依据的排序规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> 为空，或者只包含空白字符。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 不具有可比较顺序的结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />。</summary>
      <returns>具有指定的参数和类型的一个新的 DbTreatExpression。</returns>
      <param name="argument">指定实例的表达式。</param>
      <param name="treatType">treat-as 类型的类型元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 或 <paramref name="treatType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="treatType" /> 与 <paramref name="argument" /> 的结果类型不处于相同的类型层次结构中。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True">
      <summary>使用布尔值 true 创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />。</summary>
      <returns>带布尔值 true 的<see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /></returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />，它对参数值求反。</summary>
      <returns>表示求反运算的一个新的 DbArithmeticExpression。</returns>
      <param name="argument">指定参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不存在针对 <paramref name="argument" /> 的任何数值结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，它计算左边集参数和右边集参数的并集并且删除了重复项。</summary>
      <returns>一个新的 DbExpression，它计算左边参数和右边参数的并集，并且不含重复项。</returns>
      <param name="left">一个定义左边集参数的表达式。</param>
      <param name="right">一个定义右边集参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 和 <paramref name="right" /> 之间不存在具有可进行相等比较的元素类型的任何常用集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" />，它计算左边集参数和右边集参数的并集且不删除重复项。</summary>
      <returns>一个新的 DbUnionAllExpression，它是左边参数和右边参数的并集并且包括重复项。</returns>
      <param name="left">一个定义左边集参数的表达式。</param>
      <param name="right">一个定义右边集参数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 与 <paramref name="right" /> 之间不存在任何常用集合结果类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />，它使用指定的名称和类型引用变量。</summary>
      <returns>一个 DbVariableReferenceExpression，它表示对具有指定名称和类型的变量的引用；表达式的结果类型将与 <paramref name="type" /> 相同。</returns>
      <param name="type">引用变量的类型。</param>
      <param name="name">引用变量的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />，它使用指定的谓词筛选给定输入集中的元素。</summary>
      <returns>表示 Any 运算的一个新的 DbQuantifierExpression。</returns>
      <param name="source">一个指定输入集的表达式。</param>
      <param name="predicate">一个方法，它表示要为输入集的每个成员计算的谓词。此方法必须生成一个表达式，该表达式具有提供谓词逻辑的 Boolean 结果类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">由 <paramref name="predicate" /> 生成的表达式为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> 生成的表达式不具有布尔结果类型。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions">
      <summary>提供一个用于构造调用规范 EDM 函数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 的 API，并且允许该 API 作为针对表达式类型本身的扩展方法来访问。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有数值结果类型）调用规范“Abs”函数。表达式的结果类型与 <paramref name="value" /> 的结果类型相同。</summary>
      <returns>返回 <paramref name="value" /> 的绝对值的一个新的 DbFunctionExpression。</returns>
      <param name="value">一个指定数值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Abs”函数的重载接受结果类型为 <paramref name="value" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime 或 DateTimeOffset 以及整数结果类型）调用规范“AddDays”函数。表达式的结果类型与 <paramref name="dateValue" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它将按 <paramref name="addValue" /> 指定的天数加到按 <paramref name="dateValue" /> 指定的值。</returns>
      <param name="dateValue">一个表达式，它指定应与 <paramref name="addValue" /> 相加的值。</param>
      <param name="addValue">一个表达式，它指定要加到 <paramref name="dateValue" /> 中的天数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 或 <paramref name="addValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“AddDays”函数的重载接受结果类型为 <paramref name="dateValue" /> 和 <paramref name="addValue" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime、DateTimeOffset 或 Time 以及整数结果类型）调用规范“AddHours”函数。表达式的结果类型与 <paramref name="timeValue" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它将按 <paramref name="addValue" /> 指定的小时数加到按 <paramref name="timeValue" /> 指定的值。</returns>
      <param name="timeValue">一个表达式，它指定应与 <paramref name="addValue" /> 相加的值。</param>
      <param name="addValue">一个表达式，它指定要加到 <paramref name="timeValue" /> 中的小时数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 或 <paramref name="addValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“AddHours”函数的重载接受结果类型为 <paramref name="timeValue" /> 和 <paramref name="addValue" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime、DateTimeOffset 或 Time 以及整数结果类型）调用规范“AddMicroseconds”函数。表达式的结果类型与 <paramref name="timeValue" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它将按 <paramref name="addValue" /> 指定的微秒数加到按 <paramref name="timeValue" /> 指定的值。</returns>
      <param name="timeValue">一个表达式，它指定应与 <paramref name="addValue" /> 相加的值。</param>
      <param name="addValue">一个表达式，它指定要加到 <paramref name="timeValue" /> 中的微秒数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 或 <paramref name="addValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“AddMicroseconds”函数的重载接受结果类型为 <paramref name="timeValue" /> 和 <paramref name="addValue" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime、DateTimeOffset 或 Time 以及整数结果类型）调用规范“AddMilliseconds”函数。表达式的结果类型与 <paramref name="timeValue" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它将按 <paramref name="addValue" /> 指定的毫秒数加到按 <paramref name="timeValue" /> 指定的值。</returns>
      <param name="timeValue">一个表达式，它指定应与 <paramref name="addValue" /> 相加的值。</param>
      <param name="addValue">一个表达式，它指定要加到 <paramref name="timeValue" /> 中的毫秒数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 或 <paramref name="addValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“AddMilliseconds”函数的重载接受结果类型为 <paramref name="timeValue" /> 和 <paramref name="addValue" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime、DateTimeOffset 或 Time 以及整数结果类型）调用规范“AddMinutes”函数。表达式的结果类型与 <paramref name="timeValue" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它将按 <paramref name="addValue" /> 指定的分钟数加到按 <paramref name="timeValue" /> 指定的值。</returns>
      <param name="timeValue">一个表达式，它指定应与 <paramref name="addValue" /> 相加的值。</param>
      <param name="addValue">一个表达式，它指定要加到 <paramref name="timeValue" /> 中的分钟数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 或 <paramref name="addValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“AddMinutes”函数的重载接受结果类型为 <paramref name="timeValue" /> 和 <paramref name="addValue" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime 或 DateTimeOffset 以及整数结果类型）调用规范“AddMonths”函数。表达式的结果类型与 <paramref name="dateValue" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它将按 <paramref name="addValue" /> 指定的月份数加到按 <paramref name="dateValue" /> 指定的值。</returns>
      <param name="dateValue">一个表达式，它指定应与 <paramref name="addValue" /> 相加的值。</param>
      <param name="addValue">一个表达式，它指定要加到 <paramref name="dateValue" /> 中的月份数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 或 <paramref name="addValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“AddMonths”函数的重载接受结果类型为 <paramref name="dateValue" /> 和 <paramref name="addValue" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime、DateTimeOffset 或 Time 以及整数结果类型）调用规范“AddNanoseconds”函数。表达式的结果类型与 <paramref name="timeValue" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它将按 <paramref name="addValue" /> 指定的纳秒数加到按 <paramref name="timeValue" /> 指定的值。</returns>
      <param name="timeValue">一个表达式，它指定应与 <paramref name="addValue" /> 相加的值。</param>
      <param name="addValue">一个表达式，它指定要加到 <paramref name="timeValue" /> 中的纳秒数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 或 <paramref name="addValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“AddNanoseconds”函数的重载接受结果类型为 <paramref name="timeValue" /> 和 <paramref name="addValue" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime、DateTimeOffset 或 Time 以及整数结果类型）调用规范“AddSeconds”函数。表达式的结果类型与 <paramref name="timeValue" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它将按 <paramref name="addValue" /> 指定的秒数加到按 <paramref name="timeValue" /> 指定的值。</returns>
      <param name="timeValue">一个表达式，它指定应与 <paramref name="addValue" /> 相加的值。</param>
      <param name="addValue">一个表达式，它指定要加到 <paramref name="timeValue" /> 中的秒数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 或 <paramref name="addValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“AddSeconds”函数的重载接受结果类型为 <paramref name="timeValue" /> 和 <paramref name="addValue" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有 DateTime 或 DateTimeOffset 以及整数结果类型）调用规范“AddYears”函数。表达式的结果类型与 <paramref name="dateValue" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它将按 <paramref name="addValue" /> 指定的年份数加到按 <paramref name="dateValue" /> 指定的值。</returns>
      <param name="dateValue">一个表达式，它指定应与 <paramref name="addValue" /> 相加的值。</param>
      <param name="addValue">一个表达式，它指定要加到 <paramref name="dateValue" /> 中的年份数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 或 <paramref name="addValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“AddYears”函数的重载接受结果类型为 <paramref name="dateValue" /> 和 <paramref name="addValue" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它对指定的集合调用规范“Avg”函数。表达式的结果类型与集合的元素类型相同。</summary>
      <returns>生成平均值的新的 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，它指定应计算平均值的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Avg”函数的重载接受结果类型为 <paramref name="collection" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有相同的整数结果类型）调用规范“BitwiseAnd”函数。表达式的结果类型为此同一类型。</summary>
      <returns>一个新的 DbFunctionExpression，它返回通过对 <paramref name="value1" /> 和 <paramref name="value2" /> 执行按位与运算生成的值。</returns>
      <param name="value1">指定第一个操作数的表达式。</param>
      <param name="value2">指定第二个操作数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> 或 <paramref name="value2" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“BitwiseAnd”函数的重载接受结果类型为 <paramref name="value1" /> 和 <paramref name="value2" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有整数结果类型）调用规范“BitwiseNot”函数。表达式的结果类型为此同一类型。</summary>
      <returns>一个新的 DbFunctionExpression，它返回通过对 <paramref name="value" /> 执行按位取非运算生成的值。</returns>
      <param name="value">指定第一个操作数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“BitwiseNot”函数的重载接受结果类型为 <paramref name="value" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有相同的整数结果类型）调用规范“BitwiseOr”函数。表达式的结果类型为此同一类型。</summary>
      <returns>一个新的 DbFunctionExpression，它返回通过对 <paramref name="value1" /> 和 <paramref name="value2" /> 执行按位或运算生成的值。</returns>
      <param name="value1">指定第一个操作数的表达式。</param>
      <param name="value2">指定第二个操作数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> 或 <paramref name="value2" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“BitwiseOr”函数的重载接受结果类型为 <paramref name="value1" /> 和 <paramref name="value2" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有相同的整数结果类型）调用规范“BitwiseXor”函数。表达式的结果类型为此同一类型。</summary>
      <returns>一个新的 DbFunctionExpression，它返回通过对 <paramref name="value1" /> 和 <paramref name="value2" /> 执行按位异或（异或）运算生成的值。</returns>
      <param name="value1">指定第一个操作数的表达式。</param>
      <param name="value2">指定第二个操作数的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> 或 <paramref name="value2" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“BitwiseXor”函数的重载接受结果类型为 <paramref name="value1" /> 和 <paramref name="value2" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有单精度、双精度或十进制结果类型）调用规范“Ceiling”函数。表达式的结果类型与 <paramref name="value" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回不小于 <paramref name="value" /> 的最小整数值。</returns>
      <param name="value">一个指定数值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Ceiling”函数的重载接受结果类型为 <paramref name="value" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有字符串结果类型）调用规范“Concat”函数。表达式的结果类型为字符串。</summary>
      <returns>一个生成串联字符串的新的 DbFunctionExpression。</returns>
      <param name="string1">一个表达式，它指定在串连结果字符串中应在最前面出现的字符串。</param>
      <param name="string2">一个表达式，它指定在串连结果字符串中应在第二位出现的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="string1" /> 或 <paramref name="string2" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Concat”函数的重载接受结果类型为 <paramref name="string1" /> 和 <paramref name="string2" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有字符串结果类型）调用规范“Contains”函数。表达式的结果类型为 Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 <paramref name="searchedForString" /> 是否在 <paramref name="searchedString" /> 之内出现的布尔值。</returns>
      <param name="searchedString">一个表达式，它指定要从中搜索出现的任何 <paramref name="searchedForString" /> 的字符串。</param>
      <param name="searchedForString">一个表达式，它指定要在 <paramref name="searchedString" /> 中搜索的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchedString" /> 或 <paramref name="searchedForString" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Contains”函数的重载接受结果类型为 <paramref name="searchedString" /> 和 <paramref name="searchedForString" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它对指定的集合调用规范“Count”函数。表达式的结果类型为 Edm.Int32。</summary>
      <returns>生成计数值的新的 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，它指定应对其计算计数值的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Count”函数的重载接受结果类型为 <paramref name="collection" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“CreateDateTime”函数。<paramref name="second" /> 必须具有结果类型 Edm.Double，所有其他参数必须具有结果类型 Edm.Int32。表达式的结果类型为 Edm.DateTime。</summary>
      <returns>一个新 DbFunctionExpression，它基于指定的值返回新的 DateTime。</returns>
      <param name="year">一个表达式，它为新的 DateTime 实例提供年份值。</param>
      <param name="month">一个表达式，它为新的 DateTime 实例提供月份值。</param>
      <param name="day">一个表达式，它为新的 DateTime 实例提供日期值。</param>
      <param name="hour">一个表达式，它为新的 DateTime 实例提供小时值。</param>
      <param name="minute">一个表达式，它为新的 DateTime 实例提供分钟值。</param>
      <param name="second">一个表达式，它为新的 DateTime 实例提供秒钟值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“CreateDateTime”函数的重载接受结果类型为 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" /> 和 <paramref name="second" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“CreateDateTimeOffset”函数。<paramref name="second" /> 必须具有结果类型 Edm.Double，所有其他参数必须具有结果类型 Edm.Int32。表达式的结果类型为 Edm.DateTimeOffset。</summary>
      <returns>一个新 DbFunctionExpression，它基于指定的值返回新的 DateTimeOffset。</returns>
      <param name="year">一个表达式，它为新的 DateTimeOffset 实例提供年份值。</param>
      <param name="month">一个表达式，它为新的 DateTimeOffset 实例提供月份值。</param>
      <param name="day">一个表达式，它为新的 DateTimeOffset 实例提供日期值。</param>
      <param name="hour">一个表达式，它为新的 DateTimeOffset 实例提供小时值。</param>
      <param name="minute">一个表达式，它为新的 DateTimeOffset 实例提供分钟值。</param>
      <param name="second">一个表达式，它为新的 DateTimeOffset 实例提供秒钟值。</param>
      <param name="timeZoneOffset">一个表达式，它为新的 DateTimeOffset 实例按时区偏移量值提供分钟数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" /> 或 <paramref name="timeZoneOffset" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“CreateDateTimeOffset”函数的重载接受结果类型为 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" /> 和 <paramref name="timeZoneOffset" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“CreateTime”函数。<paramref name="second" /> 必须具有结果类型 Edm.Double，所有其他参数必须具有结果类型 Edm.Int32。表达式的结果类型为 Edm.Time。</summary>
      <returns>一个新 DbFunctionExpression，它基于指定的值返回新的时间。</returns>
      <param name="hour">一个表达式，它为新的 DateTime 实例提供小时值。</param>
      <param name="minute">一个表达式，它为新的 DateTime 实例提供分钟值。</param>
      <param name="second">一个表达式，它为新的 DateTime 实例提供秒钟值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hour" />、<paramref name="minute" /> 或 <paramref name="second" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“CreateTime”函数的重载接受结果类型为 <paramref name="hour" />、<paramref name="minute" /> 和 <paramref name="second" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它调用规范“CurrentDateTime”函数。</summary>
      <returns>一个新的 DbFunctionExpression，它将当前日期和时间作为 Edm.DateTime 实例返回。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它调用规范“CurrentDateTimeOffset”函数。</summary>
      <returns>一个新的 DbFunctionExpression，它将当前日期和时间作为 Edm.DateTimeOffset 实例返回。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它调用规范“CurrentUtcDateTime”函数。</summary>
      <returns>一个新的 DbFunctionExpression，它将当前 UTC 日期和时间作为 Edm.DateTime 实例返回。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime 或 DateTimeOffset 结果类型）调用规范“Day”函数。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它从 <paramref name="dateValue" /> 返回整数日期值。</returns>
      <param name="dateValue">一个表达式，它指定应从中检索日期的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Day”函数的重载接受结果类型为 <paramref name="dateValue" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime 或 DateTimeOffset 结果类型）调用规范“DayOfYear”函数。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它从 <paramref name="dateValue" /> 返回年份值的整数日期。</returns>
      <param name="dateValue">一个表达式，它指定应从中检索日期（以一年中的第几天表示）的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“DayOfYear”函数的重载接受结果类型为 <paramref name="dateValue" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime 或 DateTimeOffset 结果类型）调用规范“DiffDays”函数。<paramref name="dateValue1" /> 的结果类型必须与 <paramref name="dateValue2" /> 的结果类型匹配。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="dateValue1" /> 和 <paramref name="dateValue2" /> 之间的天数差。</returns>
      <param name="dateValue1">一个表达式，它指定第一个 DateTime 或 DateTimeOffset 值。</param>
      <param name="dateValue2">一个表达式，它指定应为其计算距离 <paramref name="dateValue1" /> 的天数差的 DateTime 或 DateTimeOffset。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> 或 <paramref name="dateValue2" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“DiffDays”函数的重载接受结果类型为 <paramref name="dateValue1" /> 和 <paramref name="dateValue2" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范“DiffHours”函数。<paramref name="timeValue1" /> 的结果类型必须与 <paramref name="timeValue2" /> 的结果类型匹配。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的小时差。</returns>
      <param name="timeValue1">一个表达式，它指定第一个 DateTime、DateTimeOffset 或 Time 值。</param>
      <param name="timeValue2">一个表达式，它指定应为其计算距离 <paramref name="timeValue1" /> 的小时差的 DateTime、DateTimeOffset 或 Time。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 或 <paramref name="timeValue2" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“DiffHours”函数的重载接受结果类型为 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范“DiffMicroseconds”函数。<paramref name="timeValue1" /> 的结果类型必须与 <paramref name="timeValue2" /> 的结果类型匹配。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的微秒差。</returns>
      <param name="timeValue1">一个表达式，它指定第一个 DateTime、DateTimeOffset 或 Time 值。</param>
      <param name="timeValue2">一个表达式，它指定应为其计算距离 <paramref name="timeValue1" /> 的微秒差的 DateTime、DateTimeOffset 或 Time。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 或 <paramref name="timeValue2" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“DiffMicroseconds”函数的重载接受结果类型为 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范“DiffMilliseconds”函数。<paramref name="timeValue1" /> 的结果类型必须与 <paramref name="timeValue2" /> 的结果类型匹配。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的毫秒差。</returns>
      <param name="timeValue1">一个表达式，它指定第一个 DateTime、DateTimeOffset 或 Time 值。</param>
      <param name="timeValue2">一个表达式，它指定应为其计算距离 <paramref name="timeValue1" /> 的毫秒差的 DateTime、DateTimeOffset 或 Time。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 或 <paramref name="timeValue2" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“DiffMilliseconds”函数的重载接受结果类型为 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范“DiffMinutes”函数。<paramref name="timeValue1" /> 的结果类型必须与 <paramref name="timeValue2" /> 的结果类型匹配。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的分钟差。</returns>
      <param name="timeValue1">一个表达式，它指定第一个 DateTime、DateTimeOffset 或 Time 值。</param>
      <param name="timeValue2">一个表达式，它指定应为其计算距离 <paramref name="timeValue1" /> 的分钟差的 DateTime、DateTimeOffset 或 Time。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 或 <paramref name="timeValue2" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“DiffMinutes”函数的重载接受结果类型为 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime 或 DateTimeOffset 结果类型）调用规范“DiffMonths”函数。<paramref name="dateValue1" /> 的结果类型必须与 <paramref name="dateValue2" /> 的结果类型匹配。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="dateValue1" /> 和 <paramref name="dateValue2" /> 之间的月份差。</returns>
      <param name="dateValue1">一个表达式，它指定第一个 DateTime 或 DateTimeOffset 值。</param>
      <param name="dateValue2">一个表达式，它指定应为其计算距离 <paramref name="dateValue1" /> 的月份差的 DateTime 或 DateTimeOffset。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> 或 <paramref name="dateValue2" /> 为 null</exception>
      <exception cref="T:System.ArgumentException">没有规范“DiffMonths”函数的重载接受结果类型为 <paramref name="dateValue1" /> 和 <paramref name="dateValue2" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范“DiffNanoseconds”函数。<paramref name="timeValue1" /> 的结果类型必须与 <paramref name="timeValue2" /> 的结果类型匹配。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的纳秒差。</returns>
      <param name="timeValue1">一个表达式，它指定第一个 DateTime、DateTimeOffset 或 Time 值。</param>
      <param name="timeValue2">一个表达式，它指定应为其计算距离 <paramref name="timeValue1" /> 的纳秒差的 DateTime、DateTimeOffset 或 Time。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 或 <paramref name="timeValue2" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“DiffNanoseconds”函数的重载接受结果类型为 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范“DiffSeconds”函数。<paramref name="timeValue1" /> 的结果类型必须与 <paramref name="timeValue2" /> 的结果类型匹配。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 之间的秒钟差。</returns>
      <param name="timeValue1">一个表达式，它指定第一个 DateTime、DateTimeOffset 或 Time 值。</param>
      <param name="timeValue2">一个表达式，它指定应为其计算距离 <paramref name="timeValue1" /> 的秒钟差的 DateTime、DateTimeOffset 或 Time。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 或 <paramref name="timeValue2" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“DiffSeconds”函数的重载接受结果类型为 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有 DateTime 或 DateTimeOffset 结果类型）调用规范“DiffYears”函数。<paramref name="dateValue1" /> 的结果类型必须与 <paramref name="dateValue2" /> 的结果类型匹配。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="dateValue1" /> 和 <paramref name="dateValue2" /> 之间的年份差。</returns>
      <param name="dateValue1">一个表达式，它指定第一个 DateTime 或 DateTimeOffset 值。</param>
      <param name="dateValue2">一个表达式，它指定应为其计算距离 <paramref name="dateValue1" /> 的年份差的 DateTime 或 DateTimeOffset。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> 或 <paramref name="dateValue2" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“DiffYears”函数的重载接受结果类型为 <paramref name="dateValue1" /> 和 <paramref name="dateValue2" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有字符串结果类型）调用规范“EndsWith”函数。表达式的结果类型为 Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它指示 <paramref name="stringArgument" /> 是否以 <paramref name="suffix" /> 结尾。</returns>
      <param name="stringArgument">一个表达式，指定要在其中查找指定的 <paramref name="suffix" /> 的字符串。</param>
      <param name="suffix">一个表达式，指定应在 <paramref name="stringArgument" /> 中查找的后缀。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 或 <paramref name="suffix" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“EndsWith”函数的重载接受结果类型为 <paramref name="stringArgument" /> 和 <paramref name="suffix" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有单精度、双精度或十进制结果类型）调用规范“Floor”函数。表达式的结果类型与 <paramref name="value" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回不大于 <paramref name="value" /> 的最大整数值。</returns>
      <param name="value">一个指定数值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Floor”函数的重载接受结果类型为 <paramref name="value" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTimeOffset 结果类型）调用规范“GetTotalOffsetMinutes”函数。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="dateTimeOffsetArgument" /> 相对于 GMT 的偏移分钟数。</returns>
      <param name="dateTimeOffsetArgument">一个表达式，它指定应从中检索相对于 GMT 的偏移分钟数的 DateTimeOffset 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateTimeOffsetArgument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“GetTotalOffsetMinutes”函数的重载接受结果类型为 <paramref name="dateTimeOffsetArgument" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范“Hour”函数。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它从 <paramref name="timeValue" /> 返回整数小时值。</returns>
      <param name="timeValue">一个表达式，它指定应从中检索小时的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Hours”函数的重载接受结果类型为 <paramref name="timeValue" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有字符串结果类型）调用规范“IndexOf”函数。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="searchString" /> 中 <paramref name="stringToFind" /> 的第一个索引。</returns>
      <param name="searchString">一个表达式，它指定要在 <paramref name="stringToFind" /> 中搜索的字符串。</param>
      <param name="stringToFind">一个表达式，它指定应检查的位于 <paramref name="searchString" /> 内的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchString" /> 或 <paramref name="stringToFind" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“IndexOf”函数的重载接受结果类型为 <paramref name="searchString" /> 和 <paramref name="stringToFind" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串和整数结果类型）调用规范“Left”函数。表达式的结果类型为字符串。</summary>
      <returns>一个新的 DbFunctionExpression，它从 <paramref name="stringArgument" /> 中返回长度为 <paramref name="length" /> 的最左侧子字符串。</returns>
      <param name="stringArgument">一个表达式，它指定要从中提取最左侧子字符串的字符串。</param>
      <param name="length">一个表达式，它指定要从 <paramref name="stringArgument" /> 中提取的最左侧子字符串的长度。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 或 <paramref name="length" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Left”函数的重载接受结果类型为 <paramref name="stringArgument" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范“Length”函数。表达式的结果类型也为字符串。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 <paramref name="stringArgument" /> 的长度。</returns>
      <param name="stringArgument">一个表达式，它指定应计算其长度的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Length”函数的重载接受结果类型为 <paramref name="stringArgument" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它对指定的集合调用规范“BigCount”函数。表达式的结果类型为 Edm.Int64。</summary>
      <returns>生成计数值的新的 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，它指定应对其计算计数值的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“BigCount”函数的重载接受结果类型为 <paramref name="collection" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它对指定的集合调用规范“Max”函数。表达式的结果类型与集合的元素类型相同。</summary>
      <returns>生成最大值的新的 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，它指定应从中检索最大值的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Max”函数的重载接受结果类型为 <paramref name="collection" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范“Millisecond”函数。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它从 <paramref name="timeValue" /> 中返回整数毫秒值。</returns>
      <param name="timeValue">一个表达式，它指定应从中检索毫秒的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Millisecond”函数的重载接受结果类型为 <paramref name="timeValue" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它对指定的集合调用规范“Min”函数。表达式的结果类型与集合的元素类型相同。</summary>
      <returns>生成最小值的新的 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，它指定应从中检索最小值的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Min”函数的重载接受结果类型为 <paramref name="collection" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范“Minute”函数。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它从 <paramref name="timeValue" /> 返回整数分钟值。</returns>
      <param name="timeValue">一个表达式，它指定应从中检索分钟的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Minute”函数的重载接受结果类型为 <paramref name="timeValue" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime 或 DateTimeOffset 结果类型）调用规范“Month”函数。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它从 <paramref name="dateValue" /> 返回整数月份值。</returns>
      <param name="dateValue">一个表达式，它指定应从中检索月份的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Month”函数的重载接受结果类型为 <paramref name="dateValue" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它调用规范“NewGuid”函数。</summary>
      <returns>返回新的 GUID 值的新的 DbFunctionExpression。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有数值结果类型）调用规范“Power”函数。表达式的结果类型与 <paramref name="baseArgument" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回按 <paramref name="exponent" /> 指定的幂次执行幂运算的 <paramref name="baseArgument" /> 的值。</returns>
      <param name="baseArgument">一个表达式，它指定要计算给定幂次的数值。</param>
      <param name="exponent">一个表达式，它指定应对 <paramref name="baseArgument" /> 进行幂运算的幂值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseArgument" /> 或 <paramref name="exponent" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Power”函数的重载接受结果类型为 <paramref name="baseArgument" /> 和 <paramref name="exponent" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有字符串结果类型）调用规范“Replace”函数。表达式的结果类型也为字符串。</summary>
      <returns>一个新的 DbFunctionExpression，它基于 <paramref name="stringArgument" /> 返回一个新字符串，其中，出现的每个 <paramref name="toReplace" /> 都会被 <paramref name="replacement" /> 替代。</returns>
      <param name="stringArgument">一个表达式，它指定要在其中执行替代操作的字符串。</param>
      <param name="toReplace">指定要替代的字符串的表达式。</param>
      <param name="replacement">指定替代字符串的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />、<paramref name="toReplace" /> 或 <paramref name="replacement" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Replace”函数的重载接受结果类型为 <paramref name="stringArgument" />、 <paramref name="toReplace" /> 和 <paramref name="replacement" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范“Reverse”函数。表达式的结果类型也为字符串。</summary>
      <returns>一个 DbFunctionExpression，它生成 <paramref name="stringArgument" /> 的颠倒顺序的值。</returns>
      <param name="stringArgument">指定要颠倒顺序的字符串的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Reverse”函数的重载接受结果类型为 <paramref name="stringArgument" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串和整数结果类型）调用规范“Right”函数。表达式的结果类型为字符串。</summary>
      <returns>一个新的 DbFunctionExpression，它从 <paramref name="stringArgument" /> 中返回长度为 <paramref name="length" /> 的最右侧子字符串。</returns>
      <param name="stringArgument">一个表达式，它指定要从中提取最右侧子字符串的字符串。</param>
      <param name="length">一个表达式，它指定要从 <paramref name="stringArgument" /> 中提取的最右侧子字符串的长度。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 或 <paramref name="length" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Right”函数的重载接受结果类型为 <paramref name="stringArgument" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有单精度、双精度或十进制结果类型）调用规范“Round”函数。表达式的结果类型与 <paramref name="value" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它将指定的参数舍入为最接近的整数值。</returns>
      <param name="value">指定要舍入的数值的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Round”函数的重载接受结果类型为 <paramref name="value" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有单精度、双精度或十进制以及整数结果类型）调用规范“Round”函数。表达式的结果类型与 <paramref name="value" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它按照 <paramref name="digits" /> 指定的精度将指定的参数舍入为最接近的整数值。</returns>
      <param name="value">指定要舍入的数值的表达式。</param>
      <param name="digits">一个表达式，它指定在舍入时要使用的精度的位数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="digits" /> 为 null</exception>
      <exception cref="T:System.ArgumentException">没有规范“Round”函数的重载接受结果类型为 <paramref name="value" /> 和 <paramref name="digits" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime、DateTimeOffset 或 Time 结果类型）调用规范“Second”函数。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它从 <paramref name="timeValue" /> 返回整数秒钟值。</returns>
      <param name="timeValue">一个表达式，它指定应从中检索秒钟的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Second”函数的重载接受结果类型为 <paramref name="timeValue" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（每个参数都必须具有字符串结果类型）调用规范“StartsWith”函数。表达式的结果类型为 Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它指示 <paramref name="stringArgument" /> 是否以 <paramref name="prefix" /> 开头。</returns>
      <param name="stringArgument">一个表达式，指定要在其中查找指定的 <paramref name="prefix" /> 的字符串。</param>
      <param name="prefix">一个表达式，指定应在 <paramref name="stringArgument" /> 中查找的前缀。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 或 <paramref name="prefix" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“StartsWith”函数的重载接受结果类型为 <paramref name="stringArgument" /> 和 <paramref name="prefix" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它对指定集合的非 null 成员调用规范“StDev”函数。表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它对集合的非 null 成员生成标准偏差值。</returns>
      <param name="collection">一个表达式，它指定应计算标准偏差的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“StDev”函数的重载接受结果类型为 <paramref name="collection" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它对指定集合的总体调用规范“StDevP”函数。表达式的结果类型为 Edm.Double。</summary>
      <returns>生成标准偏差值的新的 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，它指定应计算标准偏差的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“StDevP”函数的重载接受结果类型为 <paramref name="collection" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串和整数结果类型）调用规范“Substring”函数。表达式的结果类型为字符串。</summary>
      <returns>一个新的 DbFunctionExpression，它从 <paramref name="stringArgument" /> 中返回以 <paramref name="start" /> 开头的长度为 <paramref name="length" /> 的子字符串。</returns>
      <param name="stringArgument">一个表达式，它指定要从中提取子字符串的字符串。</param>
      <param name="start">一个表达式，它指定要从其获取子字符串的起始索引。</param>
      <param name="length">一个表达式，它指定子字符串的长度。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />、<paramref name="start" /> 或 <paramref name="length" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Substring”函数的重载接受结果类型为 <paramref name="stringArgument" />、 <paramref name="start" /> 和 <paramref name="length" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它对指定的集合调用规范“Sum”函数。表达式的结果类型与集合的元素类型相同。</summary>
      <returns>生成总和的新的 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，它指定应计算总和的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Sum”函数的重载接受结果类型为 <paramref name="collection" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范“ToLower”函数。表达式的结果类型也为字符串。</summary>
      <returns>一个新的 DbFunctionExpression，它返回转换为小写的 <paramref name="stringArgument" /> 的值。</returns>
      <param name="stringArgument">一个表达式，它指定应转换为小写的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“ToLower”函数的重载接受结果类型为 <paramref name="stringArgument" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范“ToUpper”函数。表达式的结果类型也为字符串。</summary>
      <returns>一个新的 DbFunctionExpression，它返回转换为大写的 <paramref name="stringArgument" /> 的值。</returns>
      <param name="stringArgument">一个表达式，它指定应转换为大写的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“ToUpper”函数的重载接受结果类型为 <paramref name="stringArgument" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范“Trim”函数。表达式的结果类型也为字符串。</summary>
      <returns>一个新的 DbFunctionExpression，它返回删除了前导和尾随空格的 <paramref name="stringArgument" /> 的值。</returns>
      <param name="stringArgument">一个表达式，它指定应删除其前导和尾随空格的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Trim”函数的重载接受结果类型为 <paramref name="stringArgument" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范“RTrim”函数。表达式的结果类型也为字符串。</summary>
      <returns>一个新的 DbFunctionExpression，它返回删除了尾随空格的 <paramref name="stringArgument" /> 的值。</returns>
      <param name="stringArgument">一个表达式，它指定应删除其尾随空格的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“RTrim”函数的重载接受结果类型为 <paramref name="stringArgument" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范“LTrim”函数。表达式的结果类型也为字符串。</summary>
      <returns>一个新的 DbFunctionExpression，它返回删除了前导空格的 <paramref name="stringArgument" /> 的值。</returns>
      <param name="stringArgument">一个表达式，它指定应删除其前导空格的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“LTrim”函数的重载接受结果类型为 <paramref name="stringArgument" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（这些参数必须具有单精度、双精度或十进制以及整数结果类型）调用规范“Truncate”函数。表达式的结果类型与 <paramref name="value" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它按照 <paramref name="digits" /> 指定的精度将指定的参数截断为最接近的整数值。</returns>
      <param name="value">一个表达式，它指定要截断的数值。</param>
      <param name="digits">一个表达式，它指定要在截断时要使用的精度位数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="digits" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Truncate”函数的重载接受结果类型为 <paramref name="value" /> 和 <paramref name="digits" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime 或 DateTimeOffset 结果类型）调用规范“TruncateTime”函数。表达式的结果类型与 <paramref name="dateValue" /> 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回其时间设置为零的 <paramref name="dateValue" /> 的值。</returns>
      <param name="dateValue">一个表达式，它指定应截断其时间部分的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“TruncateTime”函数的重载接受结果类型为 <paramref name="dateValue" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它对指定集合的非 null 成员调用规范“Var”函数。表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它生成集合的非 null 成员的方差值。</returns>
      <param name="collection">一个表达式，它指定应计算其方差的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Var”函数的重载接受结果类型为 <paramref name="collection" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它对指定集合的总体调用规范“VarP”函数。表达式的结果类型为 Edm.Double。</summary>
      <returns>生成方差值的新的 DbFunctionExpression。</returns>
      <param name="collection">一个表达式，它指定应计算其方差的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“VarP”函数的重载接受结果类型为 <paramref name="collection" /> 的参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 DateTime 或 DateTimeOffset 结果类型）调用规范“Year”函数。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它从<paramref name=" dateValue" /> 返回整数年份值。</returns>
      <param name="dateValue">一个表达式，它指定应从中检索年份的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有规范“Year”函数的重载接受结果类型为 <paramref name="dateValue" /> 的参数。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row">
      <summary>表示 Row 类，它旨在提供用于调用 &lt;see cref="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})" /&gt; 的类似构造函数的方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}[])">
      <summary>使用指定的第一列值和可选的连续列值来初始化 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row" /> 类的新实例。</summary>
      <param name="columnValue">提供新的行实例中的第一列的键/值对（必需）。</param>
      <param name="columnValues">提供新的行实例中的任何后续列的键/值对（可选）。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>将一个 Row 对象转换成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</summary>
      <returns>表示转换后的 Row 对象的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="row">Row 对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.ToExpression">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />，它基于此行实例中包含的列构造一个新行。</summary>
      <returns>一个新的 DbNewInstanceExpression，它使用与此行实例相同的列名和 DbExpression 值构造一行。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions">
      <summary>提供一个 API 以便构造调用空间相关的规范 EDM 函数的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />，并且在适用时允许该 API 作为针对表达式类型本身的扩展方法来访问。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Area(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“Area”函数。表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 spatialValue 的区域，如果 spatialValue 不是图面，则返回 null。</returns>
      <param name="spatialValue">一个表达式，它指定应为其计算面积的空间表面值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“AsBinary”函数。表达式的结果类型为 Edm.Binary。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 spatialValue 的已知二进制表示形式。</returns>
      <param name="spatialValue">一个表达式，它指定应从其生成已知二进制表示形式的空间值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“AsGml”函数。表达式的结果类型为 Edm.String。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 spatialValue 的地理标记语言 (GML) 表示形式。</returns>
      <param name="spatialValue">一个表达式，它指定应从其生成地理标记语言 (GML) 表示形式的空间值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“AsText”函数。表达式的结果类型为 Edm.String。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 spatialValue 的已知文本表示形式。</returns>
      <param name="spatialValue">一个表达式，它指定应从其生成已知文本表示形式的空间值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Centroid(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范“Centroid”函数。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 geometryValue 的形心点（可能不在图面本身上），如果 geometryValue 不是图面，则返回 null。</returns>
      <param name="geometryValue">一个表达式，它指定应从其检索形心的几何表面值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.CoordinateSystemId(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“CoordinateSystemId”函数。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它从 spatialValue 返回整数 SRID 值。</returns>
      <param name="spatialValue">一个表达式，它指定应从其检索坐标系 ID (SRID) 的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Distance(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“Distance”函数。spatialValue1 的结果类型必须与 spatialValue2 的结果类型相匹配。表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 spatialValue1 和 spatialValue1 最近两点之间的距离。</returns>
      <param name="spatialValue1">指定第一个空间值的表达式。</param>
      <param name="spatialValue2">一个表达式，它指定将测量其与 spatialValue1 之间距离的空间值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Elevation(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“Elevation”函数。表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 spatialValue 的海拔值，如果 spatialValue 不是一个点，则返回 null。</returns>
      <param name="spatialValue">一个表达式，它指定应从其检索海拔（Z 坐标）值的空间点值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.EndPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“EndPoint”函数。结果类型与 spatialValue 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 spatialValue 的结束点，如果 spatialValue 不是曲线，则返回 null。</returns>
      <param name="spatialValue">一个表达式，它指定应从其检索端点的空间曲线值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.ExteriorRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范“ExteriorRing”函数。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它返回多边形 geometryValue 的外部环，如果 geometryValue 不是多边形，则返回 null。</returns>
      <param name="geometryValue">几何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeographyCollectionFromBinary”函数。geographyCollectionWellKnownBinaryValue 必须是二进制结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的地理集合值。</returns>
      <param name="geographyCollectionWellKnownBinaryValue">提供地理集合值的已知二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理集合值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeographyCollectionFromText”函数。geographyCollectionWellKnownText 必须是字符串结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的地理集合值。</returns>
      <param name="geographyCollectionWellKnownText">提供地理集合值的已知文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理集合值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有二进制结果类型）调用规范“GeographyFromBinary”函数。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的二进制值返回新的地理值。</returns>
      <param name="wellKnownBinaryValue">提供地理值的已知二进制表示形式的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeographyFromBinary”函数。wellKnownBinaryValue 必须是二进制结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的地理值。</returns>
      <param name="wellKnownBinaryValue">提供地理值的已知二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范“GeographyFromGml”函数。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于具有基础提供程序的默认坐标系 ID (SRID) 的指定值返回新的地理值。</returns>
      <param name="geographyMarkup">提供地理值的地理标记语言 (GML) 表示形式的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeographyFromGml”函数。geographyMarkup 必须是字符串结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的地理值。</returns>
      <param name="geographyMarkup">提供地理值的地理标记语言 (GML) 表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范“GeographyFromText”函数。表达式的结果类型为 Edm.Geography。其值具有基础提供程序的默认坐标系 ID (SRID)。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的地理值。</returns>
      <param name="wellKnownText">提供地理值的已知文本表示形式的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeographyFromText”函数。wellKnownText 必须是字符串结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的地理值。</returns>
      <param name="wellKnownText">提供地理值的已知文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeographyLineFromBinary”函数。lineWellKnownBinaryValue 必须是二进制结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的地理线条值。</returns>
      <param name="lineWellKnownBinaryValue">提供地理线条值的已知二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理线条值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeographyLineFromText”函数。lineWellKnownText 必须是字符串结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的地理线条值。</returns>
      <param name="lineWellKnownText">提供地理线条值的已知文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理线条值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeographyMultiLineFromBinary”函数。multiLineWellKnownBinaryValue 必须是二进制结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的地理多线条值。</returns>
      <param name="multiLineWellKnownBinaryValue">提供地理多线条值的已知二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理多线条值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeographyMultiLineFromText”函数。multiLineWellKnownText 必须是字符串结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的地理多线条值。</returns>
      <param name="multiLineWellKnownText">提供地理多线条值的已知文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理多线条值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeographyMultiPointFromBinary”函数。multiPointWellKnownBinaryValue 必须是二进制结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的地理多点值。</returns>
      <param name="multiPointWellKnownBinaryValue">提供地理多点值的已知二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理多点值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeographyMultiPointFromText”函数。multiPointWellKnownText 必须是字符串结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的地理多点值。</returns>
      <param name="multiPointWellKnownText">提供地理多点值的已知文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理多点值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeographyMultiPolygonFromBinary”函数。multiPolygonWellKnownBinaryValue 必须是二进制结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的地理多多边形值。</returns>
      <param name="multiPolygonWellKnownBinaryValue">提供地理多多边形值的已知二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理多多边形值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeographyMultiPolygonFromText”函数。multiPolygonWellKnownText 必须是字符串结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的地理多多边形值。</returns>
      <param name="multiPolygonWellKnownText">提供地理多多边形值的已知文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理多多边形值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeographyPointFromBinary”函数。pointWellKnownBinaryValue 必须是二进制结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的地理点值。</returns>
      <param name="pointWellKnownBinaryValue">提供地理点值的已知二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理多点值的 systempointWellKnownBinaryValue 的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeographyPointFromText”函数。</summary>
      <returns>规范的“GeographyPointFromText”函数。</returns>
      <param name="pointWellKnownText">提供地理点值的已知文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理点值的坐标 systempointWellKnownTextValue 的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeographyPolygonFromBinary”函数。polygonWellKnownBinaryValue 必须是二进制结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的地理多边形值。</returns>
      <param name="polygonWellKnownBinaryValue">提供地理多边形值的已知二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理多边形值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeographyPolygonFromText”函数。polygonWellKnownText 必须是字符串结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geography。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的地理多边形值。</returns>
      <param name="polygonWellKnownText">提供地理多边形值的已知文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供地理多边形值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeometryCollectionFromBinary”函数。geometryCollectionWellKnownBinaryValue 必须是二进制结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何集合值。</returns>
      <param name="geometryCollectionWellKnownBinaryValue">提供几何集合值的已知二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何集合值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeometryCollectionFromText”函数。geometryCollectionWellKnownText 必须是字符串结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何集合值。</returns>
      <param name="geometryCollectionWellKnownText">提供几何集合值的已知文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何集合值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有二进制结果类型）调用规范“GeometryFromBinary”函数。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的二进制值返回新的几何值。</returns>
      <param name="wellKnownBinaryValue">提供几何值的已知二进制表示形式的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeometryFromBinary”函数。wellKnownBinaryValue 必须是二进制结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何值。</returns>
      <param name="wellKnownBinaryValue">提供几何值的已知二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范“GeometryFromGml”函数。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于具有基础提供程序的默认坐标系 ID (SRID) 的指定值返回新的几何值。</returns>
      <param name="geometryMarkup">提供几何值的地理标记语言 (GML) 表示形式的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeometryFromGml”函数。geometryMarkup 必须是字符串结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何值。</returns>
      <param name="geometryMarkup">提供几何值的地理标记语言 (GML) 表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有字符串结果类型）调用规范“GeometryFromText”函数。表达式的结果类型为 Edm.Geometry。其值具有基础提供程序的默认坐标系 ID (SRID)。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何值。</returns>
      <param name="wellKnownText">提供几何值的已知文本表示形式的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeometryFromText”函数。wellKnownText 必须是字符串结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何值。</returns>
      <param name="wellKnownText">提供几何值的已知文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeometryLineFromBinary”函数。lineWellKnownBinaryValue 必须是二进制结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何线条值。</returns>
      <param name="lineWellKnownBinaryValue">提供几何线条值的已知二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何线条值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeometryLineFromText”函数。lineWellKnownText 必须是字符串结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何线条值。</returns>
      <param name="lineWellKnownText">提供几何线条值的已知文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何线条值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeometryMultiLineFromBinary”函数。multiLineWellKnownBinaryValue 必须是二进制结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何多线条值。</returns>
      <param name="multiLineWellKnownBinaryValue">提供几何多线条值的已知二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何多线条值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeometryMultiLineFromText”函数。multiLineWellKnownText 必须是字符串结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何多线条值。</returns>
      <param name="multiLineWellKnownText">提供几何多线条值的已知文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何多线条值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeometryMultiPointFromBinary”函数。multiPointWellKnownBinaryValue 必须是二进制结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何多点值。</returns>
      <param name="multiPointWellKnownBinaryValue">提供几何多点值的已知二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何多点值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeometryMultiPointFromText”函数。multiPointWellKnownText 必须是字符串结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何多点值。</returns>
      <param name="multiPointWellKnownText">提供几何多点值的已知文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何多点值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeometryMultiPolygonFromBinary”函数。multiPolygonWellKnownBinaryValue 必须是二进制结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何多多边形值。</returns>
      <param name="multiPolygonWellKnownBinaryValue">提供几何多多边形值的已知二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何多多边形值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeometryMultiPolygonFromText”函数。multiPolygonWellKnownText 必须是字符串结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何多多边形值。</returns>
      <param name="multiPolygonWellKnownText">提供几何多多边形值的已知文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何多多边形值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeometryPointFromBinary”函数。pointWellKnownBinaryValue 必须是二进制结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何点值。</returns>
      <param name="pointWellKnownBinaryValue">提供几何点值的已知二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何点值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeometryPointFromText”函数。pointWellKnownText 必须是字符串结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何点值。</returns>
      <param name="pointWellKnownText">提供几何点值的已知文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何点值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeometryPolygonFromBinary”函数。polygonWellKnownBinaryValue 必须是二进制结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何多边形值。</returns>
      <param name="polygonWellKnownBinaryValue">提供几何多边形值的已知二进制表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何多边形值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“GeometryPolygonFromText”函数。polygonWellKnownText 必须是字符串结果类型，而 coordinateSystemId 必须是整数数值结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它基于指定的值返回新的几何多边形值。</returns>
      <param name="polygonWellKnownText">提供几何多边形值的已知文本表示形式的表达式。</param>
      <param name="coordinateSystemId">提供几何多边形值的坐标系的坐标系 ID (SRID) 的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“InteriorRingAt”函数。第一个参数必须具有 Edm.Geometry 结果类型。第二个参数必须具有整数结果类型。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 geometryValue 中位置 indexValue 处的内部环，如果 geometryValue 不是多边形，则返回 null。</returns>
      <param name="geometryValue">几何值。</param>
      <param name="indexValue">一个表达式，它指定要从多边形中检索的内部环的位置。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范“InteriorRingCount”函数。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回多边形 geometryValue 中的内部环数，如果 geometryValue 不是多边形，则返回 null。</returns>
      <param name="geometryValue">几何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsClosedSpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“IsClosedSpatial”函数。结果类型是 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 spatialValue 是否闭合的布尔值，如果 spatialValue 不是曲线，则返回 null。</returns>
      <param name="spatialValue">一个表达式，它指定应从其检索 IsClosedSpatial 值的空间曲线值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsEmptySpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“IsEmptySpatial”函数。表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 spatialValue 是否为空的布尔值。</returns>
      <param name="spatialValue">一个表达式，它指定应从其检索 IsEmptySptiaal 值的空间值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范“IsRing”函数。结果类型是 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 geometryValue 是否为圆环（闭合和简单）的布尔值，如果 geometryValue 不是曲线，则返回 null。</returns>
      <param name="geometryValue">一个表达式，它指定应从其检索 IsRing 值的几何曲线值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsSimpleGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范“IsSimpleGeometry”函数。表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 geometryValue 是否为简单几何图形的布尔值。</returns>
      <param name="geometryValue">几何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsValidGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范“IsValidGeometry”函数。表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 geometryValue 是否有效的布尔值。</returns>
      <param name="geometryValue">指定应进行空间有效性测试的几何值的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Latitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geography 结果类型）调用规范“Latitude”函数。表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 geographyValue 的纬度值，如果 geographyValue 不是一个点，则返回 null。</returns>
      <param name="geographyValue">一个表达式，它指定应从其检索 Latitude 值的地理点值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Longitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geography 结果类型）调用规范“Longitude”函数。表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 geographyValue 的经度值，如果 geographyValue 不是一个点，则返回 null。</returns>
      <param name="geographyValue">一个表达式，它指定应从其检索 Longitude 值的地理点值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Measure(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“Measure”函数。表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 spatialValue 的度量值，如果 spatialValue 不是一个点，则返回 null。</returns>
      <param name="spatialValue">一个表达式，它指定应从其检索测量 (M) 坐标值的空间点值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“PointAt”函数。第一个参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型。第二个参数必须具有整数结果类型。表达式的结果类型与 spatialValue 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 spatialValue 中位置 indexValue 处的点，如果 spatialValue 不是线串，则返回 null。</returns>
      <param name="spatialValue">指定空间线串值的表达式。</param>
      <param name="indexValue">指定要从线串内检索的点的位置的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“PointCount”函数。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 spatialValue 中点的数目，如果 spatialValue 不是线串，则返回 null。</returns>
      <param name="spatialValue">一个表达式，它指定应从其检索点的数目的空间线串值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointOnSurface(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范“PointOnSurface”函数。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它返回保证位于图面 geometryValue 上的点，如果 geometryValue 不是图面，则返回 null。</returns>
      <param name="geometryValue">一个表达式，它指定应从其检索点的几何表面值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBoundary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范“SpatialBoundary”函数。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 geometryValue 的边界。</returns>
      <param name="geometryValue">一个表达式，它指定应从其检索 SpatialBoundary 值的几何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBuffer(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 和 Edm.Double 结果类型）调用规范“SpatialBuffer”函数。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它返回一个几何值，该值表示小于或等于与 spatialValue 的距离的所有点。</returns>
      <param name="spatialValue">一个指定空间值的表达式。</param>
      <param name="distance">一个指定缓冲距离的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialContains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geometry 结果类型）调用规范“SpatialContains”函数。表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 geometryValue1 是否在空间上包含 geometryValue2 的布尔值。</returns>
      <param name="geometryValue1">一个指定第一个几何值的表达式。</param>
      <param name="geometryValue2">一个表达式，它指定应与 geometryValue1 进行比较的几何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialConvexHull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范“SpatialConvexHull”函数。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 geometryValue 的凸包。</returns>
      <param name="geometryValue">一个表达式，它指定应从其检索凸包值的几何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialCrosses(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geometry 结果类型）调用规范“SpatialCrosses”函数。表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 geometryValue1 是否与 geometryValue2 相交的布尔值。</returns>
      <param name="geometryValue1">一个指定第一个几何值的表达式。</param>
      <param name="geometryValue2">一个表达式，它指定应与 geometryValue1 进行比较的几何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“SpatialDifference”函数。spatialValue1 的结果类型必须与 spatialValue2 的结果类型相匹配。表达式的结果类型与 spatialValue1 和 spatialValue2 的类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回表示 spatialValue1 与 spatialValue2 之间的差异的几何值。</returns>
      <param name="spatialValue1">指定第一个空间值的表达式。</param>
      <param name="spatialValue2">一个表达式，它指定应计算与 spatialValue1 之间的差异的空间值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDimension(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“SpatialDimension”函数。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它从 spatialValue 返回维度值。</returns>
      <param name="spatialValue">一个表达式，它指定应从其检索 Dimension 值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDisjoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“SpatialDisjoint”函数。spatialValue1 的结果类型必须与 spatialValue2 的结果类型相匹配。表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 spatialValue1 与 spatialValue2 是否在空间上不相交的布尔值。</returns>
      <param name="spatialValue1">指定第一个空间值的表达式。</param>
      <param name="spatialValue2">一个表达式，它指定应与 spatialValue1 进行不相交性比较的空间值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数调用规范“SpatialElementAt”函数。第一个参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型。第二个参数必须具有整数结果类型。表达式的结果类型与 spatialValue 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 spatialValue 中位置 indexValue 处的集合元素，如果 spatialValue 不是集合，则返回 null。</returns>
      <param name="spatialValue">一个表达式，它指定地理或几何集合值。</param>
      <param name="indexValue">一个表达式，它指定要从几何或地理集合中检索的元素的位置。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“SpatialElementCount”函数。表达式的结果类型为 Edm.Int32。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 spatialValue 中元素的数目，如果 spatialValue 不是集合，则返回 null。</returns>
      <param name="spatialValue">一个表达式，它指定应从其检索某个数目的元素的地理或几何集合值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEnvelope(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范“SpatialEnvelope”函数。表达式的结果类型为 Edm.Geometry。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 geometryValue 的最小边框。</returns>
      <param name="geometryValue">一个表达式，它指定应从其检索 Envelope 值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEquals(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“SpatialEquals”函数。spatialValue1 的结果类型必须与 spatialValue2 的结果类型相匹配。表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 spatialValue1 是否与 spatialValue2 相等的布尔值。</returns>
      <param name="spatialValue1">指定第一个空间值的表达式。</param>
      <param name="spatialValue2">一个表达式，它指定应与 spatialValue1 比较是否相等的空间值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersection(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“SpatialIntersection”函数。spatialValue1 的结果类型必须与 spatialValue2 的结果类型相匹配。表达式的结果类型与 spatialValue1 和 spatialValue2 的类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回表示 spatialValue1 和 spatialValue2 的交集的空间值。</returns>
      <param name="spatialValue1">指定第一个空间值的表达式。</param>
      <param name="spatialValue2">一个表达式，它指定要计算与 spatialValue1 的交集的空间值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersects(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“SpatialIntersects”函数。spatialValue1 的结果类型必须与 spatialValue2 的结果类型相匹配。表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 spatialValue1 是否与 spatialValue2 相交的布尔值。</returns>
      <param name="spatialValue1">指定第一个空间值的表达式。</param>
      <param name="spatialValue2">一个表达式，它指定应与 spatialValue1 进行相交性比较的空间值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialLength(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“SpatialLength”函数。表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 spatialValue 的长度，如果 spatialValue 不是曲线，则返回 null。</returns>
      <param name="spatialValue">一个表达式，它指定应从其检索长度的空间曲线值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialOverlaps(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geometry 结果类型）调用规范“SpatialOverlaps”函数。表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 geometryValue1 是否在空间上与 geometryValue2 重叠的布尔值。</returns>
      <param name="geometryValue1">一个指定第一个几何值的表达式。</param>
      <param name="geometryValue2">一个表达式，它指定应与 geometryValue1 进行比较的几何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialRelate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（参数必须具有 Edm.Geometry 和字符串结果类型）调用规范“SpatialRelate”函数。表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回一个布尔值，该值根据 intersectionPatternMatrix 指定的空间关系指示 geometryValue1 在空间上是否与 geometryValue2 相关。</returns>
      <param name="geometryValue1">一个指定第一个几何值的表达式。</param>
      <param name="geometryValue2">一个表达式，它指定应与 geometryValue1 进行比较的几何值。</param>
      <param name="intersectionPatternMatrix">一个表达式，它指定用于比较 geometryValue1 和 geometryValue2 的维度扩展九交模型 (DE-9IM) 交集模式的文本表示形式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialSymmetricDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“SpatialSymmetricDifference”函数。spatialValue1 的结果类型必须与 spatialValue2 的结果类型相匹配。表达式的结果类型与 spatialValue1 和 spatialValue2 的类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回表示 spatialValue1 与 spatialValue2 之间的对称差异的几何值。</returns>
      <param name="spatialValue1">指定第一个空间值的表达式。</param>
      <param name="spatialValue2">一个表达式，它指定应计算与 spatialValue1 之间的对称差异的空间值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTouches(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geometry 结果类型）调用规范“SpatialTouches”函数。表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 geometryValue1 是否与 geometryValue2 接触的布尔值。</returns>
      <param name="geometryValue1">一个指定第一个几何值的表达式。</param>
      <param name="geometryValue2">一个表达式，它指定应与 geometryValue1 进行比较的几何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTypeName(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“SpatialTypeName”函数。表达式的结果类型为 Edm.String。</summary>
      <returns>一个新的 DbFunctionExpression，它从 spatialValue 中返回字符串几何类型名称。</returns>
      <param name="spatialValue">一个表达式，它指定应从中检索几何类型名称的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialUnion(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“SpatialUnion”函数。spatialValue1 的结果类型必须与 spatialValue2 的结果类型相匹配。表达式的结果类型与 spatialValue1 和 spatialValue2 的类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回表示 spatialValue1 和 spatialValue2 的并集的空间值。</returns>
      <param name="spatialValue1">指定第一个空间值的表达式。</param>
      <param name="spatialValue2">一个表达式，它指定应计算与 spatialValue1 的并集的空间值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialWithin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（每个参数必须具有 Edm.Geometry 结果类型）调用规范“SpatialWithin”函数。表达式的结果类型为 Edm.Boolean。</summary>
      <returns>一个新的 DbFunctionExpression，它返回指示 geometryValue1 是否在 geometryValue2 空间内的布尔值。</returns>
      <param name="geometryValue1">一个指定第一个几何值的表达式。</param>
      <param name="geometryValue2">一个表达式，它指定应与 geometryValue1 进行比较的几何值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.StartPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定参数（该参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型）调用规范“StartPoint”函数。结果类型与 spatialValue 的结果类型相同。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 spatialValue 的起始点，如果 spatialValue 不是曲线，则返回 null。</returns>
      <param name="spatialValue">一个表达式，它指定应从其检索起点的空间曲线值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.XCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范“XCoordinate”函数。表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 geometryValue 的 X 坐标值，如果 geometryValue 不是一个点，则返回 null。</returns>
      <param name="geometryValue">一个表达式，它指定应从其检索 X 坐标值的几何点值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.YCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />，它使用指定的参数（该参数必须具有 Edm.Geometry 结果类型）调用规范“YCoordinate”函数。表达式的结果类型为 Edm.Double。</summary>
      <returns>一个新的 DbFunctionExpression，它返回 geometryValue 的 Y 坐标值，如果 geometryValue 不是一个点，则返回 null。</returns>
      <param name="geometryValue">一个表达式，它指定应从其检索 Y 坐标值的几何点值。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser">
      <summary>公共实体 SQL 分析器类。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.Parse(System.String,System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression[])">
      <summary>分析具有指定参数的指定查询。</summary>
      <returns>包含 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> 的 <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" /> 以及描述内联函数定义的信息（如果有）。</returns>
      <param name="query">要分析的 EntitySQL 查询。</param>
      <param name="parameters">可选查询参数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.ParseLambda(System.String,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>分析具有特定设置变量的特定查询并生成 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />。</summary>
      <returns>包含 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> 的 <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" /> 以及描述内联函数定义的信息（如果有）。</returns>
      <param name="query">要分析的查询。</param>
      <param name="variables">可选查询变量。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition">
      <summary>实体 SQL 查询内联函数定义，作为 <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" /> 的一部分返回。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.EndPosition">
      <summary>eSQL 查询文本中函数定义的结束位置。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Lambda">
      <summary>函数体和参数。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Name">
      <summary>函数名。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.StartPosition">
      <summary>eSQL 查询文本中函数定义的起始位置。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.ParseResult">
      <summary>实体 SQL 分析器结果信息。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.CommandTree">
      <summary>在分析过程中生成的命令目录树。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.FunctionDefinitions">
      <summary>描述查询内联函数定义的 <see cref="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition" /> 对象的列表。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityCommand">
      <summary>表示概念层的命令的类</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor">
      <summary>使用指定的值初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String)">
      <summary>使用指定的语句初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 类的新实例。</summary>
      <param name="statement">命令的文本。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection)">
      <summary>使用指定的语句和连接初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 类的新实例。</summary>
      <param name="statement">命令的文本。</param>
      <param name="connection">与数据源的连接。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Core.EntityClient.EntityTransaction)">
      <summary>使用指定的语句、连接和事务初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 类的新实例。</summary>
      <param name="statement">命令的文本。</param>
      <param name="connection">与数据源的连接。</param>
      <param name="transaction">在其中执行命令的事务。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>构造具有给定 eSQL 语句以及要使用的连接对象的 EntityCommand 对象</summary>
      <param name="statement">要执行的 eSQL 命令文本</param>
      <param name="connection">连接对象</param>
      <param name="resolver">用于解析 DbProviderServices 的解析程序</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Cancel">
      <summary>取消执行 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText">
      <summary>获取或设置指定要执行的命令或存储过程的实体 SQL 语句。</summary>
      <returns>指定要执行的命令或存储过程的实体 SQL 语句。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTimeout">
      <summary>获取或设置超时前要等待的时间长度。</summary>
      <returns>等待命令执行所需的时间（以秒为单位）。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTree">
      <summary>获取或设置要执行的命令目录树；只能设置命令目录树或命令文本中的其中一个，而不能同时设置二者。</summary>
      <returns>要执行的命令目录树。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandType">
      <summary>获取或设置一个值，该值指示如何解释 <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" /> 属性。</summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 枚举值之一。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection">
      <summary>获取或设置 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 使用的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />。</summary>
      <returns>由实体命令使用的连接。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateDbParameter">
      <summary>创建并返回一个新的参数对象，该对象表示 eSQL 语句中的参数</summary>
      <returns>参数对象。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateParameter">
      <summary>创建 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 对象的新实例。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 对象的一个新实例。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbConnection">
      <summary>用于执行命令的连接对象</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbParameterCollection">
      <summary>此命令的参数集合</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbTransaction">
      <summary>此命令要在其中执行的事务</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DesignTimeVisible">
      <summary>获取或设置一个值，该值指示命令对象在 Windows 窗体设计器控件中是否应该可见。</summary>
      <returns>如果该命令对象应在 Windows 窗体设计器中可见，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.EnablePlanCaching">
      <summary>获取或设置一个值，该值指示查询计划缓存是否启用。</summary>
      <returns>如果查询计划缓存已启用，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
      <summary>执行命令并且返回用于读取结果的数据读取器</summary>
      <returns>DbDataReader 对象</returns>
      <param name="behavior">执行命令时要使用的行为</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>异步执行命令并且返回用于读取结果的数据读取器</summary>
      <returns>表示异步操作的任务。任务结果包含一个 DbDataReader 对象。</returns>
      <param name="behavior">执行命令时要使用的行为</param>
      <param name="cancellationToken">针对取消请求监视的标记</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteNonQuery">
      <summary>执行当前命令。</summary>
      <returns>受影响的行数。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>异步执行此命令并且放弃从此命令返回的任何结果</summary>
      <returns>表示异步操作的任务。任务结果包含受影响的行数。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader">
      <summary>执行命令并返回一个数据读取器。</summary>
      <returns>包含结果的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>将 <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" /> 编译成命令目录树，并将其传递到基础存储区提供程序以供执行，然后使用指定的 <see cref="T:System.Data.CommandBehavior" /> 根据生成的结果集生成一个 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />。</summary>
      <returns>包含结果的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />。</returns>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync">
      <summary>异步执行命令并且返回用于读取结果的数据读取器。只能对 CommandType.CommandText 调用（否则，使用标准 Execute* 方法）</summary>
      <returns>表示异步操作的任务。任务结果包含一个 EntityDataReader 对象。</returns>
      <exception cref="T:System.InvalidOperationException">对于存储过程命令；对于实体集合结果以外的任何项，则调用</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>异步执行命令并且返回用于读取结果的数据读取器。只能对 CommandType.CommandText 调用（否则，使用标准 Execute* 方法）</summary>
      <returns>表示异步操作的任务。任务结果包含一个 EntityDataReader 对象。</returns>
      <param name="behavior">执行命令时要使用的行为</param>
      <exception cref="T:System.InvalidOperationException">对于存储过程命令；对于实体集合结果以外的任何项，则调用</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>异步执行命令并且返回用于读取结果的数据读取器。只能对 CommandType.CommandText 调用（否则，使用标准 Execute* 方法）</summary>
      <returns>表示异步操作的任务。任务结果包含一个 EntityDataReader 对象。</returns>
      <param name="behavior">执行命令时要使用的行为</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">对于存储过程命令；对于实体集合结果以外的任何项，则调用</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>异步执行命令并且返回用于读取结果的数据读取器。只能对 CommandType.CommandText 调用（否则，使用标准 Execute* 方法）</summary>
      <returns>表示异步操作的任务。任务结果包含一个 EntityDataReader 对象。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">对于存储过程命令；对于实体集合结果以外的任何项，则调用</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteScalar">
      <summary>执行命令，并返回结果集中第一行的第一列。其他列或行将被忽略。</summary>
      <returns>结果集中第一行的第一列；如果结果集为空，则为空引用（在 Visual Basic 中为 Nothing）。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Parameters">
      <summary>获取实体 SQL 语句或存储过程的参数。</summary>
      <returns>实体 SQL 语句或存储过程的参数。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Prepare">
      <summary>编译实体级别的命令并创建该命令的预制版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ToTraceString">
      <summary>编译实体级别的命令并返回存储命令文本。</summary>
      <returns>存储命令文本。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Transaction">
      <summary>获取或设置在其中执行 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的事务。</summary>
      <returns>在其中执行 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的事务。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.UpdatedRowSource">
      <summary>获取或设置向正在更新的行应用命令结果的方式。</summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 值之一。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityConnection">
      <summary>表示概念层的连接的类。一个实体连接只能被初始化一次（通过打开该连接）。之后将无法更改连接字符串、附加新的存储连接或更改存储连接字符串。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)">
      <summary>使用指定的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 和 <see cref="T:System.Data.Common.DbConnection" /> 来初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 类的新实例。</summary>
      <param name="workspace">与此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 关联的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。</param>
      <param name="connection">此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 对象的基础数据源连接。</param>
      <exception cref="T:System.ArgumentNullException">workspace 或 connection 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">工作区缺少概念模型。-或-工作区缺少映射文件。-或-工作区缺少存储模型。-或-连接未处于关闭状态。</exception>
      <exception cref="T:System.Data.Entity.Core.ProviderIncompatibleException">connection 并非来自与 ADO.NET Entity Framework 兼容的提供程序。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection,System.Boolean)">
      <summary>从内存中加载的元数据构造 EntityConnection</summary>
      <param name="workspace">包含元数据信息的工作区。</param>
      <param name="connection">存储连接。</param>
      <param name="entityConnectionOwnsStoreConnection">如果设置为 true，则释放实体连接时将释放该存储连接；否则调用方必须释放该存储连接。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.String)">
      <summary>基于连接字符串初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 类的新实例。</summary>
      <param name="connectionString">提供程序特定的连接字符串。</param>
      <exception cref="T:System.ArgumentException">提供的连接字符串关键字无效，或未提供所需的连接字符串关键字。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)">
      <summary>开始一个数据库事务</summary>
      <returns>表示新事务的对象</returns>
      <param name="isolationLevel">事务的隔离级别</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction">
      <summary>使用基础提供程序开始一个事务。</summary>
      <returns>一个新的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />。返回的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> 实例以后可以与 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 关联以执行该事务下的命令。</returns>
      <exception cref="T:System.InvalidOperationException">基础提供程序未知。-或-对已具有当前事务的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 调用 <see cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" />。-或-<see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 的状态不是 <see cref="F:System.Data.ConnectionState.Open" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>使用基础提供程序开始一个具有指定隔离级别的事务。</summary>
      <returns>一个新的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />。返回的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> 实例以后可以与 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 关联以执行该事务下的命令。</returns>
      <param name="isolationLevel">事务的隔离级别。</param>
      <exception cref="T:System.InvalidOperationException">基础提供程序未知。-或-对已具有当前事务的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 调用 <see cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" />。-或-<see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 的状态不是 <see cref="F:System.Data.ConnectionState.Open" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.ChangeDatabase(System.String)">
      <summary>不提供支持。</summary>
      <param name="databaseName">不提供支持。</param>
      <exception cref="T:System.NotSupportedException">调用该方法时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Close">
      <summary>关闭与数据库之间的连接。</summary>
      <exception cref="T:System.InvalidOperationException">关闭连接时出错。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionString">
      <summary>获取或设置 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 连接字符串。</summary>
      <returns>建立与数据源的初始连接所需的连接字符串。默认值为一个空字符串。连接关闭时，将返回当前设置的值。如果未设置任何值，则将返回一个空字符串。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionTimeout">
      <summary>获取从尝试建立连接到结束尝试并生成错误需要等待的秒数。</summary>
      <returns>等待连接打开所需的时间（以秒为单位）。默认值为基础数据提供程序的默认超时值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateCommand">
      <summary>在 <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection" /> 设置为此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 的情况下创建 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 的新实例。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">基础数据提供程序的名称未知。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateDbCommand">
      <summary>创建使用此连接对象的新命令对象</summary>
      <returns>命令对象。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.CurrentTransaction">
      <summary>获取此连接在其中登记的当前事务。可能为 null。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.Database">
      <summary>获取当前数据库或将在连接打开后使用的数据库的名称。</summary>
      <returns>基础数据提供程序的 Database 属性值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DataSource">
      <summary>获取要连接到的数据源的名称或网络地址。</summary>
      <returns>数据源的名称。默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DbProviderFactory">
      <summary>获取与此 EntityConnection 关联的提供程序工厂</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Dispose(System.Boolean)">
      <summary>清除此连接对象</summary>
      <param name="disposing">如果为 true，则同时释放托管资源和非托管资源；如果为 false，则仅释放非托管资源</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>在指定的事务中登记此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />。</summary>
      <param name="transaction">要在其中进行登记的事务对象。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 的状态不是 <see cref="F:System.Data.ConnectionState.Open" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.GetMetadataWorkspace">
      <summary>返回与此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 关联的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。</summary>
      <returns>与此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 关联的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。</returns>
      <exception cref="T:System.Data.Entity.Core.MetadataException">内联连接字符串包含一个无效的 Metadata 关键字值。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Open">
      <summary>通过调用基础数据提供程序的 Open 方法建立到数据源的连接。</summary>
      <exception cref="T:System.InvalidOperationException">打开连接时出错，或基础数据提供程序的名称未知。</exception>
      <exception cref="T:System.Data.Entity.Core.MetadataException">内联连接字符串包含一个无效的 Metadata 关键字值。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>通过在基础数据提供程序上调用 Open 方法以异步方式建立与数据存储的连接</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ServerVersion">
      <summary>获取一个字符串，该字符串包含客户端连接到的数据源的版本。</summary>
      <returns>提供程序连接字符串中包含的数据源的版本。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.State">
      <summary>获取 EntityConnection 的状态，它设置为跟踪此 EntityConnection 包装的基础数据库连接的状态。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.StoreConnection">
      <summary>提供对 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 对象使用的基础数据源连接的访问。</summary>
      <returns>数据源连接的 <see cref="T:System.Data.Common.DbConnection" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder">
      <summary>表示实体客户端提供程序的连接字符串生成器的类</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor(System.String)">
      <summary>使用提供的连接字符串初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 类的新实例。</summary>
      <param name="connectionString">一个指向基础数据源的提供程序特定的连接字符串。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Clear">
      <summary>清除 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 实例的内容。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ContainsKey(System.String)">
      <summary>确定 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 是否包含特定的键。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 包含具有指定键的元素，则返回 true；否则返回 false。</returns>
      <param name="keyword">要在 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 中定位的键。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.IsFixedSize">
      <summary>获取一个值，指示 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 是否具有固定大小。</summary>
      <returns>无论在何种情况下，都将返回 true，因为 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 始终提供固定大小的关键字/值对集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Item(System.String)">
      <summary>获取或设置与指定的键关联的值。在 C# 中，此属性为索引器。</summary>
      <returns>与指定的键相关联的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Keys">
      <summary>获取包含 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 中的键的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 中的键。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Metadata">
      <summary>获取或设置连接字符串中的元数据位置。</summary>
      <returns>获取或设置连接字符串中的元数据位置。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Name">
      <summary>获取或设置配置文件中定义的节名称。</summary>
      <returns>配置文件中的节名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Provider">
      <summary>获取或设置连接字符串中的基础 .NET Framework 数据提供程序的名称。</summary>
      <returns>基础 .NET Framework 数据提供程序的固定名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ProviderConnectionString">
      <summary>获取或设置提供程序特定的内部连接字符串。</summary>
      <returns>提供程序特定的内部连接字符串。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Remove(System.String)">
      <summary>从 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 实例中移除具有指定的键的项。</summary>
      <returns>如果该键存在于连接字符串中并被移除，则返回 true；如果该键不存在，则返回 false。</returns>
      <param name="keyword">要从此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 中的连接字符串删除的关键字/值对的键。</param>
      <exception cref="T:System.ArgumentNullException">关键字为 null（在 Visual Basic 中为 Nothing）</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>从此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 中检索与提供的键相对应的值。</summary>
      <returns>如果在连接字符串中找到 keyword，则返回 true；否则返回 false。</returns>
      <param name="keyword">要检索的项的键。</param>
      <param name="value">与 keyword 相对应的值。</param>
      <exception cref="T:System.ArgumentNullException">keyword 包含一个 null 值（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityDataReader">
      <summary>实体客户端提供程序的数据读取器类</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close">
      <summary>关闭 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> 对象。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.DataRecordInfo">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.IExtendedDataRecord" /> 的 <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" />。</summary>
      <returns>数据记录信息。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Depth">
      <summary>获取一个值，该值指示当前行的嵌套深度。</summary>
      <returns>当前行的嵌套深度。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Dispose(System.Boolean)">
      <summary>释放由此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> 占用的资源并调用 <see cref="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close" />。</summary>
      <param name="disposing">如果为 true，则同时释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.FieldCount">
      <summary>获取当前行中的列数。</summary>
      <returns>当前行中的列数。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBoolean(System.Int32)">
      <summary>以布尔值的形式获取指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetByte(System.Int32)">
      <summary>以字节的形式获取指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>在指定列中从 dataIndex 指示的位置开始，将字节流读入缓冲区，读入缓冲区的起始位置由 bufferIndex 指示。</summary>
      <returns>读取的实际字节数。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataOffset">行中作为读取操作起始位置的索引。</param>
      <param name="buffer">要将数据复制到的缓冲区。</param>
      <param name="bufferOffset">要将数据复制到的位置的缓冲区索引。</param>
      <param name="length">要读取的最多字符数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChar(System.Int32)">
      <summary>以单个字符的形式获取指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>在指定列中从 dataIndex 指示的位置开始，将字符流读入缓冲区，读入缓冲区的起始位置由 bufferIndex 指示。</summary>
      <returns>读取的实际字符数。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataOffset">行中作为读取操作起始位置的索引。</param>
      <param name="buffer">要将数据复制到的缓冲区。</param>
      <param name="bufferOffset">要将数据复制到的位置的缓冲区索引。</param>
      <param name="length">要读取的最多字符数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataReader(System.Int32)">
      <summary>以 <see cref="T:System.Data.Common.DbDataReader" /> 对象的形式返回嵌套的读取器。</summary>
      <returns>作为 <see cref="T:System.Data.Common.DbDataReader" /> 对象嵌套的读取器。</returns>
      <param name="i">列的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataRecord(System.Int32)">
      <summary>返回嵌套的 <see cref="T:System.Data.Common.DbDataRecord" />。</summary>
      <returns>嵌套的数据记录。</returns>
      <param name="i">要返回的 DbDataRecord 的编号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataTypeName(System.Int32)">
      <summary>获取指定列的数据类型的名称。</summary>
      <returns>数据类型的名称。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDateTime(System.Int32)">
      <summary>以 <see cref="T:System.DateTime" /> 对象的形式获取指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDbDataReader(System.Int32)">
      <summary>为可用提供程序特定的实现重写的已请求的列序号返回一个 <see cref="T:System.Data.Common.DbDataReader" /> 对象。</summary>
      <returns>数据读取器。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDecimal(System.Int32)">
      <summary>以 <see cref="T:System.Decimal" /> 对象的形式获取指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDouble(System.Int32)">
      <summary>以双精度浮点数字的形式获取指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetEnumerator">
      <summary>返回一个可用于循环访问数据读取器中的行的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，可用于循环访问数据读取器中的行。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFieldType(System.Int32)">
      <summary>获取指定列的数据类型。</summary>
      <returns>指定列的数据类型。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFloat(System.Int32)">
      <summary>以单精度浮点数字的形式获取指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetGuid(System.Int32)">
      <summary>以全局唯一标识符 (GUID) 的形式获取指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt16(System.Int32)">
      <summary>以 16 位有符号整数的形式获取指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt32(System.Int32)">
      <summary>以 32 位有符号整数的形式获取指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt64(System.Int32)">
      <summary>以 64 位有符号整数的形式获取指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetName(System.Int32)">
      <summary>在给定从零开始的列序号时获取该列的名称。</summary>
      <returns>指定列的名称。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetOrdinal(System.String)">
      <summary>在给定列名时获取相应的列序号。</summary>
      <returns>从零开始的列序号。</returns>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>返回指定列的提供程序特定的字段类型。</summary>
      <returns>描述指定列的数据类型的 <see cref="T:System.Type" /> 对象。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>在当前行的集合中获取提供程序特定的所有属性列。</summary>
      <returns>数组中的 <see cref="T:System.Object" /> 实例数。</returns>
      <param name="values">要将属性列复制到的 <see cref="T:System.Object" /> 数组。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetSchemaTable">
      <summary>返回一个描述 <see cref="T:System.Data.Common.DbDataReader" /> 的列元数据的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetString(System.Int32)">
      <summary>以 <see cref="T:System.String" /> 实例的形式获取指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValue(System.Int32)">
      <summary>以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValues(System.Object[])">
      <summary>使用当前行的列值来填充对象数组。</summary>
      <returns>数组中的 <see cref="T:System.Object" /> 实例数。</returns>
      <param name="values">要将属性列复制到的 <see cref="T:System.Object" /> 数组。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.HasRows">
      <summary>获取一个值，该值指示此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> 是否包含一个或多个行。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> 包含一行或多行，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.IsClosed">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> 是否已关闭。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> 已关闭，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.IsDBNull(System.Int32)">
      <summary>获取一个值，该值指示列中是否包含不存在或丢失的值。</summary>
      <returns>如果指定的列等效于 <see cref="T:System.DBNull" />，则为 true；否则为 false。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.Int32)">
      <summary>以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。</summary>
      <returns>指定列的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.String)">
      <summary>以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。</summary>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.NextResult">
      <summary>在读取一批语句的结果时，使读取器前进到下一个结果。</summary>
      <returns>如果存在其他结果集，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>在读取一批语句时，以异步方式将读取器移到下一结果集</summary>
      <returns>表示异步操作的任务。如果存在其他结果集，则任务结果将包含 true；否则为 false。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Read">
      <summary>使读取器前进到结果集中的下一条记录。</summary>
      <returns>如果存在其他行，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>以异步方式将读取器移到当前结果集的下一行</summary>
      <returns>表示异步操作的任务。如果存在其他行，则任务结果将包含 true；否则为 false。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.RecordsAffected">
      <summary>获取通过执行 SQL 语句更改、插入或删除的行数。</summary>
      <returns>更改、插入或删除的行数。如果是 SELECT 语句，则返回 -1；如果未影响任何行或语句失败，则返回 0。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.VisibleFieldCount">
      <summary>获取 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> 中未隐藏的字段的数目。</summary>
      <returns>未隐藏的字段的数目。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityParameter">
      <summary>表示在 EntityCommand 中使用的参数的类</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType)">
      <summary>使用指定的参数名称和数据类型初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 类的新实例。</summary>
      <param name="parameterName">参数名。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 值之一。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
      <summary>使用指定的参数名称、数据类型和大小初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 类的新实例。</summary>
      <param name="parameterName">参数名。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 值之一。</param>
      <param name="size">参数的大小。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>使用指定的属性初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 类的新实例。</summary>
      <param name="parameterName">参数名。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 值之一。</param>
      <param name="size">参数的大小。</param>
      <param name="direction">
        <see cref="T:System.Data.ParameterDirection" /> 值之一。</param>
      <param name="isNullable">若为 true，则指示参数接受 null 值，否则为 false。</param>
      <param name="precision">用于表示值的位数。</param>
      <param name="scale">值所解析的小数位数。</param>
      <param name="sourceColumn">源列的名称。</param>
      <param name="sourceVersion">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</param>
      <param name="value">参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
      <summary>使用指定的属性初始化 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 类的新实例。</summary>
      <param name="parameterName">参数名。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 值之一。</param>
      <param name="size">参数的大小。</param>
      <param name="sourceColumn">源列的名称。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.DbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.DbType" />。</summary>
      <returns>
        <see cref="T:System.Data.DbType" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Direction">
      <summary>获取或设置参数的方向。</summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.EdmType">
      <summary>获取或设置表示为 EdmType 的参数类型。</summary>
      <returns>表示为 EdmType 的参数的类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.IsNullable">
      <summary>获取或设置一个值，该值指示参数是否接受 null 值。</summary>
      <returns>如果接受 null 值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.ParameterName">
      <summary>获取或设置实体参数的名称。</summary>
      <returns>实体参数的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Precision">
      <summary>获取或设置用于表示 <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" /> 属性的位数。</summary>
      <returns>用于表示值的位数。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ResetDbType">
      <summary>重置与 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 关联的类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Scale">
      <summary>获取或设置所解析的 <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" /> 的小数位数。</summary>
      <returns>值所解析的小数位数。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Size">
      <summary>获取或设置列内数据的最大大小。</summary>
      <returns>列内数据的最大大小。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumn">
      <summary>获取或设置源列的名称，该源列映射到 <see cref="T:System.Data.DataSet" /> 并用于加载或返回 <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" />。</summary>
      <returns>映射到数据集并用于加载或返回值的源列的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumnNullMapping">
      <summary>获取或设置一个值，该值指示源列是否可以为 null。</summary>
      <returns>如果源列可以为 null，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceVersion">
      <summary>获取或设置在加载值时要使用的 <see cref="T:System.Data.DataRowVersion" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ToString">
      <summary>返回参数的字符串表示形式。</summary>
      <returns>参数的字符串表示形式。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value">
      <summary>获取或设置参数的值。</summary>
      <returns>参数的值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection">
      <summary>表示在 EntityCommand 中使用的参数集合的类</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>将指定的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 对象添加到 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中。</summary>
      <returns>一个新的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 对象。</returns>
      <param name="value">要添加到集合中的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</param>
      <exception cref="T:System.ArgumentException">值参数中指定的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 已添加到这个或其他 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中。</exception>
      <exception cref="T:System.InvalidCastException">传递的参数不是 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</exception>
      <exception cref="T:System.ArgumentNullException">value 参数为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Object)">
      <summary>将指定的对象添加到 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 对象的索引。</returns>
      <param name="value">一个 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType)">
      <summary>在给定参数名称和数据类型时向 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中添加一个 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 对象。</returns>
      <param name="parameterName">参数名。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 值之一。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
      <summary>使用给定的参数名称、数据类型和列长度向 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中添加一个 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 对象。</returns>
      <param name="parameterName">参数名。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 值之一。</param>
      <param name="size">列的长度。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Array)">
      <summary>向 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的末尾添加一个值数组。</summary>
      <param name="values">要添加的 <see cref="T:System.Array" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Data.Entity.Core.EntityClient.EntityParameter[])">
      <summary>向 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的末尾添加一个 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 值数组。</summary>
      <param name="values">要添加的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>向 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的末尾添加一个值。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 对象。</returns>
      <param name="parameterName">参数名。</param>
      <param name="value">要添加的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Clear">
      <summary>从 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中删除所有的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 对象。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否在此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 包含该值，则为 true；否则为 false。</returns>
      <param name="value">
        <see cref="T:System.Object" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.String)">
      <summary>确定指定的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 是否在此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 包含该值，则为 true；否则为 false。</returns>
      <param name="parameterName">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>将当前 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的所有元素复制到指定的一维 <see cref="T:System.Array" /> 中，并以指定的目标 <see cref="T:System.Array" /> 索引位置作为复制到的起始位置。</summary>
      <param name="array">作为当前 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中的元素的复制目标的一维 <see cref="T:System.Array" />。</param>
      <param name="index">一个 32 位整数，表示 <see cref="T:System.Array" /> 中开始复制的位置的索引。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Data.Entity.Core.EntityClient.EntityParameter[],System.Int32)">
      <summary>将当前 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的所有元素复制到指定的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中，并以指定的目标索引位置作为复制到的起始位置。</summary>
      <param name="array">作为当前 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中的元素的复制目标的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />。</param>
      <param name="index">一个 32 位整数，表示 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中开始复制的位置的索引。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Count">
      <summary>获取一个包含 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中的元素数的整数。</summary>
      <returns>以整数形式表示的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中的元素数。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.GetEnumerator">
      <summary>返回一个循环访问 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的枚举器。</summary>
      <returns>用于 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>获取指定的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 在集合中的位置。</summary>
      <returns>作为集合中的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 的指定 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 的位置（从零开始）。如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中不存在该对象，则返回 -1。</returns>
      <param name="value">要查找的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Object)">
      <summary>获取指定的 <see cref="T:System.Object" /> 在集合中的位置。</summary>
      <returns>作为集合中的 <see cref="T:System.Object" /> 的指定 <see cref="T:System.Object" /> 的位置（从零开始）。如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中不存在该对象，则返回 -1。</returns>
      <param name="value">要查找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.String)">
      <summary>获取具有指定名称的指定 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 的位置。</summary>
      <returns>具有指定名称（区分大小写）的指定 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 的位置（从零开始）。如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中不存在该对象，则返回 -1。</returns>
      <param name="parameterName">要查找的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 的名称（区分大小写）。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>在 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中的指定索引处插入一个 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 对象。</summary>
      <param name="index">应将值插入到的位置的索引（从零开始）。</param>
      <param name="value">要插入到 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Object)">
      <summary>将 <see cref="T:System.Object" /> 插入 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的指定索引处。</summary>
      <param name="index">应将值插入到的位置的索引（从零开始）。</param>
      <param name="value">要插入到 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsFixedSize">
      <summary>获取一个值，指示 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 具有固定大小，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsReadOnly">
      <summary>获取一个值，指示 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 是否是只读的。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 是只读的，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsSynchronized">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 是否已同步。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 已同步，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.Int32)">
      <summary>获取位于指定索引处的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</summary>
      <returns>指定索引处的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.String)">
      <summary>获取具有指定名称的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</summary>
      <returns>具有指定名称的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 对象。</param>
      <exception cref="T:System.InvalidCastException">该参数不是 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</exception>
      <exception cref="T:System.SystemException">集合中不存在该参数。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Object)">
      <summary>从集合中移除指定的参数。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.Object" /> 对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.Int32)">
      <summary>从 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的指定索引处移除 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 对象的索引（从零开始）。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.String)">
      <summary>从 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 中移除具有指定参数名称的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</summary>
      <param name="parameterName">要移除的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 的名称。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 的访问的对象。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityProviderFactory">
      <summary>类，表示实体客户端提供程序的提供程序工厂</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommand">
      <summary>返回实现 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 的一个新实例。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommandBuilder">
      <summary>引发 <see cref="T:System.NotSupportedException" />。当前不支持该方法。</summary>
      <returns>当前不支持该方法。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnection">
      <summary>返回实现 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 的一个新实例。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnectionStringBuilder">
      <summary>返回实现 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 的一个新实例。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateDataAdapter">
      <summary>引发 <see cref="T:System.NotSupportedException" />。当前不支持该方法。</summary>
      <returns>当前不支持该方法。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateParameter">
      <summary>返回实现 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 的一个新实例。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>引发 <see cref="T:System.NotSupportedException" />。当前不支持该方法。</summary>
      <returns>当前不支持该方法。</returns>
      <param name="state">当前不支持该方法。</param>
    </member>
    <member name="F:System.Data.Entity.Core.EntityClient.EntityProviderFactory.Instance">
      <summary>实体客户端提供程序工厂对象的单一实例对象。这保留一个公共字段（而非属性），因为 DbProviderFactory 应为字段。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.System#IServiceProvider#GetService(System.Type)">
      <summary>返回请求的 <see cref="T:System.IServiceProvider" /> 类。</summary>
      <returns>
        <see cref="T:System.IServiceProvider" /> 的一个新实例。支持的类型是 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />、<see cref="T:System.Data.Entity.Core.Common.DbCommandDefinitionBuilder" /> 和 <see cref="T:System.Data.IEntityAdapter" />。对于所有其他类型均返回 null（在 Visual Basic 中为 Nothing）。</returns>
      <param name="serviceType">要返回的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityTransaction">
      <summary>表示概念层的事务的类</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Commit">
      <summary>提交基础事务。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.Connection">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> 的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />。</summary>
      <returns>一个指向基础数据源的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.DbConnection">
      <summary>拥有此事务对象的连接对象</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Dispose(System.Boolean)">
      <summary>清除此事务对象</summary>
      <param name="disposing">如果为 true，则同时释放托管资源和非托管资源；如果为 false，则仅释放非托管资源</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.IsolationLevel">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> 的隔离级别。</summary>
      <returns>一个 <see cref="T:System.Data.IsolationLevel" /> 枚举值，表示基础事务的隔离级别。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Rollback">
      <summary>回滚基础事务。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.StoreTransaction">
      <summary>获取基础提供程序事务的 DbTransaction。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationSetMapping">
      <summary>表示 CS 空间中某一 AssociationSet 的映射元数据。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationSet,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>初始化新的 AssociationSetMapping 实例。</summary>
      <param name="associationSet">要映射的关联集。</param>
      <param name="storeEntitySet">要映射的存储实体集。</param>
      <param name="containerMapping">父容器映射。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>添加属性映射条件。</summary>
      <param name="condition">要添加的条件。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.AssociationSet">
      <summary>获取映射的关联集。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.AssociationTypeMapping">
      <summary>获取包含的关联类型映射。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.Conditions">
      <summary>获取属性映射条件。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.ModificationFunctionMapping">
      <summary>获取或设置相应的函数映射。可以为 null。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>删除属性映射条件。</summary>
      <param name="condition">要删除的属性映射条件。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.SourceEndMapping">
      <summary>获取或设置源端属性映射。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.StoreEntitySet">
      <summary>获取映射的存储实体集。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.TargetEndMapping">
      <summary>获取或设置目标端属性映射。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping">
      <summary>描述关联集的修改函数映射。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationSet,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping)">
      <summary>初始化新的 <see cref="T:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping" /> 实例。</summary>
      <param name="associationSet">关联集。</param>
      <param name="deleteFunctionMapping">删除函数映射。</param>
      <param name="insertFunctionMapping">插入函数映射。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.AssociationSet">
      <summary>获取关联集。</summary>
      <returns>关联集。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.DeleteFunctionMapping">
      <summary>获取删除函数映射。</summary>
      <returns>删除函数映射。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.InsertFunctionMapping">
      <summary>获取插入函数映射。</summary>
      <returns>插入函数映射。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.ToString">
      <summary>将此实例的值转变为其等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationTypeMapping">
      <summary>表示 CS 空间中关联类型映射的映射元数据。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationTypeMapping.#ctor(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>创建 AssociationTypeMapping 实例。</summary>
      <param name="associationSetMapping">包含此 AssociationTypeMapping 的 AssociationSetMapping。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.AssociationSetMapping">
      <summary>获取包含此 AssociationTypeMapping 的 AssociationSetMapping。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.AssociationType">
      <summary>获取要映射的关联类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.MappingFragment">
      <summary>获取单个映射片段。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ComplexPropertyMapping">
      <summary>复杂属性的映射元数据。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>构造一个新的复杂属性映射对象</summary>
      <param name="property">表示此复杂成员的 MemberMetadata 对象</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)">
      <summary>添加与嵌套复杂类型对应的类型映射。</summary>
      <param name="typeMapping">要添加的复杂类型映射。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)">
      <summary>删除与嵌套复杂类型对应的类型映射。</summary>
      <param name="typeMapping">要删除的复杂类型映射。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.TypeMappings">
      <summary>获取与嵌套复杂类型对应的类型映射的只读集合。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ComplexTypeMapping">
      <summary>复杂类型的映射元数据。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>创建 ComplexTypeMapping 实例。</summary>
      <param name="complexType">要映射的 ComplexType。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>添加属性映射条件。</summary>
      <param name="condition">要添加的属性映射条件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>添加属性映射。</summary>
      <param name="propertyMapping">要添加的属性映射。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.ComplexType">
      <summary>获取要映射的 ComplexType。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.Conditions">
      <summary>获取属性映射条件的只读集合。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.PropertyMappings">
      <summary>获取属性映射的只读集合。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>删除属性映射条件。</summary>
      <param name="condition">要删除的属性映射条件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>删除属性映射。</summary>
      <param name="propertyMapping">要删除的属性映射。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ConditionPropertyMapping">
      <summary>某一类型上条件属性映射的映射元数据。条件属性映射在 C 侧属性或 S 侧属性上指定条件。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Column">
      <summary>获取指定已映射列的 EdmProperty。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Property">
      <summary>获取指定已映射属性的 EdmProperty。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EndPropertyMapping">
      <summary>某一关联的 End 属性的映射元数据。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationEndMember)">
      <summary>创建关联端属性映射。</summary>
      <param name="associationEnd">指定要映射的关联端的 AssociationEndMember。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.ScalarPropertyMapping)">
      <summary>添加子属性列映射。</summary>
      <param name="propertyMapping">指定要添加的属性列映射的 ScalarPropertyMapping。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EndPropertyMapping.AssociationEnd">
      <summary>获取指定映射的关联端的 AssociationEndMember。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EndPropertyMapping.PropertyMappings">
      <summary>获取指定此关联端属性映射的子级的 ScalarPropertyMapping 的 ReadOnlyCollection。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.ScalarPropertyMapping)">
      <summary>删除子属性列映射。</summary>
      <param name="propertyMapping">指定要删除的属性列映射的 ScalarPropertyMapping。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityContainerMapping">
      <summary>表示 CS 空间中 EntityContainer 映射的映射元数据。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Core.Mapping.StorageMappingItemCollection,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.EntityContainerMapping" /> 类的新实例。</summary>
      <param name="conceptualEntityContainer">要映射的概念实体容器。</param>
      <param name="storeEntityContainer">要映射的存储实体容器。</param>
      <param name="mappingItemCollection">父映射项集合。</param>
      <param name="generateUpdateViews">指示是否生成更新视图的标志。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddFunctionImportMapping(System.Data.Entity.Core.Mapping.FunctionImportMapping)">
      <summary>添加函数导入映射。</summary>
      <param name="functionImportMapping">要添加的函数导入映射。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddSetMapping(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>添加关联集映射。</summary>
      <param name="setMapping">要添加的关联集映射。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddSetMapping(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>添加实体集映射。</summary>
      <param name="setMapping">要添加的实体集映射。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.AssociationSetMappings">
      <summary>获取关联集映射。</summary>
      <returns>关联集映射。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.BuiltInTypeKind">
      <summary>获取此项的类型种类。</summary>
      <returns>此项的类型种类。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.ConceptualEntityContainer">
      <summary>获取概念实体容器。</summary>
      <returns>概念实体容器。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.EntitySetMappings">
      <summary>获取实体集映射。</summary>
      <returns>实体集映射。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.FunctionImportMappings">
      <summary>获取函数导入映射。</summary>
      <returns>函数导入映射。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.GenerateUpdateViews">
      <summary>获取指示是否生成更新视图的标志。</summary>
      <returns>若为 true，则生成更新视图；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.MappingItemCollection">
      <summary>获取父映射项集合。</summary>
      <returns>父映射项集合。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveFunctionImportMapping(System.Data.Entity.Core.Mapping.FunctionImportMapping)">
      <summary>删除函数导入映射。</summary>
      <param name="functionImportMapping">要删除的函数导入映射。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveSetMapping(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>删除关联集映射。</summary>
      <param name="setMapping">要删除的关联集映射。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveSetMapping(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>删除关联集映射。</summary>
      <param name="setMapping">要删除的关联集映射。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.StoreEntityContainer">
      <summary>获取存储实体容器。</summary>
      <returns>存储实体容器。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntitySetBaseMapping">
      <summary>表示 CS 空间中某一范围的映射元数据。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetBaseMapping.ContainerMapping">
      <summary>获取父容器映射。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetBaseMapping.QueryView">
      <summary>获取或设置与此映射关联的查询视图。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntitySetMapping">
      <summary>表示 CS 空间中某一 EnitytSet 的映射元数据。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>初始化新的 EntitySetMapping 实例。</summary>
      <param name="entitySet">要映射的实体集。</param>
      <param name="containerMapping">父容器映射。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.AddModificationFunctionMapping(System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping)">
      <summary>添加函数映射。</summary>
      <param name="modificationFunctionMapping">要添加的函数映射。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.EntityTypeMapping)">
      <summary>添加类型映射。</summary>
      <param name="typeMapping">要添加的类型映射。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.EntitySet">
      <summary>获取映射的实体集。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.EntityTypeMappings">
      <summary>获取包含的实体类型映射。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.ModificationFunctionMappings">
      <summary>获取相应的函数映射。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.RemoveModificationFunctionMapping(System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping)">
      <summary>删除函数映射。</summary>
      <param name="modificationFunctionMapping">要删除的函数映射。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.EntityTypeMapping)">
      <summary>删除类型映射。</summary>
      <param name="typeMapping">要删除的类型映射。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityTypeMapping">
      <summary>实体类型的映射元数据。如果 EntitySet 表示多种类型的实体，则对于 EntitySet，我们将具有多个 EntityTypeMapping（例如：如果 PersonSet 实体范围表示 Person 和 Customer 类型的实体，则我们在 PersonSet 的映射下将具有两个 EntityType 映射）。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.#ctor(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>创建 EntityTypeMapping 实例。</summary>
      <param name="entitySetMapping">包含此 EntityTypeMapping 的 EntitySetMapping。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddFragment(System.Data.Entity.Core.Mapping.MappingFragment)">
      <summary>添加映射片段。</summary>
      <param name="fragment">要添加的映射片段。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>将实体类型层次结构添加到映射中。层次结构由指定的根实体类型表示。</summary>
      <param name="type">要添加的层次结构的根 EntityType。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>将实体类型添加到映射中。</summary>
      <param name="type">要添加的 EntityType。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntitySetMapping">
      <summary>获取包含此 EntityTypeMapping 的 EntitySetMapping。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityType">
      <summary>获取要映射的单个 EntityType。如果发生层次结构类型映射，则引发异常。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityTypes">
      <summary>获取映射的实体类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.Fragments">
      <summary>获取映射片段的只读集合。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsHierarchyMapping">
      <summary>获取指示这是否是类型层次结构映射的标志。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsOfEntityTypes">
      <summary>获取层次结构映射的已映射基类型。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveFragment(System.Data.Entity.Core.Mapping.MappingFragment)">
      <summary>删除映射片段。</summary>
      <param name="fragment">要删除的映射片段。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>从映射中删除实体类型层次结构。层次结构由指定的根实体类型表示。</summary>
      <param name="type">要删除的层次结构的根 EntityType。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>从映射中删除实体类型。</summary>
      <param name="type">要删除的 EntityType。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping">
      <summary>描述实体集内的实体类型的修改函数映射。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" /> 类的新实例。</summary>
      <param name="entityType">EDM 实体类型。</param>
      <param name="deleteFunctionMapping">功能删除的映射。</param>
      <param name="insertFunctionMapping">功能插入的映射。</param>
      <param name="updateFunctionMapping">功能更新的映射。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.DeleteFunctionMapping">
      <summary>获取功能删除的映射。</summary>
      <returns>功能删除的映射。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.EntityType">
      <summary>获取 EDM 实体类型。</summary>
      <returns>EDM 实体类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.InsertFunctionMapping">
      <summary>获取功能插入的映射。</summary>
      <returns>功能插入的映射。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.ToString">
      <summary>返回 <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" /> 对象的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.UpdateFunctionMapping">
      <summary>获取功能更新的映射。</summary>
      <returns>功能更新的映射。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityViewContainer">
      <summary>在设计时创建的、用于存储生成的视图的类型的基类。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewContainer.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.EntityViewContainer" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.EdmEntityContainerName">
      <summary>获取或设置 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 的名称。</summary>
      <returns>容器名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewContainer.GetViewAt(System.Int32)">
      <summary>返回指定索引处的键/值对，其中包含视图和其键。</summary>
      <returns>索引处的键/值对，其中包含视图以及视图的键。</returns>
      <param name="index">视图的索引。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverAllExtentViews">
      <summary>视图的哈希值。</summary>
      <returns>哈希值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverMappingClosure">
      <summary>哈希值。</summary>
      <returns>哈希值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.StoreEntityContainerName">
      <summary>获取或设置存储架构中的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />。</summary>
      <returns>容器名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.ViewCount">
      <summary>获取或设置视图计数。</summary>
      <returns>视图计数。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute">
      <summary>用于标记包含生成的视图类型的程序集的特性。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute" /> 类的新实例。</summary>
      <param name="viewGenerationType">视图的类型。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.ViewGenerationType">
      <summary>获取视图的 T:System.Type。</summary>
      <returns>视图的 T:System.Type。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping">
      <summary>表示函数导入结果的复杂类型映射。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Collections.ObjectModel.Collection{System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping})">
      <summary>初始化新的 FunctionImportComplexTypeMapping 实例。</summary>
      <param name="returnType">返回类型。</param>
      <param name="properties">函数导入的结果类型的属性映射。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping.ReturnType">
      <summary>获取返回类型。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping">
      <summary>表示函数导入实体类型映射。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.ObjectModel.Collection{System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition})">
      <summary>初始化新的 FunctionImportEntityTypeMapping 实例。</summary>
      <param name="isOfTypeEntityTypes">要映射的类型层次结构的基础实体类型。</param>
      <param name="entityTypes">要映射的实体类型。</param>
      <param name="properties">函数导入的结果类型的属性映射。</param>
      <param name="conditions">映射条件。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.Conditions">
      <summary>获取映射条件。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.EntityTypes">
      <summary>获取要映射的实体类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.IsOfTypeEntityTypes">
      <summary>获取要映射的层次结构的基础实体类型。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition">
      <summary>表示函数导入结果的映射条件。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition.ColumnName">
      <summary>获取用于计算条件的列的名称。</summary>
      <returns>用于计算此条件的列的名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition.ToString">
      <summary>将当前实例的值转换为其等效字符串表示形式。</summary>
      <returns>此当前实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull">
      <summary>表示通过检查 null 或非 null 来进行计算的函数导入的结果的映射条件。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull.#ctor(System.String,System.Boolean)">
      <summary>初始化新的 FunctionImportEntityTypeMappingConditionIsNull 实例。</summary>
      <param name="columnName">用于计算此条件的列的名称。</param>
      <param name="isNull">指示是执行 null 还是非 null 检查的标志。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull.IsNull">
      <summary>获取指示是执行 null 还是非 null 检查的标志。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue">
      <summary>表示函数导入的结果的映射条件，通过与指定值作比较来计算此条件。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue.#ctor(System.String,System.Object)">
      <summary>初始化新的 FunctionImportEntityTypeMappingConditionValue 实例。</summary>
      <param name="columnName">用于计算此条件的列的名称。</param>
      <param name="value">要与之作比较的值。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue.Value">
      <summary>获取用于比较的值。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMapping">
      <summary>表示从模型函数导入到存储可组合或不可组合函数的映射。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMapping.FunctionImport">
      <summary>获取模型函数（或者映射的源）</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMapping.TargetFunction">
      <summary>获取存储函数（或者映射的目标）</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable">
      <summary>表示从模型函数导入到存储可组合函数的映射。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Mapping.FunctionImportResultMapping,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>初始化新的 FunctionImportMappingComposable 实例。</summary>
      <param name="functionImport">模型函数导入。</param>
      <param name="targetFunction">可组合的存储函数。</param>
      <param name="resultMapping">函数导入的结果映射。</param>
      <param name="containerMapping">父容器映射。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable.ResultMapping">
      <summary>获取函数导入的结果映射。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable">
      <summary>表示从模型函数导入到不可组合的存储函数的映射。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.FunctionImportResultMapping},System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>初始化新的 FunctionImportMappingNonComposable 实例。</summary>
      <param name="functionImport">模型函数导入。</param>
      <param name="targetFunction">存储不可组合函数。</param>
      <param name="resultMappings">函数导入结果映射。</param>
      <param name="containerMapping">父容器映射。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable.ResultMappings">
      <summary>获取函数导入结果映射。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportResultMapping">
      <summary>表示函数导入的结果映射。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.FunctionImportResultMapping" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
      <summary>添加类型映射。</summary>
      <param name="typeMapping">要添加的类型映射。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
      <summary>删除类型映射。</summary>
      <param name="typeMapping">要删除的类型映射。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.TypeMappings">
      <summary>获取类型映射。</summary>
      <returns>类型映射。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping">
      <summary>用于映射函数导入返回类型的属性的基类。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping">
      <summary>将函数导入返回类型属性映射到表列。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.#ctor(System.String,System.String)">
      <summary>初始化新的 FunctionImportReturnTypeScalarPropertyMapping 实例。</summary>
      <param name="propertyName">映射的属性名称。</param>
      <param name="columnName">映射的列名称。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.ColumnName">
      <summary>获取映射的列名称。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.PropertyName">
      <summary>获取映射的属性名称。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping">
      <summary>指定函数导入结构类型映射。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping.PropertyMappings">
      <summary>获取函数导入的结果类型的属性映射。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.IsNullConditionMapping">
      <summary>指定通过检查属性/列的值是否为 null 来进行计算的映射条件。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.IsNullConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Boolean)">
      <summary>创建 IsNullConditionMapping 实例。</summary>
      <param name="propertyOrColumn">指定属性或列的 EdmProperty。</param>
      <param name="isNull">指示是执行 null 还是非 null 检查的布尔值。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.IsNullConditionMapping.IsNull">
      <summary>获取指定是通过执行 null 检查还是非 null 检查来计算条件的布尔值。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingBase">
      <summary>表示所有映射元数据的项基类</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingFragment">
      <summary>表示映射片段的元数据。一组映射片段构成 Set 映射（EntitySet、AssociationSet 或 CompositionSet）。每个 MappingFragment 都为映射到单个表的类型的这些属性提供映射。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.TypeMapping,System.Boolean)">
      <summary>创建 MappingFragment 实例。</summary>
      <param name="storeEntitySet">与要映射的表或视图对应的 EntitySet。</param>
      <param name="typeMapping">包含此 MappingFragment 的 TypeMapping。</param>
      <param name="makeColumnsDistinct">指示在生成查询时是否包括“DISTINCT”的标志。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>添加属性映射条件。</summary>
      <param name="condition">要添加的属性映射条件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>添加属性映射。</summary>
      <param name="propertyMapping">要添加的属性映射。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.Conditions">
      <summary>获取属性映射条件的只读集合。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.MakeColumnsDistinct">
      <summary>获取指示在生成查询时是否包括“DISTINCT”的标志。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.PropertyMappings">
      <summary>获取属性映射的只读集合。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>删除属性映射条件。</summary>
      <param name="condition">要删除的属性映射条件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>删除属性映射。</summary>
      <param name="propertyMapping">要删除的属性映射。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.StoreEntitySet">
      <summary>获取与要映射的表或视图对应的 EntitySet。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.TypeMapping">
      <summary>获取包含此 MappingFragment 的 TypeMapping。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingItem">
      <summary>表示映射空间 (DataSpace.CSSpace) 中项的基类。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingItem.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.MappingItem" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingItemCollection">
      <summary>表示 Edm 空间中映射项的集合的类。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionMapping">
      <summary>描述用于实体或关联的更改处理的修改函数绑定。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding},System.Data.Entity.Core.Metadata.Edm.FunctionParameter,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding})">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionMapping" /> 类的新实例。</summary>
      <param name="entitySet">实体或关联集。</param>
      <param name="entityType">实体或关联类型。</param>
      <param name="function">我们应绑定到的函数的元数据。</param>
      <param name="parameterBindings">函数参数的绑定。</param>
      <param name="rowsAffectedParameter">生成受影响行数的输出参数。</param>
      <param name="resultBindings">函数计算结果的绑定</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.Function">
      <summary>获取我们应绑定到的函数的元数据。</summary>
      <returns>我们应绑定到的函数的元数据。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ParameterBindings">
      <summary>获取函数参数的绑定。</summary>
      <returns>函数参数的绑定。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ResultBindings">
      <summary>获取函数计算的结果的绑定。</summary>
      <returns>函数计算结果的绑定。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.RowsAffectedParameter">
      <summary>获取生成受影响行数的输出参数。可能为 null。</summary>
      <returns>生成受影响行数的输出参数。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ToString">
      <summary>将此实例的值转变为其等效字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath">
      <summary>描述成员在实体或关联类型结构中的位置。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Data.Entity.Core.Metadata.Edm.AssociationSet)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath" /> 类的新实例。</summary>
      <param name="members">从结构的叶（要绑定的成员）到根的路径中的成员。</param>
      <param name="associationSet">我们通过此成员导航到的关联集。如果值为 null，则这不是导航成员路径。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.AssociationSetEnd">
      <summary>获取我们通过此成员导航到的关联集。如果值为 null，则这不是导航成员路径。</summary>
      <returns>我们通过此成员导航到的关联集。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.Members">
      <summary>获取从结构的叶（要绑定的成员）到根的路径中的成员。</summary>
      <returns>从结构的叶（要绑定的成员）到根的路径中的成员。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.ToString">
      <summary>将此实例的值转变为其等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding">
      <summary>表示将修改函数参数绑定到要修改的实体或关联的成员。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.#ctor(System.Data.Entity.Core.Metadata.Edm.FunctionParameter,System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding" /> 类的新实例。</summary>
      <param name="parameter">采用值的参数。</param>
      <param name="memberPath">定义值的实体或关联成员的路径。</param>
      <param name="isCurrent">如果绑定当前或原始的成员值，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.IsCurrent">
      <summary>获取指示是绑定当前的还是原始的成员值的标志。</summary>
      <returns>如果绑定了当前或原始的成员值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.MemberPath">
      <summary>获取定义值的实体或关联成员的路径。</summary>
      <returns>定义值的实体或关联成员的路径。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.Parameter">
      <summary>获取采用值的参数。</summary>
      <returns>采用值的参数。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.ToString">
      <summary>使用指定格式将此实例的值转变为其等效字符串表示形式。</summary>
      <returns>格式所指定的此实例的值的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding">
      <summary>定义从命名结果集列到采用值的成员的绑定。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.#ctor(System.String,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding" /> 类的新实例。</summary>
      <param name="columnName">要从函数结果集绑定的列的名称。</param>
      <param name="property">要在实体上设置的属性。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.ColumnName">
      <summary>获取要从函数结果集绑定的列的名称。</summary>
      <returns>要从函数结果集绑定的列的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.Property">
      <summary>获取要在实体上设置的属性。</summary>
      <returns>要在实体上设置的属性。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.ToString">
      <summary>将此实例的值转变为其等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.PropertyMapping">
      <summary>属性映射的所有类型的映射元数据。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.PropertyMapping.Property">
      <summary>获取指定已映射属性的 EdmProperty。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ScalarPropertyMapping">
      <summary>标量属性的映射元数据。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ScalarPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>在简单属性和列之间创建映射。</summary>
      <param name="property">要映射的属性。</param>
      <param name="column">要映射的列。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ScalarPropertyMapping.Column">
      <summary>获取指定已映射列的 EdmProperty。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection">
      <summary>表示存储映射（CS 映射）空间中的项集合。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>使用指定的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />、<see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 和 XML 读取器初始化 <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> 类的新实例。</summary>
      <param name="edmCollection">此映射要使用的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />。</param>
      <param name="storeCollection">此映射要使用的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />。</param>
      <param name="xmlReaders">此映射要使用的 XML 读取器。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.String[])">
      <summary>使用指定的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />、<see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 以及指示元数据文件路径的字符串的集合初始化 <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> 类的新实例。</summary>
      <param name="edmCollection">此映射要使用的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />。</param>
      <param name="storeCollection">此映射要使用的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />。</param>
      <param name="filePaths">此映射要使用的文件路径。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue">
      <summary>计算集合中单个容器映射的哈希值。</summary>
      <returns>指定计算出的哈希值的字符串。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue(System.String,System.String)">
      <summary>计算由已映射容器的名称指定的容器映射的哈希值。</summary>
      <returns>指定计算出的哈希值的字符串。</returns>
      <param name="conceptualModelContainerName">概念模型中容器的名称。</param>
      <param name="storeModelContainerName">存储模型中容器的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.Create(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>创建一个 <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />。</summary>
      <returns>如果未遇到错误，则为 <see cref="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.EdmItemCollection" /> 实例。否则为 null。</returns>
      <param name="edmItemCollection">要映射的 EDM 元数据集合。不得为 null。</param>
      <param name="storeItemCollection">要映射的存储元数据集合。不得为 null。</param>
      <param name="xmlReaders">要加载的 MSL 项目。不得为 null。</param>
      <param name="filePaths">MSL 项目的路径。用于错误消息中。可为 null，在此情况下 XmlReader 的基 Uri 将用作路径。</param>
      <param name="errors">加载时遇到的错误的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
      <summary>为集合中的单个容器映射创建（范围、生成的视图）字典。</summary>
      <returns>用于指定生成的视图（<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />、<see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />）的字典。</returns>
      <param name="errors">积累潜在错误的列表。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.String,System.String,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
      <summary>为由已映射容器的名称指定的容器映射创建（范围，生成的视图）字典。</summary>
      <returns>用于指定生成的视图（<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />、<see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />）的字典。</returns>
      <param name="conceptualModelContainerName">概念模型中容器的名称。</param>
      <param name="storeModelContainerName">存储模型中容器的名称。</param>
      <param name="errors">积累潜在错误的列表。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingVersion">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> 表示的版本。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> 表示的版本。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingViewCacheFactory">
      <summary>获取或设置一个 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" />，它用于创建在检索预生成的映射视图时使用的 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> 实例。</summary>
      <returns>创建用于检索预生成的映射视图的 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> 实例的 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.StructuralTypeMapping">
      <summary>指定结构类型映射。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Mapping.StructuralTypeMapping" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>添加属性映射条件。</summary>
      <param name="condition">要添加的属性映射条件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>添加属性映射。</summary>
      <param name="propertyMapping">要添加的属性映射。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StructuralTypeMapping.Conditions">
      <summary>获取属性映射条件的只读集合。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StructuralTypeMapping.PropertyMappings">
      <summary>获取属性映射的只读集合。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>删除属性映射条件。</summary>
      <param name="condition">要删除的属性映射条件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>删除属性映射。</summary>
      <param name="propertyMapping">要删除的属性映射。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.TypeMapping">
      <summary>表示 CS 空间中类型映射的映射元数据。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ValueConditionMapping">
      <summary>指定通过将属性或列的值与给定值作比较来进行计算的映射条件。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ValueConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Object)">
      <summary>创建 ValueConditionMapping 实例。</summary>
      <param name="propertyOrColumn">指定属性或列的 EdmProperty。</param>
      <param name="value">指定要与之作比较的值的对象。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ValueConditionMapping.Value">
      <summary>获取指定要检查的值的对象。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember">
      <summary>表示关联类型的端</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" /> 的内置类型种类。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.Create(System.String,System.Data.Entity.Core.Metadata.Edm.RefType,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Data.Entity.Core.Metadata.Edm.OperationAction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>创建一个只读的 AssociationEndMember 实例。</summary>
      <returns>新创建的 AssociationEndMember 实例。</returns>
      <param name="name">关联端成员的名称。</param>
      <param name="endRefType">端的引用类型。</param>
      <param name="multiplicity">端的多重性。</param>
      <param name="deleteAction">指示端的删除行为的标志。</param>
      <param name="metadataProperties">要与该实例相关联的元数据属性。</param>
      <exception cref="T:System.ArgumentException">指定的名称为 null 或空。</exception>
      <exception cref="T:System.ArgumentNullException">指定的引用类型为 null。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet">
      <summary>表示关联集的类</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.AssociationSetEnds">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> 的 End。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> 的 End。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> 的内置类型种类。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSet.Create(System.String,System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>从指定的参数创建一个只读 AssociationSet 实例。</summary>
      <returns>新创建的 AssociationSet 实例。</returns>
      <param name="name">关联集的名称。</param>
      <param name="type">关联集中元素的关联类型。</param>
      <param name="sourceSet">源关联集端的实体集。</param>
      <param name="targetSet">目标关联集端的实体集。</param>
      <param name="metadataProperties">要与该实例相关联的元数据属性。</param>
      <exception cref="T:System.ArgumentException">指定的名称为 null 或空。</exception>
      <exception cref="T:System.ArgumentNullException">指定的关联类型为 null。</exception>
      <exception cref="T:System.ArgumentException">指定的关联类型的其中一端的实体类型与相应实体集端的实体类型不匹配。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.ElementType">
      <summary>获取与此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> 有关的关联。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> 对象，表示与此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> 有关的关联。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd">
      <summary>表示 AssociationSet 端的类</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.CorrespondingAssociationEndMember">
      <summary>获取与此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 对象相对应的 End 成员。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" /> 对象，表示与此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 对象相对应的 End 成员。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.EntitySet">
      <summary>获取由此 End 角色引用的实体集。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 对象，表示由此 End 角色引用的实体集。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Name">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的 End 名称。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的 End 名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ParentAssociationSet">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的父关联集。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的父关联集。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Role">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的 End 角色名称。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的 End 角色名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ToString">
      <summary>返回此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的 End 角色名称。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 的 End 角色名称。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationType">
      <summary>描述概念模型中两个实体之间的关联/关系，或者描述存储模型中两个表之间的外键关系。在概念模型中，相关类不一定定义外键属性。如果定义了某一外键，则 <see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey" /> 属性将为 true，并且 <see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint" /> 属性将包含外键的详细信息</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.AssociationEndMembers">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> 的端的列表。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> 的 End 列表。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint">
      <summary>获取或设置引用约束。</summary>
      <returns>引用约束。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationType.Create(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>从指定的参数创建一个只读 AssociationType 实例。</summary>
      <returns>新创建的 AssociationType 实例。</returns>
      <param name="name">关联类型的名称。</param>
      <param name="namespaceName">关联类型的命名空间。</param>
      <param name="foreignKey">指示外键 (FK) 关系的标志。</param>
      <param name="dataSpace">关联类型的数据空间。</param>
      <param name="sourceEnd">源关联端成员。</param>
      <param name="targetEnd">目标关联端成员。</param>
      <param name="constraint">一个引用约束。</param>
      <param name="metadataProperties">要与该实例相关联的元数据属性。</param>
      <exception cref="T:System.ArgumentException">指定的名称为 null 或空。</exception>
      <exception cref="T:System.ArgumentException">指定的命名空间为 null 或空。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey">
      <summary>获取一个布尔属性值，该值指定列是否为外键。</summary>
      <returns>一个指定列是否为外键的布尔值。如果为 true，则列是外键。如果为 false（默认值），则列不是外键。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.ReferentialConstraints">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> 的约束列表。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> 的约束列表。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind">
      <summary>所有内置类型的列表</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationEndMember">
      <summary>关联类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSet">
      <summary>AssociationSet 种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSetEnd">
      <summary>AssociationSetEnd 种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationType">
      <summary>关联类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionKind">
      <summary>集合种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionType">
      <summary>集合类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ComplexType">
      <summary>复杂类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Documentation">
      <summary>文档种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmFunction">
      <summary>EdmFunction 种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmMember">
      <summary>EdmMember 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmProperty">
      <summary>EdmProperty 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmType">
      <summary>Edm 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityContainer">
      <summary>实体容器种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySet">
      <summary>实体集种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySetBase">
      <summary>EntitySetBase 种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityType">
      <summary>实体类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityTypeBase">
      <summary>实体类型基种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumMember">
      <summary>枚举成员种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumType">
      <summary>枚举类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Facet">
      <summary>方面种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.FunctionParameter">
      <summary>函数参数种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.GlobalItem">
      <summary>全局项类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataItem">
      <summary>元数据项类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataProperty">
      <summary>元数据属性种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.NavigationProperty">
      <summary>导航属性种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.OperationAction">
      <summary>DeleteAction 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ParameterMode">
      <summary>参数模式种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveType">
      <summary>基元类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveTypeKind">
      <summary>基元类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ProviderManifest">
      <summary>ProviderManifest 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ReferentialConstraint">
      <summary>引用约束类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RefType">
      <summary>Ref 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipEndMember">
      <summary>RelationshipEnd 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipMultiplicity">
      <summary>关系多重性类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipSet">
      <summary>RelationshipEnd 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipType">
      <summary>关系类型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RowType">
      <summary>行类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.SimpleType">
      <summary>简单类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.StructuralType">
      <summary>结构化类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.TypeUsage">
      <summary>类型信息种类</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionKind">
      <summary>集合的种类（适用于属性）</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.Bag">
      <summary>集合具有包语义（允许未排序和重复项）</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.List">
      <summary>集合具有列表语义（顺序明确并且允许重复项）</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.None">
      <summary>属性不是集合</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionType">
      <summary>表示 Edm 集合类型</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.TypeUsage">
      <summary>获取 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 类的一个实例，其中包含此当前 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> 对象所包括的元素的类型以及该类型的各个方面。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 类的一个实例，其中包含此当前 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> 对象所包括的元素的类型以及该类型的各个方面。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ComplexType">
      <summary>表示 Edm 复杂类型。这可用于从概念空间基于模型的约定配置复杂类型。在存储模型中不支持复杂类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> 的内置类型种类。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ComplexType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> 类型的新实例。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> 类型的新实例。</returns>
      <param name="name">复杂类型的名称。</param>
      <param name="namespaceName">复杂类型的命名空间。</param>
      <param name="dataSpace">复杂类型属于的数据空间。</param>
      <param name="members">复杂类型的成员。</param>
      <param name="metadataProperties">要与该实例相关联的元数据属性。</param>
      <exception cref="T:System.ArgumentNullException">在 name、namespace 或 members 参数为 null 时引发。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.Properties">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> 的属性列表。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> 的属性列表。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode">
      <summary>属性的并发模式。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.Fixed">
      <summary>固定并发模式：在写入时间始终验证属性</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.None">
      <summary>默认并发模式：在写入时间从不验证属性</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer">
      <summary>将符合单个 CSDL 架构文件限制的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> 序列化到 XML 编写器。要序列化的模型必须包含单个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer" /> 类的新实例。</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.OnError">
      <summary>当序列化模型过程中遇到错误时发生。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Xml.XmlWriter,System.String)">
      <summary>将 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> 序列化到 XmlWriter。</summary>
      <returns>如果模型有效，则为 true；否则为 false。</returns>
      <param name="model">要序列化的 EdmModel。</param>
      <param name="xmlWriter">要序列化到的 XmlWriter。</param>
      <param name="modelNamespace">已序列化的模型的命名空间。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs">
      <summary>表示有关处理实体框架模型时所发生的错误的信息。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.ErrorMessage">
      <summary>获取描述所引发的错误的可选描述性消息。</summary>
      <returns>描述所引发的错误的可选描述消息。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.Item">
      <summary>获取一个值，用于指示导致引发此事件的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem" />。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem" /> 可引发此事件，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.PropertyName">
      <summary>获取一个可选值，用于指示导致引发此事件的源项的属性。</summary>
      <returns>指示导致引发此事件的源项的属性。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DataSpace">
      <summary>DataSpace</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace">
      <summary>CSpace 指示 CSpace 中的项 - edm 基元类型 + 在 csdl 中定义的类型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSSpace">
      <summary>CSpace 和 SSpace 之间的映射</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OCSpace">
      <summary>OSpace 和 CSpace 之间的映射</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OSpace">
      <summary>OSpace 指示 clr 空间中的项</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.SSpace">
      <summary>SSpace 指示 SSpace 中的项</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> 的扩展方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetConceptualModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
      <summary>从指定 DbModel 获取概念模型。</summary>
      <returns>表示概念模型的 EdmModel 的实例。</returns>
      <param name="model">实现 IEdmModelAdapter 的类的实例（例如DbModel）。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetStoreModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
      <summary>从指定 DbModel 获取存储模型。</summary>
      <returns>表示存储模型的 EdmModel 的实例。</returns>
      <param name="model">实现 IEdmModelAdapter 的类的实例（例如DbModel）。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.Documentation">
      <summary>表示与某一项相关联的文档的类</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Documentation.#ctor(System.String,System.String)">
      <summary>初始化新的 Documentation 实例。</summary>
      <param name="summary">摘要字符串。</param>
      <param name="longDescription">长描述字符串。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.IsEmpty">
      <summary>获取一个值，该值指示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 对象是否只包含一个 null（即空的）<see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" /> 和一个 <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Longdescription" />。</summary>
      <returns>如果此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 对象只包含一个 null（即空的）<see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" /> 和一个 <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription">
      <summary>获取有关此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 的详细说明。</summary>
      <returns>有关此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 的详细说明。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 的摘要。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 的摘要。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Documentation.ToString">
      <summary>返回此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 的摘要。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 的摘要。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmError">
      <summary>此类包装有关一般性 EDM 错误的错误信息。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmError.Message">
      <summary>获取错误消息。</summary>
      <returns>错误消息。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction">
      <summary>表示某一函数的类</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AddParameter(System.Data.Entity.Core.Metadata.Edm.FunctionParameter)">
      <summary>向此函数添加参数。</summary>
      <param name="functionParameter">要添加的参数。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AggregateAttribute">
      <summary>获取此函数的聚合特性。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInAttribute">
      <summary>获取一个值，该值指示此函数中是否存在内置特性。</summary>
      <returns>如果存在内置特性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 的内置类型种类。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 枚举的枚举值之一。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.CommandTextAttribute">
      <summary>获取采用数据库管理系统或存储模型所使用的语言的查询。</summary>
      <returns>采用数据库管理系统或存储模型所使用语法的一个字符串值，其中包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 的查询或更新语句。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>构造该 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 对象的工厂方法。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 类型的新的只读实例。</returns>
      <param name="name">函数的名称。</param>
      <param name="namespaceName">函数的命名空间。</param>
      <param name="dataSpace">函数所属的命名空间。</param>
      <param name="payload">其他函数特性和属性。</param>
      <param name="metadataProperties">将添加到该函数的元数据属性。可以为 null。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.FullName">
      <summary>返回此类型的全名（命名空间加名称）。</summary>
      <returns>类型的全名。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsComposableAttribute">
      <summary>获取是将此实例映射到函数还是映射到存储过程的信息。</summary>
      <returns>如果将此实例映射到函数，则为 true；如果将此实例映射到存储过程，则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsFromProviderManifest">
      <summary>获取一个值，该值指示此实例是否来自提供程序清单。</summary>
      <returns>如果此实例来自提供程序清单，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.NiladicFunctionAttribute">
      <summary>获取一个值，该值指示此函数是否为 niladic 函数（不接受任何参数的函数）。</summary>
      <returns>如果此函数为 niladic 函数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Parameters">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 的参数。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 的参数。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ParameterTypeSemanticsAttribute">
      <summary>获取此函数的参数类型语义特性。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameter">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 的返回参数。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 的返回参数。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameters">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 的返回参数。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 的返回参数。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Schema">
      <summary>获取或设置与函数关联的架构。</summary>
      <returns>与函数关联的架构。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.StoreFunctionNameAttribute">
      <summary>获取此函数的存储函数名称特性。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload">
      <summary>包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 的其他特性和属性。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.CommandText">
      <summary>获取或设置与函数关联的命令文本。</summary>
      <returns>与函数关联的命令文本。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.EntitySets">
      <summary>获取或设置函数的实体集。</summary>
      <returns>函数的实体集。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsAggregate">
      <summary>获取指示这是否为聚合函数的值。</summary>
      <returns>如果这是聚合函数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsBuiltIn">
      <summary>获取或设置此函数是否为内置函数的信息。</summary>
      <returns>如果此函数为内置函数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsCachedStoreFunction">
      <summary>获取或设置此函数是否为缓存存储函数的信息。</summary>
      <returns>如果此函数为缓存的存储函数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsComposable">
      <summary>获取或设置此函数是否可以组合的信息。</summary>
      <returns>如果此函数可以组合，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFromProviderManifest">
      <summary>获取或设置此函数是否来自提供程序清单的信息。</summary>
      <returns>如果此函数来自提供程序清单，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFunctionImport">
      <summary>获取或设置此函数是否为函数导入的信息。</summary>
      <returns>如果此函数为函数导入，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsNiladic">
      <summary>获取或设置函数是否不包含参数的信息。</summary>
      <returns>如果函数不包含参数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Parameters">
      <summary>获取或设置函数参数。</summary>
      <returns>函数参数。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ParameterTypeSemantics">
      <summary>获取或设置参数类型语义。</summary>
      <returns>参数类型语义。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ReturnParameters">
      <summary>获取或设置返回参数。</summary>
      <returns>返回参数。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Schema">
      <summary>获取或设置函数架构。</summary>
      <returns>函数架构。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.StoreFunctionName">
      <summary>获取或设置存储函数名称。</summary>
      <returns>存储函数名称。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection">
      <summary>表示 Edm 空间中项的集合的类。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>使用概念架构定义语言 (CSDL) 文件所在的 XMLReader 对象的集合初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> 类的新实例。</summary>
      <param name="xmlReaders">概念架构定义语言 (CSDL) 文件所在的 XMLReader 对象的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> 类的新实例。</summary>
      <param name="model">实体数据模型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.String[])">
      <summary>使用概念架构定义语言 (CSDL) 文件所在的路径初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> 类的新实例。</summary>
      <param name="filePaths">概念架构定义语言 (CSDL) 文件所在的路径。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> 的工厂方法。</summary>
      <returns>如果未遇到错误，则为 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> 实例。否则为 null。</returns>
      <param name="xmlReaders">要加载的 CSDL 项目。不得是 null。</param>
      <param name="filePaths">CSDL 项目的路径。用于错误消息中。可为 null，在此情况下，XmlReader 的基 Uri 将用作路径。</param>
      <param name="errors">加载时遇到的错误的集合。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.EdmVersion">
      <summary>获取此集合的概念模型版本。</summary>
      <returns>此集合的概念模型版本。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes">
      <summary>返回一个由 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 对象构成的集合。</summary>
      <returns>一个 ReadOnlyCollection 对象，表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 对象的集合。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes(System.Double)">
      <summary>返回具有指定的概念模型版本的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 对象的集合。</summary>
      <returns>一个 ReadOnlyCollection 对象，表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 对象的集合。</returns>
      <param name="edmVersion">概念模型版本。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmMember">
      <summary>表示 edm 成员类</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.DeclaringType">
      <summary>获取已对其声明此成员的类型。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 对象，表示已对其声明此成员的类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedComputed">
      <summary>指示此成员是否在 EDM 定义中标记为计算成员</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedIdentity">
      <summary>指示此成员的存储生成的模式是否在 EDM 定义中标记为标识</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.Name">
      <summary>获取或设置属性的名称。从存储空间模型约定对此进行设置将更改此属性的数据库列的名称。在概念模型中，这应该与来自实体类的相应属性保持一致并且不应更改。</summary>
      <returns>此成员的名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmMember.ToString">
      <summary>返回此成员的名称。</summary>
      <returns>此成员的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.TypeUsage">
      <summary>获取既包含此成员的类型又包含该类型的各个方面的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 类实例。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象，其中既包含此成员的类型又包含该类型的各个方面。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmModel">
      <summary>表示概念模型或存储模型。该类可用于访问与模型的形状有关的信息以及对其进行配置的方式。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
      <summary>将关联类型添加到模型中。</summary>
      <param name="item">要添加的 AssociationType 实例。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>将复杂类型添加到模型中。</summary>
      <param name="item">要添加的 ComplexType 实例。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>将函数添加到模型中。</summary>
      <param name="item">要添加的 EdmFunction 实例。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>将实体类型添加到模型中。</summary>
      <param name="item">要添加的 EntityType 实例。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>将枚举类型添加到模型中。</summary>
      <param name="item">要添加的 EnumType 实例。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.AssociationTypes">
      <summary>获取模型中的关联类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.BuiltInTypeKind">
      <summary>获取此类型的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此类型的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.ComplexTypes">
      <summary>获取模型中的复杂类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Container">
      <summary>获取存储实体和关联集以及函数导入的容器。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.DataSpace">
      <summary>获取与此模型关联的数据空间，该数据空间指示它是概念模型 (DataSpace.CSpace) 还是存储模型 (DataSpace.SSpace)。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EntityTypes">
      <summary>获取模型中的实体类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EnumTypes">
      <summary>获取模型中的枚举类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Functions">
      <summary>获取模型中的函数。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.GlobalItems">
      <summary>获取与模型关联的全局项。</summary>
      <returns>与模型关联的全局项。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
      <summary>从模型中删除关联类型。</summary>
      <param name="item">要删除的 AssociationType 实例。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>从模型中删除复杂类型。</summary>
      <param name="item">要删除的 ComplexType 实例。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>从模型中删除函数。</summary>
      <param name="item">要删除的 EdmFunction 实例。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>从模型中删除实体类型。</summary>
      <param name="item">要删除的 EntityType 实例。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>从模型中删除枚举类型。</summary>
      <param name="item">要删除的 EnumType 实例。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty">
      <summary>在概念空间中，EdmProperty 表示某个实体的属性。在存储空间中，EdmProperty 表示某个表中的列。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CollectionKind">
      <summary>获取或设置此模型的集合种类。</summary>
      <returns>此模型的集合种类。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ComplexType">
      <summary>获取此属性的复杂类型信息。</summary>
      <returns>此属性的复杂类型信息。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ConcurrencyMode">
      <summary>获取或设置属性的并发模式。</summary>
      <returns>属性的并发模式。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>创建 EdmProperty 类型的新实例。</summary>
      <returns>EdmProperty 类型的新实例</returns>
      <param name="name">属性的名称。</param>
      <param name="typeUsage">属性 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /></param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateComplex(System.String,System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>新建复杂属性。</summary>
      <returns>新创建的属性。</returns>
      <param name="name">属性的名称。</param>
      <param name="complexType">属性的类型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateEnum(System.String,System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>新建枚举属性。</summary>
      <returns>新创建的属性。</returns>
      <param name="name">属性的名称。</param>
      <param name="enumType">属性的类型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreatePrimitive(System.String,System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
      <summary>新建基元属性。</summary>
      <returns>新创建的属性。</returns>
      <param name="name">属性的名称。</param>
      <param name="primitiveType">属性的类型。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.DefaultValue">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 的默认值。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 的默认值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.EnumType">
      <summary>获取此属性的枚举类型信息。</summary>
      <returns>此属性的枚举类型信息。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsCollectionType">
      <summary>获取属性是否为集合类型属性的信息。</summary>
      <returns>如果属性为集合类型属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsComplexType">
      <summary>获取此属性是否为复杂类型属性的信息。</summary>
      <returns>如果此属性为复杂类型属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsEnumType">
      <summary>获取此属性是否为枚举类型属性的信息。</summary>
      <returns>如果此属性为枚举类型属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLength">
      <summary>获取或设置此属性的长度是否是固定的信息。</summary>
      <returns>如果此属性的长度是固定的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLengthConstant">
      <summary>获取固定长度方面是否为数据库提供程序的常量的信息。</summary>
      <returns>如果此方面为常量，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLength">
      <summary>获取或设置此属性是否使用提供程序支持的最大长度的信息。</summary>
      <returns>如果此属性使用提供程序支持的最大长度，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLengthConstant">
      <summary>获取最大长度方面是否为数据库提供程序的常量的信息。</summary>
      <returns>如果此方面为常量，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrecisionConstant">
      <summary>获取精度方面是否为数据库提供程序的常量的信息。</summary>
      <returns>如果此方面为常量，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrimitiveType">
      <summary>获取此属性是否为基元类型的信息。</summary>
      <returns>如果此属性为基元类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsScaleConstant">
      <summary>获取小数位数方面是否为数据库提供程序的常量的信息。</summary>
      <returns>如果此方面为常量，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnderlyingPrimitiveType">
      <summary>获取此属性是否为基础基元类型的信息。</summary>
      <returns>如果此属性为基础基元类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicode">
      <summary>获取或设置此属性是否为 Unicode 属性的信息。</summary>
      <returns>如果此属性为 Unicode 属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicodeConstant">
      <summary>获取 Unicode 方面是否为数据库提供程序的常量的信息。</summary>
      <returns>如果此方面为常量，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.MaxLength">
      <summary>获得或设置属性的最大长度。</summary>
      <returns>属性的最大长度。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Nullable">
      <summary>获取一个值，该值指示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 的值是否可以为 null。</summary>
      <returns>如果此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 的值可以为 null，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Precision">
      <summary>获取或设置此属性的精度。</summary>
      <returns>此属性的精度。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.PrimitiveType">
      <summary>获取此属性的基元类型信息。</summary>
      <returns>此属性的基元类型信息。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Scale">
      <summary>获取或设置此属性的小数位数。</summary>
      <returns>此属性的小数位数。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.SetMetadataProperties(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>设置元数据属性。</summary>
      <param name="metadataProperties">要设置的元数据属性。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.StoreGeneratedPattern">
      <summary>获取或设置与此属性相关联的数据库列的生成方法</summary>
      <returns>属性的存储生成模式。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.TypeName">
      <summary>获取属性的类型名称。</summary>
      <returns>属性的类型名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.UnderlyingPrimitiveType">
      <summary>获取此属性的基础基元类型信息。</summary>
      <returns>此属性的基础基元类型信息。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError">
      <summary>该类包装已遇到的架构错误的错误信息。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.#ctor(System.String,System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity)">
      <summary>构造 EdmSchemaError 对象。</summary>
      <param name="message">该错误的说明。</param>
      <param name="errorCode">与此错误关联的代码。</param>
      <param name="severity">错误的严重级别。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Column">
      <summary>获取发生错误的列。</summary>
      <returns>发生错误的列。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ErrorCode">
      <summary>获取错误代码。</summary>
      <returns>错误代码。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Line">
      <summary>获取发生错误的行号。</summary>
      <returns>发生错误的行号。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaLocation">
      <summary>获取包含错误的架构的位置。此字符串还包括位于末尾的架构的名称。</summary>
      <returns>包含错误的架构所在的位置。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaName">
      <summary>获取包含错误的架构的名称。</summary>
      <returns>包含错误的架构的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Severity">
      <summary>获取错误的严重级别。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity" /> 值之一。默认值为 <see cref="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.StackTrace">
      <summary>获取发生错误时的堆栈跟踪的字符串表示形式。</summary>
      <returns>发生错误时的堆栈跟踪的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ToString">
      <summary>返回错误消息。</summary>
      <returns>错误消息。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity">
      <summary>定义在验证实体框架模型时可能出现的错误的不同严重级别。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Error">
      <summary>导致无法使用模型的错误。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning">
      <summary>不会导致无法使用模型的警告。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmType">
      <summary>用于所有模型类型的 EdmType 基类</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Abstract">
      <summary>获取一个值，该值指示此类型是否为抽象的。</summary>
      <returns>如果此类型是抽象的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.BaseType">
      <summary>获取此类型的基类型。</summary>
      <returns>此类型的基类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.FullName">
      <summary>获取此类型的全名。</summary>
      <returns>此类型的全名。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.GetCollectionType">
      <summary>返回其元素类型属于此类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> 的实例。</summary>
      <returns>其元素类型属于此类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Name">
      <summary>获取此类型的名称。</summary>
      <returns>此类型的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.NamespaceName">
      <summary>获取此类型的命名空间。</summary>
      <returns>此类型的命名空间。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.ToString">
      <summary>返回此类型的全名。</summary>
      <returns>此类型的全名。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer">
      <summary>表示某一实体容器的类</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.#ctor(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>创建具有指定名称和数据空间的实体容器。</summary>
      <param name="name">实体容器名称。</param>
      <param name="dataSpace">实体容器数据空间。</param>
      <exception cref="T:System.ArgumentNullException">name 参数为 null 时引发。</exception>
      <exception cref="T:System.ArgumentException">name 参数为空字符串时引发。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AddEntitySetBase(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>将指定的实体集添加到容器。</summary>
      <param name="entitySetBase">要添加的实体集。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AddFunctionImport(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>将函数导入添加到容器中。</summary>
      <param name="function">要添加的函数导入。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AssociationSets">
      <summary>获取此实体容器的关联集。</summary>
      <returns>此实体容器的关联集。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BaseEntitySets">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 包括的实体集和关联集的列表。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 对象，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 包括的实体集和关联集的列表。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 的内置类型种类。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Create(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntitySetBase},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmFunction},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>用于构造 EntityContainer 对象的工厂方法。</summary>
      <returns>EntityContainer 对象。</returns>
      <param name="name">要创建的实体容器的名称。</param>
      <param name="dataSpace">此实体容器所属的 DataSpace。</param>
      <param name="entitySets">将包含在新容器中的实体集。可以为 null。</param>
      <param name="functionImports">将包含在新容器中的函数。可以为 null。</param>
      <param name="metadataProperties">要与该实例相关联的元数据属性。</param>
      <exception cref="T:System.ArgumentException">在名称参数为 null 或是空字符串时引发。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.EntitySets">
      <summary>获取此实体容器的实体集。</summary>
      <returns>此实体容器的实体集。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.FunctionImports">
      <summary>指定 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 元素的集合。每个函数都包含数据库中存在的存储过程的详细信息，或映射到实体及其属性的等效 CommandText 的详细信息。</summary>
      <returns>一个包含 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 元素的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetEntitySetByName(System.String,System.Boolean)">
      <summary>使用实体集的指定名称返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 对象，表示具有指定名称的实体集。</returns>
      <param name="name">要搜索的实体集的名称。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetRelationshipSetByName(System.String,System.Boolean)">
      <summary>使用关系集的指定名称返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 对象，表示具有指定名称的关系集。</returns>
      <param name="name">要搜索的关系集的名称。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Name">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 的名称。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 的名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.RemoveEntitySetBase(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>从容器中删除特定实体集。</summary>
      <param name="entitySetBase">要删除的实体集。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.ToString">
      <summary>返回此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 的名称。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 的名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetEntitySetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntitySet@)">
      <summary>使用实体集的指定名称返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 对象。</summary>
      <returns>如果存在与搜索条件匹配的实体集，则为 true；否则为 false。</returns>
      <param name="name">要搜索的实体集的名称。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="entitySet">在此方法返回时，包含一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 对象。如果不存在实体集，此输出参数将包含 null。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetRelationshipSetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.RelationshipSet@)">
      <summary>使用关系集的指定名称返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 对象。</summary>
      <returns>如果存在与搜索条件匹配的关系集，则为 true；否则为 false。</returns>
      <param name="name">要搜索的关系集的名称。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="relationshipSet">在此方法返回时，包含一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 对象。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySet">
      <summary>表示在 EntityType 中定义的结构的特定用法。在概念模型中，这表示可以查询和存储实体的集。在存储模型中，它表示一个表。从存储空间模型约定中，它可用来通过 <see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table" /> 属性配置表名称，通过 <see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema" /> 属性配置表架构。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 的内置类型种类。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySet.Create(System.String,System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>构造该 EntitySet 对象的工厂方法。</summary>
      <returns>EntitySet 对象。</returns>
      <param name="name">EntitySet 的名称。</param>
      <param name="schema">db 架构。可以为 null。</param>
      <param name="table">db 表。可以为 null。</param>
      <param name="definingQuery">应该用于检索此 EntitySet 的数据的提供程序特定的查询。可以为 null。</param>
      <param name="entityType">此实体集类型包含的实体的实体类型。</param>
      <param name="metadataProperties">将添加到新创建的 EntitySet 的元数据属性。可以为 null。</param>
      <exception cref="T:System.ArgumentException">在名称参数为 null 或是空字符串时引发。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.ElementType">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 的实体类型。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 的实体类型。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase">
      <summary>表示某一实体集的类</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.DefiningQuery">
      <summary>获取描述此实体集的已转义提供程序特定的 SQL。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ElementType">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> 的实体类型。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> 的实体类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.EntityContainer">
      <summary>获取当前实体集或关系集的实体容器。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 对象，表示当前实体集或关系集的实体容器。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Name">
      <summary>获取或设置当前实体集或关系集的名称。如果从存储空间更改此属性，则也必须更新映射层，以便反映新名称。若要更改存储空间 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 的表名称，请使用 Table 属性。</summary>
      <returns>当前实体集或关系集的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema">
      <summary>获取或设置此实体集的数据库架构。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table">
      <summary>获取或设置此实体集的数据库表名称。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ToString">
      <summary>返回当前实体集或关系集的名称。</summary>
      <returns>当前实体集或关系集的名称。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityType">
      <summary>表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 的结构。在概念模型中，这表示某一实体的形状和结构。在存储模型中，这表示表的结构。若要更改架构和表名称，请使用 EntitySet。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.AddNavigationProperty(System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
      <summary>将指定的导航属性添加到此类型的成员。添加导航属性，而与只读标志无关。</summary>
      <param name="property">要添加的导航属性。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 的内置类型种类。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>构造该 EntityType 对象的工厂方法。</summary>
      <returns>EntityType 对象。</returns>
      <param name="name">实体类型的名称。</param>
      <param name="namespaceName">此实体类型的命名空间。</param>
      <param name="dataSpace">此 EntityType 属于的数据空间。</param>
      <param name="keyMemberNames">该类型的键成员的名称。</param>
      <param name="members">该实体类型的成员（基元和导航属性）。</param>
      <param name="metadataProperties">要与该实例相关联的元数据属性。</param>
      <exception cref="T:System.ArgumentException">在 name 或 namespace 参数为 null 时引发。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>构造该 EntityType 对象的工厂方法。</summary>
      <returns>EntityType 对象。</returns>
      <param name="name">实体类型的名称。</param>
      <param name="namespaceName">此实体类型的命名空间。</param>
      <param name="dataSpace">此 EntityType 属于的数据空间。</param>
      <param name="baseType">基类型。</param>
      <param name="keyMemberNames">该类型的键成员的名称。</param>
      <param name="members">该实体类型的成员（基元和导航属性）。</param>
      <param name="metadataProperties">要与该实例相关联的元数据属性。</param>
      <exception cref="T:System.ArgumentException">在 name 或 namespace 参数为 null 时引发。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredMembers">
      <summary>获取实体类型的已声明成员的集合。</summary>
      <returns>实体类型的已声明成员的集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredNavigationProperties">
      <summary>获取与实体类型关联的已声明导航属性。</summary>
      <returns>与实体类型关联的已声明导航属性。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredProperties">
      <summary>获取实体类型的已声明属性的列表。</summary>
      <returns>实体类型的已声明属性。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.GetReferenceType">
      <summary>返回一个引用此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> 对象。</summary>
      <returns>一个引用此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.NavigationProperties">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 的导航属性。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 的导航属性列表。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.Properties">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 的属性列表。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 的属性列表。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase">
      <summary>表示实体类型</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.AddKeyMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>将指定的属性添加到当前实体的键的列表。</summary>
      <param name="member">要添加的属性。</param>
      <exception cref="T:System.ArgumentNullException">如果成员参数为 null</exception>
      <exception cref="T:System.InvalidOperationException">在 EntityType 具有另一个 EntityTypeBase 的基类型时引发。在此情形下，KeyMembers 应该作为基类型添加</exception>
      <exception cref="T:System.InvalidOperationException">如果 EntityType 实例处于 ReadOnly 状态</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyMembers">
      <summary>获取当前实体或关系类型的所有键成员的列表。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 对象，表示当前实体或关系类型的键成员的列表。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyProperties">
      <summary>获取此实体类型的所有键属性的列表。</summary>
      <returns>此实体类型的所有键属性的列表。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>从集合中删除指定的键成员。</summary>
      <param name="member">要删除的键成员。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumMember">
      <summary>表示一个枚举成员。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.BuiltInTypeKind">
      <summary>获取此类型的种类。</summary>
      <returns>此类型的种类。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Byte,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>创建一个只读的 EnumMember 实例。</summary>
      <returns>新创建的 EnumMember 实例。</returns>
      <param name="name">枚举成员的名称。</param>
      <param name="value">枚举成员的值。</param>
      <param name="metadataProperties">要与枚举成员相关联的元数据属性。</param>
      <exception cref="T:System.ArgumentException">name 为 null 或为空。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int16,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>创建一个只读的 EnumMember 实例。</summary>
      <returns>新创建的 EnumMember 实例。</returns>
      <param name="name">枚举成员的名称。</param>
      <param name="value">枚举成员的值。</param>
      <param name="metadataProperties">要与枚举成员相关联的元数据属性。</param>
      <exception cref="T:System.ArgumentException">name 为 null 或为空。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>创建一个只读的 EnumMember 实例。</summary>
      <returns>新创建的 EnumMember 实例。</returns>
      <param name="name">枚举成员的名称。</param>
      <param name="value">枚举成员的值。</param>
      <param name="metadataProperties">要与枚举成员相关联的元数据属性。</param>
      <exception cref="T:System.ArgumentException">name 为 null 或为空。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int64,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>创建一个只读的 EnumMember 实例。</summary>
      <returns>新创建的 EnumMember 实例。</returns>
      <param name="name">枚举成员的名称。</param>
      <param name="value">枚举成员的值。</param>
      <param name="metadataProperties">要与枚举成员相关联的元数据属性。</param>
      <exception cref="T:System.ArgumentException">name 为 null 或为空。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.SByte,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>创建一个只读的 EnumMember 实例。</summary>
      <returns>新创建的 EnumMember 实例。</returns>
      <param name="name">枚举成员的名称。</param>
      <param name="value">枚举成员的值。</param>
      <param name="metadataProperties">要与枚举成员相关联的元数据属性。</param>
      <exception cref="T:System.ArgumentException">name 为 null 或为空。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Name">
      <summary>获取该枚举成员的名称。</summary>
      <returns>此枚举成员的名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.ToString">
      <summary>重写 System.Object.ToString 以提供针对此类型的更好的字符串表示形式。</summary>
      <returns>此枚举成员的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Value">
      <summary>获取该枚举成员的值。</summary>
      <returns>此枚举成员的值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumType">
      <summary>表示一个枚举类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.BuiltInTypeKind">
      <summary>返回类型的种类</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EnumMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>创建一个只读的 EnumType 实例。</summary>
      <returns>新创建的 EnumType 实例。</returns>
      <param name="name">枚举类型的名称。</param>
      <param name="namespaceName">枚举类型的命名空间。</param>
      <param name="underlyingType">枚举类型的基础类型。</param>
      <param name="isFlags">指示是否可以将枚举类型视为位域；即标志集。</param>
      <param name="members">枚举类型的成员。</param>
      <param name="metadataProperties">要与枚举类型相关联的元数据属性。</param>
      <exception cref="T:System.ArgumentNullException">underlyingType 为 null。</exception>
      <exception cref="T:System.ArgumentException">name 为 null 或为空。-或- namespaceName 为 null 或为空。-或- underlyingType 不是支持的基础类型。-或- 指定成员的名称不唯一。-或- 指定成员的值不在基础类型的范围内。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.IsFlags">
      <summary>获取一个值，该值指示 enum 类型是否已定义为标志（即，可被视为位域）</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.Members">
      <summary>获取此枚举类型的枚举成员的集合。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.UnderlyingType">
      <summary>获取此枚举类型的基础类型。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.Facet">
      <summary>表示某一 Facet 对象的类。此对象是不可变的（不是仅设置为只读）并且系统的某些部分正依赖于该行为</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Description">
      <summary>获取有关此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的说明。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription" /> 对象，表示有关此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的说明。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.FacetType">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的类型。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.IsUnbounded">
      <summary>获取一个值，该值指示是否未绑定方面的值。</summary>
      <returns>如果未绑定方面的值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Name">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的名称。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Facet.ToString">
      <summary>返回此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的名称。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Value">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的值。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> 的值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription">
      <summary>表示 FacetDescription 对象的类</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.DefaultValue">
      <summary>获取具有此方面说明的方面的默认值。</summary>
      <returns>具有此方面说明的方面的默认值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetName">
      <summary>获取此方面的名称。</summary>
      <returns>此方面的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetType">
      <summary>获取此方面的类型。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象，表示此方面的类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsConstant">
      <summary>获取一个值，该值指示此方面的值是否为常量。</summary>
      <returns>如果此方面是一个常量，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsRequired">
      <summary>获取一个值，该值指示此方面是否为必需的方面。</summary>
      <returns>如果此方面是必需的方面，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MaxValue">
      <summary>获取此方面的最大值。</summary>
      <returns>此方面的最大值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MinValue">
      <summary>获取此方面的最小值。</summary>
      <returns>此方面的最小值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FacetDescription.ToString">
      <summary>返回此方面的名称。</summary>
      <returns>此方面的名称。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter">
      <summary>表示函数参数的类</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 的内置类型种类。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Create(System.String,System.Data.Entity.Core.Metadata.Edm.EdmType,System.Data.Entity.Core.Metadata.Edm.ParameterMode)">
      <summary>构造该 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 对象的工厂方法。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 类型的新的只读实例。</returns>
      <param name="name">参数名。</param>
      <param name="edmType">参数的 EdmType。</param>
      <param name="parameterMode">参数的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.DeclaringFunction">
      <summary>获取已对其声明此参数的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 对象，表示已对其声明此参数的函数。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLength">
      <summary>获取此参数是否使用数据库提供程序支持的最大长度的信息。</summary>
      <returns>如果此参数使用数据库提供程序支持的最大长度，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLengthConstant">
      <summary>获取最大长度方面是否为数据库提供程序的常量的信息。</summary>
      <returns>如果此方面为常量，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsPrecisionConstant">
      <summary>获取精度方面是否为数据库提供程序的常量的信息。</summary>
      <returns>如果此方面为常量，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsScaleConstant">
      <summary>获取小数位数方面是否为数据库提供程序的常量的信息。</summary>
      <returns>如果此方面为常量，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.MaxLength">
      <summary>获取参数的最大长度。</summary>
      <returns>参数的最大长度。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Mode">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 的模式。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Name">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 的名称。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Precision">
      <summary>获取参数的精度值。</summary>
      <returns>参数的精度值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Scale">
      <summary>获取参数的小数位数值。</summary>
      <returns>参数的小数位数值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.ToString">
      <summary>返回此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 的名称。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeName">
      <summary>获取此参数的类型名称。</summary>
      <returns>此参数的类型名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeUsage">
      <summary>获取既包含该参数的类型又包含该类型的各个方面的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 类实例。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象，其中既包含该参数的类型又包含该类型的各个方面。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem">
      <summary>表示所有元数据的项基类</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter">
      <summary>用于获取 <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> 的基础存储和概念模型的接口。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.ConceptualModel">
      <summary>获取概念模型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.StoreModel">
      <summary>获取存储模型。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection">
      <summary>表示项的集合的类。该集合的实际维护的大部分实现由 MetadataCollection 完成</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ItemCollection.DataSpace">
      <summary>获取与此项集合关联的数据模型。</summary>
      <returns>与此项集合关联的数据模型。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String)">
      <summary>使用指定的实体容器名称返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 对象。</summary>
      <returns>如果不存在实体容器，此方法将返回 null；否则它将返回第一个实体容器。</returns>
      <param name="name">实体容器的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String,System.Boolean)">
      <summary>使用指定的实体容器名称返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 对象。</summary>
      <returns>如果不存在实体容器，此方法将返回 null；否则它将返回第一个实体容器。</returns>
      <param name="name">实体容器的名称。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.Collections.Generic.Dictionary{System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Metadata.Edm.EdmFunction}},System.String,System.Boolean)">
      <summary>使用指定的名称从此项集合中返回所有函数重载。</summary>
      <returns>一个 ReadOnlyCollection 类型的集合，其中包含具有指定名称的所有函数。</returns>
      <param name="functionCollection">一个函数字典。</param>
      <param name="functionName">函数的全名。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String)">
      <summary>使用指定的名称从此项集合中返回所有函数重载。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含具有指定名称的所有函数。</returns>
      <param name="functionName">函数的全名。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String,System.Boolean)">
      <summary>使用指定的名称从此项集合中返回所有函数重载。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含具有指定名称的所有函数。</returns>
      <param name="functionName">函数的全名。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String)">
      <summary>使用指定的标识返回一个强类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 对象。</summary>
      <returns>由标识指定的项。</returns>
      <param name="identity">项的标识。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String,System.Boolean)">
      <summary>通过使用指定的标识进行区分大小写或不区分大小写的搜索，返回一个强类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 对象。</summary>
      <returns>由标识指定的项。</returns>
      <param name="identity">项的标识。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItems``1">
      <summary>从此项集合中返回属于指定类型的所有项。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含属于指定类型的所有项。</returns>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String)">
      <summary>使用指定的类型名称和命名空间名称从此项集合中返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象，表示此项集合中与指定的类型名称和命名空间名称匹配的类型。如果不存在匹配的类型，此方法将返回 null。</returns>
      <param name="name">类型名称。</param>
      <param name="namespaceName">类型的命名空间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String,System.Boolean)">
      <summary>使用指定的类型名称和命名空间名称从此项集合中返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象，表示此项集合中与指定的类型名称和命名空间名称匹配的类型。如果不存在匹配的类型，此方法将返回 null。</returns>
      <param name="name">类型名称。</param>
      <param name="namespaceName">类型的命名空间。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>使用指定的实体容器名称返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 对象。如果不存在实体容器，此输出参数将包含 null；否则，它将包含第一个实体容器。</summary>
      <returns>如果存在与搜索条件匹配的实体容器，则为 true；否则为 false。</returns>
      <param name="name">实体容器的名称。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="entityContainer">它在此方法返回时会包含一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 对象。如果不存在实体容器，此输出参数将包含 null；否则，它将包含第一个实体容器。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>使用指定的实体容器名称返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 对象。如果不存在实体容器，该输出参数将包含 null；否则，它将包含第一个实体容器。</summary>
      <returns>如果存在与搜索条件匹配的实体容器，则为 true；否则为 false。</returns>
      <param name="name">实体容器的名称。</param>
      <param name="entityContainer">它在此方法返回时会包含一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 对象。如果不存在实体容器，此输出参数将包含 null；否则，它将包含第一个实体容器。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,System.Boolean,``0@)">
      <summary>使用指定的标识从此项集合中返回一个强类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 对象。</summary>
      <returns>如果存在与搜索条件匹配的项，则为 true；否则为 false。</returns>
      <param name="identity">项的标识。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="item">在此方法返回时，此输出参数会包含一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 对象。如果项集合中不存在具有指定标识的全局项，此输出参数将包含 null。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,``0@)">
      <summary>使用指定的标识从此项集合中返回一个强类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 对象。</summary>
      <returns>如果存在与搜索条件匹配的项，则为 true；否则为 false。</returns>
      <param name="identity">项的标识。</param>
      <param name="item">在此方法返回时，此输出参数会包含一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 对象。如果项集合中不存在具有指定标识的全局项，此输出参数将包含 null。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>使用指定的类型名称和命名空间名称从此项集合中返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象。</summary>
      <returns>如果存在与搜索条件匹配的类型，则为 true；否则为 false。</returns>
      <param name="name">类型名称。</param>
      <param name="namespaceName">类型的命名空间。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="type">在此方法返回时，此输出参数会包含一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象。如果此项集合中不存在具有指定的名称和命名空间名称的类型，此输出参数将包含 null。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>使用指定的类型名称和命名空间名称从此项集合中返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象。</summary>
      <returns>如果存在与搜索条件匹配的类型，则为 true；否则为 false。</returns>
      <param name="name">类型名称。</param>
      <param name="namespaceName">类型的命名空间。</param>
      <param name="type">在此方法返回时，此输出参数会包含一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象。如果此项集合中不存在具有指定的名称和命名空间名称的类型，此输出参数将包含 null。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem">
      <summary>表示所有元数据的项基类</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.AddAnnotation(System.String,System.Object)">
      <summary>添加或更新具有指定名称和值的批注。</summary>
      <param name="name">批注属性的名称。</param>
      <param name="value">批注属性的值。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.BuiltInTypeKind">
      <summary>获取此类型的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此类型的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.Documentation">
      <summary>获取或设置与此类型关联的文档。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 对象，表示介绍此类型的文档。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetBuiltInType(System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind)">
      <summary>返回一个与 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 值之一匹配的概念模型内置类型。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象，表示 EDM 中的内置类型。</returns>
      <param name="builtInTypeKind">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 值之一。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetGeneralFacetDescriptions">
      <summary>返回有关指定类型的常规方面的说明列表。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 对象，表示有关指定类型的常规方面的说明列表。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.MetadataProperties">
      <summary>获取当前类型的属性列表。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含当前类型的属性列表。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.RemoveAnnotation(System.String)">
      <summary>删除具有指定名称的批注。</summary>
      <returns>如果删除了批注，则为 true；否则为 false。</returns>
      <param name="name">批注属性的名称。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty">
      <summary>表示某一项的元数据特性的类</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 的内置类型种类。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>构造该 MetadataProperty 对象的工厂方法。</summary>
      <returns>MetadataProperty 对象。</returns>
      <param name="name">元数据属性的名称。</param>
      <param name="typeUsage">该元数据属性的类型用法。</param>
      <param name="value">元数据属性的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="typeUsage" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.CreateAnnotation(System.String,System.Object)">
      <summary>创建具有指定名称和值的元数据批注。</summary>
      <returns>表示创建的批注的 MetadataProperty 实例。</returns>
      <param name="name">批注名称。</param>
      <param name="value">批注值。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.IsAnnotation">
      <summary>获取指示元数据属性是否为注释的布尔值。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Name">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 的名称。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.PropertyKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" /> 的值。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" /> 的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.TypeUsage">
      <summary>获取既包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 的类型又包含该类型的各个方面的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 类实例。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象，其中既包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 的类型又包含该类型的各个方面。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Value">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 的值。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 的值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace">
      <summary>运行时元数据工作区</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>使用指定的路径和程序集初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 类的新实例。</summary>
      <param name="paths">工作区元数据的路径。</param>
      <param name="assembliesToConsider">用于构造工作区的程序集的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection})">
      <summary>使用来自传统 EDMX 映射的所有项集合 (<see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection" />) 的加载程序构造一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。将使用默认的 o-space 和 o/c 映射集合。首次使用给定集合时，会惰式执行项集合委托。可以传递一个委托，以便在集合从不会被使用时返回 null，但极少这样做，因为在这种情况下，EF 使用集合的任何尝试都将导致异常。</summary>
      <param name="cSpaceLoader">委托以返回 c-space (CSDL) 项集合。</param>
      <param name="sSpaceLoader">委托以返回 s-space (SSDL) 项集合。</param>
      <param name="csMappingLoader">委托以返回 c/s 映射 (MSL) 项集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection})">
      <summary>使用 EF 所需的所有项集合 (<see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection" />) 的加载程序构造一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />，o/c 映射除外，将基于给定的 o-space 和 c-space 加载程序自动创建该映射。首次使用给定集合时，会惰式执行项集合委托。可以传递一个委托，以便在集合从不会被使用时返回 null，但极少这样做，因为在这种情况下，EF 使用集合的任何尝试都将导致异常。</summary>
      <param name="cSpaceLoader">委托以返回 c-space (CSDL) 项集合。</param>
      <param name="sSpaceLoader">委托以返回 s-space (SSDL) 项集合。</param>
      <param name="csMappingLoader">委托以返回 c/s 映射 (MSL) 项集合。</param>
      <param name="oSpaceLoader">委托以返回 o-space 项集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.ClearCache">
      <summary>清除所有的元数据缓存条目。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateEntitySqlParser">
      <summary>创建配置为使用 <see cref="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace" /> 数据空间的 <see cref="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser" />。</summary>
      <returns>创建的分析器对象。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>基于指定的查询表达式，创建限定为此元数据工作区的新 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" />。</summary>
      <returns>使用指定表达式作为其 <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query" /> 属性的新 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" />。</returns>
      <param name="query">一个定义查询的 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="query" /> 为 null</exception>
      <exception cref="T:System.ArgumentException">如果 <paramref name="query" /> 包含在此元数据工作区无法解析的元数据</exception>
      <exception cref="T:System.ArgumentException">如果 <paramref name="query" /> 因为包含无法解析的变量引用导致结构无效</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 对象，该对象表示与参数 objectSpaceType 提供的类型匹配的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。</summary>
      <returns>一个表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 对象。如果不存在匹配的类型，此方法将返回 null。</returns>
      <param name="objectSpaceType">一个在对象空间中提供类型的 <see cref="T:System.Data.Metadata.Edm.EnumlType" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 对象，该对象表示与参数 objectSpaceType 提供的类型匹配的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。</summary>
      <returns>一个表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 对象。如果不存在匹配的类型，此方法将返回 null。</returns>
      <param name="objectSpaceType">一个在对象空间中提供类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>使用指定的实体容器名称和数据模型返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 对象。</summary>
      <returns>如果不存在实体容器，此方法将返回 null；否则它将返回第一个实体容器。</returns>
      <param name="name">实体容器的名称。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="dataSpace">要从中搜索实体容器的概念模型。</param>
      <exception cref="T:System.ArgumentException">空间无效时引发。有效空间为 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>使用指定的实体容器名称和数据模型返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 对象。</summary>
      <returns>如果不存在实体容器，此方法将返回 null；否则它将返回第一个实体容器。</returns>
      <param name="name">实体容器的名称。</param>
      <param name="dataSpace">要从中搜索实体容器的概念模型。</param>
      <exception cref="T:System.ArgumentException">空间无效时引发。有效空间为 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>使用指定的名称、命名空间名称和数据模型返回所有函数重载。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含给定命名空间和数据模型中与指定名称匹配的所有函数。</returns>
      <param name="name">函数的名称。</param>
      <param name="namespaceName">函数的命名空间。</param>
      <param name="dataSpace">要从中搜索函数的概念模型。</param>
      <exception cref="T:System.ArgumentException">空间无效时引发。有效空间为 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Boolean)">
      <summary>使用指定的名称、命名空间名称和数据模型返回所有函数重载。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含给定命名空间和数据模型中与指定名称匹配的所有函数。</returns>
      <param name="name">函数的名称。</param>
      <param name="namespaceName">函数的命名空间。</param>
      <param name="dataSpace">要从中搜索函数的概念模型。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentException">空间无效时引发。有效空间为 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>使用指定的标识和数据模型返回一个项。</summary>
      <returns>指定的数据模型中与给定标识匹配的项。</returns>
      <param name="identity">项的标识。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="dataSpace">要从中搜索项的概念模型。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
      <exception cref="T:System.ArgumentException">空间无效时引发。有效空间为 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>使用指定的标识和数据模型返回一个项。</summary>
      <returns>指定的数据模型中与给定标识匹配的项。</returns>
      <param name="identity">项的标识。</param>
      <param name="dataSpace">要从中搜索项的概念模型。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
      <exception cref="T:System.ArgumentException">空间无效时引发。有效空间为 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>获取 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 项。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 项。</returns>
      <param name="dataSpace">要从其中检索项的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>获取指定数据模型中的所有项。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含指定数据模型中的所有项。</returns>
      <param name="dataSpace">需要其项列表的概念模型。</param>
      <exception cref="T:System.ArgumentException">空间无效时引发。有效空间为 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems``1(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>获取指定数据模型中的所有项。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含指定数据模型中的所有项。</returns>
      <param name="dataSpace">需要其项列表的概念模型。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
      <exception cref="T:System.ArgumentException">空间无效时引发。有效空间为 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 对象，该对象表示与参数 edmSpaceType 提供的类型匹配的对象空间类型。</summary>
      <returns>一个表示对象空间类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 对象。如果不存在匹配的类型，此方法将返回 null。</returns>
      <param name="edmSpaceType">一个表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 对象，该对象表示与参数 edmSpaceType 提供的类型匹配的对象空间类型。</summary>
      <returns>一个表示对象空间类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 对象。如果不存在匹配的类型，此方法将返回 null。</returns>
      <param name="edmSpaceType">一个表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetPrimitiveTypes(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>返回指定数据模型中的基元类型列表。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含指定数据模型中的所有基元类型。</returns>
      <param name="dataSpace">需要获取其基元类型列表的数据模型。</param>
      <exception cref="T:System.ArgumentException">空间无效时引发。有效空间为 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRelevantMembersForUpdate(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase,System.Boolean)">
      <summary>返回在修改实体时需要对其使用原始值的给定 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />/<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> 的成员。</summary>
      <returns>需要原始值的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" />。</returns>
      <param name="entitySet">属于 C-Space 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />。</param>
      <param name="entityType">参与给定 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />。</param>
      <param name="partialUpdateSupported">如果可以部分更新实体，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRequiredOriginalValueMembers(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase)">
      <summary>从实体集和实体类型获取原始值成员。</summary>
      <returns>实体集和实体类型中的原始值成员。</returns>
      <param name="entitySet">从中检索原始值的实体集。</param>
      <param name="entityType">对其检索原始值的实体类型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>使用指定的类型名称、命名空间名称和数据模型返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象。</returns>
      <param name="name">类型名称。</param>
      <param name="namespaceName">类型的命名空间。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="dataSpace">要从中搜索类型的概念模型。</param>
      <exception cref="T:System.ArgumentException">空间无效时引发。有效空间为 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>使用指定的类型名称、命名空间名称和数据模型返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象，表示指定的数据模型中与给定的类型名称和命名空间名称匹配的类型。如果不存在匹配的类型，此方法将返回 null。</returns>
      <param name="name">类型名称。</param>
      <param name="namespaceName">类型的命名空间。</param>
      <param name="dataSpace">要从中搜索类型的概念模型。</param>
      <exception cref="T:System.ArgumentException">空间无效时引发。有效空间为 C、O、CS 或 OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>加载给定程序集中的元数据。</summary>
      <param name="assembly">将加载其元数据的程序集。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly,System.Action{System.String})">
      <summary>加载给定程序集中的元数据。</summary>
      <param name="assembly">将加载其元数据的程序集。</param>
      <param name="logLoadMessage">用于记录加载消息的委托。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.MaximumEdmVersionSupported">
      <summary>运行时将支持的最高 EDM 版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.RegisterItemCollection(System.Data.Entity.Core.Metadata.Edm.ItemCollection)">
      <summary>在每个关联的数据模型中注册项集合。</summary>
      <param name="collection">需要填充的输出参数集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
      <summary>通过输出参数 edmSpaceType 返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 对象，该对象表示与参数 objectSpaceType 提供的类型匹配的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。</summary>
      <returns>如果成功，则为 true；如果失败，则为 false。</returns>
      <param name="objectSpaceType">一个表示对象空间类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 对象。</param>
      <param name="edmSpaceType">在此方法返回时，包含一个表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 对象。此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
      <summary>通过输出参数 edmSpaceType 返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 对象，该对象表示与参数 objectSpaceType 提供的类型匹配的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。</summary>
      <returns>如果存在与搜索条件匹配的类型，则为 true；否则为 false。</returns>
      <param name="objectSpaceType">一个表示对象空间类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 对象。</param>
      <param name="edmSpaceType">在此方法返回时，包含一个表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 对象。此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>使用指定的实体容器名称和数据模型返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 对象。</summary>
      <returns>如果存在与搜索条件匹配的实体容器，则为 true；否则为 false。</returns>
      <param name="name">实体容器的名称。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="dataSpace">要从中搜索实体容器的概念模型。</param>
      <param name="entityContainer">在此方法返回时，包含一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 对象。如果不存在实体容器，此输出参数将包含 null；否则，它将返回第一个实体容器。此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>使用指定的实体容器名称和数据模型返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 对象。</summary>
      <returns>如果存在与搜索条件匹配的实体容器，则为 true；否则为 false。</returns>
      <param name="name">实体容器的名称。</param>
      <param name="dataSpace">要从中搜索实体容器的概念模型。</param>
      <param name="entityContainer">在此方法返回时，包含一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 对象。如果不存在实体容器，此输出参数将包含 null；否则，它将返回第一个实体容器。此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
      <summary>使用指定的标识和数据模型返回一个项。</summary>
      <returns>如果存在与搜索条件匹配的项，则为 true；否则为 false。</returns>
      <param name="identity">要从中搜索项的概念模型。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="dataSpace">要从中搜索项的概念模型。</param>
      <param name="item">在此方法返回时，包含一个 <see cref="T:System.Data.Metadata.Edm.GlobalIem" /> 对象。此参数未经初始化即被传递。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
      <summary>使用指定的标识和数据模型返回一个项。</summary>
      <returns>如果存在与搜索条件匹配的项，则为 true；否则为 false。</returns>
      <param name="identity">要从中搜索项的概念模型。</param>
      <param name="space">要从中搜索项的概念模型。</param>
      <param name="item">在此方法返回时，包含一个 <see cref="T:System.Data.Metadata.Edm.GlobalIem" /> 对象。此参数未经初始化即被传递。</param>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.ItemCollection@)">
      <summary>测试对 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 的检索。</summary>
      <returns>如果检索成功，则为 true，否则为 false。</returns>
      <param name="dataSpace">从中尝试 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 检索的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" />。</param>
      <param name="collection">在此方法返回时，包含项集合。此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
      <summary>通过输出参数 objectSpaceType 返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 对象，该对象表示与参数 edmSpaceType 提供的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 匹配的类型。</summary>
      <returns>如果存在与搜索条件匹配的类型，则为 true；否则为 false。</returns>
      <param name="edmSpaceType">一个表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 对象。</param>
      <param name="objectSpaceType">此方法返回时，包含一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 对象，该对象表示对象空间类型。此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
      <summary>通过输出参数 objectSpaceType 返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 对象，该对象表示与参数 edmSpaceType 提供的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 匹配的类型。</summary>
      <returns>如果存在与搜索条件匹配的类型，则为 true；否则为 false。</returns>
      <param name="edmSpaceType">一个表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 对象。</param>
      <param name="objectSpaceType">此方法返回时，包含一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 对象，该对象表示对象空间类型。此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>使用指定的类型名称、命名空间名称和数据模型返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象。</summary>
      <returns>如果存在与搜索条件匹配的类型，则为 true；否则为 false。</returns>
      <param name="name">类型名称。</param>
      <param name="namespaceName">类型的命名空间。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="dataSpace">要从中搜索类型的概念模型。</param>
      <param name="type">在此方法返回时，包含一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象。此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>使用指定的类型名称、命名空间名称和数据模型返回一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象。</summary>
      <returns>如果存在与搜索条件匹配的类型，则为 true；否则为 false。</returns>
      <param name="name">类型名称。</param>
      <param name="namespaceName">类型的命名空间。</param>
      <param name="dataSpace">要从中搜索类型的概念模型。</param>
      <param name="type">在此方法返回时，包含一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象。此参数未经初始化即被传递。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty">
      <summary>表示 edm 导航属性类</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" /> 的内置类型种类。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>从指定的参数创建一个 NavigationProperty 实例。</summary>
      <returns>新创建的 NavigationProperty 实例。</returns>
      <param name="name">导航属性的名称。</param>
      <param name="typeUsage">指定导航属性类型及其方面。</param>
      <param name="relationshipType">导航的关系类型。</param>
      <param name="from">导航中的源端成员。</param>
      <param name="to">导航中的目标端成员。</param>
      <param name="metadataProperties">导航属性的元数据属性。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.FromEndMember">
      <summary>获取此导航中的“源”关系 End 成员。</summary>
      <returns>此导航中的“源”关系 End 成员。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.GetDependentProperties">
      <summary>在给定的导航属性位于引用约束的依赖端时，返回外键属性。否则，返回空集。我们将按主体端键属性的顺序返回这些成员。</summary>
      <returns>外键属性的集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.RelationshipType">
      <summary>获取此导航属性操作的关系类型。</summary>
      <returns>此导航属性操作的关系类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.ToEndMember">
      <summary>获取此导航的“目标”关系 End 成员。</summary>
      <returns>此导航的“目标”关系 End 成员。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection">
      <summary>表示对象层的项集合的类。该集合的实际维护的大部分实现由 ItemCollection 完成</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>该方法返回指定 OSpace 类型参数的基础 CLR 类型。如果该参数的 DataSpace 不为 OSpace，则引发 ArgumentException。</summary>
      <returns>OSpace 参数的 CLR 类型。</returns>
      <param name="objectSpaceType">要查找的 OSpace 类型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>返回与 objectSpaceType 参数提供的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 相对应的 CLR 类型。</summary>
      <returns>OSpace 参数的 CLR 类型。</returns>
      <param name="objectSpaceType">一个表示对象空间类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetItems``1">
      <summary>从此项集合中返回属于指定类型的所有项。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含属于指定类型的所有项。</returns>
      <typeparam name="T">由方法返回的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetPrimitiveTypes">
      <summary>返回基元类型对象集合。</summary>
      <returns>基元类型对象的集合。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>加载给定程序集中的元数据。</summary>
      <param name="assembly">将加载其元数据的程序集。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection)">
      <summary>从指定的程序集加载元数据。</summary>
      <param name="assembly">将加载其元数据的程序集。</param>
      <param name="edmItemCollection">O space 元数据的 EDM 元数据源。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Action{System.String})">
      <summary>加载给定程序集中的元数据。</summary>
      <param name="assembly">将加载其元数据的程序集。</param>
      <param name="edmItemCollection">O space 元数据的 EDM 元数据源。</param>
      <param name="logLoadMessage">将向其发送日志消息的委托。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Type@)">
      <summary>返回指定的枚举类型参数的基础 CLR 类型。如果该参数的 DataSpace 不为 OSpace，则此方法返回 false 并将 out 参数设置为 null。</summary>
      <returns>如果成功，则为 true；如果失败，则为 false</returns>
      <param name="objectSpaceType">要查找的 OSpace 枚举类型</param>
      <param name="clrType">OSpace 参数的 CLR 枚举类型</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Type@)">
      <summary>返回与 objectSpaceType 参数提供的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 相对应的 CLR 类型。</summary>
      <returns>如果存在与搜索条件匹配的类型，则为 true；否则为 false。</returns>
      <param name="objectSpaceType">一个表示对象空间类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />。</param>
      <param name="clrType">CLR 类型。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.OperationAction">
      <summary>表示针对删除操作的可能操作的列表</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.Cascade">
      <summary>级联到其他端</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.None">
      <summary>不执行任何操作</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode">
      <summary>定义参数的模式的枚举</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.In">
      <summary>In 参数</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.InOut">
      <summary>in 和 out 参数</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.Out">
      <summary>Out 参数</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.ReturnValue">
      <summary>返回参数</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics">
      <summary>定义用于解析函数重载的类型语义的枚举。这些标志是在提供程序清单中根据函数定义来定义的。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitConversion">
      <summary>允许在给定参数类型和形参类型（默认值）之间进行隐式转换。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitPromotion">
      <summary>允许在给定参数类型和形参类型之间进行类型提升。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.ExactMatchOnly">
      <summary>仅使用严格等效。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType">
      <summary>表示基元类型的类</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType">
      <summary>返回与此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 等效的公共语言运行时 (CLR) 类型。请注意，<see cref="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType" /> 属性始终返回不可以为 null 的类型值。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示与此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 等效的公共语言运行时 (CLR) 类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.FacetDescriptions">
      <summary>获取有关此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 各方面的说明列表。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含有关此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 的方面说明列表。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType">
      <summary>返回与此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 等效的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。</summary>
      <returns>一个与此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 等效的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>返回 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 的等效 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象，该对象是指定的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 的等效项。</returns>
      <param name="primitiveTypeKind">一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 类型的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveTypes">
      <summary>返回基元类型的列表。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含基元类型的列表。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.PrimitiveTypeKind">
      <summary>获取一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" /> 枚举值，该值指示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 的基元类型。</summary>
      <returns>一个指示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 的基元类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" /> 枚举值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind">
      <summary>EDM 定义的基元类型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Binary">
      <summary>Binary 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Boolean">
      <summary>Boolean 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Byte">
      <summary>Byte 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTime">
      <summary>DateTime 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTimeOffset">
      <summary>DateTimeOffset 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Decimal">
      <summary>Decimal 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Double">
      <summary>Double 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geography">
      <summary>Geography 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyCollection">
      <summary>Geographic 集合类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyLineString">
      <summary>Geographic 线性环类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiLineString">
      <summary>Geographic 多线性环类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPoint">
      <summary>Geographic 多点类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPolygon">
      <summary>Geographic 多多边形类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPoint">
      <summary>Geographic 单点类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPolygon">
      <summary>Geographic 多边形类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geometry">
      <summary>Geometry 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryCollection">
      <summary>Geometric 集合类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryLineString">
      <summary>Geometric 线性环类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiLineString">
      <summary>Geometric 多线性环类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPoint">
      <summary>Geometric 多点类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPolygon">
      <summary>Geometric 多多边形类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPoint">
      <summary>Geometric 单点类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPolygon">
      <summary>Geometric 多边形类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Guid">
      <summary>Guid 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int16">
      <summary>Int16 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int32">
      <summary>Int32 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int64">
      <summary>Int64 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.SByte">
      <summary>SByte 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Single">
      <summary>Single 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.String">
      <summary>String 类型种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Time">
      <summary>Time 类型种类</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind">
      <summary>指定概念模型中项特性的种类。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.Extended">
      <summary>一个指示项特性为 Extended 的枚举成员。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.System">
      <summary>一个指示项特性为 System 的枚举成员</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1">
      <summary>表示 MetadataCollection 周围的只读包装的类</summary>
      <typeparam name="T">此集合中项的类型</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)">
      <summary>确定集合中是否包含具有指定标识的项。</summary>
      <returns>如果集合中包含要搜索的项，则为 true；否则为 false。默认值为 false。</returns>
      <param name="identity">项的标识。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator">
      <summary>返回一个可循环访问此集合的枚举器。</summary>
      <returns>一个可用于循环访问此 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)">
      <summary>使用指定的标识从此集合中检索一个项。</summary>
      <returns>此集合中的一个项。</returns>
      <param name="identity">要搜索的项的标识。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)">
      <summary>返回指定的值在此集合中的索引。</summary>
      <returns>指定的值在此集合中的索引。</returns>
      <param name="value">要搜寻的值。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly">
      <summary>获取一个值，该值指示此集合是否是只读的。</summary>
      <returns>如果此集合是只读的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)">
      <summary>使用指定的标识从此集合中获取一个项。</summary>
      <returns>此集合中的一个项。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)">
      <summary>使用指定的标识从此集合中检索一个项。</summary>
      <returns>如果存在与搜索条件匹配的项，则为 true；否则为 false。</returns>
      <param name="identity">要搜索的项的标识。</param>
      <param name="ignoreCase">如果执行不区分大小写的搜索，则为 true；否则为 false。</param>
      <param name="item">在此方法返回时，此输出参数会包含集合中的一个项。如果不存在匹配的项，此输出参数将包含 null。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator">
      <summary>MetadataCollection 的枚举器</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current">
      <summary>获取位于当前位置的成员。</summary>
      <returns>位于当前位置的成员。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose">
      <summary>释放此枚举器。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext">
      <summary>移至 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" /> 类型的集合中的下一个成员。</summary>
      <returns>如果枚举器在 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.EnumeratortaCollection" /> 类型的集合中发生了移动，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset">
      <summary>将枚举器定位在 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合中的第一个位置之前。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取位于当前位置的成员</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint">
      <summary>该类表示指定关系的“to”和“from”端的两个实体之间的引用约束。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.#ctor(System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>在该关系上构造一个新约束</summary>
      <param name="fromRole">该关系源自的角色</param>
      <param name="toRole">该关系链接到/针对的角色</param>
      <param name="fromProperties">参与约束的目标角色的实体类型上的属性</param>
      <param name="toProperties">参与约束的源角色的实体类型上的属性</param>
      <exception cref="T:System.ArgumentNullException">如果任何参数为 null，则引发参数 Null 异常</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromProperties">
      <summary>获取定义此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 时使用的“源角色”的属性列表。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含定义此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 时使用的“源角色”的属性列表。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole">
      <summary>获取参与此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 的“源角色”。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" /> 对象，表示参与此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 的“源角色”。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToProperties">
      <summary>获取定义此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 时使用的“目标角色”的属性列表。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含定义此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 时使用的“目标角色”的属性列表。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole">
      <summary>获取参与此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 的“目标角色”。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" /> 对象，表示参与此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> 的“目标角色”。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToString">
      <summary>返回 <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" /> 和 <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" /> 的名称组合。</summary>
      <returns>
        <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" /> 和 <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" /> 的名称组合。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RefType">
      <summary>表示引用类型的类。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.ElementType">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> 引用的实体类型。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> 引用的实体类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.Equals(System.Object)">
      <summary>确定指定对象等于当前实例。</summary>
      <returns>如果指定的对象等于当前实例，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember">
      <summary>初始化 RelationshipEndMember 类的新实例</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.DeleteBehavior">
      <summary>获取此关系 End 成员的操作行为。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.OperationAction" /> 值之一。默认值为 <see cref="P:System.Data.Entity.Core.Metadata.Edm.OperationAction.None" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.GetEntityType">
      <summary>访问关联中的 EndMember 的 EntityType。</summary>
      <returns>关联中的 EndMember 的 EntityType。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.RelationshipMultiplicity">
      <summary>获取此关系 End 成员的重数。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 值之一。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity">
      <summary>表示与关系类型的端有关的多重性信息</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many">
      <summary>下限为 0，上限为 null</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One">
      <summary>下限和上限均为 1</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne">
      <summary>下限为 0，上限为 1</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet">
      <summary>表示关系集的类</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 的内置类型种类。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.ElementType">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 的关系类型。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 的关系类型。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType">
      <summary>表示关系类型</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipType.RelationshipEndMembers">
      <summary>获取此关系类型的 End 列表。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此关系类型的 End 列表。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RowType">
      <summary>表示 Edm 行类型</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> 的内置类型种类。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RowType.Create(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>构造该 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> 对象的工厂方法。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> 对象的新的只读实例。</returns>
      <param name="properties">行类型对象的属性。</param>
      <param name="metadataProperties">将添加到该函数的元数据属性。可以为 null。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.DeclaredProperties">
      <summary>获取由当前类型定义的属性集合。</summary>
      <returns>由当前类型定义的属性集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.Properties">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> 的属性列表。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> 的属性列表。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.SimpleType">
      <summary>表示简单类型的类</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer">
      <summary>提供用于将 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> 的存储（数据库）部分序列化到 XML 的方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer" /> 类的新实例。</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.OnError">
      <summary>当序列化模型过程中遇到错误时发生。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
      <summary>将 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> 序列化到 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <returns>如果模型可以序列化，则为 true；否则为 false。</returns>
      <param name="dbDatabase">要序列化的 EdmModel。</param>
      <param name="namespaceName">架构元素上的命名空间名称。</param>
      <param name="provider">架构元素上的提供程序信息。</param>
      <param name="providerManifestToken">架构元素上的 ProviderManifestToken 信息。</param>
      <param name="xmlWriter">要序列化到的 XmlWriter。</param>
      <param name="serializeDefaultNullability">指示在将可为空的属性设置为默认值时是否对其进行序列化的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
      <summary>将 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> 序列化到 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <returns>如果模型可以序列化，则为 true；否则为 false。</returns>
      <param name="dbDatabase">要序列化的 EdmModel。</param>
      <param name="provider">架构元素上的提供程序信息。</param>
      <param name="providerManifestToken">架构元素上的 ProviderManifestToken 信息。</param>
      <param name="xmlWriter">要序列化到的 XmlWriter。</param>
      <param name="serializeDefaultNullability">指示在将可为空的属性设置为默认值时是否对其进行序列化的值。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern">
      <summary>服务器生成的属性的模式。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Computed">
      <summary>执行 INSERT 和 UPDATE 时都将生成一个值。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Identity">
      <summary>执行 INSERT 时生成一个值，但在执行 UPDATE 时保持不变。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.None">
      <summary>不是服务器生成的属性。这是默认值。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection">
      <summary>表示存储空间中项的集合的类。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>使用指定的 XMLReader 初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 类的新实例。</summary>
      <param name="xmlReaders">用于创建元数据的 XMLReader。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 类的新实例。</summary>
      <param name="model">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 的模型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.String[])">
      <summary>使用指定的文件路径初始化 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 类的新实例。</summary>
      <param name="filePaths">用于创建元数据的文件路径。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 的工厂方法。</summary>
      <returns>如果未遇到错误，则为 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 实例。否则为 null。</returns>
      <param name="xmlReaders">要加载的 SSDL 项目。不得是 null。</param>
      <param name="filePaths">SSDL 项目的路径。用于错误消息中。可为 null，在此情况下，XmlReader 的基 Uri 将用作路径。</param>
      <param name="resolver">自定义解析程序。目前用于解析 DbProviderServices 实现。如果为 null，将使用默认解析程序。</param>
      <param name="errors">加载时遇到的错误的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.GetPrimitiveTypes">
      <summary>返回一个由 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 对象构成的集合。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 对象，表示 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 对象的集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderFactory">
      <summary>获取 StoreItemCollection 的提供程序工厂。</summary>
      <returns>StoreItemCollection 的提供程序工厂。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderInvariantName">
      <summary>获取 StoreItemCollection 的固定名称。</summary>
      <returns>StoreItemCollection 的固定名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifest">
      <summary>获取 StoreItemCollection 的提供程序清单。</summary>
      <returns>StoreItemCollection 的提供程序清单。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifestToken">
      <summary>获取 StoreItemCollection 的清单标记。</summary>
      <returns>StoreItemCollection 的清单标记。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.StoreSchemaVersion">
      <summary>获取此集合的存储架构版本。</summary>
      <returns>此集合的存储架构版本。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StructuralType">
      <summary>表示结构化类型</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.AddMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>向此类型添加成员</summary>
      <param name="member">要添加的成员</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StructuralType.Members">
      <summary>获取此类型的成员列表。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此类型的一组成员。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>从此类型删除成员。</summary>
      <param name="member">要删除的成员。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage">
      <summary>表示某一项的类型信息的类</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.BuiltInTypeKind">
      <summary>获取此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 的内置类型种类。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 的内置类型种类。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Create(System.Data.Entity.Core.Metadata.Edm.EdmType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.Facet})">
      <summary>用于创建具有指定 EdmType 和方面的 TypeUsage 的工厂方法</summary>
      <returns>新的 TypeUsage 实例</returns>
      <param name="edmType">要为其创建类型用法的 EdmType</param>
      <param name="facets">要复制到新的 TypeUsage 中的方面</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean)">
      <summary>创建一个使用指定方面值描述二进制类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象。</summary>
      <returns>一个使用指定方面值描述二进制类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象。</returns>
      <param name="primitiveType">要为其创建 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />。</param>
      <param name="isFixedLength">如果将二进制类型的长度设置为固定数值，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Int32)">
      <summary>创建一个使用指定方面值描述二进制类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象。</summary>
      <returns>一个使用指定方面值描述二进制类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象。</returns>
      <param name="primitiveType">要为其创建 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />。</param>
      <param name="isFixedLength">如果将二进制类型的长度设置为固定数值，则为 true；否则为 false。</param>
      <param name="maxLength">二进制类型的最大长度。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeOffsetTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>创建参数所描述类型的 <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> 对象。</returns>
      <param name="primitiveType">用于定义偏移的度量单位的简单类型。</param>
      <param name="precision">用秒的小数部分（基于支持的小数位数）表示的 <see cref="T:System." />DateTimeOffset 的粒度。例如，精度为 3 表示支持的粒度为毫秒。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>创建参数所描述类型的 <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> 对象。</returns>
      <param name="primitiveType">用于定义 <see cref="T:System." />DateTime 对象的度量单位的简单类型。</param>
      <param name="precision">用秒的小数部分（基于支持的小数位数）表示的 <see cref="T:System." />DateTimeOffset 的粒度。例如，精度为 3 表示支持的粒度为毫秒。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
      <summary>创建一个用无限精度和小数位数方面值描述十进制类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象。</summary>
      <returns>一个使用无限精度和小数位数方面值描述十进制类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象。</returns>
      <param name="primitiveType">要为其创建 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Byte,System.Byte)">
      <summary>创建一个使用指定方面值描述十进制类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象。</summary>
      <returns>一个使用指定方面值描述十进制类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象。</returns>
      <param name="primitiveType">要为其创建 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />。</param>
      <param name="precision">十进制类型（以 <see cref="T:System.Byte" /> 类型表示）的精度。</param>
      <param name="scale">十进制类型（以 <see cref="T:System.Byte" /> 类型表示）的小数位数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDefaultTypeUsage(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>创建一个具有指定概念模型类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象。</summary>
      <returns>一个具有指定 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 的默认方面值的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象。</returns>
      <param name="edmType">要为其创建 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean)">
      <summary>创建一个使用指定方面值和无限 MaxLength 描述字符串类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象。</summary>
      <returns>一个使用指定方面和无限 MaxLength 描述字符串类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象。</returns>
      <param name="primitiveType">要为其创建 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />。</param>
      <param name="isUnicode">如果将字符串类型的字符编码标准设置为 Unicode，则为 true；否则为 false。</param>
      <param name="isFixedLength">如果将字符串类型的长度设置为固定数值，则为 true；否则为 false</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean,System.Int32)">
      <summary>创建一个使用指定方面值描述字符串类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象。</summary>
      <returns>一个使用指定方面值描述字符串类型的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象。</returns>
      <param name="primitiveType">要为其创建 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />。</param>
      <param name="isUnicode">如果将字符串类型的字符编码标准设置为 Unicode，则为 true；否则为 false。</param>
      <param name="isFixedLength">如果将字符串类型的字符编码标准设置为 Unicode，则为 true；否则为 false。</param>
      <param name="maxLength">如果将字符串类型的长度设置为固定数值，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>创建参数所描述类型的 <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> 对象。</returns>
      <param name="primitiveType">用于定义 <see cref="T:System." />DateTime 对象的度量单位的简单类型。</param>
      <param name="precision">用秒的小数部分（基于支持的小数位数）表示的 <see cref="T:System." />DateTimeOffset 的粒度。例如，精度为 3 表示支持的粒度为毫秒。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.EdmType">
      <summary>获取由此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 描述的类型信息。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 对象，表示由此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 描述的类型信息。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Facets">
      <summary>获取由此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 描述的类型的方面列表。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含由此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 描述的类型的方面列表。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.IsSubtypeOf(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>检查此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 是否为指定 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 的子类型。</summary>
      <returns>如果此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 是指定 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 的子类型，则为 true；否则为 false。</returns>
      <param name="typeUsage">要检查的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 对象。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ModelTypeUsage">
      <summary>返回某一提供程序类型的模型类型用法</summary>
      <returns>模型 (CSpace) 类型用法</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ToString">
      <summary>返回由此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 描述的类型的全名。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 描述的类型的全名（采用字符串的形式）。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.CompiledQuery">
      <summary>缓存 ELinq 查询</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`10" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg1 必须为基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg2 必须为基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg3 必须为基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg4 必须为基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg5 必须为基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg6 必须为基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg7 必须为基元类型。</typeparam>
      <typeparam name="TArg8">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg8 必须为基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})" /> 方法返回的委托所返回的查询结果的类型 T。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`11" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg1 必须为基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg2 必须为基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg3 必须为基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg4 必须为基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg5 必须为基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg6 必须为基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg7 必须为基元类型。</typeparam>
      <typeparam name="TArg8">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg8 必须为基元类型。</typeparam>
      <typeparam name="TArg9">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg9 必须为基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})" /> 方法返回的委托所返回的查询结果的类型 T。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`12" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg1 必须为基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg2 必须为基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg3 必须为基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg4 必须为基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg5 必须为基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg6 必须为基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg7 必须为基元类型。</typeparam>
      <typeparam name="TArg8">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg8 必须为基元类型。</typeparam>
      <typeparam name="TArg9">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg9 必须为基元类型。</typeparam>
      <typeparam name="TArg10">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg10 必须为基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})" /> 方法返回的委托所返回的查询结果的类型 T。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`13" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg1 必须为基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg2 必须为基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg3 必须为基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg4 必须为基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg5 必须为基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg6 必须为基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg7 必须为基元类型。</typeparam>
      <typeparam name="TArg8">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg8 必须为基元类型。</typeparam>
      <typeparam name="TArg9">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg9 必须为基元类型。</typeparam>
      <typeparam name="TArg10">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg10 必须为基元类型。</typeparam>
      <typeparam name="TArg11">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg11 必须为基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})" /> 方法返回的委托所返回的查询结果的类型 T。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`14" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg1 必须为基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg2 必须为基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg3 必须为基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg4 必须为基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg5 必须为基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg6 必须为基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg7 必须为基元类型。</typeparam>
      <typeparam name="TArg8">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg8 必须为基元类型。</typeparam>
      <typeparam name="TArg9">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg9 必须为基元类型。</typeparam>
      <typeparam name="TArg10">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg10 必须为基元类型。</typeparam>
      <typeparam name="TArg11">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg11 必须为基元类型。</typeparam>
      <typeparam name="TArg12">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg12 必须为基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})" /> 方法返回的委托所返回的查询结果的类型 T。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`15" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg1 必须为基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg2 必须为基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg3 必须为基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg4 必须为基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg5 必须为基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg6 必须为基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg7 必须为基元类型。</typeparam>
      <typeparam name="TArg8">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg8 必须为基元类型。</typeparam>
      <typeparam name="TArg9">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg9 必须为基元类型。</typeparam>
      <typeparam name="TArg10">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg10 必须为基元类型。</typeparam>
      <typeparam name="TArg11">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg11 必须为基元类型。</typeparam>
      <typeparam name="TArg12">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg12 必须为基元类型。</typeparam>
      <typeparam name="TArg13">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg13 必须为基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})" /> 方法返回的委托所返回的查询结果的类型 T。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`16" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg1 必须为基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg2 必须为基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg3 必须为基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg4 必须为基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg5 必须为基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg6 必须为基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg7 必须为基元类型。</typeparam>
      <typeparam name="TArg8">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg8 必须为基元类型。</typeparam>
      <typeparam name="TArg9">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg9 必须为基元类型。</typeparam>
      <typeparam name="TArg10">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg10 必须为基元类型。</typeparam>
      <typeparam name="TArg11">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg11 必须为基元类型。</typeparam>
      <typeparam name="TArg12">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg12 必须为基元类型。</typeparam>
      <typeparam name="TArg13">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg13 必须为基元类型。</typeparam>
      <typeparam name="TArg14">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg14 必须为基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})" /> 方法返回的委托所返回的查询结果的类型 T。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`17" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg1 必须为基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg2 必须为基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg3 必须为基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg4 必须为基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg5 必须为基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg6 必须为基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg7 必须为基元类型。</typeparam>
      <typeparam name="TArg8">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg8 必须为基元类型。</typeparam>
      <typeparam name="TArg9">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg9 必须为基元类型。</typeparam>
      <typeparam name="TArg10">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg10 必须为基元类型。</typeparam>
      <typeparam name="TArg11">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg11 必须为基元类型。</typeparam>
      <typeparam name="TArg12">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg12 必须为基元类型。</typeparam>
      <typeparam name="TArg13">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg13 必须为基元类型。</typeparam>
      <typeparam name="TArg14">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg14 必须为基元类型。</typeparam>
      <typeparam name="TArg15">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg15 必须为基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})" /> 方法返回的委托所返回的查询结果的类型 T。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`2" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托所返回的查询结果的类型 T。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`3" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg1 必须为基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" /> 方法返回的委托所返回的查询结果的类型 T。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`4" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg1 必须为基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg2 必须为基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" /> 方法返回的委托所返回的查询结果的类型 T。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`5" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg1 必须为基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg2 必须为基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg3 必须为基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" /> 方法返回的委托所返回的查询结果的类型 T。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`6" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg1 必须为基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg2 必须为基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg3 必须为基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg4 必须为基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})" /> 方法返回的委托所返回的查询结果的类型 T。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`7" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg1 必须为基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg2 必须为基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg3 必须为基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg4 必须为基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg5 必须为基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})" /> 方法返回的委托所返回的查询结果的类型 T。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`8" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg1 必须为基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg2 必须为基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg3 必须为基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg4 必须为基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg5 必须为基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg6 必须为基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})" /> 方法返回的委托所返回的查询结果的类型 T。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>创建一个表示已编译的 LINQ to Entities 查询的新委托。</summary>
      <returns>
        <see cref="T:System.Func`9" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。</returns>
      <param name="query">要编译的 lambda 表达式。</param>
      <typeparam name="TArg0">由 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 派生的类型。</typeparam>
      <typeparam name="TArg1">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg1 必须为基元类型。</typeparam>
      <typeparam name="TArg2">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg2 必须为基元类型。</typeparam>
      <typeparam name="TArg3">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg3 必须为基元类型。</typeparam>
      <typeparam name="TArg4">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg4 必须为基元类型。</typeparam>
      <typeparam name="TArg5">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg5 必须为基元类型。</typeparam>
      <typeparam name="TArg6">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg6 必须为基元类型。</typeparam>
      <typeparam name="TArg7">表示在执行由此方法返回的委托时必须传入的参数的类型。TArg7 必须为基元类型。</typeparam>
      <typeparam name="TResult">通过执行由 <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})" /> 方法返回的委托所返回的查询结果的类型 T。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.CurrentValueRecord">
      <summary>当前赋给实体的各个属性的值。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DbUpdatableDataRecord">
      <summary>提供对对象数据的原始值的访问。DbUpdatableDataRecord 实现可用于更新对象的原始值的方法。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.DataRecordInfo">
      <summary>获取数据记录信息。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.FieldCount">
      <summary>获取记录中的字段数。</summary>
      <returns>整数值字段数。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBoolean(System.Int32)">
      <summary>检索布尔值形式的字段值。</summary>
      <returns>布尔值形式的字段值。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetByte(System.Int32)">
      <summary>检索字节形式的字段值。</summary>
      <returns>字节形式的字段值。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>检索字节数组形式的字段值。</summary>
      <returns>已复制的字节数。</returns>
      <param name="i">字段的序号。</param>
      <param name="dataIndex">开始复制数据的位置的索引。</param>
      <param name="buffer">将数据复制到其中的目标缓冲区。</param>
      <param name="bufferIndex">目标缓冲区中开始复制的位置的索引。</param>
      <param name="length">要复制的字节数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChar(System.Int32)">
      <summary>检索字符形式的字段值。</summary>
      <returns>字符形式的字段值。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>检索字符数组形式的字段值。</summary>
      <returns>已复制的字符数。</returns>
      <param name="i">字段的序号。</param>
      <param name="dataIndex">开始复制数据的位置的索引。</param>
      <param name="buffer">将数据复制到其中的目标缓冲区。</param>
      <param name="bufferIndex">目标缓冲区中开始复制的位置的索引。</param>
      <param name="length">要复制的字符数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataReader(System.Int32)">
      <summary>检索 <see cref="T:System.Common.DbDataReader" /> 形式的字段值。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 形式的字段值。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataRecord(System.Int32)">
      <summary>检索 <see cref="T:System.Data.Common.DbDataRecord" /> 形式的字段值。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataRecord" /> 形式的字段值。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataTypeName(System.Int32)">
      <summary>检索字段数据类型的名称。</summary>
      <returns>字段数据类型的名称。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDateTime(System.Int32)">
      <summary>检索 <see cref="T:System.DateTime" /> 形式的字段值。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 形式的字段值。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDbDataReader(System.Int32)">
      <summary>检索 <see cref="T:System.Common.DbDataReader" /> 形式的字段值。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 形式的字段值。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDecimal(System.Int32)">
      <summary>检索十进制形式的字段值。</summary>
      <returns>十进制形式的字段值。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDouble(System.Int32)">
      <summary>检索双精度值形式的字段值。</summary>
      <returns>双精度值形式的字段值。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFieldType(System.Int32)">
      <summary>检索字段的类型。</summary>
      <returns>字段类型。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFloat(System.Int32)">
      <summary>检索浮点形式的字段值。</summary>
      <returns>浮点形式的字段值。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetGuid(System.Int32)">
      <summary>检索 <see cref="T:System.Guid" /> 形式的字段值。</summary>
      <returns>
        <see cref="T:System.Guid" /> 形式的字段值。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt16(System.Int32)">
      <summary>检索 <see cref="T:System.Int16" /> 形式的字段值。</summary>
      <returns>
        <see cref="T:System.Int16" /> 形式的字段值。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt32(System.Int32)">
      <summary>检索 <see cref="T:System.Int32" /> 形式的字段值。</summary>
      <returns>
        <see cref="T:System.Int32" /> 形式的字段值。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt64(System.Int32)">
      <summary>检索 <see cref="T:System.Int64" /> 形式的字段值。</summary>
      <returns>
        <see cref="T:System.Int64" /> 形式的字段值。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetName(System.Int32)">
      <summary>检索字段的名称。</summary>
      <returns>字段的名称。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetOrdinal(System.String)">
      <summary>使用字段名检索字段的序号。</summary>
      <returns>字段的序号。</returns>
      <param name="name">字段的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetRecordValue(System.Int32)">
      <summary>检索字段的值。</summary>
      <returns>字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetString(System.Int32)">
      <summary>检索字符串形式的字段值。</summary>
      <returns>字段值。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValue(System.Int32)">
      <summary>检索字段的值。</summary>
      <returns>字段值。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValues(System.Object[])">
      <summary>使用当前记录的字段值来填充对象数组。</summary>
      <returns>返回的字段值的数目。</returns>
      <param name="values">用于存储字段值的对象数组。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.IsDBNull(System.Int32)">
      <summary>返回指定字段是否设置为 <see cref="T:System.DBNull" />。</summary>
      <returns>如果字段设置为 <see cref="T:System.DBNull" />，则为 true；否则为 false。</returns>
      <param name="i">字段的序号。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.Int32)">
      <summary>返回具有给定字段序号的值。</summary>
      <returns>具有给定字段序号的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.String)">
      <summary>获取具有给定字段名称的值。</summary>
      <returns>字段值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetBoolean(System.Int32,System.Boolean)">
      <summary>设置记录中一个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetByte(System.Int32,System.Byte)">
      <summary>设置记录中一个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetChar(System.Int32,System.Char)">
      <summary>设置记录中一个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDataRecord(System.Int32,System.Data.IDataRecord)">
      <summary>设置记录中一个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDateTime(System.Int32,System.DateTime)">
      <summary>设置记录中一个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDBNull(System.Int32)">
      <summary>将一个字段设置为 <see cref="T:System.DBNull" /> 值。</summary>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDecimal(System.Int32,System.Decimal)">
      <summary>设置记录中一个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDouble(System.Int32,System.Double)">
      <summary>设置记录中一个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetFloat(System.Int32,System.Single)">
      <summary>设置记录中一个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetGuid(System.Int32,System.Guid)">
      <summary>设置记录中一个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt16(System.Int32,System.Int16)">
      <summary>设置记录中一个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt32(System.Int32,System.Int32)">
      <summary>设置记录中一个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt64(System.Int32,System.Int64)">
      <summary>设置记录中一个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetRecordValue(System.Int32,System.Object)">
      <summary>设置记录中一个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetString(System.Int32,System.String)">
      <summary>设置记录中一个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValue(System.Int32,System.Object)">
      <summary>设置记录中一个字段的值。</summary>
      <param name="ordinal">字段的序号。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValues(System.Object[])">
      <summary>设置记录中的字段值。</summary>
      <returns>已设置的字段数。</returns>
      <param name="values">字段的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>检索 <see cref="T:System.Data.IDataReader" /> 形式的字段值。</summary>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 形式的字段值。</returns>
      <param name="ordinal">字段的序号。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.EntityFunctions">
      <summary>提供在 <see cref="T:System.Data.Entity.DbContext" /> 或 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> LINQ to Entities 查询中使用的公开 EDM 规范函数的公共语言运行时 (CLR) 方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddDays EDM 函数以将指定的天数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="dateValue">输入日期/时间。</param>
      <param name="addValue">要添加的天数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddDays EDM 函数以将指定的天数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="dateValue">输入日期/时间。</param>
      <param name="addValue">要添加的天数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddHours EDM 函数以将指定的小时数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的小时数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddHours EDM 函数以将指定的小时数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的小时数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddHours EDM 函数以将指定的小时数加到某个时间跨度。</summary>
      <returns>所得到的时间跨度。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的小时数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMicroseconds EDM 函数以将指定的微秒数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的微秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMicroseconds EDM 函数以将指定的微秒数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的微秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMicroseconds EDM 函数以将指定的微秒数加到某个时间跨度。</summary>
      <returns>所得到的时间跨度。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的微秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMilliseconds EDM 函数以将指定的毫秒数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的毫秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMilliseconds EDM 函数以将指定的毫秒数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的毫秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMilliseconds EDM 函数以将指定的毫秒数加到某个时间跨度。</summary>
      <returns>所得到的时间跨度。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的毫秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMinutes EDM 函数以将指定的分钟数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的分钟数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMinutes EDM 函数以将指定的分钟数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的分钟数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMinutes EDM 函数以将指定的分钟数加到某个时间跨度。</summary>
      <returns>所得到的时间跨度。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的分钟数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMonths EDM 函数以将指定的月数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="dateValue">输入日期/时间。</param>
      <param name="addValue">要添加的月数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddMonths EDM 函数以将指定的月数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="dateValue">输入日期/时间。</param>
      <param name="addValue">要添加的月数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddNanoseconds EDM 函数以将指定的纳秒数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的纳秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddNanoseconds EDM 函数以将指定的纳秒数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的纳秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddNanoseconds EDM 函数以将指定的纳秒数加到某个时间跨度。</summary>
      <returns>所得到的时间跨度。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的纳秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddSeconds EDM 函数以将指定的秒数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddSeconds EDM 函数以将指定的秒数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddSeconds EDM 函数以将指定的秒数加到某个时间跨度。</summary>
      <returns>所得到的时间跨度。</returns>
      <param name="timeValue">输入日期/时间。</param>
      <param name="addValue">要添加的秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddYears EDM 函数以将指定的年数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="dateValue">输入日期/时间。</param>
      <param name="addValue">要添加的年数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 AddYears EDM 函数以将指定的年数加到某个日期/时间。</summary>
      <returns>所得到的日期/时间。</returns>
      <param name="dateValue">输入日期/时间。</param>
      <param name="addValue">要添加的年数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsNonUnicode(System.String)">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法充当确保将输入作为非 Unicode 字符串处理的运算符。</summary>
      <returns>作为非 Unicode 字符串处理的输入字符串。</returns>
      <param name="value">输入字符串。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsUnicode(System.String)">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法充当确保将输入作为 Unicode 字符串处理的运算符。</summary>
      <returns>作为 Unicode 字符串处理的输入字符串。</returns>
      <param name="value">输入字符串。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 CreateDateTime EDM 函数以创建新的 <see cref="T:System.DateTime" /> 对象。</summary>
      <returns>新的日期/时间。</returns>
      <param name="year">年。</param>
      <param name="month">月（从 1 开始）。</param>
      <param name="day">日（从 1 开始）。</param>
      <param name="hour">小时。</param>
      <param name="minute">分钟。</param>
      <param name="second">秒，根据需要可包括秒的分数部分。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 CreateDateTimeOffset EDM 函数以创建新的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>新的日期/时间。</returns>
      <param name="year">年。</param>
      <param name="month">月（从 1 开始）。</param>
      <param name="day">日（从 1 开始）。</param>
      <param name="hour">小时。</param>
      <param name="minute">分钟。</param>
      <param name="second">秒，根据需要可包括秒的分数部分。</param>
      <param name="timeZoneOffset">新日期的时区偏移量部分。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 CreateTime EDM 函数以创建新的 <see cref="T:System.TimeSpan" /> 对象。</summary>
      <returns>新的时间跨度。</returns>
      <param name="hour">小时。</param>
      <param name="minute">分钟。</param>
      <param name="second">秒，根据需要可包括秒的分数部分。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffDays EDM 函数以计算两个日期/时间间隔的天数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的天数。</returns>
      <param name="dateValue1">第一个日期/时间。</param>
      <param name="dateValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffDays EDM 函数以计算两个日期/时间间隔的天数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的天数。</returns>
      <param name="dateValue1">第一个日期/时间。</param>
      <param name="dateValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffHours EDM 函数以计算两个日期/时间间隔的小时数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的小时数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffHours EDM 函数以计算两个日期/时间间隔的小时数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的小时数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffHours EDM 函数以计算两个时间跨度间隔的小时数。</summary>
      <returns>第一个时间跨度和第二个时间跨度间隔的小时数。</returns>
      <param name="timeValue1">第一个时间跨度。</param>
      <param name="timeValue2">第二个时间跨度。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMicroseconds EDM 函数以计算两个日期/时间间隔的微秒数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的微秒数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMicroseconds EDM 函数以计算两个日期/时间间隔的微秒数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的微秒数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMicroseconds EDM 函数以计算两个时间跨度间隔的微秒数。</summary>
      <returns>第一个时间跨度和第二个时间跨度间隔的微秒数。</returns>
      <param name="timeValue1">第一个时间跨度。</param>
      <param name="timeValue2">第二个时间跨度。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMilliseconds EDM 函数以计算两个日期/时间间隔的毫秒数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的毫秒数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMilliseconds EDM 函数以计算两个日期/时间间隔的毫秒数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的毫秒数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMilliseconds EDM 函数以计算两个时间跨度间隔的毫秒数。</summary>
      <returns>第一个时间跨度和第二个时间跨度间隔的毫秒数。</returns>
      <param name="timeValue1">第一个时间跨度。</param>
      <param name="timeValue2">第二个时间跨度。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMinutes EDM 函数以计算两个日期/时间间隔的分钟数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的分钟数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMinutes EDM 函数以计算两个日期/时间间隔的分钟数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的分钟数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMinutes EDM 函数以计算两个时间跨度间隔的分钟数。</summary>
      <returns>第一个时间跨度和第二个时间跨度间隔的分钟数。</returns>
      <param name="timeValue1">第一个时间跨度。</param>
      <param name="timeValue2">第二个时间跨度。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMonths EDM 函数以计算两个日期/时间间隔的月数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的月数。</returns>
      <param name="dateValue1">第一个日期/时间。</param>
      <param name="dateValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffMonths EDM 函数以计算两个日期/时间间隔的月数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的月数。</returns>
      <param name="dateValue1">第一个日期/时间。</param>
      <param name="dateValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffNanoseconds EDM 函数以计算两个日期/时间间隔的纳秒数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的纳秒数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffNanoseconds EDM 函数以计算两个日期/时间间隔的纳秒数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的纳秒数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffNanoseconds EDM 函数以计算两个时间跨度间隔的纳秒数。</summary>
      <returns>第一个时间跨度和第二个时间跨度间隔的纳秒数。</returns>
      <param name="timeValue1">第一个时间跨度。</param>
      <param name="timeValue2">第二个时间跨度。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffSeconds EDM 函数以计算两个日期/时间间隔的秒数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的秒数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffSeconds EDM 函数以计算两个日期/时间间隔的秒数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的秒数。</returns>
      <param name="timeValue1">第一个日期/时间。</param>
      <param name="timeValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffSeconds EDM 函数以计算两个时间跨度间隔的秒数。</summary>
      <returns>第一个时间跨度和第二个时间跨度间隔的秒数。</returns>
      <param name="timeValue1">第一个时间跨度。</param>
      <param name="timeValue2">第二个时间跨度。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffYears EDM 函数以计算两个日期/时间间隔的年数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的年数。</returns>
      <param name="dateValue1">第一个日期/时间。</param>
      <param name="dateValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 DiffYears EDM 函数以计算两个日期/时间间隔的年数。</summary>
      <returns>第一个日期/时间和第二个日期/时间间隔的年数。</returns>
      <param name="dateValue1">第一个日期/时间。</param>
      <param name="dateValue2">第二个日期/时间。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 GetTotalOffsetMinutes EDM 函数以返回指定的日期/时间偏移 UTC 的分钟数。该值通常介于 +780 到 -780 之间（+ 或 - 13 小时）。</summary>
      <returns>输入对 UTC 的偏移量。</returns>
      <param name="dateTimeOffsetArgument">要使用的日期/时间值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Left 函数以返回字符串中最左侧指定数目的字符。</summary>
      <returns>包含从输入字符串左侧算起的所请求的字符数的字符串。</returns>
      <param name="stringArgument">输入字符串。</param>
      <param name="length">要返回的字符数</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Reverse(System.String)">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Reverse 函数以返回其字符顺序反转的指定字符串。</summary>
      <returns>以反转字符顺序显示的输入字符串。</returns>
      <param name="stringArgument">输入字符串。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Right 函数以返回字符串中最右侧指定数目的字符。</summary>
      <returns>包含从输入字符串右侧算起的所请求的字符数的字符串。</returns>
      <param name="stringArgument">输入字符串。</param>
      <param name="length">要返回的字符数</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDev EDM 函数以计算集合的标准差。</summary>
      <returns>标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDev EDM 函数以计算集合的标准差。</summary>
      <returns>标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDev EDM 函数以计算集合的标准差。</summary>
      <returns>标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDev EDM 函数以计算集合的标准差。</summary>
      <returns>标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDev EDM 函数以计算集合的标准差。</summary>
      <returns>标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDev EDM 函数以计算集合的标准差。</summary>
      <returns>标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDev EDM 函数以计算集合的标准差。</summary>
      <returns>标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDev EDM 函数以计算集合的标准差。</summary>
      <returns>标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDevP EDM 函数以计算总体的标准差。</summary>
      <returns>总体的标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDevP EDM 函数以计算总体的标准差。</summary>
      <returns>总体的标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDevP EDM 函数以计算总体的标准差。</summary>
      <returns>总体的标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDevP EDM 函数以计算总体的标准差。</summary>
      <returns>总体的标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDevP EDM 函数以计算总体的标准差。</summary>
      <returns>总体的标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDevP EDM 函数以计算总体的标准差。</summary>
      <returns>总体的标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDevP EDM 函数以计算总体的标准差。</summary>
      <returns>总体的标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 StDevP EDM 函数以计算总体的标准差。</summary>
      <returns>总体的标准差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Truncate EDM 函数以将指定的值截断为指定的位数。</summary>
      <returns>截整值。</returns>
      <param name="value">要截断的值。</param>
      <param name="digits">要保留的位数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Truncate EDM 函数以将指定的值截断为指定的位数。</summary>
      <returns>截整值。</returns>
      <param name="value">要截断的值。</param>
      <param name="digits">要保留的位数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 TruncateTime EDM 函数以返回清除了时间部分的指定日期。</summary>
      <returns>清除了时间部分的输入日期。</returns>
      <param name="dateValue">要使用的日期/时间值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 TruncateTime EDM 函数以返回清除了时间部分的指定日期。</summary>
      <returns>清除了时间部分的输入日期。</returns>
      <param name="dateValue">要使用的日期/时间值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Var EDM 函数以计算集合的方差。</summary>
      <returns>方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Var EDM 函数以计算集合的方差。</summary>
      <returns>方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Var EDM 函数以计算集合的方差。</summary>
      <returns>方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Var EDM 函数以计算集合的方差。</summary>
      <returns>方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Var EDM 函数以计算集合的方差。</summary>
      <returns>方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Var EDM 函数以计算集合的方差。</summary>
      <returns>方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Var EDM 函数以计算集合的方差。</summary>
      <returns>方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 Var EDM 函数以计算集合的方差。</summary>
      <returns>方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 VarP EDM 函数以计算总体的方差。</summary>
      <returns>总体的方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 VarP EDM 函数以计算总体的方差。</summary>
      <returns>总体的方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 VarP EDM 函数以计算总体的方差。</summary>
      <returns>总体的方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 VarP EDM 函数以计算总体的方差。</summary>
      <returns>总体的方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 VarP EDM 函数以计算总体的方差。</summary>
      <returns>总体的方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 VarP EDM 函数以计算总体的方差。</summary>
      <returns>总体的方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 VarP EDM 函数以计算总体的方差。</summary>
      <returns>总体的方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>作为 LINQ to Entities 查询的一部分使用时，此方法调用规范 VarP EDM 函数以计算总体的方差。</summary>
      <returns>总体的方差。</returns>
      <param name="collection">要对其执行计算的集合。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ExecutionOptions">
      <summary>表示查询执行的选项。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.#ctor(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Objects.ExecutionOptions" /> 的新实例。</summary>
      <param name="mergeOption">要用于实体结果的合并选项。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.#ctor(System.Data.Entity.Core.Objects.MergeOption,System.Boolean)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Objects.ExecutionOptions" /> 的新实例。</summary>
      <param name="mergeOption">要用于实体结果的合并选项。</param>
      <param name="streaming">如果流式处理查询，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前对象的哈希代码。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.MergeOption">
      <summary>获取用于实体结果的合并选项。</summary>
      <returns>要用于实体结果的合并选项。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Equality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
      <summary>确定指定的对象是否相等。</summary>
      <returns>如果两个对象相等，则为 true；否则为 false。</returns>
      <param name="left">要比较的左侧对象。</param>
      <param name="right">要比较的右侧对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Inequality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
      <summary>确定指定的对象是否不相等。</summary>
      <returns>如果两个对象不相等，则为 true；否则为 false。</returns>
      <param name="left">要比较的左侧对象。</param>
      <param name="right">要比较的右侧对象。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.Streaming">
      <summary>获取指示查询是否是流式处理还是缓存的一个值。</summary>
      <returns>如果查询是流式处理，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.IObjectSet`1">
      <summary>定义 IQueryable 实现的行为，该实现允许修改结果集的成员资格。</summary>
      <typeparam name="TEntity">从查询返回的实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.AddObject(`0)">
      <summary>通知对象集，必须将表示新实体的对象添加到该集中。</summary>
      <param name="entity">要添加到集中的新对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Attach(`0)">
      <summary>通知对象集，必须将表示现有实体的对象添加到该集中。</summary>
      <param name="entity">要添加到集中的现有对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.DeleteObject(`0)">
      <summary>通知对象集，必须从中删除表示现有实体的对象。</summary>
      <param name="entity">要从集中删除的现有对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Detach(`0)">
      <summary>通知对象集，必须从中分离表示现有实体的对象。</summary>
      <param name="entity">要从对象集中分离的对象。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.MergeOption">
      <summary>可将从数据库加载的新对象与内存中现有对象合并的不同方法。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly">
      <summary>将仅追加新的（顶级唯一）行。这是默认行为。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking">
      <summary>将不修改缓存。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.OverwriteChanges">
      <summary>与 LoadOption.OverwriteChanges 的行为相同。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.PreserveChanges">
      <summary>与 LoadOption.PreserveChanges 的行为相同。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectContext">
      <summary>ObjectContext 是封装 CLR 和数据库之间的连接的顶级元素，充当“创建”、“读取”、“更新”和“删除”操作的网关。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection)">
      <summary>使用给定的连接初始化 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 类的新实例。在构造过程中，从 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 对象提取元数据工作区。</summary>
      <param name="connection">一种包含对模型和数据源连接的引用的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />。</param>
      <exception cref="T:System.ArgumentNullException">connection 为 null。</exception>
      <exception cref="T:System.ArgumentException">connection 无效或元数据工作区无效。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.Boolean)">
      <summary>使用给定的连接和元数据工作区创建 ObjectContext。</summary>
      <param name="connection">与存储区的连接</param>
      <param name="contextOwnsConnection">如果设置为 true，则释放上下文时将释放该连接；否则调用方必须释放该连接。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.String)">
      <summary>使用给定连接和实体容器名称初始化 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 类的新实例。</summary>
      <param name="connection">一种包含对模型和数据源连接的引用的 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />。</param>
      <param name="defaultContainerName">默认实体容器的名称。通过此方法设置 defaultContainerName 时，该属性为只读属性。</param>
      <exception cref="T:System.ArgumentNullException">connection 为 null。</exception>
      <exception cref="T:System.ArgumentException">connection、defaultContainerName 或元数据工作区无效。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String)">
      <summary>使用给定连接字符串和默认实体容器名称初始化 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 类的新实例。</summary>
      <param name="connectionString">连接字符串，该连接字符串还提供对元数据信息的访问。</param>
      <exception cref="T:System.ArgumentNullException">connectionString 为 null。</exception>
      <exception cref="T:System.ArgumentException">connectionString 无效或元数据工作区无效。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String,System.String)">
      <summary>使用给定连接字符串和实体容器名称初始化 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 类的新实例。</summary>
      <param name="connectionString">连接字符串，该连接字符串还提供对元数据信息的访问。</param>
      <param name="defaultContainerName">默认实体容器的名称。通过此方法设置 defaultContainerName 时，该属性为只读属性。</param>
      <exception cref="T:System.ArgumentNullException">connectionString 为 null。</exception>
      <exception cref="T:System.ArgumentException">connectionString、defaultContainerName 或元数据工作区无效。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges">
      <summary>接受在对象上下文中对对象所做的所有更改。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AddObject(System.String,System.Object)">
      <summary>将对象添加到对象上下文。</summary>
      <param name="entitySetName">表示实体集名称，可以选择通过实体容器名称对它进行限定。</param>
      <param name="entity">要添加的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">entity 参数为 null 或 entitySetName 未限定。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)">
      <summary>将标量值从提供的对象复制到 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中具有相同键的对象中。</summary>
      <returns>已更新的对象。</returns>
      <param name="entitySetName">对象所属实体集的名称。</param>
      <param name="currentEntity">其属性更新将应用于原始对象的已分离对象。currentEntity 的实体键必须与 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中某个项的 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> 属性相匹配。</param>
      <typeparam name="TEntity">对象的实体类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">entitySetName 或 current 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">来自 entitySetName 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 与对象 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 不匹配，或对象不在 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 中，或对象处于 <see cref="F:System.Data.Entity.EntityState.Detached" /> 状态，或所提供对象的实体键无效。</exception>
      <exception cref="T:System.ArgumentException">entitySetName 为空字符串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)">
      <summary>将标量值从提供的对象复制到 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中具有相同键的对象的原始值集中。</summary>
      <returns>已更新的对象。</returns>
      <param name="entitySetName">对象所属实体集的名称。</param>
      <param name="originalEntity">具有要应用于对象的原始值的已分离对象。originalEntity 的实体键必须与 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中某个项的 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> 属性相匹配。</param>
      <typeparam name="TEntity">实体对象的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">entitySetName 或 original 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">来自 entitySetName 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 与对象 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 不匹配，或在 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 中找不到对象的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />，或对象处于 <see cref="F:System.Data.Entity.EntityState.Added" /> 或 <see cref="F:System.Data.Entity.EntityState.Detached" /> 状态，或所提供对象的实体键无效或属性发生了更改。</exception>
      <exception cref="T:System.ArgumentException">entitySetName 为空字符串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)">
      <summary>将已分离对象的属性更改应用于已附加到对象上下文的对象。</summary>
      <param name="entitySetName">对象所属实体集的名称。</param>
      <param name="changed">其属性更新将应用于原始对象的已分离对象。</param>
      <exception cref="T:System.ArgumentNullException">当 entitySetName 为 null 或空字符串时，或当 changed 为 null 时。</exception>
      <exception cref="T:System.InvalidOperationException">当来自 entitySetName 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 与对象 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 不匹配时，或实体未处于 <see cref="F:System.Data.Entity.EntityState.Modified" /> 或 <see cref="F:System.Data.Entity.EntityState.Unchanged" /> 状态时，或原始对象未附加到上下文时。</exception>
      <exception cref="T:System.ArgumentException">当 changed 对象的类型与原始对象的类型不同时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey)">
      <summary>在对象具有实体键时将对象或对象图附加到对象上下文。</summary>
      <param name="entity">要附加的对象。</param>
      <exception cref="T:System.ArgumentNullException">entity 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无效的实体键。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AttachTo(System.String,System.Object)">
      <summary>将特定实体集中的对象或对象图附加到对象上下文。</summary>
      <param name="entitySetName">表示实体集名称，可以选择通过实体容器名称对它进行限定。</param>
      <param name="entity">要附加的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">entity 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">实体集无效，或对象具有临时键，或对象具有 <see cref="T:System.Data.Entity.Core.EntityKey" /> 且 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 与作为方法参数传入的实体集不匹配，或对象没有 <see cref="T:System.Data.Entity.Core.EntityKey" /> 且未提供任何实体集，或对象图的任意对象具有临时 <see cref="T:System.Data.Entity.Core.EntityKey" />，或对象图的任意对象具有无效的 <see cref="T:System.Data.Entity.Core.EntityKey" />（例如，键中的值与对象中的值不匹配），或无法根据给定的 entitySetName 名称和实体容器名称找到实体集，或对象图的任意对象已存于其他状态管理器中。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.CommandTimeout">
      <summary>获取或设置所有对象上下文操作的超时值（以秒为单位）。null 值指示将使用基础提供程序的默认值。</summary>
      <returns>作为超时值的 <see cref="T:System.Int32" /> 值（以秒为单位）。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.Connection">
      <summary>获取对象上下文使用的连接。</summary>
      <returns>一个作为连接的 <see cref="T:System.Data.Common.DbConnection" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ContextOptions">
      <summary>获取 <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" /> 实例，该实例包含影响 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 行为的选项。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" /> 实例，该实例包含影响 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的行为的选项。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabase">
      <summary>使用当前数据源连接和 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 中的元数据创建数据库。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabaseScript">
      <summary>生成数据定义语言 (DDL) 脚本，该脚本为 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 中的元数据创建架构对象（表、主键、外键）。<see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 用于加载存储架构定义语言 (SSDL) 文件中的元数据。</summary>
      <returns>一个 DDL 脚本，该脚本为 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 中的元数据创建架构对象。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)">
      <summary>为特定对象创建实体键，如果实体键已存在，则返回该键。</summary>
      <returns>对象的 <see cref="T:System.Data.Entity.Core.EntityKey" />。</returns>
      <param name="entitySetName">实体对象所属实体集的完全限定名称。</param>
      <param name="entity">要为其检索实体键的对象。</param>
      <exception cref="T:System.ArgumentNullException">当任一参数为 null 时。</exception>
      <exception cref="T:System.ArgumentException">当 entitySetName 为空时，或实体对象的类型在实体集中不存在时，或 entitySetName 没有完全限定时。</exception>
      <exception cref="T:System.InvalidOperationException">当无法根据提供的参数成功构造实体键时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObject``1">
      <summary>创建并返回所请求的类型的实例。</summary>
      <returns>所请求类型 T 的实例，或一个使得 T 能够与实体框架一起使用的派生类型的实例。返回的对象是所请求类型的实例或使得请求的类型能够与实体框架一起使用的派生类型的实例。</returns>
      <typeparam name="T">要返回的对象的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1">
      <summary>创建新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 实例，该实例用于查询、添加、修改和删除指定实体类型的对象。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 实例。</returns>
      <typeparam name="TEntity">所请求的 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 的实体类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">未在 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 上设置 <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> 属性，或指定的类型属于多个实体集。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1(System.String)">
      <summary>创建新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 实例，该实例用于查询、添加、修改和删除具有指定类型和指定实体集名称的对象。</summary>
      <returns>新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 实例。</returns>
      <param name="entitySetName">返回的 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 的实体集的名称。如果未在 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 上设置 <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> 属性，则字符串必须使用默认容器名称进行限定。</param>
      <typeparam name="TEntity">所请求的 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 的实体类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">来自 entitySetName 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 与对象 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 不匹配，或未在 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 上设置 <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> 属性且名称未限定为 entitySetName 参数的一部分，或指定的类型属于多个实体集。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>为提供的枚举中的每个类型生成可与实体框架一同使用的等效类型。</summary>
      <param name="types">
        <see cref="T:System.Type" /> 对象的枚举，这些对象表示映射到概念模型的自定义数据类。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>使用指定查询字符串在当前对象上下文中创建 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />。</summary>
      <returns>具有指定类型的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />。</returns>
      <param name="queryString">要执行的查询字符串。</param>
      <param name="parameters">要传递给查询的参数。</param>
      <typeparam name="T">返回的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 的实体类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">queryString 或 parameters 参数为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DatabaseExists">
      <summary>检查在当前存储连接中指定为数据库的数据库是否在存储区上存在。大部分实际工作由当前存储连接的 DbProviderServices 实现完成。</summary>
      <returns>如果数据库存在，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName">
      <summary>获取或设置默认容器名称。</summary>
      <returns>作为默认容器名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteDatabase">
      <summary>删除在当前数据源连接中指定为数据库的数据库。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteObject(System.Object)">
      <summary>标记对象以备删除。</summary>
      <param name="entity">指定待删除实体的对象。该对象可以为任何状态（<see cref="F:System.Data.Entity.EntityState.Detached" /> 除外）。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Detach(System.Object)">
      <summary>从对象上下文移除对象。</summary>
      <param name="entity">要分离的对象。仅移除实体；如果存在任何由相同 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 跟踪的相关对象，则不会自动分离这些对象。</param>
      <exception cref="T:System.ArgumentNullException">entity 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">实体不与此 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 关联（例如，是新创建的，仍未与任何上下文关联，或是通过其他上下文获取，或是已分离）。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DetectChanges">
      <summary>确保 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 更改与由 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 跟踪的所有对象中的更改进行同步。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose">
      <summary>释放对象上下文使用的资源。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose(System.Boolean)">
      <summary>释放对象上下文使用的资源。</summary>
      <param name="disposing">如果为 true，则同时释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>对默认容器执行给定的函数。</summary>
      <returns>一个表示执行此函数的结果的对象。</returns>
      <param name="functionName">函数的名称。可能包含容器名称（例如 ContainerName.FunctionName），如果知道 DefaultContainerName，也可以仅包含函数名称。</param>
      <param name="executionOptions">用于执行此函数的选项。</param>
      <param name="parameters">要用于函数的参数值。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
      <typeparam name="TElement">函数结果的元素类型。</typeparam>
      <exception cref="T:System.ArgumentException">如果函数为 null 或为空</exception>
      <exception cref="T:System.InvalidOperationException">如果函数无效（语法错误、不存在或引用其返回类型与 T 不兼容的函数）</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.MergeOption,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>使用指定的参数和合并选项，执行在数据源中定义并在概念模型中表示的给定存储过程或函数。返回一个类型化的 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />。</summary>
      <returns>存储过程返回的数据的 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />。</returns>
      <param name="functionName">存储过程或函数的名称。该名称可以包含容器名称，如 &lt;容器名称&gt;.&lt;函数名称&gt;。如果默认容器名称已知，则只需要函数名称。</param>
      <param name="mergeOption">要在执行查询时使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</param>
      <param name="parameters">一个 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 对象数组。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
      <typeparam name="TElement">对数据源执行函数时，将返回 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的实体类型。该类型必须实现 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" />。</typeparam>
      <exception cref="T:System.ArgumentException">function 为 null 或为空，或未找到 function。</exception>
      <exception cref="T:System.InvalidOperationException">实体读取器不支持此函数或读取器和函数的类型不匹配。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>使用指定的参数，执行在数据源中定义并在概念模型中映射的存储过程或函数。返回一个类型化的 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />。</summary>
      <returns>存储过程返回的数据的 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />。</returns>
      <param name="functionName">存储过程或函数的名称。该名称可以包含容器名称，如 &lt;容器名称&gt;.&lt;函数名称&gt;。如果默认容器名称已知，则只需要函数名称。</param>
      <param name="parameters">一个 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 对象数组。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
      <typeparam name="TElement">对数据源执行函数时，将返回 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的实体类型。该类型必须实现 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" />。</typeparam>
      <exception cref="T:System.ArgumentException">function 为 null 或为空，或未找到 function。</exception>
      <exception cref="T:System.InvalidOperationException">实体读取器不支持此函数或读取器和函数的类型不匹配。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>执行在数据源中定义并在概念模型中表示的存储过程或函数，丢弃该函数返回的任何结果，并返回执行该函数影响的行数。</summary>
      <returns>受影响的行数。</returns>
      <param name="functionName">存储过程或函数的名称。该名称可以包含容器名称，如 &lt;容器名称&gt;.&lt;函数名称&gt;。如果默认容器名称已知，则只需要函数名称。</param>
      <param name="parameters">一个 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 对象数组。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
      <exception cref="T:System.ArgumentException">function 为 null 或为空，或未找到 function。</exception>
      <exception cref="T:System.InvalidOperationException">实体读取器不支持此函数或读取器和函数的类型不匹配。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>使用现有连接对数据源直接执行任意命令。使用服务器的本机查询语言（如 SQL）指定该命令。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构建一个 DbParameter 并且将其提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>受影响的行数。</returns>
      <param name="transactionalBehavior">对于此命令控制事务的创建。</param>
      <param name="commandText">使用服务器的本机查询语言指定的命令。</param>
      <param name="parameters">要用于查询的参数值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])">
      <summary>使用现有连接对数据源直接执行任意命令。使用服务器的本机查询语言（如 SQL）指定该命令。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构建一个 DbParameter 并且将其提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>受影响的行数。</returns>
      <param name="commandText">使用服务器的本机查询语言指定的命令。</param>
      <param name="parameters">要用于查询的参数值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>使用现有连接对数据源直接异步执行任意命令。使用服务器的本机查询语言（如 SQL）指定该命令。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构建一个 DbParameter 并且将其提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示异步操作的任务。任务结果包含受影响的行数。</returns>
      <param name="transactionalBehavior">对于此命令控制事务的创建。</param>
      <param name="commandText">使用服务器的本机查询语言指定的命令。</param>
      <param name="parameters">要用于查询的参数值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>使用现有连接对数据源直接异步执行任意命令。使用服务器的本机查询语言（如 SQL）指定该命令。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构建一个 DbParameter 并且将其提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示异步操作的任务。任务结果包含受影响的行数。</returns>
      <param name="transactionalBehavior">对于此命令控制事务的创建。</param>
      <param name="commandText">使用服务器的本机查询语言指定的命令。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">要用于查询的参数值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.String,System.Object[])">
      <summary>使用现有连接对数据源直接异步执行任意命令。使用服务器的本机查询语言（如 SQL）指定该命令。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构建一个 DbParameter 并且将其提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示异步操作的任务。任务结果包含受影响的行数。</returns>
      <param name="commandText">使用服务器的本机查询语言指定的命令。</param>
      <param name="parameters">要用于查询的参数值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>使用现有连接对数据源直接异步执行任意命令。使用服务器的本机查询语言（如 SQL）指定该命令。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构建一个 DbParameter 并且将其提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示异步操作的任务。任务结果包含受影响的行数。</returns>
      <param name="commandText">使用服务器的本机查询语言指定的命令。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">要用于查询的参数值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>对数据源直接执行查询并返回类型化结果的序列。使用服务器的本机查询语言（如 SQL）指定该查询。上下文未跟踪这些结果，请使用指定实体集名称的重载跟踪结果。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>类型为 <paramref name="TElement" /> 的对象的枚举。</returns>
      <param name="commandText">使用服务器的本机查询语言指定的查询。</param>
      <param name="executionOptions">用于执行此查询的选项。</param>
      <param name="parameters">要用于查询的参数值。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
      <typeparam name="TElement">结果序列的元素类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])">
      <summary>对数据源直接执行查询并返回类型化结果的序列。使用服务器的本机查询语言（如 SQL）指定该查询。上下文未跟踪这些结果，请使用指定实体集名称的重载跟踪结果。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>类型为 <paramref name="TElement" /> 的对象的枚举。</returns>
      <param name="commandText">使用服务器的本机查询语言指定的查询。</param>
      <param name="parameters">要用于查询的参数值。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
      <typeparam name="TElement">结果序列的元素类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>对数据源直接执行查询并返回类型化结果的序列。使用服务器的本机查询语言（如 SQL）指定该查询。如果指定了实体集名称，则上下文会跟踪结果。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>类型为 <paramref name="TElement" /> 的对象的枚举。</returns>
      <param name="commandText">使用服务器的本机查询语言指定的查询。</param>
      <param name="entitySetName">TResult 类型的实体集。如果未提供实体集名称，则不会跟踪结果。</param>
      <param name="executionOptions">用于执行此查询的选项。</param>
      <param name="parameters">要用于查询的参数值。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
      <typeparam name="TElement">结果序列的元素类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.MergeOption,System.Object[])">
      <summary>对数据源直接执行查询并返回类型化结果的序列。使用服务器的本机查询语言（如 SQL）指定该查询。如果指定了实体集名称，则上下文会跟踪结果。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>类型为 <paramref name="TElement" /> 的对象的枚举。</returns>
      <param name="commandText">使用服务器的本机查询语言指定的查询。</param>
      <param name="entitySetName">TResult 类型的实体集。如果未提供实体集名称，则不会跟踪结果。</param>
      <param name="mergeOption">要在执行查询时使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。默认值为 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />。</param>
      <param name="parameters">要用于查询的参数值。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
      <typeparam name="TElement">结果序列的元素类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>对数据源直接异步执行查询并返回类型化结果的序列。使用服务器的本机查询语言（如 SQL）指定该查询。上下文未跟踪这些结果，请使用指定实体集名称的重载跟踪结果。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示异步操作的任务。任务结果包含类型为 <paramref name="TElement" /> 的对象的枚举。</returns>
      <param name="commandText">使用服务器的本机查询语言指定的查询。</param>
      <param name="executionOptions">用于执行此查询的选项。</param>
      <param name="parameters">要用于查询的参数值。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
      <typeparam name="TElement">结果序列的元素类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object[])">
      <summary>对数据源直接异步执行查询并返回类型化结果的序列。使用服务器的本机查询语言（如 SQL）指定该查询。上下文未跟踪这些结果，请使用指定实体集名称的重载跟踪结果。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示异步操作的任务。任务结果包含类型为 <paramref name="TElement" /> 的对象的枚举。</returns>
      <param name="commandText">使用服务器的本机查询语言指定的查询。</param>
      <param name="executionOptions">用于执行此查询的选项。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">要用于查询的参数值。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
      <typeparam name="TElement">结果序列的元素类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Object[])">
      <summary>对数据源直接异步执行查询并返回类型化结果的序列。使用服务器的本机查询语言（如 SQL）指定该查询。上下文未跟踪这些结果，请使用指定实体集名称的重载跟踪结果。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示异步操作的任务。任务结果包含类型为 <paramref name="TElement" /> 的对象的枚举。</returns>
      <param name="commandText">使用服务器的本机查询语言指定的查询。</param>
      <param name="parameters">要用于查询的参数值。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
      <typeparam name="TElement">结果序列的元素类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>对数据源直接异步执行查询并返回类型化结果的序列。使用服务器的本机查询语言（如 SQL）指定该查询。如果指定了实体集名称，则上下文会跟踪结果。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示异步操作的任务。任务结果包含类型为 <paramref name="TElement" /> 的对象的枚举。</returns>
      <param name="commandText">使用服务器的本机查询语言指定的查询。</param>
      <param name="entitySetName">TResult 类型的实体集。如果未提供实体集名称，则不会跟踪结果。</param>
      <param name="executionOptions">用于执行此查询的选项。</param>
      <param name="parameters">要用于查询的参数值。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
      <typeparam name="TElement">结果序列的元素类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object[])">
      <summary>对数据源直接异步执行查询并返回类型化结果的序列。使用服务器的本机查询语言（如 SQL）指定该查询。如果指定了实体集名称，则上下文会跟踪结果。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示异步操作的任务。任务结果包含类型为 <paramref name="TElement" /> 的对象的枚举。</returns>
      <param name="commandText">使用服务器的本机查询语言指定的查询。</param>
      <param name="entitySetName">TResult 类型的实体集。如果未提供实体集名称，则不会跟踪结果。</param>
      <param name="executionOptions">用于执行此查询的选项。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">要用于查询的参数值。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
      <typeparam name="TElement">结果序列的元素类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>对数据源直接异步执行查询并返回类型化结果的序列。使用服务器的本机查询语言（如 SQL）指定该查询。上下文未跟踪这些结果，请使用指定实体集名称的重载跟踪结果。与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。您提供的任何参数值都将自动转换为 DbParameter。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。这允许您在 SQL 查询字符串中使用命名参数。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>表示异步操作的任务。任务结果包含类型为 <paramref name="TElement" /> 的对象的枚举。</returns>
      <param name="commandText">使用服务器的本机查询语言指定的查询。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">要用于查询的参数值。如果使用输出参数，则它们的值在完全读取结果之前不可用。这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
      <typeparam name="TElement">结果序列的元素类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Finalize">
      <summary>终结 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 类的实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetKnownProxyTypes">
      <summary>返回所有现有代理类型。</summary>
      <returns>所有现有代理类型的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectByKey(System.Data.Entity.Core.EntityKey)">
      <summary>返回具有指定实体键的对象。</summary>
      <returns>一个 <see cref="T:System.Object" />，它是实体类型的实例。</returns>
      <param name="key">要查找的对象的键。</param>
      <exception cref="T:System.ArgumentNullException">key 参数为 null。</exception>
      <exception cref="T:System.Data.Entity.Core.ObjectNotFoundException">在 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 和数据源中都未找到对象。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectType(System.Type)">
      <summary>返回与指定类型的代理对象关联的 POCO 实体的实体类型。</summary>
      <returns>关联的 POCO 实体的 <see cref="T:System.Type" />。</returns>
      <param name="type">代理对象的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.InterceptionContext">
      <summary>返回用于此上下文的 <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String)">
      <summary>通过指定的导航属性并使用默认合并选项，显式加载与提供的对象相关的对象。</summary>
      <param name="entity">要为其加载相关对象的实体。</param>
      <param name="navigationProperty">可返回要加载的相关对象的导航属性的名称。</param>
      <exception cref="T:System.InvalidOperationException">实体处于 <see cref="F:System.Data.Entity.EntityState.Detached" />、<see cref="F:System.Data.Entity.EntityState.Added," /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态，或实体已附加到 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的另一个实例。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>通过指定的导航属性并使用指定的合并选项，显式加载与提供的对象相关的对象。</summary>
      <param name="entity">要为其加载相关对象的实体。</param>
      <param name="navigationProperty">可返回要加载的相关对象的导航属性的名称。</param>
      <param name="mergeOption">在加载相关对象时要使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 值。</param>
      <exception cref="T:System.InvalidOperationException">实体处于 <see cref="F:System.Data.Entity.EntityState.Detached" />、<see cref="F:System.Data.Entity.EntityState.Added," /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态，或实体已附加到 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的另一个实例。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>通过指定的 LINQ 查询并使用默认合并选项，显式加载与提供的对象相关的对象。</summary>
      <param name="entity">要为其加载相关对象的源对象。</param>
      <param name="selector">定义要加载的相关对象的 LINQ 表达式。</param>
      <typeparam name="TEntity">实体的类型。</typeparam>
      <exception cref="T:System.ArgumentException">selector 未提供有效的输入参数。</exception>
      <exception cref="T:System.ArgumentNullException">selector 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">实体处于 <see cref="F:System.Data.Entity.EntityState.Detached" />、<see cref="F:System.Data.Entity.EntityState.Added," /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态，或实体已附加到 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的另一个实例。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.Core.Objects.MergeOption)">
      <summary>通过指定的 LINQ 查询并使用指定的合并选项，显式加载与提供的对象相关的对象。</summary>
      <param name="entity">要为其加载相关对象的源对象。</param>
      <param name="selector">定义要加载的相关对象的 LINQ 表达式。</param>
      <param name="mergeOption">在加载相关对象时要使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 值。</param>
      <typeparam name="TEntity">实体的类型。</typeparam>
      <exception cref="T:System.ArgumentException">selector 未提供有效的输入参数。</exception>
      <exception cref="T:System.ArgumentNullException">selector 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">实体处于 <see cref="F:System.Data.Entity.EntityState.Detached" />、<see cref="F:System.Data.Entity.EntityState.Added," /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态，或实体已附加到 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的另一个实例。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.MetadataWorkspace">
      <summary>获取对象上下文使用的元数据工作区。</summary>
      <returns>与此 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 关联的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 对象。</returns>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectContext.ObjectMaterialized">
      <summary>当使用数据源中的数据创建新的实体对象（作为查询或加载操作的一部分）时发生。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ObjectStateManager">
      <summary>获取对象上下文用于跟踪对象更改的对象状态管理器。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 使用的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.QueryProvider">
      <summary>获取与此对象上下文关联的 LINQ 查询提供程序。</summary>
      <returns>由此对象上下文使用的 <see cref="T:System.Linq.IQueryProvider" /> 实例。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>使用数据库中的数据更新对象上下文中的对象集合。</summary>
      <param name="refreshMode">一个 <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 值，指示是否使用数据库中的属性值重写对象上下文中的属性更改。</param>
      <param name="collection">要刷新的对象的 <see cref="T:System.Collections.IEnumerable" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">collection 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode 无效。</exception>
      <exception cref="T:System.ArgumentException">collection 为空或对象未附加到上下文。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Object)">
      <summary>使用数据库中的数据更新对象上下文中的对象。</summary>
      <param name="refreshMode">一个 <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 值，指示是否使用数据库中的属性值重写对象上下文中的属性更改。</param>
      <param name="entity">要刷新的对象。</param>
      <exception cref="T:System.ArgumentNullException">entity 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode 无效。</exception>
      <exception cref="T:System.ArgumentException">实体未附加到上下文。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>使用数据库中的数据异步更新对象上下文中的对象集合。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="refreshMode">一个 <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 值，指示是否使用数据库中的属性值重写对象上下文中的属性更改。</param>
      <param name="collection">要刷新的对象的 <see cref="T:System.Collections.IEnumerable" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">collection 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode 无效。</exception>
      <exception cref="T:System.ArgumentException">collection 为空或对象未附加到上下文。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable,System.Threading.CancellationToken)">
      <summary>使用数据库中的数据异步更新对象上下文中的对象集合。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="refreshMode">一个 <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 值，指示是否使用数据库中的属性值重写对象上下文中的属性更改。</param>
      <param name="collection">要刷新的对象的 <see cref="T:System.Collections.IEnumerable" /> 集合。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">collection 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode 无效。</exception>
      <exception cref="T:System.ArgumentException">collection 为空或对象未附加到上下文。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Object)">
      <summary>使用数据库中的数据异步更新对象上下文中的对象。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="refreshMode">一个 <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 值，指示是否使用数据库中的属性值重写对象上下文中的属性更改。</param>
      <param name="entity">要刷新的对象。</param>
      <exception cref="T:System.ArgumentNullException">entity 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode 无效。</exception>
      <exception cref="T:System.ArgumentException">实体未附加到上下文。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Object,System.Threading.CancellationToken)">
      <summary>使用数据库中的数据异步更新对象上下文中的对象。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="refreshMode">一个 <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 值，指示是否使用数据库中的属性值重写对象上下文中的属性更改。</param>
      <param name="entity">要刷新的对象。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">entity 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode 无效。</exception>
      <exception cref="T:System.ArgumentException">实体未附加到上下文。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges">
      <summary>将所有更新保存到数据库并重置对象上下文中的更改跟踪。</summary>
      <returns>在调用 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> 时处于 <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态的对象数。</returns>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">保存更改时发生了开放式并发冲突。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)">
      <summary>将所有更新保存到数据库并可选择重置对象上下文中的更改跟踪。</summary>
      <returns>在调用 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> 时处于 <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态的对象数。</returns>
      <param name="acceptChangesDuringSave">客户端事务支持需要此参数。如果为 true，则所有对象上的更改跟踪都会在 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" /> 完成后重置。如果为 false，则必须在 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" /> 之后调用 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges" /> 方法。</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">保存更改时发生了开放式并发冲突。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Data.Entity.Core.Objects.SaveOptions)">
      <summary>将所有更新保存到数据库并可选择重置对象上下文中的更改跟踪。</summary>
      <returns>在调用 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> 时处于 <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态的对象数。</returns>
      <param name="options">一个确定操作的行为的 <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> 值。</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">保存更改时发生了开放式并发冲突。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync">
      <summary>将所有更新异步保存到数据库并重置对象上下文中的更改跟踪。</summary>
      <returns>表示异步操作的任务。任务结果包含在调用 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> 时处于 <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态的对象数。</returns>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">保存更改时发生了开放式并发冲突。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Data.Entity.Core.Objects.SaveOptions)">
      <summary>将所有更新异步保存到数据库并可选择重置对象上下文中的更改跟踪。</summary>
      <returns>表示异步操作的任务。任务结果包含在调用 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> 时处于 <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态的对象数。</returns>
      <param name="options">一个确定操作的行为的 <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> 值。</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">保存更改时发生了开放式并发冲突。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Data.Entity.Core.Objects.SaveOptions,System.Threading.CancellationToken)">
      <summary>将所有更新异步保存到数据库并可选择重置对象上下文中的更改跟踪。</summary>
      <returns>表示异步操作的任务。任务结果包含在调用 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> 时处于 <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态的对象数。</returns>
      <param name="options">一个确定操作的行为的 <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> 值。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">保存更改时发生了开放式并发冲突。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Threading.CancellationToken)">
      <summary>将所有更新异步保存到数据库并重置对象上下文中的更改跟踪。</summary>
      <returns>表示异步操作的任务。任务结果包含在调用 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> 时处于 <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态的对象数。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">保存更改时发生了开放式并发冲突。</exception>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectContext.SavingChanges">
      <summary>在将更改保存到数据源时发生。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>返回自身。ObjectContext 实现 <see cref="T:System.Data.Entity.Infrastructure.IObjectContextAdapter" /> 以便为 <see cref="T:System.Data.Entity.DbContext" /> 和 ObjectContext（这两者将返回基础 ObjectContext）提供通用接口。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.TransactionHandler">
      <summary>获取正由此上下文使用的事务处理程序。如果尚未启动任何事务，则可能为 null。</summary>
      <returns>事务处理程序。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>将包含实体数据行的 <see cref="T:System.Data.Common.DbDataReader" /> 转换为请求的实体类型的对象。</summary>
      <returns>类型为 TResult 的对象的枚举。</returns>
      <param name="reader">包含要转换为实体对象的实体数据的 <see cref="T:System.Data.Common.DbDataReader" />。</param>
      <typeparam name="TElement">实体类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 reader 为 null 时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>在特定的实体集中，使用指定的合并选项将包含实体数据行的 <see cref="T:System.Data.Common.DbDataReader" /> 转换为请求的实体类型的对象。</summary>
      <returns>类型为 TResult 的对象的枚举。</returns>
      <param name="reader">包含要转换为实体对象的实体数据的 <see cref="T:System.Data.Common.DbDataReader" />。</param>
      <param name="entitySetName">TResult 类型的实体集。</param>
      <param name="mergeOption">在将转换后的对象添加到对象上下文时要使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。默认值为 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />。</param>
      <typeparam name="TEntity">实体类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 reader 为 null 时。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当提供的 mergeOption 不是有效的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 值时。</exception>
      <exception cref="T:System.InvalidOperationException">当提供的 entitySetName 不是 TResult 类型的有效实体集时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.TryGetObjectByKey(System.Data.Entity.Core.EntityKey,System.Object@)">
      <summary>返回具有指定实体键的对象。</summary>
      <returns>如果成功检索到对象，则为 true。如果 key 是临时的、connection 为 null 或值为 null，则为 false。</returns>
      <param name="key">要查找的对象的键。</param>
      <param name="value">在此方法返回时包含对象。</param>
      <exception cref="T:System.ArgumentException">元数据对 key 不兼容。</exception>
      <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectContextOptions">
      <summary>定义影响 ObjectContext 的行为的选项。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.EnsureTransactionsForFunctionsAndCommands">
      <summary>获取或设置某值，该值确定是否应在事务中始终执行 SQL 函数和命令。</summary>
      <returns>默认事务行为。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.LazyLoadingEnabled">
      <summary>获取或设置一个布尔值，该值确定在访问导航属性时是否自动加载相关对象。</summary>
      <returns>如果启用了延迟加载，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.ProxyCreationEnabled">
      <summary>获取或设置一个布尔值，该值确定是否为持久性未知的自定义数据类创建代理实例。</summary>
      <returns>如果创建了代理，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseConsistentNullReferenceBehavior">
      <summary>获取或设置一个布尔值，该值确定是否要使用一致的 NullReference 行为。</summary>
      <returns>如果应使用一致的 NullReference 行为，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseCSharpNullComparisonBehavior">
      <summary>获取或设置一个布尔值，该值确定是否要使用 C# NullComparison 行为。</summary>
      <returns>如果应使用 C# NullComparison 行为，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior">
      <summary>获取或设置一个布尔值，该值确定是否要使用旧式 PreserveChanges 行为。</summary>
      <returns>如果应使用旧式 PreserveChanges 行为，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs">
      <summary>ObjectMaterialized 事件的 EventArgs。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs.Entity">
      <summary>获取已创建的实体对象。</summary>
      <returns>已创建的实体对象。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventHandler">
      <summary>ObjectMaterialized 事件的委托。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectParameter">
      <summary>此类表示对象层的查询参数，它包含 Name、Type 和 Value。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Object)">
      <summary>使用指定的名称和值初始化 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 类的新实例。</summary>
      <param name="name">参数名称。此名称不应包含“@”参数标记（它用在实体 SQL 语句中），只能为实际名称。表达式的第一个字符必须为字母。表达式中的所有后续字符都必须为字母、数字或下划线 (_) 字符。</param>
      <param name="value">参数的初始值（及固有类型）。</param>
      <exception cref="T:System.ArgumentNullException">如果任一参数的值为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">如果名称参数的值无效。参数名称必须以字母开头，并且只能包含字母、数字和下划线。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Type)">
      <summary>利用指定的名称和类型初始化 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 类的新实例。</summary>
      <param name="name">参数名称。此名称不应包含“@”参数标记（它用在实体 SQL 语句中），只能为实际名称。表达式的第一个字符必须为字母。表达式中的所有后续字符都必须为字母、数字或下划线 (_) 字符。</param>
      <param name="type">参数的公共语言运行库 (CLR) 类型。</param>
      <exception cref="T:System.ArgumentNullException">如果任一参数的值为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">如果名称参数的值无效。参数名称必须以字母开头，并且只能包含字母、数字和下划线。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Name">
      <summary>获取参数名称，该名称只能通过构造函数进行设置。</summary>
      <returns>参数名称，它只能通过构造函数进行设置。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.ParameterType">
      <summary>获取参数类型。</summary>
      <returns>参数的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Value">
      <summary>获取或设置参数值。</summary>
      <returns>参数值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectParameterCollection">
      <summary>表示对象层上的查询参数集合。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Add(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>将指定的 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 添加到集合。</summary>
      <param name="item">要添加到集合的参数。</param>
      <exception cref="T:System.ArgumentNullException">parameter 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">parameter 参数已存在于集合中。此行为与允许重复项的大多数集合的行为不同。-或-与实参同名的另一个形参已存在于集合中。注意，查找是区分大小写的。此行为与大多数集合的行为不同，更类似于 <see cref="T:System.Collections.Generic.Dictionary" /> 的行为。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">parameter 的类型无效。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Clear">
      <summary>删除集合中的所有 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>按引用检查集合中是否存在指定的 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />。</summary>
      <returns>如果在集合中找到参数对象，则返回 true；否则返回 false。</returns>
      <param name="item">要在集合中查找的 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />。</param>
      <exception cref="T:System.ArgumentNullException">parameter 参数为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.String)">
      <summary>确定集合中是否存在具有指定名称的 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />。</summary>
      <returns>如果在集合中找到具有指定名称的参数，则返回 true；否则为 false。</returns>
      <param name="name">要在集合中查找的参数的名称。此名称不应包含“@”参数标记（它用在实体 SQL 语句中），只能为实际名称。</param>
      <exception cref="T:System.ArgumentNullException">name 参数为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.CopyTo(System.Data.Entity.Core.Objects.ObjectParameter[],System.Int32)">
      <summary>允许将集合中的参数复制到提供的数组中（从指定索引处的对象开始）。</summary>
      <param name="array">要将参数复制到其中的数组。</param>
      <param name="arrayIndex">数组中开始复制参数的位置的索引。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Count">
      <summary>获取集合中当前存在的参数的数量。</summary>
      <returns>集合中当前存在的 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 对象的数量。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.GetEnumerator">
      <summary>返回枚举器实例，这些实例允许循环访问和遍历集合。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Item(System.String)">
      <summary>获取供调用方按名称检索参数的索引器。</summary>
      <returns>供调用方按名称检索参数的索引器。</returns>
      <param name="name">项名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Remove(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>按引用从集合中移除 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 的实例（如果集合中存在该实例）。</summary>
      <returns>如果从集合中找到并删除参数对象，则返回 true；否则为 false。</returns>
      <param name="item">要从集合中移除的对象。</param>
      <exception cref="T:System.ArgumentNullException">parameter 参数为 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 是只读的，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回集合上的非类型化枚举器。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 实例。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectQuery">
      <summary>此类在对象层实现非类型化的查询。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.CommandText">
      <summary>返回查询的命令文本。</summary>
      <returns>一个字符串值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Context">
      <summary>获取与此对象查询相关联的对象上下文。</summary>
      <returns>与此 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 实例关联的 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.EnablePlanCaching">
      <summary>获取或设置一个值，该值指示是否应缓存查询计划。</summary>
      <returns>一个指示是否应缓存查询计划的值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.Execute(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>使用指定合并选项执行非类型化对象查询。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />，它包含查询返回的实体对象的集合。</returns>
      <param name="mergeOption">要在执行查询时使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。默认值为 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>使用指定合并选项异步执行非类型化对象查询。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />，其中包含查询返回的实体对象集合。</returns>
      <param name="mergeOption">要在执行查询时使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。默认值为 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>使用指定合并选项异步执行非类型化对象查询。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />，其中包含查询返回的实体对象集合。</returns>
      <param name="mergeOption">要在执行查询时使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。默认值为 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.GetResultType">
      <summary>返回有关查询的结果类型的信息。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 值，它包含有关查询的结果类型的信息。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption">
      <summary>获取或设置从查询返回的对象添加到对象上下文的方式。</summary>
      <returns>查询 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Parameters">
      <summary>获取此对象查询的参数集合。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 的参数集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Streaming">
      <summary>查询是流式处理还是缓存</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>获取一个值，该值指示此查询是否包含查询对象的集合。</summary>
      <returns>如果此查询包含查询对象的集合，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList">
      <summary>返回 <see cref="T:System.Collections.IList" /> 形式的集合用于数据绑定。</summary>
      <returns>实体对象的 <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>返回 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" />，被枚举时它将针对数据库执行给定的 SQL 查询。</summary>
      <returns>查询结果。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#ElementType">
      <summary>获取此查询实例的结果元素类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Expression">
      <summary>获取描述此查询的表达式。对于使用 LINQ 生成器模式生成的查询，会返回完全 LINQ 表达式树；否则，返回包装此查询的常量表达式。请注意，默认表达式不进行缓存。这允许用户区分 LINQ 和 Entity-SQL 查询。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Provider">
      <summary>获取与此查询实例关联的 <see cref="T:System.Linq.IQueryProvider" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ToTraceString">
      <summary>返回对数据源执行的命令。</summary>
      <returns>一个 string，表示查询对数据源执行的命令。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectQuery`1">
      <summary>ObjectQuery 在对象层实现强类型化的查询。使用 Entity-SQL 字符串指定查询并可以通过调用由 ObjectQuery 声明的基于 Entity-SQL 的查询生成器方法来创建它们。</summary>
      <typeparam name="T">此 ObjectQuery 的结果类型</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>使用指定的实体 SQL 命令作为初始查询来创建新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 实例。</summary>
      <param name="commandText">实体 SQL 查询。</param>
      <param name="context">对其执行查询的 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>使用指定的实体 SQL 命令（作为初始查询）和指定的合并选项创建新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 实例。</summary>
      <param name="commandText">实体 SQL 查询。</param>
      <param name="context">对其执行查询的 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />。</param>
      <param name="mergeOption">指定此查询所检索的实体应如何与以前对同一 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的查询所返回的实体合并。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Distinct">
      <summary>将查询限制为唯一结果。</summary>
      <returns>一个新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 实例，等效于应用了 SELECT DISTINCT 的原始实例。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Except(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>此查询生成器方法创建其结果是此查询的所有结果（除了那些也是指定另一个查询结果的一部分之外）的新查询。</summary>
      <returns>新的 ObjectQuery 实例。</returns>
      <param name="query">表示要排除的结果的查询。</param>
      <exception cref="T:System.ArgumentNullException">如果查询参数是 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>使用指定的合并选项执行对象查询。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />，它包含查询返回的实体对象的集合。</returns>
      <param name="mergeOption">要在执行查询时使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。默认值为 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>使用指定的合并选项异步执行对象查询。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />，其中包含查询返回的实体对象集合。</returns>
      <param name="mergeOption">要在执行查询时使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。默认值为 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>使用指定的合并选项异步执行对象查询。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />，其中包含查询返回的实体对象集合。</returns>
      <param name="mergeOption">要在执行查询时使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。默认值为 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>按指定的条件对查询结果进行分组。</summary>
      <returns>一个 <see cref="T:System.Data.Common.DbDataRecord" /> 类型的新 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 实例，等效于应用了 GROUP BY 的原始实例。</returns>
      <param name="keys">作为结果分组依据的键列。</param>
      <param name="projection">用于定义投影的所选属性的列表。</param>
      <param name="parameters">此方法中使用的零个或多个参数。</param>
      <exception cref="T:System.ArgumentNullException">query 参数为 null 或空字符串，或 projection 参数为 null 或空字符串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Include(System.String)">
      <summary>指定要包括在查询结果中的相关对象。</summary>
      <returns>一个新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />，它具有定义的查询路径。</returns>
      <param name="path">要在查询结果中返回的相关对象的列表（以点分隔）。</param>
      <exception cref="T:System.ArgumentNullException">path 为 null。</exception>
      <exception cref="T:System.ArgumentException">path 为 empty。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Intersect(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>此查询生成器方法创建其结果同时包含在此查询和指定的另一查询的结果中的新查询。</summary>
      <returns>新的 ObjectQuery 实例。</returns>
      <param name="query">表示结果要与其相交的查询。</param>
      <exception cref="T:System.ArgumentNullException">如果查询参数是 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery`1.Name">
      <summary>获取或设置此对象查询的名称。</summary>
      <returns>一个字符串值，它是此 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 的名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OfType``1">
      <summary>将查询限制为仅包括特定类型的结果。</summary>
      <returns>一个新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 实例，等效于应用了 OFTYPE 的原始实例。</returns>
      <typeparam name="TResultType">使用应用筛选器执行查询时，<see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的类型返回。</typeparam>
      <exception cref="T:System.Data.Entity.Core.EntitySqlException">指定的类型无效。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>按指定条件对查询结果进行排序。</summary>
      <returns>一个新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 实例，等效于应用了 ORDER BY 的原始实例。</returns>
      <param name="keys">作为结果排序依据的键列。</param>
      <param name="parameters">此方法中使用的零个或多个参数。</param>
      <exception cref="T:System.ArgumentNullException">keys 或 parameters 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">key 为空字符串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Select(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>将查询结果限制为仅包含在指定投影中定义的属性。</summary>
      <returns>一个 <see cref="T:System.Data.Common.DbDataRecord" /> 类型的新 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 实例，等效于应用了 SELECT 的原始实例。</returns>
      <param name="projection">用于定义投影的所选属性的列表。</param>
      <param name="parameters">此方法中使用的零个或多个参数。</param>
      <exception cref="T:System.ArgumentNullException">projection 为 null 或 parameters 为 null。</exception>
      <exception cref="T:System.ArgumentException">projection 为空字符串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>将查询结果限制为仅包含投影中指定的属性。</summary>
      <returns>一个类型与特定投影兼容的新 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />。返回的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 等效于应用了 SELECT VALUE 的原始实例。</returns>
      <param name="projection">投影列表。</param>
      <param name="parameters">在分析时应在作用域内的一组可选查询参数。</param>
      <typeparam name="TResultType">由 <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])" /> 方法返回的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">projection 为 null 或 parameters 为 null。</exception>
      <exception cref="T:System.ArgumentException">projection 为空字符串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>按指定条件对查询结果进行排序并跳过指定数目的结果。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 实例，等效于同时应用了 ORDER BY 和 SKIP 的原始实例。</returns>
      <param name="keys">作为结果排序依据的键列。</param>
      <param name="count">要跳过的结果数。它可以是常量或参数引用。</param>
      <param name="parameters">在分析时应在作用域内的一组可选查询参数。</param>
      <exception cref="T:System.ArgumentNullException">任何参数为 null。</exception>
      <exception cref="T:System.ArgumentException">keys 为空字符串或 count 为空字符串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.Generic.IEnumerator`1" />，被枚举时它将针对数据库执行给定的 SQL 查询。</summary>
      <returns>查询结果。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>返回 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" />，被枚举时它将针对数据库执行给定的 SQL 查询。</summary>
      <returns>查询结果。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Top(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>将查询结果限制为指定的项数。</summary>
      <returns>一个新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 实例，等效于应用了 TOP 的原始实例。</returns>
      <param name="count">字符串形式的结果项数。</param>
      <param name="parameters">在分析时应在作用域内的一组可选查询参数。</param>
      <exception cref="T:System.ArgumentNullException">count 为 null。</exception>
      <exception cref="T:System.ArgumentException">count 为空字符串。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Union(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>此查询生成器方法创建其结果是此查询的所有结果加上另一个查询的所有结果但是不允许重复（即结果是唯一的）的新查询。</summary>
      <returns>新的 ObjectQuery 实例。</returns>
      <param name="query">表示要添加的结果的查询。</param>
      <exception cref="T:System.ArgumentNullException">如果查询参数是 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.UnionAll(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>此查询生成器方法创建其结果是此查询的所有结果加上另一个查询的所有结果且包括所有重复项（即结果不一定是唯一的）的新查询。</summary>
      <returns>新的 ObjectQuery 实例。</returns>
      <param name="query">表示要添加的结果的查询。</param>
      <exception cref="T:System.ArgumentNullException">如果查询参数是 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Where(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>将查询限制为包含与指定筛选条件匹配的结果。</summary>
      <returns>一个新的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 实例，等效于应用了 WHERE 的原始实例。</returns>
      <param name="predicate">筛选谓词。</param>
      <param name="parameters">此方法中使用的零个或多个参数。</param>
      <exception cref="T:System.ArgumentNullException">predicate 为 null 或 parameters 为 null。</exception>
      <exception cref="T:System.ArgumentException">predicate 为空字符串。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectResult">
      <summary>此类实现 IEnumerable 和 IDisposable。从 ObjectQuery.Execute 方法返回此类的实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.#ctor">
      <summary>仅当创建将重写具有模拟或伪造行为的成员的测试替身时，才使用此构造函数。将此构造函数用于其他目的可能导致意外的行为，包括但不限于引发 <see cref="T:System.NullReferenceException" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose">
      <summary>执行与释放 (free)、释放 (release) 或重置资源关联的任务。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose(System.Boolean)">
      <summary>释放对象结果使用的资源。</summary>
      <param name="disposing">如果为 true，则同时释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult.ElementType">
      <summary>在派生类中重写时，获取泛型 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的类型。</summary>
      <returns>泛型 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.GetNextResult``1">
      <summary>获取存储过程的下一个结果集。</summary>
      <returns>枚举下一个结果集的值的 ObjectResult。如果没有其他值，或 ObjectResult 不是存储过程调用的结果，则为 Null。</returns>
      <typeparam name="TElement">元素的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问查询结果的枚举器。</summary>
      <returns>一个循环访问查询结果的枚举器。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>IListSource.ContainsListCollection 实现。始终返回 false。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#GetList">
      <summary>以数据绑定所用的格式返回结果。</summary>
      <returns>实体对象的 <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>返回一个循环访问查询结果的异步枚举器。</summary>
      <returns>一个循环访问查询结果的异步枚举器。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectResult`1">
      <summary>此类表示 <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)" /> 方法的结果。</summary>
      <typeparam name="T">结果的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.#ctor">
      <summary>仅当创建将重写具有模拟或伪造行为的成员的测试替身时，才使用此构造函数。将此构造函数用于其他目的可能导致意外的行为，包括但不限于引发 <see cref="T:System.NullReferenceException" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 占用的非托管资源，还可以释放托管资源。</summary>
      <param name="disposing">如果为 true，则释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult`1.ElementType">
      <summary>获取 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，它是 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.GetEnumerator">
      <summary>返回一个循环访问查询结果的枚举器。</summary>
      <returns>一个循环访问查询结果的枚举器。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>异步获取循环访问 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的枚举器。</summary>
      <returns>循环访问 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> 的枚举器。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectSet`1">
      <summary>表示用于执行创建、读取、更新和删除操作的类型化实体集。</summary>
      <typeparam name="TEntity">实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.AddObject(`0)">
      <summary>将对象添加到当前实体集中的对象上下文。</summary>
      <param name="entity">要添加的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyCurrentValues(`0)">
      <summary>将标量值从提供的对象复制到 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中具有相同键的对象中。</summary>
      <returns>已更新的对象。</returns>
      <param name="currentEntity">其属性更新将应用于原始对象的已分离对象。currentEntity 的实体键必须与 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中某个项的 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> 属性相匹配。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyOriginalValues(`0)">
      <summary>将 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 的 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues" /> 属性设置为与所提供对象的属性值相匹配。</summary>
      <returns>已更新的对象。</returns>
      <param name="originalEntity">其属性更新将应用于原始对象的已分离对象。originalEntity 的实体键必须与 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中某个项的 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> 属性相匹配。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Attach(`0)">
      <summary>将对象或对象图附加到当前实体集中的对象上下文。</summary>
      <param name="entity">要附加的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject``1">
      <summary>创建指定类型的实例。</summary>
      <returns>所请求类型 T 的实例，或与类型 T 对应的代理类型的实例。</returns>
      <typeparam name="T">要返回的对象的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject">
      <summary>创建一个新的实体类型对象。</summary>
      <returns>新的实体类型对象，或与实体类型对应的代理类型的实例。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.DeleteObject(`0)">
      <summary>标记对象以备删除。</summary>
      <param name="entity">表示要删除的实体的对象。该对象可以为任何状态（<see cref="F:System.Data.Entity.EntityState.Detached" /> 除外）。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Detach(`0)">
      <summary>从对象上下文移除对象。</summary>
      <param name="entity">要分离的对象。仅移除实体；如果存在任何由相同 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 跟踪的相关对象，则不会自动分离这些对象。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectSet`1.EntitySet">
      <summary>获取用此 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 实例表示的实体集的元数据。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 对象。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectStateEntry">
      <summary>表示实体、实体存根或关系</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.AcceptChanges">
      <summary>接受当前值作为原始值。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)">
      <summary>设置项的当前值，使其与所提供对象的属性值相匹配。</summary>
      <param name="currentEntity">具有要应用于对象的更新值的已分离对象。currentEntity 还可以是对象的实体键。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)">
      <summary>设置项的原始值，使其与所提供对象的属性值相匹配。</summary>
      <param name="originalEntity">具有要应用于对象的原始值的已分离对象。originalEntity 还可以是对象的实体键。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ChangeState(System.Data.Entity.EntityState)">
      <summary>将该项的状态更改为指定的 <see cref="T:System.Data.Entity.EntityState" /> 值。</summary>
      <param name="state">要为该项的 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State" /> 属性设置的 <see cref="T:System.Data.Entity.EntityState" /> 值。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.CurrentValues">
      <summary>获取与此 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 关联的对象或关系的当前属性值。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Objects.CurrentValueRecord" />，它包含与此 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 关联的对象或关系的当前值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.Delete">
      <summary>将实体标记为已删除。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.Entity">
      <summary>获取实体对象。</summary>
      <returns>实体对象。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey">
      <summary>获取实体键。</summary>
      <returns>实体键。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntitySet">
      <summary>获取该对象或关系的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />。</summary>
      <returns>用于对象或关系的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetModifiedProperties">
      <summary>返回自上次调用 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> 以来已更改的对象属性的名称。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合，包含字符串形式的名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetUpdatableOriginalValues">
      <summary>获取与此 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 关联的对象的原始值的可更新版本。</summary>
      <returns>对象数据的可更新原始值。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.IsPropertyChanged(System.String)">
      <summary>使用 DetectChanges 确定具有给定名称的属性的当前值与原始值是否不同。请注意这可能不同于正在标记为“已修改”的属性，因为尚未更改的属性仍可能标记为“已修改”。</summary>
      <returns>如果属性已更改，则为 true；否则为 false。</returns>
      <param name="propertyName">属性的名称。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.IsRelationship">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 是否表示一个关系。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 表示一个关系，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.ObjectStateManager">
      <summary>获取 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues">
      <summary>获取与此的对象或关系关联的原始值的只读版本。</summary>
      <returns>关系集项或实体的原始值的只读版本。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.RejectPropertyChanges(System.String)">
      <summary>拒绝自上次加载、附加或保存属性以来对具有给定名称的属性所做的任何更改，或接受更改。存储属性的原始值，且属性将不再标记为“已修改”。</summary>
      <param name="propertyName">要更改的属性的名称。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.RelationshipManager">
      <summary>获取项所表示的对象的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 实例。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModified">
      <summary>将对象或关系的状态设置为 modify。</summary>
      <exception cref="T:System.InvalidOperationException">如果状态不为“已修改”或“未更改”</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModifiedProperty(System.String)">
      <summary>将指定属性标记为已修改。</summary>
      <param name="propertyName">属性的名称。</param>
      <exception cref="T:System.InvalidOperationException">如果状态不为“已修改”或“未更改”</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State">
      <summary>获取 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 的状态。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 的状态。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>用于报告复杂属性已更改。现在将在 EntityMemberChanging 期间缓存的属性值添加到 OriginalValues</summary>
      <param name="entityMemberName">已更改的顶级实体属性的名称</param>
      <param name="complexObject">包含已更改属性的复杂对象</param>
      <param name="complexObjectMemberName">complexObject 上更改的属性的名称</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>用于报告将要更改复杂属性。在调用此方法时，缓存指定属性的当前值。</summary>
      <param name="entityMemberName">要更改的顶级实体属性的名称</param>
      <param name="complexObject">包含要更改的属性的复杂对象</param>
      <param name="complexObjectMemberName">complexObject 上要更改的属性的名称</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanged(System.String)">
      <summary>用于报告标量实体属性已更改。现在将在 EntityMemberChanging 期间缓存的属性值添加到 OriginalValues</summary>
      <param name="entityMemberName">要更改的实体属性的名称</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanging(System.String)">
      <summary>用于报告将要更改标量实体属性。在调用此方法时，缓存指定属性的当前值。</summary>
      <param name="entityMemberName">要更改的实体属性的名称</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityState">
      <summary>从 ObjectStateEntry 返回 EntityState</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectStateManager">
      <summary>维护实体类型实例和关系实例的对象状态和标识管理。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 类的新实例。</summary>
      <param name="metadataWorkspace">提供映射和元数据信息的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.Entity.EntityState)">
      <summary>将特定对象的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 状态更改为指定的 entityState。</summary>
      <returns>所提供实体的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="entity">必须更改状态的对象。</param>
      <param name="entityState">对象的新状态。</param>
      <exception cref="T:System.ArgumentNullException">当 entity 为 null 时。</exception>
      <exception cref="T:System.InvalidOperationException">当对象未分离且在状态管理器没有任何项时，或当您尝试将状态从任何其他 <see cref="T:System.Data.Entity.EntityState." /> 更改为 <see cref="F:System.Data.Entity.EntityState.Detached" /> 时，或状态为无效的 <see cref="T:System.Data.Entity.EntityState" /> 值时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.Entity.EntityState)">
      <summary>更改两个实体对象之间的指定关系的状态，其中的关系状态根据两个相关对象和导航属性的名称来指定。</summary>
      <returns>已更改的关系的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="sourceEntity">位于关系一端的对象实例或源实体的 <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="targetEntity">位于关系另一端的对象实例或目标实体的 <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="navigationProperty">源上可返回指定目标的导航属性的名称。</param>
      <param name="relationshipState">请求的所指定关系的 <see cref="T:System.Data.Entity.EntityState" />。</param>
      <exception cref="T:System.ArgumentNullException">当 source 或 target 为 null 时。</exception>
      <exception cref="T:System.InvalidOperationException">当您尝试在 source 或 target 处于 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态时将关系的状态更改为 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 或 <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外的状态时，或当您尝试在 source 或 target 处于 <see cref="F:System.Data.Entity.EntityState.Added" /> 状态时将关系的状态更改为 <see cref="F:System.Data.Entity.EntityState.Added" /> 或 <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外的状态时，或当状态为无效的 <see cref="T:System.Data.Entity.EntityState" /> 值时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.Entity.EntityState)">
      <summary>更改两个实体对象之间的指定关系的状态，其中的关系状态根据两个相关对象和关系属性来指定。</summary>
      <returns>已更改的关系的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="sourceEntity">位于关系一端的对象实例或源实体的 <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="targetEntity">位于关系另一端的对象实例或目标实体的 <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="relationshipName">关系的名称。</param>
      <param name="targetRoleName">关系的目标端的角色名称。</param>
      <param name="relationshipState">请求的所指定关系的 <see cref="T:System.Data.Entity.EntityState" />。</param>
      <exception cref="T:System.ArgumentNullException">当 source 或 target 为 null 时。</exception>
      <exception cref="T:System.InvalidOperationException">当您尝试在 source 或 target 处于 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态时将关系的状态更改为 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 或 <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外的状态时，或当您尝试在 source 或 target 处于 <see cref="F:System.Data.Entity.EntityState.Added" /> 状态时将关系的状态更改为 <see cref="F:System.Data.Entity.EntityState.Added" /> 或 <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外的状态时，或当状态为无效的 <see cref="T:System.Data.Entity.EntityState" /> 值时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.EntityState)">
      <summary>更改两个实体对象之间的指定关系的状态，根据两个相关对象和用于定义导航属性的 LINQ 表达式来指定关系。</summary>
      <returns>已更改的关系的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="sourceEntity">位于关系一端的对象实例或源实体的 <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="targetEntity">位于关系另一端的对象实例或目标实体的 <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="navigationPropertySelector">一个 LINQ 表示式，用于选择返回指定 target 的 source 的导航属性。</param>
      <param name="relationshipState">请求的所指定关系的 <see cref="T:System.Data.Entity.EntityState" />。</param>
      <typeparam name="TEntity">源对象的实体类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">当 source、target 或 selector 为 null 时。</exception>
      <exception cref="T:System.ArgumentException">selector 格式不正确或无法返回导航属性。</exception>
      <exception cref="T:System.InvalidOperationException">当您尝试在 source 或 target 处于 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态时将关系的状态更改为 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 或 <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外的状态时，或当您尝试在 source 或 target 处于 <see cref="F:System.Data.Entity.EntityState.Added" /> 状态时将关系的状态更改为 <see cref="F:System.Data.Entity.EntityState.Added" /> 或 <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外的状态时，或当状态为无效的 <see cref="T:System.Data.Entity.EntityState" /> 值时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.Entity.EntityState)">
      <summary>返回具有给定状态的对象或关系的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 对象的集合。</summary>
      <returns>具有给定 <see cref="T:System.Data.Entity.EntityState" /> 的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 对象的集合。</returns>
      <param name="state">用于筛选返回的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 对象的 <see cref="T:System.Data.Entity.EntityState" />。</param>
      <exception cref="T:System.ArgumentException">当状态为 <see cref="F:System.Data.Entity.EntityState.Detached" /> 时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.Entity.Core.EntityKey)">
      <summary>返回具有指定键的对象或关系项的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的对应 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="key">
        <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <exception cref="T:System.ArgumentNullException">当 key 为 null 时。</exception>
      <exception cref="T:System.ArgumentException">在状态管理器中找不到指定的 key 时。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 中不存在具有指定 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的实体。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)">
      <summary>返回指定对象的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</summary>
      <returns>给定 <see cref="T:System.Object" /> 的对应 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="entity">检索到的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 所属的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 中不存在具有指定 <see cref="T:System.Object" /> 的实体。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetRelationshipManager(System.Object)">
      <summary>返回指定对象所使用的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />。</summary>
      <returns>所指定对象的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />。</returns>
      <param name="entity">要为其返回 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 的对象。</param>
      <exception cref="T:System.InvalidOperationException">实体不实现 IEntityWithRelationships 且不由此 ObjectStateManager 跟踪</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateManager.MetadataWorkspace">
      <summary>获取与此状态管理器关联的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。</summary>
      <returns>与此 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 关联的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。</returns>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectStateManager.ObjectStateManagerChanged">
      <summary>在从状态管理器中添加或移除实体时发生。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
      <summary>尝试检索具有指定 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的对象或关系的对应 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</summary>
      <returns>一个布尔值，如果给定的 <see cref="T:System.Data.Entity.Core.EntityKey" /> 有对应的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />，则为 true；否则为 false。</returns>
      <param name="key">给定的 <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="entry">此方法返回时，包含给定 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。此参数传递时未经初始化。</param>
      <exception cref="T:System.ArgumentNullException">为 key 提供了一个 null（在 Visual Basic 中为 Nothing）值。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
      <summary>尝试检索指定的 <see cref="T:System.Object" /> 的对应 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</summary>
      <returns>一个布尔值，如果给定的对象有对应的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />，则为 true；否则为 false。</returns>
      <param name="entity">检索到的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 所属的 <see cref="T:System.Object" />。</param>
      <param name="entry">此方法返回时，包含给定 <see cref="T:System.Data.Entity.Core.EntityKey" /> 的 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。此参数传递时未经初始化。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Entity.Core.Objects.DataClasses.RelationshipManager@)">
      <summary>返回指定对象所使用的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />。</summary>
      <returns>如果为提供的实体返回了 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 实例，则为 true；否则为 false。</returns>
      <param name="entity">要为其返回 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 的对象。</param>
      <param name="relationshipManager">此方法返回时将包含实体的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.OriginalValueRecord">
      <summary>从数据库检索实体时，实体各属性的原始值。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver">
      <summary>一个 DataContractResolver，它知道如何将为持久未知的类创建的代理类型解析为基类型。它与 DataContractSerializer 一起使用。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary>在反序列化过程中，将任何 xsi:type 信息映射到持久性未知对象的实际类型。</summary>
      <returns>返回 xsi:type 映射到的类型。如果找不到与 xsi:type 匹配的已知类型，则返回 null。</returns>
      <param name="typeName">要映射的 xsi:type 信息。</param>
      <param name="typeNamespace">xsi:type 的命名空间。</param>
      <param name="declaredType">已声明的类型。</param>
      <param name="knownTypeResolver">
        <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" /> 的一个实例。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary>在序列化过程中，将实际类型映射到 xsi:type 信息。</summary>
      <returns>如果类型已解析，则为 true；否则为 false。</returns>
      <param name="type">持久性未知对象的实际类型。</param>
      <param name="declaredType">已声明的类型。</param>
      <param name="knownTypeResolver">
        <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" /> 的一个实例。</param>
      <param name="typeName">此方法返回时，包含 xsi:type 声明的列表。</param>
      <param name="typeNamespace">此方法返回时，包含使用的命名空间的列表。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.RefreshMode">
      <summary>定义在从数据库刷新内存中数据时处理已修改属性的不同方法。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.RefreshMode.ClientWins">
      <summary>对于未修改的客户端对象，行为与 StoreWins 相同。对于已修改的客户端对象，使用存储值刷新原始值，保留客户端对象上的所有值。下次更新时，所有客户端更改单元将被视为“已修改”，需要更新。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.RefreshMode.StoreWins">
      <summary>丢弃客户端上的所有更改并使用存储值刷新值。更新客户端原始值以匹配存储值。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.SaveOptions">
      <summary>用于修改 ObjectContext.SaveChanges() 行为的标志</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.AcceptAllChangesAfterSave">
      <summary>在保存更改后，调用 AcceptAllChangesAfterSave 方法，该方法会在 ObjectStateManager 中重置更改跟踪。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.DetectChangesBeforeSave">
      <summary>在保存更改之前，调用 DetectChanges 方法，使用 ObjectStateManager 中的数据同步附加到对象上下文的对象的属性值。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.None">
      <summary>保存更改，不调用 DetectChanges 或 AcceptAllChangesAfterSave 方法。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.ComplexObject">
      <summary>这是表示在 ADO.NET 中成为某一实体所需的最小接口的接口。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.ComplexObject" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)">
      <summary>通知更改跟踪器，某个复杂对象的属性已更改。</summary>
      <param name="property">已更改的属性的名称。</param>
      <exception cref="T:System.ArgumentNullException">property 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)">
      <summary>通知更改跟踪器，对复杂对象的属性更改挂起。</summary>
      <param name="property">更改的属性的名称。</param>
      <exception cref="T:System.ArgumentNullException">property 为 null。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute">
      <summary>针对复杂属性的特性。隐含的默认 AttributeUsage 属性 Inherited=True、AllowMultiple=False。元数据系统要求此行为，并且将仅查看其中每个特性的第一个，即使存在多个。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute">
      <summary>复杂类型的特性</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute">
      <summary>标识 Edm 基类的特性</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute">
      <summary>指示枚举类型的特性。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute">
      <summary>指示给定的方法是 EDM 函数的代理。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute.#ctor(System.String,System.String)">
      <summary>创建新的 DbFunctionAttribute 实例。</summary>
      <param name="namespaceName">特性化方法所表示的 EDM 函数的命名空间名称。</param>
      <param name="functionName">特性化方法所表示的 EDM 函数的函数名称。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmPropertyAttribute">
      <summary>映射到存储元素的属性的基特性。隐含的默认 AttributeUsage 属性 Inherited=True、AllowMultiple=False。元数据系统要求此行为，并且将仅查看其中每个特性的第一个，即使存在多个。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute">
      <summary>定义两个实体类型之间的基于概念性模型中关联的关系。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type)">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" /> 类的实例。</summary>
      <param name="relationshipNamespaceName">此实体所参与的关联的命名空间名称。</param>
      <param name="relationshipName">此实体所参与的关系的名称。</param>
      <param name="role1Name">关联一端的类型的角色名称。</param>
      <param name="role1Multiplicity">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 的值，指示在关联一端的重数，例如一重或多重。</param>
      <param name="role1Type">关联一端的实体类型。</param>
      <param name="role2Name">关联另一端的类型的角色名称。</param>
      <param name="role2Multiplicity">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 的值，指示在关联另一端的重数，例如一重或多重。</param>
      <param name="role2Type">关联另一端的实体类型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" /> 类的新实例。</summary>
      <param name="relationshipNamespaceName">此实体所参与的关联的命名空间名称。</param>
      <param name="relationshipName">此实体所参与的关系的名称。</param>
      <param name="role1Name">关联一端的类型的角色名称。</param>
      <param name="role1Multiplicity">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 的值，指示在关联一端的重数，例如一重或多重。</param>
      <param name="role1Type">关联一端的实体类型。</param>
      <param name="role2Name">关联另一端的类型的角色名称。</param>
      <param name="role2Multiplicity">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 的值，指示在关联另一端的重数，例如一重或多重。</param>
      <param name="role2Type">关联另一端的实体类型。</param>
      <param name="isForeignKey">一个指示关系是否基于外键值的值。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.IsForeignKey">
      <summary>获取一个布尔值，该值指示关系是否基于外键值。</summary>
      <returns>如果关系基于外键值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipName">
      <summary>关系的名称。</summary>
      <returns>一个 <see cref="T:System.String" />，表示此 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" /> 定义的关系的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipNamespaceName">
      <summary>关系的命名空间。</summary>
      <returns>表示关系命名空间的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Multiplicity">
      <summary>关系一端的重数。</summary>
      <returns>指示重数的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Name">
      <summary>关系一端的角色名称。</summary>
      <returns>表示角色名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Type">
      <summary>关系一端的实体类型。</summary>
      <returns>表示关联此端对象类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Multiplicity">
      <summary>关系另一端的重数。</summary>
      <returns>指示重数的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Name">
      <summary>关系另一端的角色名称。</summary>
      <returns>表示角色名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Type">
      <summary>关系另一端的实体类型。</summary>
      <returns>表示关联另一端对象类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute">
      <summary>标识为 RelationshipSet 定义的端的特性。隐含的默认 AttributeUsage 属性 Inherited=True、AllowMultiple=False。元数据系统要求此行为，并且将仅查看其中每个特性的第一个，即使存在多个。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.#ctor(System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute" /> 类的新实例。</summary>
      <param name="relationshipNamespaceName">关系属性的命名空间名称。</param>
      <param name="relationshipName">关系的名称。关系名称不由命名空间限定。</param>
      <param name="targetRoleName">关系另一端的角色名称。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipName">
      <summary>获取非限定的关系名称。</summary>
      <returns>关系名。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipNamespaceName">
      <summary>导航属性的命名空间名称。</summary>
      <returns>表示命名空间名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.TargetRoleName">
      <summary>获取关系另一端的角色名称。</summary>
      <returns>目标角色名称由在概念性模型中定义此关系的关联中的另一个 End 元素的 Role 属性指定。有关更多信息，请参见“关联 (EDM)”。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute">
      <summary>IEntity 中标量属性的特性。隐含的默认 AttributeUsage 属性 Inherited=True、AllowMultiple=False。元数据系统要求此行为，并且将仅查看其中每个特性的第一个，即使存在多个。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.EntityKeyProperty">
      <summary>获取或设置一个值，该值指示属性是否为实体键的一部分。</summary>
      <returns>一个指示属性是否为实体键的一部分的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.IsNullable">
      <summary>获取或设置一个值，该值指示属性是否可以具有 null 值。</summary>
      <returns>一个值，该值指示属性是否可以具有 null 值。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute">
      <summary>静态类型的特性</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor(System.String)">
      <summary>使用对程序集引用的每个模型都唯一的值初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" /> 类的新实例。</summary>
      <param name="assemblyGuid">一个字符串，表示程序集中模型的唯一 GUID 值。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute">
      <summary>程式化类型的基特性</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.Name">
      <summary>概念性架构中类型的名称，该类型映射到此属性所应用于的类。</summary>
      <returns>表示名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.NamespaceName">
      <summary>概念性架构中映射到此类型的实体对象类型或复杂类型的命名空间名称。</summary>
      <returns>表示命名空间名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1">
      <summary>对某一特定 EDM 构造进行建模的实体（可以是某一特定类型的所有实体或者是参与某一特定关系的实体）的集合。</summary>
      <typeparam name="TEntity">此集合中实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Add(`0)">
      <summary>将对象添加到集合。</summary>
      <param name="item">添加到集合的对象。entity 必须实现 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />。</param>
      <exception cref="T:System.ArgumentNullException">entity 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})">
      <summary>定义对象上下文中对象和相关对象集合之间的关系。</summary>
      <param name="entities">对象上下文中与源对象相关的对象集合。</param>
      <exception cref="T:System.ArgumentNullException">entities 集合为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源对象或 entities 集合中的对象为 null 或者不处于 <see cref="F:System.Data.Entity.EntityState.Unchanged" /> 或 <see cref="F:System.Data.Entity.EntityState.Modified" /> 状态。-或-关系不能基于 EDM 元数据定义。这会在概念性架构中的关联不支持两种类型间的关系时发生。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(`0)">
      <summary>定义对象上下文中两个附加对象之间的关系。</summary>
      <param name="entity">附加的对象。</param>
      <exception cref="T:System.ArgumentNullException">当 entity 为 null 时。</exception>
      <exception cref="T:System.InvalidOperationException">当 entity 无法与源对象关联时。这会在概念性架构中的关联不支持两种类型间的关系时发生。-或-当对象为 null 或不处于 <see cref="F:System.Data.Entity.EntityState.Unchanged" /> 或 <see cref="F:System.Data.Entity.EntityState.Modified" /> 状态时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Clear">
      <summary>从集合中移除所有实体。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Contains(`0)">
      <summary>确定特定对象是否存在于集合中。</summary>
      <returns>如果在 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />  中找到该对象，则为 true；否则为 false。</returns>
      <param name="item">要在 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 中定位的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)">
      <summary>将集合中的所有内容复制到数组，从目标数组的指定索引处开始。</summary>
      <param name="array">要复制到的数组。</param>
      <param name="arrayIndex">数组中从零开始的索引，在此处开始复制。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Count">
      <summary>获取集合中包含的对象数。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 中包含的元素数。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CreateSourceQuery">
      <summary>返回一个对象查询，执行该查询时返回的对象集合与当前集合包含的对象相同。</summary>
      <returns>表示实体集合的 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />。</returns>
      <exception cref="T:System.InvalidOperationException">当对象处于 <see cref="F:System.Data.Entity.EntityState.Added" /> 状态时，或当对象处于 <see cref="F:System.Data.Entity.EntityState.Detached" /> 状态且 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 不为 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.GetEnumerator">
      <summary>返回一个枚举器，用于循环访问集合中的对象。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，循环访问 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 缓存的值集。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.IsReadOnly">
      <summary>获取一个值，指示 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 是否是只读的。</summary>
      <returns>始终返回 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>使用指定的合并选项将相关对象加载到集合中。</summary>
      <param name="mergeOption">指定此集合中的对象应如何与从以前针对相同 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 的查询中返回的对象合并。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>使用默认合并选项异步将一个或多个相关实体加载到相关端中。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="mergeOption">合并选项。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 CancellationToken。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>在内部使用，用于反序列化实体对象。</summary>
      <param name="context">流上下文。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>在内部使用，用于序列化实体对象。</summary>
      <param name="context">流上下文。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Remove(`0)">
      <summary>从集合移除对象，并标记要删除的关系。</summary>
      <returns>如果成功移除该项，则为 true；否则为 false。</returns>
      <param name="item">要从集合中移除的对象。</param>
      <exception cref="T:System.ArgumentNullException">实体对象为 null。</exception>
      <exception cref="T:System.InvalidOperationException">实体对象未附加到相同的对象上下文，或者，实体对象没有有效的关系管理器。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个枚举器，用于循环访问 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 缓存的值集。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，循环访问 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 缓存的值集。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>IListSource.ContainsListCollection 实现。始终返回 false。这意味着我们返回的 IList 是包含我们的实际数据的 IList，而不是集合的列表。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList">
      <summary>返回 <see cref="T:System.Collections.IList" /> 形式的集合用于数据绑定。</summary>
      <returns>实体对象的 <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject">
      <summary>这是所有描述的 EntityObject 类的基类。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityKey">
      <summary>获取或设置此对象的键。</summary>
      <returns>此对象的 <see cref="T:System.Data.Entity.Core.EntityKey" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityState">
      <summary>获取对象的实体状态。</summary>
      <returns>此对象的 <see cref="T:System.Data.Entity.EntityState" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanged(System.String)">
      <summary>通知更改跟踪器，属性已更改。</summary>
      <param name="property">已更改的属性的名称。</param>
      <exception cref="T:System.ArgumentNullException">property 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanging(System.String)">
      <summary>通知更改跟踪器，属性更改挂起。</summary>
      <param name="property">更改的属性的名称。</param>
      <exception cref="T:System.ArgumentNullException">property 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithChangeTracker#SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
      <summary>由 ObjectStateManager 用来将此 EntityObject 附加到缓存或者分离这两者。</summary>
      <param name="changeTracker">对包含此实体的 ObjectStateEntry 的引用</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithRelationships#RelationshipManager">
      <summary>返回惰式创建的关系导航属性对象、集合和 ref 的容器。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference">
      <summary>对多重性为 1 的关系端进行建模。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference.EntityKey">
      <summary>返回相关对象的键。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.EntityKey" />，表示相关对象的键。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1">
      <summary>对多重性为 1 的关系端进行建模。</summary>
      <typeparam name="TEntity">要引用的实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.#ctor">
      <summary>创建 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Attach(`0)">
      <summary>在对象上下文中创建两个对象之间的多对一或一对一关系。</summary>
      <param name="entity">附加的对象。</param>
      <exception cref="T:System.ArgumentNullException">当 entity 为 null 时。</exception>
      <exception cref="T:System.InvalidOperationException">当 entity 无法与当前相关端关联时。这会在概念性架构中的关联不支持两种类型间的关系时发生。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.CreateSourceQuery">
      <summary>创建一个返回相关对象的等效对象查询。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />，其返回相关对象。</returns>
      <exception cref="T:System.InvalidOperationException">当对象处于 <see cref="F:System.Data.Entity.EntityState.Added" /> 状态时，或当对象处于 <see cref="F:System.Data.Entity.EntityState.Detached" /> 状态且 <see cref="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption" /> 不为 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>使用指定的合并选项为此 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 加载相关对象。</summary>
      <param name="mergeOption">指定当 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 中已存在该对象时，应如何返回它。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 的源为 null；或一个查询返回多个相关端；或一个查询返回零个相关端，但应返回一个相关端。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>使用默认合并选项异步将一个或多个相关实体加载到相关端中。</summary>
      <returns>已加载到相关端的相关实体。</returns>
      <param name="mergeOption">合并选项。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 CancellationToken。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>此方法在内部使用，用于序列化相关实体对象。</summary>
      <param name="context">序列化的流。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>此方法在内部使用，用于序列化相关实体对象。</summary>
      <param name="context">序列化的流。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Value">
      <summary>获取或设置此 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 返回的相关对象。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 返回的对象。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker">
      <summary>此接口由更改跟踪器实现并且由数据类用来报告更改</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>通知更改跟踪器，某个复杂类型的属性已更改。</summary>
      <param name="entityMemberName">已更改的实体类型的复杂属性的名称。</param>
      <param name="complexObject">包含已更改属性的复杂类型。</param>
      <param name="complexObjectMemberName">复杂类型上更改的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>通知更改跟踪器，复杂属性更改挂起。</summary>
      <param name="entityMemberName">要更改的顶级实体属性的名称。</param>
      <param name="complexObject">包含要更改的属性的复杂类型。</param>
      <param name="complexObjectMemberName">复杂类型上要更改的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(System.String)">
      <summary>通知更改跟踪器，某个实体类型的属性已更改。</summary>
      <param name="entityMemberName">已更改的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(System.String)">
      <summary>通知更改跟踪器即将更改某个实体类型的属性。</summary>
      <param name="entityMemberName">要更改的属性的名称。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityState">
      <summary>获取所跟踪对象的当前状态。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.EntityState" />，它是所跟踪对象的状态。有关更多信息，请参见“标识解析、状态管理和更改跟踪”和“在 POCO 实体中跟踪更改”。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker">
      <summary>数据类必须实现以便由更改跟踪器进行管理的最小接口。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
      <summary>获取或设置用于报告更改的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" />。</summary>
      <param name="changeTracker">用于报告更改的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" />。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey">
      <summary>定义包含键的实体的接口。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey.EntityKey">
      <summary>为实现此接口的实体类型的实例获取或设置 <see cref="T:System.Data.Entity.Core.EntityKey" />。</summary>
      <returns>实现此接口的实体类型实例的 <see cref="T:System.Data.Entity.Core.EntityKey" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships">
      <summary>在公开关系时数据类必须实现的接口</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships.RelationshipManager">
      <summary>返回关系管理器，该管理器管理实体类型的实例的关系。</summary>
      <returns>此实体的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd">
      <summary>表示关系的一端。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>将对象添加到相关端。</summary>
      <param name="entity">添加到集合的对象。entity 必须实现 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Object)">
      <summary>将对象添加到相关端。</summary>
      <param name="entity">添加到集合的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>定义两个附加对象之间的关系。</summary>
      <param name="entity">附加的对象。entity 必须实现 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Object)">
      <summary>定义两个附加对象之间的关系。</summary>
      <param name="entity">附加的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.CreateSourceQuery">
      <summary>返回一个 <see cref="T:System.Collections.IEnumerable" />，它表示属于相关端的对象。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerable" />，它表示属于相关端的对象。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.GetEnumerator">
      <summary>返回一个 <see cref="T:System.Collections.IEnumerator" />，它循环访问相关对象的集合。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，它循环访问相关对象的集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.IsLoaded">
      <summary>获取或设置一个值，该值指示是否已从数据库加载实体（对于 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference" />）或集合中的所有实体（对于 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />）。</summary>
      <returns>如果加载所有相关实体或 IsLoaded 已显式设置为 true，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load">
      <summary>使用默认合并选项将一个或多个相关对象加载到此相关端中。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>使用指定合并选项将一个或多个相关对象加载到相关端中。</summary>
      <param name="mergeOption">将对象合并到现有 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 时使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>使用指定合并选项将一个或多个相关对象异步加载到相关端中。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="mergeOption">将对象合并到现有 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 时使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.LoadAsync(System.Threading.CancellationToken)">
      <summary>使用默认合并选项将一个或多个相关对象异步加载到此相关端中。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipName">
      <summary>获取此相关端所参与的关系的名称。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> 所参与的关系的名称。关系名称不由命名空间限定。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipSet">
      <summary>返回对相关端的元数据的引用。</summary>
      <returns>包含关系一端的元数据的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>从相关端的对象的集合中移除一个对象。</summary>
      <returns>如果 entity 已成功删除，则为 true；如果 entity 不是 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> 的一部分，则为 false。</returns>
      <param name="entity">要从集合中移除的对象。entity 必须实现 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Object)">
      <summary>从相关端的对象的集合中移除一个对象。</summary>
      <returns>如果 entity 已成功删除，则为 true；如果 entity 不是 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> 的一部分，则为 false。</returns>
      <param name="entity">要从集合中移除的对象。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.SourceRoleName">
      <summary>获取关系的源端的角色名称。</summary>
      <returns>关系的源端的角色名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.TargetRoleName">
      <summary>获取关系的目标端的角色名称。</summary>
      <returns>关系的目标端的角色名称。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd">
      <summary>EntityCollection 和 EntityReference 的基类</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.AssociationChanged">
      <summary>对相关端进行更改时发生。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.GetEnumerator">
      <summary>返回一个 <see cref="T:System.Collections.IEnumerator" />，它循环访问相关对象的集合。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，它循环访问相关对象的集合。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.IsLoaded">
      <summary>获取一个值，该值指示是否已加载所有相关对象。</summary>
      <returns>如果相关端包含数据库中的所有相关对象，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load">
      <summary>使用默认合并选项将一个或多个相关对象加载到相关端中。</summary>
      <exception cref="T:System.InvalidOperationException">当源对象是使用 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 查询检索的，且 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 不是 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 或相关对象已加载时；或当源对象未附加到 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 时；或当正在跟踪源对象，但是它处于 <see cref="F:System.Data.Entity.EntityState.Added" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态，或用于 <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> 的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 是 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>使用指定合并选项从相关端加载一个或多个对象。</summary>
      <param name="mergeOption">将对象合并到现有 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 时使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</param>
      <exception cref="T:System.InvalidOperationException">当源对象是使用 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 查询检索的，且 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 不是 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 或相关对象已加载时；或当源对象未附加到 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 时；或当正在跟踪源对象，但是它处于 <see cref="F:System.Data.Entity.EntityState.Added" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态，或用于 <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> 的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 是 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>使用指定合并选项从相关端异步加载一个或多个对象。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="mergeOption">将对象合并到现有 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 时使用的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">当源对象是使用 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 查询检索的，且 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 不是 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 或相关对象已加载时；或当源对象未附加到 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 时；或当正在跟踪源对象，但是它处于 <see cref="F:System.Data.Entity.EntityState.Added" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态，或用于 <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> 的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 是 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.LoadAsync(System.Threading.CancellationToken)">
      <summary>使用默认合并选项将一个或多个相关对象异步加载到相关端中。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">当源对象是使用 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 查询检索的，且 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 不是 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 或相关对象已加载时；或当源对象未附加到 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 时；或当正在跟踪源对象，但是它处于 <see cref="F:System.Data.Entity.EntityState.Added" /> 或 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状态，或用于 <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> 的 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 是 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>在内部使用，用于反序列化实体对象及 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 实例。</summary>
      <param name="context">序列化的流。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipName">
      <summary>获取此相关端所参与的关系的名称。</summary>
      <returns>此 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd" /> 所参与的关系的名称。关系名称不由命名空间限定。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipSet">
      <summary>获取对相关端的元数据的引用。</summary>
      <returns>包含关系一端的元数据的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.SourceRoleName">
      <summary>获取关系的源端的角色名称。</summary>
      <returns>表示角色名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>将实体添加到相关端。此方法与 Add(object) 的工作方式完全相同。保留此方法是为了与以前版本的 IRelatedEnd 向后兼容。</summary>
      <param name="entity">要添加到相关端的实体实例</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Object)">
      <summary>将实体添加到相关端。如果所有者附加到某一缓存，则所有连接端都添加到该对象缓存，并且其对应关系也添加到 ObjectStateManager。关系的 RelatedEnd 也是固定的。</summary>
      <param name="entity">要添加到相关端的实体实例</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>将实体附加到相关端。此方法与 Attach(object) 的工作方式完全相同。保留此方法是为了与以前版本的 IRelatedEnd 向后兼容。</summary>
      <param name="entity">要附加到相关端的实体</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="entity" /> 为 null 时引发。</exception>
      <exception cref="T:System.InvalidOperationException">在无法通过当前关系端与实体相关时引发。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Object)">
      <summary>将实体附加到相关端。如果相关端已经填充或部分填充，则此操作将合并现有实体和给定实体。不假定给定实体为相关实体的完整集。所有者和所有传入的实体必须处于 Unchanged 或 Modified 状态。仅当状态管理器已在跟踪关系实例时，才允许已删除的元素。</summary>
      <param name="entity">要附加到相关端的实体</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="entity" /> 为 null 时引发。</exception>
      <exception cref="T:System.InvalidOperationException">在无法通过当前关系端与实体相关时引发。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#CreateSourceQuery">
      <summary>返回一个 <see cref="T:System.Collections.IEnumerable" />，它表示属于相关端的对象。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerable" />，它表示属于相关端的对象。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>从相关端删除实体。此方法与 Remove(object) 的工作方式完全相同。保留此方法是为了与以前版本的 IRelatedEnd 向后兼容。</summary>
      <returns>如果实体已成功删除，则返回 true；如果实体不是 RelatedEnd 的一部分，则返回 false。</returns>
      <param name="entity">要从相关端中删除的实体实例</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Object)">
      <summary>从相关端删除实体。如果所有者附加到缓存，则将关系标记为待删除；如果关系是复合关系，也将实体标记为待删除。</summary>
      <returns>如果实体已成功删除，则返回 true；如果实体不是 RelatedEnd 的一部分，则返回 false。</returns>
      <param name="entity">要从相关端中删除的实体实例</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.TargetRoleName">
      <summary>获取关系的目标端的角色名称。</summary>
      <returns>表示角色名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind">
      <summary>标识关系的种类</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind.Association">
      <summary>该关系为关联</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager">
      <summary>惰式创建的关系导航属性对象（集合和 ref）的容器。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.Create(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 对象。</summary>
      <returns>请求的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />。</returns>
      <param name="owner">对调用此方法的实体的引用。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetAllRelatedEnds">
      <summary>返回关系管理器管理的所有相关端的枚举。</summary>
      <returns>实现 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> 的对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。如果尚未填充关系，则返回空枚举。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedCollection``1(System.String,System.String)">
      <summary>获取具有指定关系名称和目标角色名称的相关对象的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />。</summary>
      <returns>相关对象的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />。</returns>
      <param name="relationshipName">要浏览的关系的名称。关系名称不由命名空间限定。</param>
      <param name="targetRoleName">要浏览的目标角色的名称。指示在关系中浏览的方向。</param>
      <typeparam name="TTargetEntity">返回的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">指定角色返回 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 而不是 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedEnd(System.String,System.String)">
      <summary>为关系中的指定目标角色返回正确类型的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 或 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />。</summary>
      <returns>已检索的表示 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 或 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />。</returns>
      <param name="relationshipName">在其中定义 targetRoleName 的关系的名称。关系名称不由命名空间限定。</param>
      <param name="targetRoleName">用于检索 relationshipName 的另一端的目标角色.</param>
      <exception cref="T:System.ArgumentNullException">relationshipName 或 targetRoleName 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源类型不匹配所有者类型。</exception>
      <exception cref="T:System.ArgumentException">targetRoleName 无效或无法在元数据中找到关系类型。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedReference``1(System.String,System.String)">
      <summary>通过使用关系名称和目标角色名称的指定组合，获取相关对象的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />。</summary>
      <returns>相关对象的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />。</returns>
      <param name="relationshipName">要浏览的关系的名称。关系名称不由命名空间限定。</param>
      <param name="targetRoleName">要浏览的目标角色的名称。指示在关系中浏览的方向。</param>
      <typeparam name="TTargetEntity">返回的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">指定角色返回 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 而不是 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedCollection``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityCollection{``0})">
      <summary>采用通过默认构造函数创建的现有 EntityCollection，并且使用提供的关系和目标角色名称初始化它。此方法设计为仅在反序列化期间使用；如果已初始化提供的 EntityCollection 或者关系管理器已附加到某一 ObjectContext，此方法将引发异常。 </summary>
      <param name="relationshipName">关系名。</param>
      <param name="targetRoleName">目标角色名。</param>
      <param name="entityCollection">现有 EntityCollection。</param>
      <typeparam name="TTargetEntity">targetRoleName 表示的实体的类型</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedReference``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityReference{``0})">
      <summary>采用通过默认构造函数创建的现有 EntityReference，并且使用提供的关系和目标角色名称初始化它。此方法设计为仅在反序列化期间使用；并且在以下情况下此方法将引发异常：已初始化提供的 EntityReference、关系管理器已包含具有此名称和目标角色的关系或者关系管理器已附加到某一 ObjectContext。</summary>
      <param name="relationshipName">关系名。</param>
      <param name="targetRoleName">相关端的角色名称。</param>
      <param name="entityReference">要初始化的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />。</param>
      <typeparam name="TTargetEntity">正在初始化的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">当提供的 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 已初始化时。-或-当关系管理器已附加到某一 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 时，或当关系管理器已包含具有此名称和目标角色的关系时。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>在内部使用，用于反序列化实体对象及 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 实例。</summary>
      <param name="context">序列化的流。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>由对象服务调用，用来准备 <see cref="T:System.Data.Entity.Core.EntityKey" /> 以序列化关系进行二进制序列化。</summary>
      <param name="context">说明给定序列化流的源和目标，并提供另一个调用方定义的上下文。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.StructuralObject">
      <summary>此类包含某一日期对象所需的公共方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.StructuralObject" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.BinaryEquals(System.Byte[],System.Byte[])">
      <summary>确定指定的字节数组是否包含完全相同的值。</summary>
      <returns>如果两个数组具有相同长度且包含相同字节值，或两个数组都为 null，则为 true；否则为 false。</returns>
      <param name="first">要比较的第一个字节数组值。</param>
      <param name="second">要比较的第二个字节数组。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.DefaultDateTimeValue">
      <summary>返回数据源支持的最小日期时间值。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 值，表示数据源支持的最小日期时间值。</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.EntityKeyPropertyName">
      <summary>用于更改跟踪的公共常量名称。通过提供此定义可允许用户使用此常量，而不是对字符串进行硬编码。这有助于确保属性名称正确，并且允许在我们在查找此特定字符串的位置更快地进行比较。用户仍可以直接使用区分大小写的字符串，而不是常量，只是在比较时速度稍慢。在名称周围包括短划线 (-) 字符将确保这将不会与某一真实的数据属性冲突，因为 -EntityKey- 不是有效的标识符名称</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue(System.Byte[])">
      <summary>返回当前字节值的副本。</summary>
      <returns>当前 <see cref="T:System.Byte" /> 值的副本。</returns>
      <param name="currentValue">当前字节数组值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue``1(``0,System.String,System.Boolean,System.Boolean)">
      <summary>返回指定属性的复杂类型。</summary>
      <returns>属性的复杂类型对象。</returns>
      <param name="currentValue">从复杂对象继承的复杂对象。</param>
      <param name="property">复杂属性的名称，该复杂属性为复杂对象。</param>
      <param name="isNullable">指示类型是否允许 Null 值。</param>
      <param name="isInitialized">指示类型是否已初始化。</param>
      <typeparam name="T">正在请求的复杂对象的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanged(System.String)">
      <summary>引发 <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged" /> 事件。</summary>
      <param name="property">已更改的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanging(System.String)">
      <summary>引发 <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging" /> 事件。</summary>
      <param name="property">更改的属性的名称。</param>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged">
      <summary>属性已更改的通知。</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging">
      <summary>属性将要更改的通知。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanged(System.String)">
      <summary>引发用于报告属性已更改的事件。</summary>
      <param name="property">已更改的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanging(System.String)">
      <summary>引发用于报告属性更改挂起的事件。</summary>
      <param name="property">更改的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean)">
      <summary>确保正在为属性设置的 <see cref="T:System.Boolean" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.Boolean" /> 值。</returns>
      <param name="value">布尔值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean,System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Boolean" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.Boolean" /> 值。</returns>
      <param name="value">布尔值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte)">
      <summary>确保正在为属性设置的 <see cref="T:System.Byte" /> 值有效。</summary>
      <returns>设置的 <see cref="T:System.Byte" /> 值。</returns>
      <param name="value">正在验证的值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte,System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Byte" /> 值有效。</summary>
      <returns>一个已设置的 <see cref="T:System.Byte" />。</returns>
      <param name="value">
        <see cref="T:System.Byte" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean)">
      <summary>确保正在为属性设置的 <see cref="T:System.Byte[]" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.Byte" /> 值。</returns>
      <param name="value">正在设置的值。</param>
      <param name="isNullable">指示属性是否可为 null。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean,System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Byte[]" /> 值有效。</summary>
      <returns>正在验证的 <see cref="T:System.Byte" /> 值。</returns>
      <param name="value">传入属性 setter 中的值。</param>
      <param name="isNullable">指示此属性是否允许为 null 的标志。</param>
      <param name="propertyName">要验证的属性的名称。</param>
      <exception cref="T:System.Data.ConstraintException">对于不可为 null 的值如果值为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean)">
      <summary>验证属性是否不为 null，如果为 null 则引发。</summary>
      <returns>正在设置的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</returns>
      <param name="value">要检查的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</param>
      <param name="isNullable">指示此属性是否允许为 null 的标志。</param>
      <exception cref="T:System.Data.ConstraintException">对于不可以为 null 的属性，该值为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean,System.String)">
      <summary>验证属性是否不为 null，如果为 null 则引发。</summary>
      <returns>正在设置的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</returns>
      <param name="value">待检查的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</param>
      <param name="isNullable">指示此属性是否允许为 null 的标志。</param>
      <param name="propertyName">要验证的属性的名称。</param>
      <exception cref="T:System.Data.ConstraintException">对于不可以为 null 的属性，该值为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean)">
      <summary>验证属性是否不为 null，如果为 null 则引发。</summary>
      <returns>正在设置的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</returns>
      <param name="value">待检查的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</param>
      <param name="isNullable">指示此属性是否允许为 null 的标志。</param>
      <exception cref="T:System.Data.ConstraintException">对于不可以为 null 的属性，该值为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean,System.String)">
      <summary>验证属性是否不为 null，如果为 null 则引发。</summary>
      <returns>正在设置的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</returns>
      <param name="value">要检查的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</param>
      <param name="isNullable">指示此属性是否允许为 null 的标志。</param>
      <param name="propertyName">要验证的属性的名称。</param>
      <exception cref="T:System.Data.ConstraintException">对于不可以为 null 的属性，该值为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime)">
      <summary>确保正在为属性设置的 <see cref="T:System.DateTime" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.DateTime" /> 值。</returns>
      <param name="value">
        <see cref="T:System.DateTime" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime,System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.DateTime" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.DateTime" /> 值。</returns>
      <param name="value">
        <see cref="T:System.DateTime" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset)">
      <summary>确保正在为属性设置的 <see cref="T:System.DateTimeOffset" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.DateTimeOffset" /> 值。</returns>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset,System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.DateTimeOffset" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.DateTimeOffset" /> 值。</returns>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal)">
      <summary>确保正在为属性设置的 <see cref="T:System.Decimal" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.Decimal" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal,System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Decimal" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.Decimal" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double)">
      <summary>确保正在为属性设置的 <see cref="T:System.Double" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.Double" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Double" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double,System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Double" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.Double" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Double" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid)">
      <summary>确保正在为属性设置的 <see cref="T:System.Guid" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.Guid" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Guid" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid,System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Guid" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.Guid" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Guid" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16)">
      <summary>确保正在为属性设置的 <see cref="T:System.Int16" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.Int16" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int16" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16,System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Int16" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.Int16" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int16" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32)">
      <summary>确保正在为属性设置的 <see cref="T:System.Int32" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.Int32" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int32" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32,System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Int32" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.Int32" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int32" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64)">
      <summary>确保正在为属性设置的 <see cref="T:System.Int64" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.Int64" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int64" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64,System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Int64" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.Int64" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Int64" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean})">
      <summary>确保正在为属性设置的 <see cref="T:System.Boolean" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Boolean" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Boolean" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean},System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Boolean" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Boolean" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Boolean" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte})">
      <summary>确保正在为属性设置的 <see cref="T:System.Byte" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Byte" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Byte" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte},System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Byte" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Byte" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Byte" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime})">
      <summary>确保正在为属性设置的 <see cref="T:System.DateTime" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.DateTime" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.DateTime" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime},System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.DateTime" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.DateTime" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.DateTime" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset})">
      <summary>确保正在为属性设置的 <see cref="T:System.DateTimeOffset" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.DateTimeOffset" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.DateTimeOffset" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset},System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.DateTimeOffset" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.DateTimeOffset" /> 值。</returns>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal})">
      <summary>确保正在为属性设置的 <see cref="T:System.Decimal" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Decimal" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Decimal" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal},System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Decimal" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Decimal" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Decimal" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double})">
      <summary>确保正在为属性设置的 <see cref="T:System.Double" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Double" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Double" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double},System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Double" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Double" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Double" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid})">
      <summary>确保正在为属性设置的 <see cref="T:System.Guid" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Guid" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Guid" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid},System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Guid" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Guid" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Guid" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16})">
      <summary>确保正在为属性设置的 <see cref="T:System.Int16" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Int16" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Int16" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16},System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Int16" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Int16" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Int16" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32})">
      <summary>确保正在为属性设置的 <see cref="T:System.Int32" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Int32" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Int32" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32},System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Int32" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Int32" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Int32" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64})">
      <summary>确保正在为属性设置的 <see cref="T:System.Int64" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Int64" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Int64" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64},System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Int64" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Int64" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Int64" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte})">
      <summary>确保正在为属性设置的 <see cref="T:System.SByte" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.SByte" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.SByte" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte},System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.SByte" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.SByte" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.SByte" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single})">
      <summary>确保正在为属性设置的 <see cref="T:System.Single" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Single" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Single" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single},System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.Single" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.Single" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.Single" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan})">
      <summary>确保正在为属性设置的 <see cref="T:System.TimeSpan" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.TimeSpan" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.TimeSpan" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan},System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.TimeSpan" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 <see cref="T:System.TimeSpan" /> 值。</returns>
      <param name="value">可以为 null 的 <see cref="T:System.TimeSpan" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16})">
      <summary>确保要为属性设置的 UInt16 值有效。</summary>
      <returns>正在设置的可以为 null 的 UInt16 值。</returns>
      <param name="value">可以为 null 的 UInt16 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16},System.String)">
      <summary>确保要为属性设置的 UInt16 值有效。</summary>
      <returns>正在设置的可以为 null 的 UInt16 值。</returns>
      <param name="value">可以为 null 的 UInt16 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32})">
      <summary>确保要为属性设置的 UInt32 值有效。</summary>
      <returns>正在设置的可以为 null 的 UInt32 值。</returns>
      <param name="value">可以为 null 的 UInt32 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32},System.String)">
      <summary>确保要为属性设置的 UInt32 值有效。</summary>
      <returns>正在设置的可以为 null 的 UInt32 值。</returns>
      <param name="value">可以为 null 的 UInt32 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64})">
      <summary>确保正在为属性设置的 <see cref="T:System.UInt64" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 UInt64 值。</returns>
      <param name="value">可以为 null 的 UInt64 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64},System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.UInt64" /> 值有效。</summary>
      <returns>正在设置的可以为 null 的 UInt64 值。</returns>
      <param name="value">可以为 null 的 UInt64 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte)">
      <summary>确保正在为属性设置的 <see cref="T:System.SByte" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.SByte" /> 值。</returns>
      <param name="value">
        <see cref="T:System.SByte" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte,System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.SByte" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.SByte" /> 值。</returns>
      <param name="value">
        <see cref="T:System.SByte" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single)">
      <summary>确保要为属性设置的单精度值有效。</summary>
      <returns>正在设置的 <see cref="T:System.Single" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Single" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single,System.String)">
      <summary>确保要为属性设置的单精度值有效。</summary>
      <returns>正在设置的 <see cref="T:System.Single" /> 值。</returns>
      <param name="value">
        <see cref="T:System.Single" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean)">
      <summary>验证属性是否不为 null，如果为 null 则引发。</summary>
      <returns>验证的 <see cref="T:System.String" /> 值。</returns>
      <param name="value">待检查的字符串值。</param>
      <param name="isNullable">指示此属性是否允许为 null 的标志。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean,System.String)">
      <summary>验证属性是否不为 null，如果为 null 则引发。</summary>
      <returns>经过验证的属性。</returns>
      <param name="value">待检查的字符串值。</param>
      <param name="isNullable">指示此属性是否允许为 null 的标志。</param>
      <param name="propertyName">要验证的属性的名称。</param>
      <exception cref="T:System.Data.ConstraintException">该字符串值对于不可以为 null 的字符串为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan)">
      <summary>确保正在为属性设置的 <see cref="T:System.TimeSpan" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.TimeSpan" /> 值。</returns>
      <param name="value">
        <see cref="T:System.TimeSpan" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan,System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.TimeSpan" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.TimeSpan" /> 值。</returns>
      <param name="value">
        <see cref="T:System.TimeSpan" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16)">
      <summary>确保正在为属性设置的 <see cref="T:System.UInt16" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.UInt16" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt16" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16,System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.UInt16" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.UInt16" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt16" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32)">
      <summary>确保正在为属性设置的 <see cref="T:System.UInt32" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.UInt32" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt32" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32,System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.UInt32" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.UInt32" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt32" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64)">
      <summary>确保正在为属性设置的 <see cref="T:System.UInt64" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.UInt64" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt64" /> 值。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64,System.String)">
      <summary>确保正在为属性设置的 <see cref="T:System.UInt64" /> 值有效。</summary>
      <returns>正在设置的 <see cref="T:System.UInt64" /> 值。</returns>
      <param name="value">
        <see cref="T:System.UInt64" /> 值。</param>
      <param name="propertyName">要验证的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue``1(``0,``0,System.String)">
      <summary>设置指定属性的复杂对象。</summary>
      <returns>从复杂对象派生的复杂类型。</returns>
      <param name="oldValue">属性的原始复杂对象（如果有）。</param>
      <param name="newValue">正在设置的复杂对象。</param>
      <param name="property">正在设置为复杂对象的复杂属性。</param>
      <typeparam name="T">被替换的对象的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull``1(``0,System.String)">
      <summary>检验复杂对象是否不为 null。</summary>
      <returns>正在验证的复杂对象。</returns>
      <param name="complexObject">正在检验的复杂对象。</param>
      <param name="propertyName">与 complexObject 关联的父对象上的复杂属性。</param>
      <typeparam name="TComplex">正在验证的复杂对象的类型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.CommitFailedException">
      <summary>在提交 <see cref="T:System.Data.Common.DbTransaction" /> 期间出错时引发的异常。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> 的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化数据初始化 <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化对象时所需的数据。</param>
      <param name="context">指定序列化流的源和目标的说明。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String)">
      <summary>使用错误消息初始化 <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> 的新实例。</summary>
      <param name="message">异常消息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String,System.Exception)">
      <summary>使用错误消息和内部异常初始化 <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> 的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.CommitFailureHandler">
      <summary>表示事务处理程序，该程序允许在事务提交期间通过在数据库中存储事务跟踪信息，来从连接故障中正常恢复。需要使用 <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})" /> 注册它。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor">
      <summary>使用默认 <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext" /> 初始化 <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor(System.Func{System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.TransactionContext})">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> 类的新实例。</summary>
      <param name="transactionContextFactory">事务上下文工厂。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>将新事务的跟踪信息存储到同一事务中的数据库。</summary>
      <param name="connection">开始事务的连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BuildDatabaseInitializationScript">
      <summary>生成数据库初始化脚本。</summary>
      <returns>数据库初始化脚本。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistory">
      <summary>删除所有事务历史记录。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistoryAsync">
      <summary>异步删除所有事务历史记录。</summary>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistoryAsync(System.Threading.CancellationToken)">
      <summary>异步删除所有事务历史记录。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消标记。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>如果引发了异常，请检查此事务的数据库，如果找不到，则会再次引发异常。否则将提交标记为成功并为将删除的事务信息进行排队。</summary>
      <param name="transaction">已提交的事务。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Dispose(System.Boolean)">
      <summary>释放此事务对象占用的资源。</summary>
      <param name="disposing">如果为 true，则同时释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>停止跟踪已处理的事务。</summary>
      <param name="transaction">已释放的事务。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>获取与 <paramref name="context" /> 关联的 <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />（如果存在）；否则返回 null。</summary>
      <returns>关联的 <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />。</returns>
      <param name="context">上下文。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.DbContext)">
      <summary>获取与 <paramref name="context" /> 关联的 <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />（如果存在）；否则返回 null。</summary>
      <returns>关联的 <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />。</returns>
      <param name="context">上下文。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>初始化实例的属性。</summary>
      <param name="context">上下文。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)">
      <summary>初始化实例的属性。</summary>
      <param name="context">上下文。</param>
      <param name="connection">连接。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.MarkTransactionForPruning(System.Data.Entity.Infrastructure.TransactionRow)">
      <summary>将指定事务添加到可从数据库中删除的事务列表</summary>
      <param name="transaction">要从数据库中删除的事务。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory">
      <summary>删除标记为删除的事务。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory(System.Boolean,System.Boolean)">
      <summary>如果标记为删除的事务的数目超出 <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" />，则删除这些事务。</summary>
      <param name="force">如果即使其数量未超出 <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" /> 仍然删除所有旧事务，则为 true；否则为 false。</param>
      <param name="useExecutionStrategy">如果使用关联执行来执行操作，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync">
      <summary>异步删除标记为删除的事务。</summary>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
      <summary>如果标记为删除的事务的数目超出 <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" />，则删除这些事务。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="force">如果即使其数量未超出 <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" /> 仍然删除所有旧事务，则为 true；否则为 false。</param>
      <param name="useExecutionStrategy">如果使用关联执行来执行操作，则为 true；否则为 false。</param>
      <param name="cancellationToken">取消标记。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync(System.Threading.CancellationToken)">
      <summary>异步删除标记为删除的事务。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消标记。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit">
      <summary>在清除事务日志之前获取要在上下文中执行的事务数。默认值为 20。</summary>
      <returns>在清除事务日志之前要在上下文中执行的事务数。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>停止跟踪回滚的事务。</summary>
      <param name="transaction">已回滚的事务。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext">
      <summary>获取事务上下文。</summary>
      <returns>事务上下文。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
      <summary>由 <see cref="T:System.Data.Entity.DbContext" /> 的 ChangeTracker 方法返回以提供对与实体的更改跟踪相关的上下文的功能的访问。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
      <summary>检测对 POCO 实体的属性和关系所做的更改。请注意，某些类型的实体（如更改跟踪代理和派生自 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject" /> 的实体）会自动报告更改，并且这些类型的实体通常不需要调用 DetectChanges。另请注意，通常，<see cref="T:System.Data.Entity.DbContext" /> 的许多方法及其相关类会自动调用 DetectChanges，这样一来，便很少需要显式调用此方法。但通常出于性能原因，可能需要使用 <see cref="P:System.Data.Entity.DbContext.Configuration" /> 中的 AutoDetectChangesEnabled 标志来关闭对 DetectChanges 的自动调用。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
      <summary>获取此上下文跟踪的所有实体的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 对象。</summary>
      <returns>项。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
      <summary>获取此上下文跟踪的给定类型的所有实体的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 对象。</summary>
      <returns>项。</returns>
      <typeparam name="TEntity">实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)">
      <summary>指定 <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> 是否与指定的对象相同。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> 与指定的对象相同，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode">
      <summary>获取与 <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> 关联的哈希代码。</summary>
      <returns>与 <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> 关联的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.HasChanges">
      <summary>检查 <see cref="T:System.Data.Entity.DbContext" /> 是否正在跟踪任何新建、已删除或有更改的实体或关系，这些实体或关系将在调用 <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> 时，发送到数据库。</summary>
      <returns>如果基础 <see cref="T:System.Data.Entity.DbContext" /> 有更改，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString">
      <summary>返回 <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> 的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>表示非泛型版本的 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> 类。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
      <summary>返回等效泛型 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> 对象。</summary>
      <returns>等效泛型对象。</returns>
      <typeparam name="TEntity">在其上声明该成员的实体的类型。</typeparam>
      <typeparam name="TElement">集合元素的类型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
      <summary>获取或设置导航属性的当前值。当前值为导航属性引用的实体。</summary>
      <returns>当前值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
      <summary>获取此导航属性所属的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>拥有此导航属性的实体的项。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
      <summary>获取或设置一个值，该值指示是否已从数据库加载此集合的所有实体。</summary>
      <returns>如果已加载所有相关实体或 IsLoaded 已显示设置为 true，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
      <summary>从数据库中加载实体的集合。请注意，不会使用数据库中的值覆盖上下文中已存在的实体。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.LoadAsync">
      <summary>异步从数据库中加载实体的集合。请注意，不会使用数据库中的值覆盖上下文中已存在的实体。</summary>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.LoadAsync(System.Threading.CancellationToken)">
      <summary>异步从数据库中加载实体的集合。请注意，不会使用数据库中的值覆盖上下文中已存在的实体。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
      <summary>获取属性名称。</summary>
      <returns>属性名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
      <summary>返回将用于从数据库加载此集合的查询。可使用 LINQ 修改返回的查询以便在数据库中执行筛选或操作，例如，计算数据库中的集合中的实体数，而不实际加载这些实体。</summary>
      <returns>针对集合的查询。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
      <summary>此类的实例从 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 的 Collection 方法返回，并且允许对实体的集合导航属性执行各种操作（如加载）。</summary>
      <typeparam name="TEntity">此属性所属的实体的类型。</typeparam>
      <typeparam name="TElement">实体集合中的元素的类型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
      <summary>获取或设置导航属性的当前值。当前值为导航属性引用的实体。</summary>
      <returns>当前值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
      <summary>此导航属性所属的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>拥有此导航属性的实体的项。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
      <summary>获取或设置一个值，该值指示是否已从数据库加载此集合的所有实体。</summary>
      <returns>如果加载所有相关实体或 IsLoaded 已显式设置为 true，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
      <summary>从数据库中加载实体的集合。请注意，不会使用数据库中的值覆盖上下文中已存在的实体。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.LoadAsync">
      <summary>异步从数据库中加载实体的集合。请注意，不会使用数据库中的值覆盖上下文中已存在的实体。</summary>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.LoadAsync(System.Threading.CancellationToken)">
      <summary>异步从数据库中加载实体的集合。请注意，不会使用数据库中的值覆盖上下文中已存在的实体。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
      <summary>获取属性名称。</summary>
      <returns>属性名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>返回由此对象表示的导航属性的非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> 类的新实例。</summary>
      <returns>非泛型版本。</returns>
      <param name="entry">表示导航属性的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
      <summary>返回将用于从数据库加载此集合的查询。可使用 LINQ 修改返回的查询以便在数据库中执行筛选或操作，例如，计算数据库中的集合中的实体数，而不实际加载这些实体。</summary>
      <returns>针对集合的查询。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
      <summary>实体数据模型 (EDM) 模型的不可变表示形式，该模型可用于创建 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />，也可将该模型传递给 <see cref="T:System.Data.Entity.DbContext" /> 的构造函数。为了提高性能，应缓存和重用此类型的实例以构造上下文。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
      <summary>创建 ObjectContext 的实例或派生自 ObjectContext 的类的实例。请注意，可使用适当的 DbContext 构造函数来改为创建 DbContext 的实例。如果使用派生的 ObjectContext，则它必须具有带单个 EntityConnection 参数的公共构造函数。传递的连接由创建的 ObjectContext 使用，但不属于上下文。在释放上下文后，调用方必须释放连接。</summary>
      <returns>上下文。</returns>
      <param name="existingConnection">供上下文使用的数据库的现有连接。</param>
      <typeparam name="TContext">要创建的上下文的类型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>非泛型版本的 <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> 类。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
      <summary>返回等效泛型 <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> 对象。</summary>
      <returns>等效泛型对象。</returns>
      <typeparam name="TEntity">在其上声明该成员的实体的类型。</typeparam>
      <typeparam name="TComplexProperty">复杂属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
      <summary>获取表示此属性的嵌套复杂属性的对象。</summary>
      <returns>表示嵌套属性的对象。</returns>
      <param name="propertyName">嵌套属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
      <summary>获取表示此属性的嵌套属性的对象。此方法可用于标量属性和/或复杂属性。</summary>
      <returns>表示嵌套属性的对象。</returns>
      <param name="propertyName">嵌套属性的名称。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
      <summary>此类的实例从 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 的 ComplexProperty 方法返回，并允许访问复杂属性的状态。</summary>
      <typeparam name="TEntity">此属性所属的实体的类型。</typeparam>
      <typeparam name="TComplexProperty">属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>获取表示此属性的嵌套复杂属性的对象。</summary>
      <returns>表示嵌套属性的对象。</returns>
      <param name="property">表示嵌套属性的表达式。</param>
      <typeparam name="TNestedComplexProperty">嵌套属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
      <summary>获取表示此属性的嵌套复杂属性的对象。</summary>
      <returns>表示嵌套属性的对象。</returns>
      <param name="propertyName">嵌套属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
      <summary>获取表示此属性的嵌套复杂属性的对象。</summary>
      <returns>表示嵌套属性的对象。</returns>
      <param name="propertyName">嵌套属性的名称。</param>
      <typeparam name="TNestedComplexProperty">嵌套属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>返回由此对象表示的属性的非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> 类的新实例。</summary>
      <returns>非泛型版本。</returns>
      <param name="entry">表示属性的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>获取表示此属性的嵌套属性的对象。此方法可用于标量属性和/或复杂属性。</summary>
      <returns>表示嵌套属性的对象。</returns>
      <param name="property">表示嵌套属性的表达式。</param>
      <typeparam name="TNestedProperty">嵌套属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
      <summary>获取表示此属性的嵌套属性的对象。此方法可用于标量属性和/或复杂属性。</summary>
      <returns>表示嵌套属性的对象。</returns>
      <param name="propertyName">嵌套属性的名称。</param>
      <typeparam name="TNestedProperty">嵌套属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
      <summary>获取表示此属性的嵌套属性的对象。此方法可用于标量属性和/或复杂属性。</summary>
      <returns>表示嵌套属性的对象。</returns>
      <param name="propertyName">嵌套属性的名称。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
      <summary>表示有关数据库连接的信息。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
      <summary>初始化表示应用程序配置文件中指定的连接的 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 类的新实例。</summary>
      <param name="connectionName">应用程序配置中的连接字符串的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
      <summary>初始化基于连接字符串的 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 类的新实例。</summary>
      <param name="connectionString">用于连接的连接字符串。</param>
      <param name="providerInvariantName">用于连接的提供程序的名称。将“System.Data.SqlClient”用于 SQL Server。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)">
      <summary>确定当前 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 类型是否等于提供的对象类型。</summary>
      <returns>如果当前 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 类型等于指定的对象类型，则为 true；否则为 false。</returns>
      <param name="obj">要与当前 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode">
      <summary>生成表示当前连接的值。</summary>
      <returns>表示当前连接的值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString">
      <summary>将 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 对象转换为字符串。</summary>
      <returns>当前驱动器。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
      <summary>描述与 <see cref="T:System.Data.Entity.DbContext" /> 关联的数据库连接字符串的来源。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
      <summary>该连接字符串是从外部配置中进行读取的。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
      <summary>该连接字符串是按约定创建的。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
      <summary>该连接字符串是由提供给 DbContextInfo 的连接信息重写的。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
      <summary>该连接字符串是在运行时显式指定的。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
      <summary>由 <see cref="T:System.Data.Entity.DbContext" /> 的 Configuration 方法返回以提供对上下文的配置选项的访问。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled">
      <summary>获取或设置一个值，该值指示是否通过 <see cref="T:System.Data.Entity.DbContext" /> 和相关类的方法自动调用 <see cref="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges" /> 方法。默认值为 true。</summary>
      <returns>如果应自动调用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.EnsureTransactionsForFunctionsAndCommands">
      <summary>获取或设置某值，该值确定是否应在事务中始终执行 SQL 函数和命令。</summary>
      <returns>默认事务行为。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)">
      <summary>指定配置是否与指定的对象相同。</summary>
      <returns>如果配置与指定的对象相同，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode">
      <summary>获取与配置关联的哈希代码。</summary>
      <returns>与配置关联的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
      <summary>获取或设置一个值，该值指示是否启用针对公开为导航属性的关系的延迟加载。延迟加载在默认情况下处于启用状态。</summary>
      <returns>如果启用延迟加载，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
      <summary>获取或设置一个值，该值指示框架在创建实体类型的实例时是否会创建动态生成的代理类的实例。请注意，即使使用此标记启用了代理创建，也只会为满足代理设置要求的实体类型创建代理实例。默认情况下启用代理创建。</summary>
      <returns>如果启用了代理创建，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString">
      <summary>返回 <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration" /> 的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration" /> 的字符串表示形式。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.UseDatabaseNullSemantics">
      <summary>获取或设置一个值，该值指示当比较两个操作数，而它们都可能为 null 时，是否展示数据库 null 语义。默认值为 false。例如：如果 UseDatabaseNullSemantics 为 true，则 (operand1 == operand2) 将转换为 (operand1 = operand2)；如果 UseDatabaseNullSemantics 为 false，则将转换为 (((operand1 = operand2) AND (NOT (operand1 IS NULL OR operand2 IS NULL))) OR ((operand1 IS NULL) AND (operand2 IS NULL)))。</summary>
      <returns>如果启用数据库 null 比较行为，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
      <summary>获取或设置一个值，该值指示在调用 <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> 时，是否应自动验证所跟踪的实体。默认值为 true。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
      <summary>提供有关给定 <see cref="T:System.Data.Entity.DbContext" /> 类型的运行时信息。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
      <summary>使用指定上下文类型初始化 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 类的新实例。</summary>
      <param name="contextType">具体 <see cref="T:System.Data.Entity.DbContext" /> 类型。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
      <summary>使用指定上下文类型和配置文件初始化 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 类的新实例。</summary>
      <param name="contextType">具体 <see cref="T:System.Data.Entity.DbContext" /> 类型。</param>
      <param name="config">表示配置文件的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>使用指定连接信息、上下文类型和配置文件初始化 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 类的新实例。</summary>
      <param name="contextType">派生自 <see cref="T:System.Data.Entity.DbContext" /> 的类型。</param>
      <param name="config">表示配置文件的对象。</param>
      <param name="connectionInfo">要使用的数据库的连接信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>使用指定上下文类型、配置文件和提供程序信息初始化 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 类的新实例。</summary>
      <param name="contextType">派生自 <see cref="T:System.Data.Entity.DbContext" /> 的类型。</param>
      <param name="config">表示配置文件的对象。</param>
      <param name="modelProviderInfo">指定要面向的基础 ADO.NET 提供程序的 <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>通过使用指定上下文类型和连接字符串的设置来初始化 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 类。</summary>
      <param name="contextType">派生自 <see cref="T:System.Data.Entity.DbContext" /> 的类型。</param>
      <param name="connectionStringSettings">连接字符串的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>使用指定上下文类型和连接信息初始化 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 类的新实例。</summary>
      <param name="contextType">派生自 <see cref="T:System.Data.Entity.DbContext" /> 的类型。</param>
      <param name="connectionInfo">要使用的数据库的连接信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>使用指定上下文类型和提供程序信息初始化 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 类的新实例。</summary>
      <param name="contextType">派生自 <see cref="T:System.Data.Entity.DbContext" /> 的类型。</param>
      <param name="modelProviderInfo">指定要面向的基础 ADO.NET 提供程序的 <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
      <summary>获取基础 <see cref="T:System.Data.Entity.DbContext" /> 类型使用的连接的 ADO.NET 提供程序名称。</summary>
      <returns>基础 <see cref="T:System.Data.Entity.DbContext" /> 类型使用的连接的 ADO.NET 提供程序名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
      <summary>获取基础 <see cref="T:System.Data.Entity.DbContext" /> 类型使用的连接字符串。</summary>
      <returns>基础 <see cref="T:System.Data.Entity.DbContext" /> 类型使用的连接字符串。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
      <summary>获取基础 <see cref="T:System.Data.Entity.DbContext" /> 类型使用的连接字符串名称。</summary>
      <returns>基础 <see cref="T:System.Data.Entity.DbContext" /> 类型使用的连接字符串名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
      <summary>获取基础 <see cref="T:System.Data.Entity.DbContext" /> 类型使用的连接字符串的来源。</summary>
      <returns>基础 <see cref="T:System.Data.Entity.DbContext" /> 类型使用的连接字符串的来源。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
      <summary>获取具体 <see cref="T:System.Data.Entity.DbContext" /> 类型。</summary>
      <returns>具体 <see cref="T:System.Data.Entity.DbContext" /> 类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
      <summary>创建 <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> 对象的实例。</summary>
      <returns>已创建的实例。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
      <summary>获取是否可创建基础 <see cref="T:System.Data.Entity.DbContext" /> 类型。</summary>
      <returns>如果基础 <see cref="T:System.Data.Entity.DbContext" /> 类型可创建，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
      <summary>获取或设置在 OnModelCreating 已在上下文中运行后将对 DbModelBuilder 执行的操作。</summary>
      <returns>在 OnModelCreating 已在上下文中运行后将对 DbModelBuilder 执行的操作。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>非泛型版本的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 类。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
      <summary>返回由此对象表示的跟踪实体的给定泛型类型的泛型 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 类的新实例。请注意跟踪实体的类型必须与泛型类型兼容，否则将引发异常。</summary>
      <returns>泛型版本。</returns>
      <typeparam name="TEntity">实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
      <summary>获取一个对象，该对象表示从该实体到相关实体集合的集合导航属性。</summary>
      <returns>表示导航属性的对象。</returns>
      <param name="navigationProperty">导航属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
      <summary>获取一个对象，此对象表示该实体的复杂属性。</summary>
      <returns>表示复杂属性的对象。</returns>
      <param name="propertyName">复杂属性的名称。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
      <summary>获取由此对象表示的跟踪实体的当前属性值。</summary>
      <returns>当前值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
      <summary>获取实体。</summary>
      <returns>实体。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>确定指定的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 是否等于此实例。如果两个 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 实例都是同一 <see cref="T:System.Data.Entity.DbContext" /> 上的同一实体的项，则将这两个实例视为相等。</summary>
      <returns>如果指定的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 等于此实例，则为 true；否则为 false。</returns>
      <param name="other">要与此实例进行比较的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等于此实例。如果两个 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 实例都是同一 <see cref="T:System.Data.Entity.DbContext" /> 上的同一实体的项，则将这两个实例视为相等。</summary>
      <returns>如果指定的 <see cref="T:System.Object" /> 等于此实例，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
      <summary>在数据库中查询跟踪实体的值的副本，因为当前它们位于数据库中。请注意更改返回的字典中的值将不会更新数据库中的值。如果未在数据库中找到实体，则返回 null。</summary>
      <returns>存储值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValuesAsync">
      <summary>跟踪的实体当前位于数据库中时，在数据库中异步查询这些实体的值的副本。请注意更改返回的字典中的值将不会更新数据库中的值。如果未在数据库中找到实体，则返回 null。</summary>
      <returns>表示异步操作的任务。任务结果包含存储值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)">
      <summary>跟踪的实体当前位于数据库中时，在数据库中异步查询这些实体的值的副本。请注意更改返回的字典中的值将不会更新数据库中的值。如果未在数据库中找到实体，则返回 null。</summary>
      <returns>表示异步操作的任务。任务结果包含存储值。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>此实例的哈希代码，适合在哈希算法和类似哈希表的数据结构中使用。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
      <summary>验证此 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 实例并返回验证结果。</summary>
      <returns>实体验证结果。如果重写 <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> 方法，则可能为 Null。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
      <summary>获取表示实体成员的对象。返回的对象的运行时类型将随要求的成员类型的不同而不同。当前支持的成员类型及其返回类型为：引用导航属性：<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.集合导航属性：<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.基元/标量属性：<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.复杂属性：<see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />。</summary>
      <returns>表示成员的对象。</returns>
      <param name="propertyName">成员名。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
      <summary>获取由此对象表示的跟踪实体的原始属性值。原始值通常是实体的属性值，就像上次从数据库查询这些值一样。</summary>
      <returns>原始值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
      <summary>获取一个对象，此对象表示该实体的标量属性或复杂属性。</summary>
      <returns>表示属性的对象。</returns>
      <param name="propertyName">属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
      <summary>获取一个对象，该对象表示从该实体到其他实体的引用（即非集合）导航属性。</summary>
      <returns>表示导航属性的对象。</returns>
      <param name="navigationProperty">导航属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
      <summary>从数据库重新加载该实体时会用数据库中的值覆盖任何属性值。调用此方法后，该实体将处于“未更改”状态。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ReloadAsync">
      <summary>异步从数据库重新加载该实体时会用数据库中的值覆盖任何属性值。调用此方法后，该实体将处于“未更改”状态。</summary>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ReloadAsync(System.Threading.CancellationToken)">
      <summary>异步从数据库重新加载该实体时会用数据库中的值覆盖任何属性值。调用此方法后，该实体将处于“未更改”状态。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
      <summary>获取或设置实体的状态。</summary>
      <returns>状态。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString">
      <summary>返回 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
      <summary>此类的实例提供对有关由 <see cref="T:System.Data.Entity.DbContext" /> 跟踪的实体的信息和控制的访问权。使用上下文的 Entity 或 Entities 方法来获取此类型的对象。</summary>
      <typeparam name="TEntity">实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>获取一个对象，该对象表示从该实体到相关实体集合的集合导航属性。</summary>
      <returns>表示导航属性的对象。</returns>
      <param name="navigationProperty">表示导航属性的表达式。</param>
      <typeparam name="TElement">集合中的元素类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
      <summary>获取一个对象，该对象表示从该实体到相关实体集合的集合导航属性。</summary>
      <returns>表示导航属性的对象。</returns>
      <param name="navigationProperty">导航属性的名称。</param>
      <typeparam name="TElement">集合中的元素类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
      <summary>获取一个对象，该对象表示从该实体到相关实体集合的集合导航属性。</summary>
      <returns>表示导航属性的对象。</returns>
      <param name="navigationProperty">导航属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>获取一个对象，此对象表示该实体的复杂属性。</summary>
      <returns>表示复杂属性的对象。</returns>
      <param name="property">表示复杂属性的表达式。</param>
      <typeparam name="TComplexProperty">复杂属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
      <summary>获取一个对象，此对象表示该实体的复杂属性。</summary>
      <returns>表示复杂属性的对象。</returns>
      <param name="propertyName">复杂属性的名称。</param>
      <typeparam name="TComplexProperty">复杂属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
      <summary>获取一个对象，此对象表示该实体的复杂属性。</summary>
      <returns>表示复杂属性的对象。</returns>
      <param name="propertyName">复杂属性的名称。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
      <summary>获取由此对象表示的跟踪实体的当前属性值。</summary>
      <returns>当前值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
      <summary>获取实体。</summary>
      <returns>实体。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
      <summary>确定指定的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 是否等于此实例。如果两个 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 实例都是同一 <see cref="T:System.Data.Entity.DbContext" /> 上的同一实体的项，则将这两个实例视为相等。</summary>
      <returns>如果指定的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 等于此实例，则为 true；否则为 false。</returns>
      <param name="other">要与此实例进行比较的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等于此实例。如果两个 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 实例都是同一 <see cref="T:System.Data.Entity.DbContext" /> 上的同一实体的项，则将这两个实例视为相等。</summary>
      <returns>如果指定的 <see cref="T:System.Object" /> 等于此实例，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
      <summary>在数据库中查询跟踪实体的值的副本，因为当前它们位于数据库中。请注意更改返回的字典中的值将不会更新数据库中的值。如果未在数据库中找到实体，则返回 null。</summary>
      <returns>存储值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValuesAsync">
      <summary>跟踪的实体当前位于数据库中时，在数据库中异步查询这些实体的值的副本。请注意更改返回的字典中的值将不会更新数据库中的值。如果未在数据库中找到实体，则返回 null。</summary>
      <returns>表示异步操作的任务。任务结果包含存储值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValuesAsync(System.Threading.CancellationToken)">
      <summary>跟踪的实体当前位于数据库中时，在数据库中异步查询这些实体的值的副本。请注意更改返回的字典中的值将不会更新数据库中的值。如果未在数据库中找到实体，则返回 null。</summary>
      <returns>表示异步操作的任务。任务结果包含存储值。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>此实例的哈希代码，适合在哈希算法和类似哈希表的数据结构中使用。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
      <summary>验证此 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 实例并返回验证结果。</summary>
      <returns>实体验证结果。如果重写 <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> 方法，则可能为 Null。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
      <summary>获取表示实体成员的对象。返回的对象的运行时类型将随要求的成员类型的不同而不同。当前支持的成员类型及其返回类型为：引用导航属性：<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />.集合导航属性：<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />.基元/标量属性：<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />.复杂属性：<see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />。</summary>
      <returns>表示成员的对象。</returns>
      <param name="propertyName">成员名。</param>
      <typeparam name="TMember">成员的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
      <summary>获取表示实体成员的对象。返回的对象的运行时类型将随要求的成员类型的不同而不同。当前支持的成员类型及其返回类型为：引用导航属性：<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.集合导航属性：<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.基元/标量属性：<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.复杂属性：<see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />。</summary>
      <returns>表示成员的对象。</returns>
      <param name="propertyName">成员名。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>返回此对象所表示跟踪实体的非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 类的新实例。</summary>
      <returns>非泛型版本。</returns>
      <param name="entry">表示跟踪实体的对象。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
      <summary>获取由此对象表示的跟踪实体的原始属性值。原始值通常是实体的属性值，就像上次从数据库查询这些值一样。</summary>
      <returns>原始值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>获取一个对象，此对象表示该实体的标量属性或复杂属性。</summary>
      <returns>表示属性的对象。</returns>
      <param name="property">表示属性的表达式。</param>
      <typeparam name="TProperty">属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
      <summary>获取一个对象，此对象表示该实体的标量属性或复杂属性。</summary>
      <returns>表示属性的对象。</returns>
      <param name="propertyName">属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
      <summary>获取一个对象，此对象表示该实体的标量属性或复杂属性。</summary>
      <returns>表示属性的对象。</returns>
      <param name="propertyName">属性的名称。</param>
      <typeparam name="TProperty">属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>获取一个对象，该对象表示从该实体到其他实体的引用（即非集合）导航属性。</summary>
      <returns>表示导航属性的对象。</returns>
      <param name="navigationProperty">表示导航属性的表达式。</param>
      <typeparam name="TProperty">属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
      <summary>获取一个对象，该对象表示从该实体到其他实体的引用（即非集合）导航属性。</summary>
      <returns>表示导航属性的对象。</returns>
      <param name="navigationProperty">导航属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
      <summary>获取一个对象，该对象表示从该实体到其他实体的引用（即非集合）导航属性。</summary>
      <returns>表示导航属性的对象。</returns>
      <param name="navigationProperty">导航属性的名称。</param>
      <typeparam name="TProperty">属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
      <summary>从数据库重新加载该实体时会用数据库中的值覆盖任何属性值。调用此方法后，该实体将处于“未更改”状态。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ReloadAsync">
      <summary>异步从数据库重新加载该实体时会用数据库中的值覆盖任何属性值。调用此方法后，该实体将处于“未更改”状态。</summary>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ReloadAsync(System.Threading.CancellationToken)">
      <summary>异步从数据库重新加载该实体时会用数据库中的值覆盖任何属性值。调用此方法后，该实体将处于“未更改”状态。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
      <summary>获取或设置实体的状态。</summary>
      <returns>状态。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString">
      <summary>返回数据库实体值的字符串表示形式。</summary>
      <returns>数据库实体值的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbExecutionStrategy">
      <summary>为在两次重试之间使用以指数形式增长的延迟时间的不可靠操作和瞬时条件提供重试机制的基实现。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor(System.Int32,System.TimeSpan)">
      <summary>使用指定的重试次数限制值和两次重试之间的延迟时间初始化 <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> 类的新实例。</summary>
      <param name="maxRetryCount">最大重试次数。</param>
      <param name="maxDelay">两次重试之间的最大延迟时间（毫秒）。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute(System.Action)">
      <summary>在指定操作满足当前重试策略时重复执行此操作。</summary>
      <param name="operation">一个表示不返回任何结果的可执行操作的委托。</param>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">如果重试延迟策略确定不应再重试操作。</exception>
      <exception cref="T:System.InvalidOperationException">如果检测到现有事务且执行策略不支持它。</exception>
      <exception cref="T:System.InvalidOperationException">如果此实例已用于执行某个操作。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>在指定操作满足当前重试策略时重复执行此操作。</summary>
      <returns>操作的结果。</returns>
      <param name="operation">一个表示返回 <paramref name="TResult" /> 类型的结果的可执行操作的委托。</param>
      <typeparam name="TResult">从可执行操作预期获得的结果类型。</typeparam>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">如果重试延迟策略确定不应再重试操作。</exception>
      <exception cref="T:System.InvalidOperationException">如果检测到现有事务且执行策略不支持它。</exception>
      <exception cref="T:System.InvalidOperationException">如果此实例已用于执行某个操作。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>在指定异步操作满足当前重试策略时重复执行此操作。</summary>
      <returns>如果原始任务成功完成（第一次执行或在瞬态失败后重试）将要运行以完成的任务。如果任务失败且发生非瞬态错误或达到重试限制值，则返回的任务将出错且必须显示异常。</returns>
      <param name="operation">用于返回 <paramref name="TResult" /> 类型的已启动任务的函数。</param>
      <param name="cancellationToken">用于取消重试操作的取消标记，但是不取消已在执行中或已成功完成的操作。</param>
      <typeparam name="TResult">
        <paramref name="operation" /> 返回的 <see cref="T:System.Threading.Tasks.Task`1" /> 的结果类型。</typeparam>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">如果重试延迟策略确定不应再重试操作。</exception>
      <exception cref="T:System.InvalidOperationException">如果检测到现有事务且执行策略不支持它。</exception>
      <exception cref="T:System.InvalidOperationException">如果此实例已用于执行某个操作。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>在指定异步操作满足当前重试策略时重复执行此操作。</summary>
      <returns>如果原始任务成功完成（第一次执行或在瞬态失败后重试）将要运行以完成的任务。如果任务失败且发生非瞬态错误或达到重试限制值，则返回的任务将出错且必须显示异常。</returns>
      <param name="operation">用于返回已启动任务的函数。</param>
      <param name="cancellationToken">用于取消重试操作的取消标记，但是不取消已在执行中或已成功完成的操作。</param>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">如果重试延迟策略确定不应再重试操作。</exception>
      <exception cref="T:System.InvalidOperationException">如果检测到现有事务且执行策略不支持它。</exception>
      <exception cref="T:System.InvalidOperationException">如果此实例已用于执行某个操作。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.GetNextDelay(System.Exception)">
      <summary>确定是否应重试操作以及在下次重试前的延迟时间。</summary>
      <returns>如果应重试操作，则返回一个延迟值，它指示在下一次执行尝试前要等待多长时间；否则返回 null。</returns>
      <param name="lastException">在最后一次执行尝试期间引发的异常。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbExecutionStrategy.RetriesOnFailure">
      <summary>获取一个值，该值指示此 <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> 在失败后是否可能重试执行。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> 在失败后可能重试执行，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ShouldRetryOn(System.Exception)">
      <summary>确定指定的异常是否表示可以通过重试解决的瞬态失败。</summary>
      <returns>如果指定异常视为瞬态的，则为 true；否则为 false。</returns>
      <param name="exception">要验证的异常对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})">
      <summary>只要它是 <see cref="T:System.Data.Entity.Core.EntityException" />、<see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 或 <see cref="T:System.Data.Entity.Core.UpdateException" />，就以递归方式从 <paramref name="exception" /> 获取 InnerException，并将其传递给 <paramref name="exceptionHandler" />。</summary>
      <returns>
        <paramref name="exceptionHandler" /> 的结果。</returns>
      <param name="exception">要取消包装的异常。</param>
      <param name="exceptionHandler">一个将使用未包装的异常调用的委托。</param>
      <typeparam name="T">未包装异常的类型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>这是一个抽象基类，用于表示实体的标量/复杂属性或导航属性。标量和复杂属性使用派生类 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />，引用导航属性使用派生类 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />，而集合导航属性使用派生类 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
      <summary>返回等效泛型 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> 对象。</summary>
      <returns>等效泛型对象。</returns>
      <typeparam name="TEntity">在其上声明该成员的实体的类型。</typeparam>
      <typeparam name="TProperty">属性的类型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
      <summary>获取或设置此属性的当前值。</summary>
      <returns>当前值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
      <summary>此成员所属的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>拥有此成员的实体的项。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)">
      <summary>确定指定的项是否等于当前项。</summary>
      <returns>如果指定的项等于当前项，则为 true；否则为 false。</returns>
      <param name="obj">要与当前项进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode">
      <summary>返回此项的哈希函数。</summary>
      <returns>此项的哈希函数。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
      <summary>验证此属性。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 对象的集合。绝不会为 null。如果实体有效，则集合将为空。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
      <summary>获取属性的名称。</summary>
      <returns>属性名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString">
      <summary>返回数据库属性值的字符串表示形式。</summary>
      <returns>数据库属性值的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
      <summary>这是一个抽象基类，用于表示实体的标量/复杂属性或导航属性。标量和复杂属性使用派生类 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />，引用导航属性使用派生类 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />，而集合导航属性使用派生类 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />。</summary>
      <typeparam name="TEntity">此属性所属的实体的类型。</typeparam>
      <typeparam name="TProperty">属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
      <summary>获取或设置此属性的当前值。</summary>
      <returns>当前值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
      <summary>此成员所属的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>拥有此成员的实体的项。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)">
      <summary>指定对象是否等于指定的对象。</summary>
      <returns>如果对象等于指定的对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode">
      <summary>获取与对象关联的哈希代码。</summary>
      <returns>与对象关联的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
      <summary>验证此属性。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 对象的集合。绝不会为 null。如果实体有效，则集合将为空。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name">
      <summary>获取属性的名称。</summary>
      <returns>属性的名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>返回由此对象表示的属性的非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> 类的新实例。</summary>
      <returns>非泛型版本。</returns>
      <param name="entry">表示属性的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString">
      <summary>返回 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> 的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbModel">
      <summary>表示由 <see cref="T:System.Data.Entity.DbModelBuilder" /> 创建的实体数据模型 (EDM)。Compile 方法，可用来从此 EDM 的表示形式转换到 <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />，后者是适合缓存和创建 <see cref="T:System.Data.Entity.DbContext" /> 或 <see cref="T:System.Data.Objects.ObjectContext" /> 实例的模型的编译快照。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
      <summary>为此模式创建 <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />，它是适合缓存和创建 <see cref="T:System.Data.Entity.DbContext" /> 实例的编译快照。</summary>
      <returns>已编译的模型。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ConceptualModel">
      <summary>获取概念模型。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ConceptualToStoreMapping">
      <summary>获取映射模型。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderInfo">
      <summary>获取提供程序信息。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderManifest">
      <summary>获取提供程序清单。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.StoreModel">
      <summary>获取存储模型。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>非泛型版本的 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> 类。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
      <summary>返回等效泛型 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> 对象。</summary>
      <returns>等效泛型对象。</returns>
      <typeparam name="TEntity">在其上声明该成员的实体的类型。</typeparam>
      <typeparam name="TProperty">属性的类型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
      <summary>获取或设置此属性的当前值。</summary>
      <returns>当前值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
      <summary>此属性所属的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>拥有此属性的实体的项。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
      <summary>获取或设置一个值，该值指示是否在从数据库加载此属性的值后修改了该值。</summary>
      <returns>如果修改此实例，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
      <summary>获取属性名称。</summary>
      <returns>属性名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
      <summary>获取或设置此属性的原始值。</summary>
      <returns>原始值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
      <summary>此属性嵌套在其中的属性的 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />。此方法仅为复杂对象的属性返回非 null 项；它将为实体本身的属性返回 null。</summary>
      <returns>父复杂属性的项，如果这是一个实体属性，则为 null。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
      <summary>此类的实例从 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 的 Property 方法返回，并允许访问标量属性或复杂属性。</summary>
      <typeparam name="TEntity">此属性所属的实体的类型。</typeparam>
      <typeparam name="TProperty">属性的类型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
      <summary>获取或设置此属性的当前值。</summary>
      <returns>当前值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
      <summary>此属性所属的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>拥有此属性的实体的项。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
      <summary>获取或设置一个值，该值指示是否在从数据库加载此属性的值后修改了该值。</summary>
      <returns>如果修改此实例，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
      <summary>获取属性名称。</summary>
      <returns>属性名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>返回由此对象表示的属性的非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> 类的新实例。</summary>
      <returns>非泛型版本。</returns>
      <param name="entry">表示属性的对象。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
      <summary>获取或设置此属性的原始值。</summary>
      <returns>原始值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
      <summary>此属性嵌套在其中的属性的 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />。此方法仅为复杂对象的属性返回非 null 项；它将为实体本身的属性返回 null。</summary>
      <returns>父复杂属性的项，如果这是一个实体属性，则为 null。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
      <summary>基础实体或复杂对象的所有属性的集合。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
      <summary>创建一个包含此字典中所有属性的副本的新字典。对新字典所做的更改不会反映在此字典中，反之亦然。</summary>
      <returns>此字典的副本。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)">
      <summary>指定 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> 是否等于特定对象。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> 等于特定对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode">
      <summary>获取与属性值关联的哈希代码。</summary>
      <returns>与属性值关联的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
      <summary>获取属性的值，正如使用索引属性 getter 但将类型设置为泛型参数的类型一样。这在使用嵌套字典以避免编写包含大量强制转换的表达式时特别有用。</summary>
      <returns>属性的值。</returns>
      <param name="propertyName">属性的名称。</param>
      <typeparam name="TValue">属性的类型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
      <summary>获取或设置带指定属性名称的属性的值。该值可能为此类的嵌套实例。</summary>
      <returns>属性的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
      <summary>获取作为只读集的此字典中所有属性的名称集。</summary>
      <returns>属性名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
      <summary>通过从其他字典中读取值来设置此字典的值。另一个字典必须基于与此字典相同的类型，或基于此字典的类型所派生的类型。</summary>
      <param name="propertyValues">从中读取值的字典。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
      <summary>通过从给定对象中读取值来设置此字典的值。给定对象可以是任何类型。如果对象具有任何与字典中的属性名称匹配且可读取的名称的属性，则将读取这些属性。其他属性将被忽略。例如，这样便能从简单的数据传输对象 (DTO) 中复制属性。</summary>
      <param name="obj">从中读取值的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
      <summary>为此字典创建一个基础类型对象，并使用此字典中的属性值冻结该对象。</summary>
      <returns>已复制到新对象中的此字典的属性。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString">
      <summary>返回 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> 的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbProviderInfo">
      <summary>分组一对字符串，它们将提供程序和服务器版本一起标识为一个对象。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)">
      <summary>为给定的提供程序固定名称和清单标记创建一个新对象。</summary>
      <param name="providerInvariantName">标识该提供程序的字符串。例如，SQL Server 提供程序使用字符串“System.Data.SqlCient”。</param>
      <param name="providerManifestToken">标识正在使用的数据库服务器版本的字符串。例如，SQL Server 提供程序对 SQL Server 2008 使用字符串“2008”。此值不能为 null 但可以为空。清单标记有时也称为版本提示。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.Equals(System.Object)">
      <summary>确定指定的对象是否等于此当前对象。</summary>
      <returns>如果指定的对象等于此当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.GetHashCode">
      <summary>获取此当前对象的哈希函数。</summary>
      <returns>此当前对象的哈希函数。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName">
      <summary>标识该提供程序的字符串。例如，SQL Server 提供程序使用字符串“System.Data.SqlCient”。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken">
      <summary>标识正在使用的数据库服务器版本的字符串。例如，SQL Server 提供程序对 SQL Server 2008 使用字符串“2008”。此值不能为 null 但可以为空。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery">
      <summary>表示针对 DbContext 的非泛型 LINQ to Entities 查询。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
      <summary>返回一个新查询，其中返回的实体将不会在 <see cref="T:System.Data.Entity.DbContext" /> 中进行缓存。</summary>
      <returns>应用了 NoTracking 的新查询。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsStreaming">
      <summary>返回将流式处理结果而非缓存它的新查询。</summary>
      <returns>应用了 AsStreaming 的新查询。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
      <summary>返回等效泛型 <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> 对象。</summary>
      <returns>泛型集对象。</returns>
      <typeparam name="TElement">已为其创建查询的元素的类型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
      <summary>IQueryable 元素类型。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)">
      <summary>指定查询是否等于指定的对象。</summary>
      <returns>如果查询等于指定的对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode">
      <summary>获取与查询关联的哈希代码。</summary>
      <returns>与查询关联的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetType">
      <summary>获取与查询关联的类型。</summary>
      <returns>与查询关联的类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)">
      <summary>指定要包括在查询结果中的相关对象。</summary>
      <returns>一个新的 DbQuery&amp;lt;T&amp;gt;，它具有所定义的查询路径。</returns>
      <param name="path">要在查询结果中返回的相关对象列表（以点号分隔）。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IEnumerator" />，其枚举的对象将针对数据库执行查询。</summary>
      <returns>查询结果。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>返回 false。</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
      <summary>引发一个异常，该异常指示不支持直接绑定到存储查询。相反，用数据填充 DbSet，例如，使用 Load 扩展方法，然后绑定到本地数据。对于 WPF，绑定到 DbSet.Local。对于 Windows 窗体，则绑定到 DbSet.Local.ToBindingList()。</summary>
      <returns>决不返回；总是引发。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>返回 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" />，其枚举的对象将针对数据库执行查询。</summary>
      <returns>查询结果。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
      <summary>IQueryable LINQ 表达式。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
      <summary>IQueryable 提供程序。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
      <summary>返回基础查询的 <see cref="T:System.String" /> 表示形式。</summary>
      <returns>查询字符串。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
      <summary>表示针对 DbContext 的 LINQ to Entities 查询。</summary>
      <typeparam name="TResult">要查询的实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
      <summary>返回一个新查询，其中返回的实体将不会在 <see cref="T:System.Data.Entity.DbContext" /> 中进行缓存。</summary>
      <returns>应用了 NoTracking 的新查询。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsStreaming">
      <summary>返回将流式处理结果而非缓存它的新查询。</summary>
      <returns>应用了 AsStreaming 的新查询。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)">
      <summary>确定当前查询是否等于指定的查询。</summary>
      <returns>如果当前查询等于指定的查询，则为 true；否则为 false。</returns>
      <param name="obj">要与当前查询进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode">
      <summary>返回此查询的哈希函数。</summary>
      <returns>此查询的哈希函数。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType">
      <summary>获取当前查询的类型。</summary>
      <returns>当前查询的类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)">
      <summary>指定要包括在查询结果中的相关对象。</summary>
      <returns>一个新的 <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" />，它具有定义的查询路径。</returns>
      <param name="path">要在查询结果中返回的相关对象列表（以点号分隔）。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
      <summary>返回此查询的非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> 类的新实例。</summary>
      <returns>非泛型版本。</returns>
      <param name="entry">查询。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>获取此查询的枚举会导致对存储区执行此查询。</summary>
      <returns>查询的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.Generic.IEnumerator`1" />，其枚举的对象将针对数据库执行查询。</summary>
      <returns>查询结果。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>返回 false。</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>引发一个异常，该异常指示不支持直接绑定到存储查询。相反，用数据填充 DbSet，例如，使用 Load 扩展方法，然后绑定到本地数据。对于 WPF，绑定到 DbSet.Local。对于 Windows 窗体，则绑定到 DbSet.Local.ToBindingList()。</summary>
      <returns>决不返回；总是引发。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>返回 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" />，其枚举的对象将针对数据库执行查询。</summary>
      <returns>查询结果。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>返回 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" />，其枚举的对象将针对数据库执行查询。</summary>
      <returns>查询结果。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
      <summary>IQueryable 元素类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
      <summary>IQueryable LINQ 表达式。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
      <summary>IQueryable 提供程序。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
      <summary>返回基础查询的 <see cref="T:System.String" /> 表示形式。</summary>
      <returns>查询字符串。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery">
      <summary>表示非实体的一个 SQL 查询，该查询从 <see cref="T:System.Data.Entity.DbContext" /> 创建并通过该上下文中的连接来执行。此类的实例是从 <see cref="P:System.Data.Entity.DbContext.Database" /> 实例中获取的。创建此对象时不会执行该查询；只要枚举该查询，该查询就会执行（例如，使用 foreach）。实体的 SQL 查询是使用 <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" /> 创建的。请参见 <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1" /> 了解此类的泛型版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.AsStreaming">
      <summary>返回将流式处理结果而非缓存它的新查询。</summary>
      <returns>应用了 AsStreaming 的新查询。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.Equals(System.Object)">
      <summary>指定查询是否等于指定的对象。</summary>
      <returns>如果查询等于指定的对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ForEachAsync(System.Action{System.Object})">
      <summary>异步枚举查询结果并对每个元素执行指定的操作。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="action">要对每个元素执行的操作。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ForEachAsync(System.Action{System.Object},System.Threading.CancellationToken)">
      <summary>异步枚举查询结果并对每个元素执行指定的操作。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="action">要对每个元素执行的操作。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IEnumerator" />，其枚举的对象将针对数据库执行 SQL 查询。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 对象，可用于循环访问元素。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetHashCode">
      <summary>获取与查询关联的哈希代码。</summary>
      <returns>与查询关联的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetType">
      <summary>获取与查询关联的类型。</summary>
      <returns>与查询关联的类型。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>返回 false。</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#GetList">
      <summary>引发一个异常，该异常指示不支持直接绑定到存储查询。</summary>
      <returns>决不返回；总是引发。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>返回 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" />，其枚举的对象将针对数据库执行 SQL 查询。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> 对象，可用于循环访问元素。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToListAsync">
      <summary>通过异步枚举它从查询创建 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.List`1" />，后者包含查询的元素。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToListAsync(System.Threading.CancellationToken)">
      <summary>通过异步枚举它从查询创建 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.List`1" />，后者包含查询的元素。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToString">
      <summary>返回一个包含 SQL 字符串的 <see cref="T:System.String" />，该字符串是在创建查询时设置的。不包括参数。</summary>
      <returns>表示此实例的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1">
      <summary>表示非实体的一个 SQL 查询，该查询从 <see cref="T:System.Data.Entity.DbContext" /> 创建并通过该上下文中的连接来执行。此类的实例是从 <see cref="P:System.Data.Entity.DbContext.Database" /> 实例中获取的。创建此对象时不会执行该查询；只要枚举该查询，该查询就会执行（例如，使用 foreach）。实体的 SQL 查询是使用 <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" /> 创建的。请参见 <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> 了解此类的非泛型版本。</summary>
      <typeparam name="TElement">查询所返回元素的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean})">
      <summary>异步确定查询的所有元素是否满足条件。</summary>
      <returns>表示异步操作的任务。如果查询结果的每个元素都通过指定谓词中的测试，则任务结果包含 true；否则包含 false。</returns>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>异步确定查询的所有元素是否满足条件。</summary>
      <returns>表示异步操作的任务。如果查询结果的每个元素都通过指定谓词中的测试，则任务结果包含 true；否则包含 false。</returns>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync">
      <summary>异步确定查询是否包含任何元素。</summary>
      <returns>表示异步操作的任务。如果查询结果包含任何元素，则任务结果包含 true；否则包含 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean})">
      <summary>异步确定查询的任何元素是否满足条件。</summary>
      <returns>表示异步操作的任务。如果查询结果的任何元素通过指定谓词中的测试，则任务结果包含 true；否则包含 false。</returns>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>异步确定查询的任何元素是否满足条件。</summary>
      <returns>表示异步操作的任务。如果查询结果的任何元素通过指定谓词中的测试，则任务结果包含 true；否则包含 false。</returns>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Threading.CancellationToken)">
      <summary>异步确定查询是否包含任何元素。</summary>
      <returns>表示异步操作的任务。如果查询结果包含任何元素，则任务结果包含 true；否则包含 false。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AsStreaming">
      <summary>返回将流式处理结果而非缓存它的新查询。</summary>
      <returns>应用了 AsStreaming 的新查询。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0)">
      <summary>通过使用默认的相等比较器异步确定查询是否包含指定的元素。</summary>
      <returns>表示异步操作的任务。如果查询结果包含指定的值，则任务结果包含 true；否则包含 false。</returns>
      <param name="value">要在查询结果中查找的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0,System.Threading.CancellationToken)">
      <summary>通过使用默认的相等比较器异步确定查询是否包含指定的元素。</summary>
      <returns>表示异步操作的任务。如果查询结果包含指定的值，则任务结果包含 true；否则包含 false。</returns>
      <param name="value">要在查询结果中查找的对象。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync">
      <summary>异步返回查询中的元素数。</summary>
      <returns>表示异步操作的任务。任务结果包含查询结果中的元素数。</returns>
      <exception cref="T:System.OverflowException">查询结果中的元素数大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean})">
      <summary>异步返回满足条件的查询中的元素数。</summary>
      <returns>表示异步操作的任务。任务结果包含满足谓词函数中的条件的查询结果中的元素数。</returns>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <exception cref="T:System.OverflowException">满足谓词函数中的条件的查询结果中的元素数大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>异步返回满足条件的查询中的元素数。</summary>
      <returns>表示异步操作的任务。任务结果包含满足谓词函数中的条件的查询结果中的元素数。</returns>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OverflowException">满足谓词函数中的条件的查询结果中的元素数大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Threading.CancellationToken)">
      <summary>异步返回查询中的元素数。</summary>
      <returns>表示异步操作的任务。任务结果包含查询结果中的元素数。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OverflowException">查询结果中的元素数大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.Equals(System.Object)">
      <summary>确定当前查询是否等于指定的查询。</summary>
      <returns>如果当前查询等于指定的查询，则为 true；否则为 false。</returns>
      <param name="obj">要与当前查询进行比较的查询。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync">
      <summary>异步返回查询的第一个元素。</summary>
      <returns>表示异步操作的任务。任务结果包含查询结果中的第一个元素。</returns>
      <exception cref="T:System.InvalidOperationException">查询结果为空。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean})">
      <summary>异步返回满足指定条件的查询的第一个元素。</summary>
      <returns>表示异步操作的任务。任务结果包含满足指定条件的查询结果中的第一个元素。</returns>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">查询结果为空。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>异步返回满足指定条件的查询的第一个元素。</summary>
      <returns>表示异步操作的任务。任务结果包含满足指定条件的查询结果中的第一个元素。</returns>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">查询结果为空。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Threading.CancellationToken)">
      <summary>异步返回查询的第一个元素。</summary>
      <returns>表示异步操作的任务。任务结果包含查询结果中的第一个元素。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">查询结果为空。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync">
      <summary>异步返回查询的第一个元素；如果查询结果不包含任何元素，则返回默认值。</summary>
      <returns>表示异步操作的任务。如果查询结果为空，则任务结果包含 default (<paramref name="TElement" />)；否则包含查询结果中的第一个元素。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean})">
      <summary>异步返回满足指定条件的查询的第一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <returns>表示异步操作的任务。如果查询结果为空或没有元素通过 <paramref name="predicate" /> 所指定的测试，则任务结果包含 default (<paramref name="TElement" />)；否则它包含通过 <paramref name="predicate" /> 所指定的测试的查询结果中的第一个元素。</returns>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>异步返回满足指定条件的查询的第一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <returns>表示异步操作的任务。如果查询结果为空或没有元素通过 <paramref name="predicate" /> 所指定的测试，则任务结果包含 default (<paramref name="TElement" />)；否则它包含通过 <paramref name="predicate" /> 所指定的测试的查询结果中的第一个元素。</returns>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Threading.CancellationToken)">
      <summary>异步返回查询的第一个元素；如果查询结果不包含任何元素，则返回默认值。</summary>
      <returns>表示异步操作的任务。如果查询结果为空，则任务结果包含 default (<paramref name="TElement" />)；否则包含查询结果中的第一个元素。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0})">
      <summary>异步枚举查询结果并对每个元素执行指定的操作。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="action">要执行的操作。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0},System.Threading.CancellationToken)">
      <summary>异步枚举查询结果并对每个元素执行指定的操作。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="action">要执行的操作。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.Generic.IEnumerator`1" />，其枚举的对象将针对数据库执行 SQL 查询。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象，可用于循环访问元素。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetHashCode">
      <summary>返回此查询的哈希函数。</summary>
      <returns>此查询的哈希函数。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetType">
      <summary>获取当前查询的类型。</summary>
      <returns>当前查询的类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync">
      <summary>异步返回表示查询中的总元素数的 <see cref="T:System.Int64" />。</summary>
      <returns>表示异步操作的任务。任务结果包含查询结果中的元素数。</returns>
      <exception cref="T:System.OverflowException">查询结果中的元素数大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean})">
      <summary>异步返回表示满足条件的查询中元素数的 <see cref="T:System.Int64" />。</summary>
      <returns>表示异步操作的任务。任务结果包含满足谓词函数中的条件的查询结果中的元素数。</returns>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <exception cref="T:System.OverflowException">满足谓词函数中的条件的查询结果中的元素数大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>异步返回表示满足条件的查询中元素数的 <see cref="T:System.Int64" />。</summary>
      <returns>表示异步操作的任务。任务结果包含满足谓词函数中的条件的查询结果中的元素数。</returns>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OverflowException">满足谓词函数中的条件的查询结果中的元素数大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Threading.CancellationToken)">
      <summary>异步返回表示查询中的总元素数的 <see cref="T:System.Int64" />。</summary>
      <returns>表示异步操作的任务。任务结果包含查询结果中的元素数。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OverflowException">查询结果中的元素数大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync">
      <summary>异步返回查询的最大值。</summary>
      <returns>表示异步操作的任务。任务结果包含查询结果中的最大值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync(System.Threading.CancellationToken)">
      <summary>异步返回查询的最大值。</summary>
      <returns>表示异步操作的任务。任务结果包含查询结果中的最大值。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync">
      <summary>异步返回查询的最小值。</summary>
      <returns>表示异步操作的任务。任务结果包含查询结果中的最小值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync(System.Threading.CancellationToken)">
      <summary>异步返回查询的最小值。</summary>
      <returns>表示异步操作的任务。任务结果包含查询结果中的最小值。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync">
      <summary>异步返回查询的唯一元素；如果该查询结果并非恰好包含一个元素，则引发异常。</summary>
      <returns>表示异步操作的任务。任务结果包含查询结果的单个元素。</returns>
      <exception cref="T:System.InvalidOperationException">查询结果有多个元素。</exception>
      <exception cref="T:System.InvalidOperationException">查询结果为空。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean})">
      <summary>异步返回满足指定条件的查询的唯一元素；如果有多个这样的元素，则引发异常。</summary>
      <returns>表示异步操作的任务。任务结果包含满足 <paramref name="predicate" /> 中条件的查询结果的单个元素。</returns>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。</exception>
      <exception cref="T:System.InvalidOperationException">多个元素满足 <paramref name="predicate" /> 中的条件。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>异步返回满足指定条件的查询的唯一元素；如果有多个这样的元素，则引发异常。</summary>
      <returns>表示异步操作的任务。任务结果包含满足 <paramref name="predicate" /> 中条件的查询结果的单个元素。</returns>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。</exception>
      <exception cref="T:System.InvalidOperationException">多个元素满足 <paramref name="predicate" /> 中的条件。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Threading.CancellationToken)">
      <summary>异步返回查询的唯一元素；如果该查询结果并非恰好包含一个元素，则引发异常。</summary>
      <returns>表示异步操作的任务。任务结果包含查询结果的单个元素。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">查询结果有多个元素。</exception>
      <exception cref="T:System.InvalidOperationException">查询结果为空。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync">
      <summary>异步返回序列中的唯一元素；如果该序列为空，则返回默认值；如果该序列包含多个元素，此方法将引发异常。</summary>
      <returns>表示异步操作的任务。任务结果包含查询结果的单个元素；如果该序列不包含元素，则任务结果包含 default (<paramref name="TElement" />)。</returns>
      <exception cref="T:System.InvalidOperationException">查询结果有多个元素。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean})">
      <summary>异步返回满足指定条件的查询的唯一元素；如果这类元素不存在，则返回默认值；如果有多个元素满足该条件，此方法将引发异常。</summary>
      <returns>表示异步操作的任务。任务结果包含满足 <paramref name="predicate" /> 中条件的查询结果的单个元素；如果没有找到这样的元素，则任务结果包含 default (<paramref name="TElement" />)。</returns>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">多个元素满足 <paramref name="predicate" /> 中的条件。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>异步返回满足指定条件的查询的唯一元素；如果这类元素不存在，则返回默认值；如果有多个元素满足该条件，此方法将引发异常。</summary>
      <returns>表示异步操作的任务。任务结果包含满足 <paramref name="predicate" /> 中条件的查询结果的单个元素；如果没有找到这样的元素，则任务结果包含 default (<paramref name="TElement" />)。</returns>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">多个元素满足 <paramref name="predicate" /> 中的条件。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Threading.CancellationToken)">
      <summary>异步返回序列中的唯一元素；如果该序列为空，则返回默认值；如果该序列包含多个元素，此方法将引发异常。</summary>
      <returns>表示异步操作的任务。任务结果包含查询结果的单个元素；如果该序列不包含元素，则任务结果包含 default (<paramref name="TElement" />)。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">查询结果有多个元素。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IEnumerator" />，其枚举的对象将针对数据库执行 SQL 查询。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 对象，可用于循环访问元素。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>返回 false。</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>引发一个异常，该异常指示不支持直接绑定到存储查询。</summary>
      <returns>决不返回；总是引发。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>返回 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" />，其枚举的对象将针对数据库执行 SQL 查询。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> 对象，可用于循环访问元素。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>返回 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" />，其枚举的对象将针对数据库执行 SQL 查询。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> 对象，可用于循环访问元素。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync">
      <summary>通过异步枚举从查询创建数组。</summary>
      <returns>表示异步操作的任务。任务结果包含一个数组，该数组包含输入序列的元素。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync(System.Threading.CancellationToken)">
      <summary>通过异步枚举从查询创建数组。</summary>
      <returns>表示异步操作的任务。任务结果包含一个数组，该数组包含输入序列的元素。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0})">
      <summary>通过异步枚举它根据指定的键选择器函数从查询创建 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，后者包含所选的键和值。</returns>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过异步枚举它根据指定的键选择器函数和比较器从查询创建 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，后者包含所选的键和值。</returns>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
      <summary>通过异步枚举它根据指定的键选择器函数和比较器从查询创建 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，后者包含所选的键和值。</returns>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1})">
      <summary>通过异步枚举它根据指定的键选择器函数和元素选择器函数从查询创建 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，后者包含从查询选择的类型 <paramref name="TResult" /> 的值。</returns>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过异步枚举它根据指定的键选择器函数、比较器和元素选择器函数从查询创建 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，后者包含从输入序列选择的类型 <paramref name="TResult" /> 的值。</returns>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
      <summary>通过异步枚举它根据指定的键选择器函数、比较器和元素选择器函数从查询创建 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，后者包含从输入序列选择的类型 <paramref name="TResult" /> 的值。</returns>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <param name="comparer">一个用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Threading.CancellationToken)">
      <summary>通过异步枚举它根据指定的键选择器函数和元素选择器函数从查询创建 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，后者包含从查询选择的类型 <paramref name="TResult" /> 的值。</returns>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Threading.CancellationToken)">
      <summary>通过异步枚举它根据指定的键选择器函数从查询创建 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，后者包含所选的键和值。</returns>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync">
      <summary>通过异步枚举它从查询创建 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.List`1" />，后者包含输入序列的元素。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync(System.Threading.CancellationToken)">
      <summary>通过异步枚举它从查询创建 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>表示异步操作的任务。任务结果包含一个 <see cref="T:System.Collections.Generic.List`1" />，后者包含输入序列的元素。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToString">
      <summary>返回一个包含 SQL 字符串的 <see cref="T:System.String" />，该字符串是在创建查询时设置的。不包括参数。</summary>
      <returns>表示此实例的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>非泛型版本的 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> 类。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
      <summary>返回等效泛型 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> 对象。</summary>
      <returns>等效泛型对象。</returns>
      <typeparam name="TEntity">在其上声明该成员的实体的类型。</typeparam>
      <typeparam name="TProperty">属性的类型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
      <summary>获取或设置导航属性的当前值。当前值为导航属性引用的实体。</summary>
      <returns>当前值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
      <summary>此导航属性所属的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>拥有此导航属性的实体的项。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
      <summary>获取或设置一个值，该值指示是否已从数据库加载该实体。</summary>
      <returns>如果加载了该实体或 IsLoaded 已显式设置为 true，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
      <summary>从数据库加载实体。请注意，如果实体已在上下文中，则不会使用数据库中的值覆盖该实体。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.LoadAsync">
      <summary>从数据库异步加载实体。请注意，如果实体已在上下文中，则不会使用数据库中的值覆盖该实体。</summary>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.LoadAsync(System.Threading.CancellationToken)">
      <summary>从数据库异步加载实体。请注意，如果实体已在上下文中，则不会使用数据库中的值覆盖该实体。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
      <summary>获取属性名称。</summary>
      <returns>属性名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
      <summary>返回将用于从数据库加载此实体的查询。可使用 LINQ 修改返回的查询以便在数据库中执行筛选或操作。</summary>
      <returns>针对实体的查询。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
      <summary>此类的实例从 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 的 Reference 方法返回，并且允许对实体的引用导航属性执行各种操作（如加载）。</summary>
      <typeparam name="TEntity">此属性所属的实体的类型。</typeparam>
      <typeparam name="TProperty">属性的类型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
      <summary>获取或设置导航属性的当前值。当前值为导航属性引用的实体。</summary>
      <returns>当前值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
      <summary>此导航属性所属的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>拥有此导航属性的实体的项。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
      <summary>获取或设置一个值，该值指示是否已从数据库加载该实体。</summary>
      <returns>如果加载了该实体或 IsLoaded 已显式设置为 true，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
      <summary>从数据库加载实体。请注意，如果实体已在上下文中，则不会使用数据库中的值覆盖该实体。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync">
      <summary>从数据库异步加载实体。请注意，如果实体已在上下文中，则不会使用数据库中的值覆盖该实体。</summary>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync(System.Threading.CancellationToken)">
      <summary>从数据库异步加载实体。请注意，如果实体已在上下文中，则不会使用数据库中的值覆盖该实体。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
      <summary>获取属性名称。</summary>
      <returns>属性名称。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>返回由此对象表示的导航属性的非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> 类的新实例。</summary>
      <returns>非泛型版本。</returns>
      <param name="entry">表示导航属性的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
      <summary>返回将用于从数据库加载此实体的查询。可使用 LINQ 修改返回的查询以便在数据库中执行筛选或操作。</summary>
      <returns>针对实体的查询。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
      <summary>表示实体的一个 SQL 查询，该查询从 <see cref="T:System.Data.Entity.DbContext" /> 创建并通过该上下文中的连接来执行。此类的实例是从该实体类型的 <see cref="T:System.Data.Entity.DbSet" /> 实例中获取的。创建此对象时不会执行该查询；只要枚举该查询，该查询就会执行（例如，使用 foreach）。非实体的 SQL 查询是使用 <see cref="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])" /> 创建的。请参见 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> 了解此类的泛型版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.#ctor">
      <summary>从派生类的构造函数中进行调用时，创建一个 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> 实例，它将用作 <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" /> 的测试替身。将由测试替身使用的方法和属性必须由测试替身来实现，除了 AsNoTracking 和 AsStreaming，它们的默认实现是空操作。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
      <summary>返回一个新查询，其中查询的结果将不由关联的 <see cref="T:System.Data.Entity.DbContext" /> 跟踪。</summary>
      <returns>应用了 NoTracking 的新查询。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsStreaming">
      <summary>返回将流式处理结果而非缓存它的新查询。</summary>
      <returns>应用了 AsStreaming 的新查询。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)">
      <summary>确定指定对象是否等于当前实例。</summary>
      <returns>如果指定的对象等于当前实例，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType">
      <summary>获取与查询关联的类型。</summary>
      <returns>与查询关联的类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString">
      <summary>返回一个包含 SQL 字符串的 <see cref="T:System.String" />，该字符串是在创建查询时设置的。不包括参数。</summary>
      <returns>表示此实例的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
      <summary>表示实体的一个 SQL 查询，该查询从 <see cref="T:System.Data.Entity.DbContext" /> 创建并通过该上下文中的连接来执行。此类的实例是从该实体类型的 <see cref="T:System.Data.Entity.DbSet`1" /> 实例中获取的。创建此对象时不会执行该查询；只要枚举该查询，该查询就会执行（例如，使用 foreach）。非实体的 SQL 查询是使用 <see cref="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])" /> 创建的。请参见 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> 了解此类的非泛型版本。</summary>
      <typeparam name="TEntity">查询所返回实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.#ctor">
      <summary>从派生类的构造函数中进行调用时，创建一个 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> 实例，它将用作 <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" /> 的测试替身。将由测试替身使用的方法和属性必须由测试替身来实现，除了 AsNoTracking 和 AsStreaming，它们的默认实现是空操作。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
      <summary>返回一个新查询，其中返回的实体将不会在 <see cref="T:System.Data.Entity.DbContext" /> 中进行缓存。</summary>
      <returns>应用了 NoTracking 的新查询。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsStreaming">
      <summary>返回将流式处理结果而非缓存它的新查询。</summary>
      <returns>应用了 AsStreaming 的新查询。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)">
      <summary>指定此实例是否等于指定对象。</summary>
      <returns>如果此实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode">
      <summary>获取与此实例关联的哈希代码。</summary>
      <returns>与此实例关联的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType">
      <summary>获取与此实例关联的类型。</summary>
      <returns>与此实例关联的类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
      <summary>当预期实体的 SaveChanges 将导致数据库更新而实际上未影响数据库中的任何行时 <see cref="T:System.Data.Entity.DbContext" /> 引发的异常。这通常指示，当前已并发更新数据库，使得应匹配的并发标记实际上并不匹配。请注意为了安全起见，不会序列化此异常引用的状态项，并且在序列化后对状态项的访问将返回 null。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 类的新实例。</summary>
      <param name="message">消息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 类的新实例。</summary>
      <param name="message">消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateException">
      <summary>将更改保存到数据库失败时，由 <see cref="T:System.Data.Entity.DbContext" /> 引发的异常。请注意为了安全起见，不会序列化此异常引用的状态项，并且在序列化后对状态项的访问将返回 null。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 类的新实例。</summary>
      <param name="message">消息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 类的新实例。</summary>
      <param name="message">消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
      <summary>获取表示无法保存到数据库的实体的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 对象。</summary>
      <returns>表示无法保存的实体的项。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy">
      <summary>表示如果失败不重试操作的默认 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute(System.Action)">
      <summary>执行一次指定的操作。</summary>
      <param name="operation">一个表示不返回任何结果的可执行操作的委托。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>执行一次指定的操作并返回结果。</summary>
      <returns>操作的结果。</returns>
      <param name="operation">一个表示返回 <paramref name="TResult" /> 类型的结果的可执行操作的委托。</param>
      <typeparam name="TResult">
        <paramref name="operation" /> 的返回类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>执行一次指定的异步操作，失败时不重试。</summary>
      <returns>如果原始任务成功完成将要运行以完成的任务。</returns>
      <param name="operation">用于返回已启动任务的函数。</param>
      <param name="cancellationToken">用于取消重试操作的取消标记，但是不取消已在执行中或已成功完成的操作。</param>
      <typeparam name="TResult">
        <paramref name="operation" /> 返回的 <see cref="T:System.Threading.Tasks.Task`1" /> 的结果类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>执行一次指定的异步操作，失败时不重试。</summary>
      <returns>如果原始任务成功完成将要运行以完成的任务。</returns>
      <param name="operation">用于返回已启动任务的函数。</param>
      <param name="cancellationToken">用于取消重试操作的取消标记，但是不取消已在执行中或已成功完成的操作。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.RetriesOnFailure">
      <summary>获取 <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" /> 在失败后是否将重试执行。</summary>
      <returns>如果 <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" /> 在失败后将重试执行，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver">
      <summary>表示使用基础提供程序以获取清单标记的 <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver" /> 的默认实现。请注意，为避免多个查询，此实现基于 <see cref="T:System.Data.Common.DbConnection" /> 实例的实际类型、<see cref="P:System.Data.Common.DbConnection.DataSource" /> 属性和 <see cref="P:System.Data.Common.DbConnection.Database" /> 属性使用缓存。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)">
      <summary>返回要用于给定连接的清单标记。</summary>
      <returns>要使用的清单标记。</returns>
      <param name="connection">需要清单标记的连接。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
      <summary>表示用于存储有关数据库中 EDM 的元数据的实体。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.EdmMetadata" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
      <summary>获取或设置元数据实体的 ID，它当前总是为 1。</summary>
      <returns>ID。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
      <summary>获取或设置模型哈希，用于检查自从模型中创建数据库后，模型是否发生了更改。</summary>
      <returns>模型哈希。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
      <summary>尝试为给定上下文获取 Code First 计算的模型哈希。如果未在 Code First 模式中使用上下文，则此方法将返回 null。</summary>
      <returns>哈希字符串。</returns>
      <param name="context">上下文。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
      <summary>包含用于访问由 Code First 创建的 EDMX 格式的实体数据模型的方法。通常，在需要查看 Code First 内部创建的模型时，这些方法将用于调试。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
      <summary>将 Code First 用于给定上下文，然后以 EDMX 形式将生成的实体数据模型写入给定编写器。此方法只能用于使用 Code First 且内部创建模型的上下文实例。此方法不能用于使用 Database First 或 Model First 创建的上下文、使用预先存在的 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 创建的上下文或使用预先存在的 <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> 创建的上下文。</summary>
      <param name="context">上下文。</param>
      <param name="writer">编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
      <summary>将给定的 <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> 表示的实体数据模型以 EDMX 形式写入给定编写器。</summary>
      <param name="model">表示 EDM 的对象。</param>
      <param name="writer">编写器。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey">
      <summary>一个用于解析 <see cref="T:System.Func`1" /> 的键。它包含 ADO.NET 提供程序固定名称和在连接字符串中指定的数据库服务器名称。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" /> 的新实例。</summary>
      <param name="providerInvariantName">ADO.NET 提供程序固定名称，指示此执行策略将用于的 ADO.NET 连接的类型。</param>
      <param name="serverName">将与连接字符串中的服务器名称进行匹配的字符串。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.Equals(System.Object)">
      <summary>确定指定的对象是否等于此键。</summary>
      <returns>如果指定的对象等于此键，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ProviderInvariantName">
      <summary>ADO.NET 提供程序固定名称，指示此执行策略将用于的 ADO.NET 连接的类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ServerName">
      <summary>将与连接字符串中的服务器名称进行匹配的字符串。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable">
      <summary>
        <see cref="T:System.Collections.IEnumerable" /> 接口的异步版本，它允许异步检索元素。此接口用于与实体框架查询交互且不应由自定义类来实现。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator">
      <summary>获取一个枚举器，它可用于异步枚举序列。</summary>
      <returns>用于对序列异步枚举的枚举器。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 接口的异步版本，它允许异步检索可枚举序列的元素。此接口用于与实体框架查询交互且不应由自定义类来实现。</summary>
      <typeparam name="T">要枚举的对象的类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。 有关协变和逆变的详细信息，请参阅。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1.GetAsyncEnumerator">
      <summary>获取一个枚举器，它可用于异步枚举序列。</summary>
      <returns>用于对序列异步枚举的枚举器。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator">
      <summary>
        <see cref="T:System.Collections.IEnumerator" /> 接口的异步版本，它允许异步检索元素。此接口用于与实体框架查询交互且不应由自定义类来实现。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current">
      <summary>获取迭代中的当前元素。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)">
      <summary>将枚举器前移到序列中的下一个元素，异步返回结果。</summary>
      <returns>表示异步操作的任务。如果枚举器成功前移到下一个元素，则任务结果包含 true；如果枚举器已过序列末尾，则包含 false。</returns>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> 接口的异步版本，它允许异步检索元素。此接口用于与实体框架查询交互且不应由自定义类来实现。</summary>
      <typeparam name="T">要枚举的对象的类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。 有关协变和逆变的详细信息，请参阅。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1.Current">
      <summary>获取迭代中的当前元素。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider">
      <summary>定义用于创建和异步执行 <see cref="T:System.Linq.IQueryable" /> 对象所描述的查询的方法。此接口用于与实体框架查询交互且不应由自定义类来实现。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
      <summary>异步执行指定表达式树所表示的强类型查询。</summary>
      <returns>表示异步操作的任务。任务结果包含执行指定查询所生成的值。</returns>
      <param name="expression">表示 LINQ 查询的表达式树。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TResult">执行查询所生成的值的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
      <summary>异步执行指定表达式树所表示的查询。</summary>
      <returns>表示异步操作的任务。任务结果包含执行指定查询所生成的值。</returns>
      <param name="expression">表示 LINQ 查询的表达式树。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
      <summary>此接口的实现用来基于给定的数据库名称创建某个数据库服务器类型的 DbConnection 对象。默认情况下，可在 <see cref="T:System.Data.Entity.Database" /> 类上设置一个实例以便创建所有 DbContext 对象（不具有连接信息或只有数据库名称或连接字符串）以使用特定类型的数据库服务器。提供此接口的两种实现：<see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory" /> 用于创建与速成版等 Microsoft SQL Server 的连接。<see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory" /> 用于创建与 Microsoft SQL Server Compact Edition 的连接。可根据需要添加其他数据库服务器的其他实现。请注意实现应视为是线程安全的或不可变的，因为实现可同时被多个线程访问。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
      <summary>基于给定的数据库名称或连接字符串创建连接。</summary>
      <returns>已初始化的 DbConnection。</returns>
      <param name="nameOrConnectionString">数据库名称或连接字符串。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
      <summary>用于创建派生 <see cref="T:System.Data.Entity.DbContext" /> 实例的工厂。实现此接口可为没有公共默认构造函数的上下文类型启用设计时服务。在设计时，可以创建派生的 <see cref="T:System.Data.Entity.DbContext" /> 实例，以启用特定设计时体验，如模型呈现和 DDL 生成。要为没有公共默认构造函数的派生 <see cref="T:System.Data.Entity.DbContext" /> 启用设计时实例化，请实现此接口。设计时服务将自动发现与派生 <see cref="T:System.Data.Entity.DbContext" /> 类型位于同一程序集中的此接口的实现。</summary>
      <typeparam name="TContext">上下文的类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。 有关协变和逆变的详细信息，请参阅。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
      <summary>创建派生 <see cref="T:System.Data.Entity.DbContext" /> 类型的新实例。</summary>
      <returns>TContext 的一个实例</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy">
      <summary>用于对数据库执行命令或查询的策略，可能具有在失败时进行重试的逻辑。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute(System.Action)">
      <summary>执行指定的操作。</summary>
      <param name="operation">一个表示不返回任何结果的可执行操作的委托。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>执行指定的操作并返回结果。</summary>
      <returns>操作的结果。</returns>
      <param name="operation">一个表示返回 <paramref name="TResult" /> 类型的结果的可执行操作的委托。</param>
      <typeparam name="TResult">
        <paramref name="operation" /> 的返回类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>执行指定的异步操作并返回结果。</summary>
      <returns>如果原始任务成功完成（第一次执行或在瞬态失败后重试）将要运行以完成的任务。如果任务失败且发生非瞬态错误或达到重试限制值，则返回的任务将出错且必须显示异常。</returns>
      <param name="operation">用于返回 <paramref name="TResult" /> 类型的已启动任务的函数。</param>
      <param name="cancellationToken">用于取消重试操作的取消标记，但是不取消已在执行中或已成功完成的操作。</param>
      <typeparam name="TResult">
        <paramref name="operation" /> 返回的 <see cref="T:System.Threading.Tasks.Task`1" /> 的结果类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>执行指定的异步操作。</summary>
      <returns>如果原始任务成功完成（第一次执行或在瞬态失败后重试）将要运行以完成的任务。如果任务失败且发生非瞬态错误或达到重试限制值，则返回的任务将出错且必须显示异常。</returns>
      <param name="operation">用于返回已启动任务的函数。</param>
      <param name="cancellationToken">用于取消重试操作的取消标记，但是不取消已在执行中或已成功完成的操作。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbExecutionStrategy.RetriesOnFailure">
      <summary>指示此 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> 在失败后是否可能重试执行。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKey">
      <summary>表示一个键值，它唯一地标识已加载到内存中的实体框架模型。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.Equals(System.Object)">
      <summary>确定当前缓存的模型键是否等于指定的缓存模型键。</summary>
      <returns>如果当前缓存的模型键等于指定的缓存模型键，则为 true；否则为 false。</returns>
      <param name="other">要与当前缓存的模型键比较的缓存模型键。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.GetHashCode">
      <summary>返回此缓存模型键的哈希函数。</summary>
      <returns>此缓存模型键的哈希函数。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider">
      <summary>对您的上下文实现此接口，使用自定义逻辑来计算在缓存中查找已创建模型时所用的键。此接口允许您具有可与同一 AppDomain 中不同模型一起使用的单个上下文类型，或是具有使用同一模型的多个上下文类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider.CacheKey">
      <summary>获取与提供程序关联的缓存键。</summary>
      <returns>与提供程序关联的缓存键。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver">
      <summary>用于从给定的 <see cref="T:System.Data.Common.DbConnection" /> 获取正确的 <see cref="T:System.Data.Common.DbProviderFactory" /> 的服务。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver.ResolveProviderFactory(System.Data.Common.DbConnection)">
      <summary>返回给定连接的 <see cref="T:System.Data.Common.DbProviderFactory" />。</summary>
      <returns>连接的提供程序工厂。</returns>
      <param name="connection">连接。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IManifestTokenResolver">
      <summary>用于获取给定连接的提供程序清单标记的服务。默认情况下使用 <see cref="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver" /> 类并利用基础提供程序来获取通常涉及打开连接的标记。通过将 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 添加到可能使用连接中的任何信息来返回标记的 <see cref="T:System.Data.Entity.DbConfiguration" />，可以改用其他实现。例如，如果已知连接指向 SQL Server 2008 数据库，则可以返回“2008”而无需打开连接。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)">
      <summary>返回要用于给定连接的清单标记。</summary>
      <returns>要使用的清单标记。</returns>
      <param name="connection">需要清单标记的连接。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer">
      <summary>实现此接口以允许由 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> 实例表示的自定义注释序列化为 EDMX XML 以及从 EDMX XML 进行序列化。通常，使用 <see cref="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})" /> 方法设置序列化程序实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Deserialize(System.String,System.String)">
      <summary>将给定字符串反序列化为预期的注释值。</summary>
      <returns>反序列化的注释值。</returns>
      <param name="name">要反序列化的注释的名称。</param>
      <param name="value">要反序列化的字符串。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Serialize(System.String,System.Object)">
      <summary>将给定注释值序列化为要存储在 EDMX XML 中的字符串。</summary>
      <returns>序列化值。</returns>
      <param name="name">要序列化的注释的名称。</param>
      <param name="value">要序列化的值。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
      <summary>此 <see cref="T:System.Data.Entity.DbModelBuilder" /> 约定将导致 DbModelBuilder 在生成模型时包含有关该模型的元数据。当 <see cref="T:System.Data.Entity.DbContext" /> 按约定创建模型时，它会将此约定添加到由 DbModelBuilder 使用的项的列表中。如果使用 DbContext 创建数据库，则会导致将模型元数据写入数据库中。然后，可使用它来快速检查自上次对数据库使用模型后，模型是否发生了更改。可通过重写派生 DbContext 类的 OnModelCreating 方法，从 <see cref="T:System.Data.Entity.DbModelBuilder" /> 约定中移除此约定。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IncludeMetadataConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
      <summary>由可提供 <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> 实例的对象实现的接口。<see cref="T:System.Data.Entity.DbContext" /> 类实现此接口以提供对基础 ObjectContext 的访问。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
      <summary>获取对象上下文。</summary>
      <returns>对象上下文。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IProviderInvariantName">
      <summary>从 <see cref="T:System.Data.Common.DbProviderFactory" /> 解析提供程序固定名称时由 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 和 <see cref="T:System.Data.Entity.DbConfiguration" /> 使用。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IProviderInvariantName.Name">
      <summary>获取提供程序的名称。</summary>
      <returns>提供程序的名称。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
      <summary>此类的实例用来基于给定的数据库名称或连接字符串创建 SQL Server LocalDb 的 DbConnection 对象。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
      <summary>为给定版本的 LocalDb 创建连接工厂的新实例。对于 SQL Server 2012 LocalDb，请使用“v11.0”。对于 SQL Server 2014 及更高版本 LocalDb，请使用“mssqllocaldb”。</summary>
      <param name="localDbVersion">要使用的 LocalDb 版本。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
      <summary>为给定版本的 LocalDb 创建连接工厂的新实例。对于 SQL Server 2012 LocalDb，请使用“v11.0”。对于 SQL Server 2014 及更高版本 LocalDb，请使用“mssqllocaldb”。</summary>
      <param name="localDbVersion">要使用的 LocalDb 版本。</param>
      <param name="baseConnectionString">用于“初始目录”、“数据源”和“AttachDbFilename”之外的数据库选项的连接字符串。调用 CreateConnection 时，将基于数据库名称在此字符串前添加“初始目录”和“AttachDbFilename”。将基于 LocalDbVersion 参数设置“数据源”。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
      <summary>用于“初始目录”、“数据源”和“AttachDbFilename”之外的数据库选项的连接字符串。调用 CreateConnection 时，将基于数据库名称在此字符串前添加“初始目录”和“AttachDbFilename”。将基于 LocalDbVersion 参数设置“数据源”。默认值为“Integrated Security=True;”。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
      <summary>基于给定的数据库名称或连接字符串为 SQL Server LocalDb 创建连接。如果给定的字符串包含“=”字符，则将其视为一个完整的连接字符串，否则仅将其视为数据库名称。</summary>
      <returns>已初始化的 DbConnection。</returns>
      <param name="nameOrConnectionString">数据库名称或连接字符串。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
      <summary>此 <see cref="T:System.Data.Entity.DbModelBuilder" /> 约定将派生的 <see cref="T:System.Data.Entity.DbContext" /> 类的名称用作由 Code First 生成的概念模型的容器。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ModelContainerConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将此约定应用到给定的模型。</summary>
      <param name="item">要将约定应用到的容器。</param>
      <param name="model">模型。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
      <summary>此 <see cref="T:System.Data.Entity.DbModelBuilder" /> 约定将派生的 <see cref="T:System.Data.Entity.DbContext" /> 类的命名空间用作由 Code First 生成的概念模型的命名空间。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer">
      <summary>使用引用相等性比较对象。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.Default">
      <summary>获取默认实例。</summary>
      <returns>默认实例。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{T}#Equals(System.Object,System.Object)">
      <summary>确定指定对象实例是否相等。</summary>
      <returns>如果对象相等，则为 true；否则为 false。</returns>
      <param name="x">第一个要比较的对象。</param>
      <param name="y">第二个要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{T}#GetHashCode(System.Object)">
      <summary>获取指定对象的哈希代码。</summary>
      <returns>指定对象的哈希代码。</returns>
      <param name="obj">对象。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
      <summary>此类的实例用于内部创建 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 的常量表达式，这些表达式将插入表达式树中以替换对 <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> 和 <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> 的引用。</summary>
      <typeparam name="TElement">元素的类型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
      <summary>LINQ 表达式树中应有的公共属性。</summary>
      <returns>查询。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">
      <summary>当操作重试了配置的次数后再次失败时引发的异常。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor">
      <summary>使用无错误消息初始化 <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
      <summary>此类的实例用来基于给定的数据库名称或连接字符串创建 SQL Server Compact Edition 的 DbConnection 对象。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
      <summary>使用空的（默认）DatabaseDirectory 和 BaseConnectionString 属性创建新的连接工厂。</summary>
      <param name="providerInvariantName">应使用指定 SQL Server Compact Edition 版本的提供程序固定名称。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
      <summary>使用给定的 DatabaseDirectory 和 BaseConnectionString 属性创建新的连接工厂。</summary>
      <param name="providerInvariantName">应使用指定 SQL Server Compact Edition 版本的提供程序固定名称。</param>
      <param name="databaseDirectory">用于添加到数据库名称前面的路径，SQL Server Compact Edition 在创建或读取数据库文件时将使用它来构成文件名。空字符串意味着 SQL Server Compact Edition 将其默认位置用作数据库文件位置。</param>
      <param name="baseConnectionString">要用于“数据源”之外的数据库的选项的连接字符串。在调用 CreateConnection 时，将基于数据库名称在此字符串前预置数据源。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
      <summary>要用于“数据源”之外的数据库的选项的连接字符串。在调用 CreateConnection 时，将基于数据库名称在此字符串前预置数据源。默认值为空字符串，即表示不使用任何其他选项。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
      <summary>基于给定的数据库名称或连接字符串为 SQL Server Compact Edition 创建连接。如果给定的字符串包含“=”字符，则将其视为一个完整的连接字符串，否则仅将其视为数据库名称。</summary>
      <returns>已初始化的 DbConnection。</returns>
      <param name="nameOrConnectionString">数据库名称或连接字符串。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
      <summary>用于添加到数据库名称前面的路径，SQL Server Compact Edition 在创建或读取数据库文件时将使用它来构成文件名。默认值为“|DataDirectory|”，即表示文件将放置在指定的数据目录中。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
      <summary>应使用指定 SQL Server Compact Edition 版本的提供程序固定名称。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
      <summary>此类的实例用来基于给定的数据库名称或连接字符串创建 SQL Server 的 DbConnection 对象。默认情况下，将建立与“.\SQLEXPRESS”的连接。在构造工厂实例时，可通过更改基础连接字符串来更改此设置。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
      <summary>使用默认的 BaseConnectionString 属性“Data Source=\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True;”创建新的连接工厂。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
      <summary>使用给定的 BaseConnectionString 属性创建新的连接工厂。</summary>
      <param name="baseConnectionString">要用于“初始目录”之外的数据库的选项的连接字符串。在调用 CreateConnection 时，将基于数据库名称在此字符串前预置“初始目录”。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
      <summary>要用于“初始目录”之外的数据库的选项的连接字符串。在调用 CreateConnection 时，将基于数据库名称在此字符串前预置“初始目录”。默认值为“Data Source=.\SQLEXPRESS; Integrated Security=True;”。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
      <summary>基于给定的数据库名称或连接字符串为 SQL Server 创建连接。如果给定的字符串包含“=”字符，则将其视为一个完整的连接字符串，否则仅将其视为数据库名称。</summary>
      <returns>已初始化的 DbConnection。</returns>
      <param name="nameOrConnectionString">数据库名称或连接字符串。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
      <summary>此特性可应用于整个派生的 <see cref="T:System.Data.Entity.DbContext" /> 类或该类上的单个 <see cref="T:System.Data.Entity.DbSet`1" /> 或 <see cref="T:System.Data.Entity.IDbSet`1" /> 属性。应用此特性后，任何发现的 <see cref="T:System.Data.Entity.DbSet`1" /> 或 <see cref="T:System.Data.Entity.IDbSet`1" /> 属性仍将包含在模型中，但将不再自动进行初始化。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TableExistenceChecker">
      <summary>由实体框架提供程序实现，用于检查给定的数据库中是否存在表。当确定是否将现有数据库作为空库处理以便应创建表时，数据库初始化程序使用该类。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.AnyModelTableExistsInDatabase(System.Data.Entity.Core.Objects.ObjectContext,System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntitySet},System.String)">
      <summary>在派生类中重写时，检查给定的表在给定连接的数据库中存在的位置。</summary>
      <returns>如果任意模型表或 EdmMetadata 表存在，则为 true。</returns>
      <param name="context">正在执行表检查的上下文，通常用于获取合适的 <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" />。</param>
      <param name="connection">到数据库的一个连接。可能打开或关闭；如果打开，应再次关闭它。不释放。</param>
      <param name="modelTables">要检查是否存在的表。</param>
      <param name="edmMetadataContextTableName">要检查是否存在的 EdmMetadata 表的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.GetTableName(System.Data.Entity.Core.Metadata.Edm.EntitySet)">
      <summary>要获取给定 s 空间 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 的表名称的帮助器方法。</summary>
      <returns>表名称。</returns>
      <param name="modelTable">表的 s 空间实体集。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionContext">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> 使用此类向数据库中写入和从中读取事务跟踪信息。要自定义事务表的定义，您可以从此类派生并重写 <see cref="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)" />。可以使用 <see cref="T:System.Data.Entity.DbConfiguration" /> 注册派生类。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionContext.#ctor(System.Data.Common.DbConnection)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.TransactionContext" /> 类的新实例。</summary>
      <param name="existingConnection">将为其记录事务的上下文所使用的连接。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>初始化派生上下文的模型后调用此方法。</summary>
      <param name="modelBuilder">定义要创建的上下文的模型的生成器。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionContext.Transactions">
      <summary>获取或设置可用于读取和写入 <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" /> 实例的 <see cref="T:System.Data.Entity.DbSet`1" />。</summary>
      <returns>可用于读取和写入 <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" /> 实例的 <see cref="T:System.Data.Entity.DbSet`1" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionHandler">
      <summary>表示处理事务操作的侦听器的基类。可使用 <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})" /> 或 <see cref="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)" /> 注册派生类。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>可在派生类中实现。</summary>
      <param name="connection">开始事务的连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>可在派生类中实现。</summary>
      <param name="connection">开始事务的连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BuildDatabaseInitializationScript">
      <summary>在派生类中实现后，返回脚本来为此事务处理程序准备数据库。</summary>
      <returns>用于为此事务处理程序更改数据库架构的脚本。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>可在派生类中实现。</summary>
      <param name="connection">已关闭的连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>可在派生类中实现。</summary>
      <param name="connection">要关闭的连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>可在派生类中实现。</summary>
      <param name="transaction">已提交的事务。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>可在派生类中实现。</summary>
      <param name="transaction">要提交的事务。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.Connection">
      <summary>获取将对其处理事务操作的连接。</summary>
      <returns>将为其处理事务操作的 <see cref="T:System.Data.Common.DbConnection" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
      <summary>可在派生类中实现。</summary>
      <param name="transaction">事务。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
      <summary>可在派生类中实现。</summary>
      <param name="transaction">事务。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>可在派生类中实现。</summary>
      <param name="connection">连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>可在派生类中实现。</summary>
      <param name="connection">连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
      <summary>可在派生类中实现。</summary>
      <param name="connection">连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
      <summary>可在派生类中实现。</summary>
      <param name="connection">连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
      <summary>可在派生类中实现。</summary>
      <param name="connection">连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
      <summary>可在派生类中实现。</summary>
      <param name="connection">连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>可在派生类中实现。</summary>
      <param name="connection">连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>可在派生类中实现。</summary>
      <param name="connection">连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>可在派生类中实现。</summary>
      <param name="connection">连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>可在派生类中实现。</summary>
      <param name="connection">连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext">
      <summary>获取将对其处理事务操作的连接。</summary>
      <returns>将为其处理事务操作的 <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext" />。可以为 null。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose">
      <summary>释放此事务处理程序占用的资源。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose(System.Boolean)">
      <summary>释放此事务处理程序占用的资源。</summary>
      <param name="disposing">如果为 true，则同时释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>可在派生类中实现。</summary>
      <param name="connection">已释放的连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>可在派生类中实现。</summary>
      <param name="transaction">已释放的事务。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>可在派生类中实现。</summary>
      <param name="connection">要释放的连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>可在派生类中实现。</summary>
      <param name="transaction">要释放的事务。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
      <summary>可在派生类中实现。</summary>
      <param name="connection">连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
      <summary>可在派生类中实现。</summary>
      <param name="connection">连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>使用指定的上下文初始化此实例。</summary>
      <param name="context">将为其处理事务操作的上下文。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)">
      <summary>使用指定的上下文初始化此实例。</summary>
      <param name="context">将为其处理事务操作的上下文。</param>
      <param name="connection">用于初始化的连接。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.IsDisposed">
      <summary>获取或设置一个值，以指示是否释放了此事务处理程序。</summary>
      <returns>如果释放此事务处理程序，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
      <summary>可在派生类中实现。</summary>
      <param name="transaction">事务。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
      <summary>可在派生类中实现。</summary>
      <param name="transaction">事务。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.MatchesParentContext(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
      <summary>检查提供的侦听上下文是否包含目标上下文，或提供的连接与目标上下文使用的连接相同。</summary>
      <returns>如果提供的侦听上下文包含目标上下文或者在提供的侦听上下文不包含任何上下文时提供的连接与目标上下文使用的连接相同，则为 true；否则为 false。</returns>
      <param name="connection">连接。</param>
      <param name="interceptionContext">侦听上下文。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext">
      <summary>获取将对其处理事务操作的连接。</summary>
      <returns>将为其处理事务操作的 <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>可在派生类中实现。</summary>
      <param name="connection">已打开的连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>可在派生类中实现。</summary>
      <param name="connection">要打开的连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>可在派生类中实现。</summary>
      <param name="transaction">已回滚的事务。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>可在派生类中实现。</summary>
      <param name="transaction">要回滚的事务。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>可在派生类中实现。</summary>
      <param name="connection">连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>可在派生类中实现。</summary>
      <param name="connection">连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
      <summary>可在派生类中实现。</summary>
      <param name="connection">连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
      <summary>可在派生类中实现。</summary>
      <param name="connection">连接。</param>
      <param name="interceptionContext">与调用关联的上下文信息。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionRow">
      <summary>表示一个事务。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionRow.CreationTime">
      <summary>获取或设置事务开始的当地时间。</summary>
      <returns>此事务开始的本地时间。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.Equals(System.Object)">
      <summary>指示指定对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionRow.Id">
      <summary>获取或设置分配给事务对象的唯一 ID。</summary>
      <returns>分配给事务对象的唯一 ID。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
      <summary>当上下文从 Database First 或 Model First 模式中的 <see cref="T:System.Data.Entity.DbContext" /> 模板生成，并在 Code First 模式中使用时引发的异常。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 类的新实例。</summary>
      <param name="info">保存序列化对象数据的对象。</param>
      <param name="context">有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 类的新实例。</summary>
      <param name="message">消息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 类的新实例。</summary>
      <param name="message">消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator">
      <summary>表示创建允许在为迁移搭建基架时为自定义注释生成代码的服务。应在 <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" /> 中设置的派生类。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.Generate(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>为给定注释值生成代码。</summary>
      <param name="annotationName">要为其生成值的注释的名称。</param>
      <param name="annotation">批注值。</param>
      <param name="writer">应向其中写入生成的代码的编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.GetExtraNamespaces(System.Collections.Generic.IEnumerable{System.String})">
      <summary>返回应包括在为已搭建基架的迁移生成的代码中的其他命名空间。默认实现返回空枚举。</summary>
      <returns>要包括的其他命名空间的列表。</returns>
      <param name="annotationNames">要包括在生成的代码中的注释的名称。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationValues">
      <summary>表示已搭建基架的或已手工编码的 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 中的一对注释值。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.#ctor(System.Object,System.Object)">
      <summary>创建一对新注释值。</summary>
      <param name="oldValue">注释的旧值，如果刚创建注释，则此值可能为 null。</param>
      <param name="newValue">注释的新值，如果已删除注释，则此值可能为 null。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.Equals(System.Object)">
      <summary>确定指定对象是否等于此实例对象。</summary>
      <returns>如果指定对象等于此实例对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.GetHashCode">
      <summary>检索哈希代码。</summary>
      <returns>哈希代码。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.NewValue">
      <summary>获取注释的新值，如果已删除注释，则此值可能为 null。</summary>
      <returns>注释的新值，如果已删除注释，则此值可能为 null。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.OldValue">
      <summary>获取注释的旧值，如果刚创建注释，则此值可能为 null。</summary>
      <returns>注释的旧值，如果刚创建注释，则此值可能为 null。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Equality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
      <summary>如果两个注释对包含相同值，则返回 true；否则返回 false。</summary>
      <returns>如果两对包含相同值，则为 true。</returns>
      <param name="left">一对注释值。</param>
      <param name="right">一对注释值。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Inequality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
      <summary>如果两个注释对包含不同的值，则返回 true；否则返回 false。</summary>
      <returns>如果对包含不同值，则为 true。</returns>
      <param name="left">一对注释值。</param>
      <param name="right">一对注释值。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult">
      <summary>由 <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)" /> 和相关方法返回，以指示某个对象是否与另一个对象不冲突，以便这两个对象可以组合成一个对象。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.#ctor(System.Boolean,System.String)">
      <summary>创建一个新的 <see cref="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult" /> 实例。</summary>
      <param name="isCompatible">指示这两个测试对象是否兼容。</param>
      <param name="errorMessage">指示对象如何不兼容的错误消息。如果 isCompatible 为 true，则应为 null。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.ErrorMessage">
      <summary>如果 <see cref="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible" /> 为 true，则返回指示两个测试对象如何不兼容的错误消息。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible">
      <summary>如果两个测试对象兼容，则为 true；否则为 false。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.op_Implicit(System.Data.Entity.Infrastructure.Annotations.CompatibilityResult)~System.Boolean">
      <summary>隐式转换为布尔值以允许在检查中直接使用结果对象。</summary>
      <returns>如果结果兼容，则为 true；否则为 false。</returns>
      <param name="result">要转换的对象。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation">
      <summary>用作自定义注释的类型可以实现此接口，以指示通过将多个注释合并为一个注释，可以尝试在给定表或列上使用多个同名注释。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)">
      <summary>如果此注释与给定注释不冲突，则返回 true，以便可以使用 <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)" /> 方法将二者组合在一起。</summary>
      <returns>指示此注释是否与另一个注释兼容的 CompatibilityResult。</returns>
      <param name="other">要比较的注释。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)">
      <summary>将此注释与给定注释合并，并返回新合并的注释。仅当 <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)" /> 返回 true 时，此方法才会成功。</summary>
      <returns>新合并的注释。</returns>
      <param name="other">要与此注释合并的注释。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation">
      <summary>表示用于表示实体框架模型中数据库索引的自定义注释。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.Schema.IndexAttribute})">
      <summary>使用索引的给定集合初始化 <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> 类的新实例。</summary>
      <param name="indexAttributes">表示一个或多个索引的索引属性。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
      <summary>使用索引的给定集合初始化 <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> 类的新实例。</summary>
      <param name="indexAttribute">表示索引的索引属性。</param>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.AnnotationName">
      <summary>在将此注释存储在实体框架元数据中或序列化到 SSDL/EDMX 文件中时使用的名称。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.Indexes">
      <summary>获取此注释表示的索引。</summary>
      <returns>此注释表示的索引。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.IsCompatibleWith(System.Object)">
      <summary>如果此注释与给定注释不冲突，则返回 true，以便可以使用 <see cref="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)" /> 方法将二者组合在一起。</summary>
      <returns>指示此注释是否与另一个注释兼容的 CompatibilityResult。</returns>
      <param name="other">要比较的注释。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)">
      <summary>将此注释与给定注释合并，并返回包含已合并索引的新注释。</summary>
      <returns>具有所合并的两个注释的索引的新注释。</returns>
      <param name="other">要与此注释合并的注释。</param>
      <exception cref="T:System.InvalidOperationException">其他注释包含与此注释中的索引不兼容的索引。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.ToString">
      <summary>返回 <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> 对象的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer">
      <summary>此类用于序列化和反序列化 <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> 对象，以便它们可以存储在 EDMX 形式的实体框架模型中。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Deserialize(System.String,System.String)">
      <summary>将给定字符串反序列化为 <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> 对象。</summary>
      <returns>反序列化的注释值。</returns>
      <param name="name">要反序列化的注释的名称。</param>
      <param name="value">要反序列化的字符串。</param>
      <exception cref="T:System.FormatException">如果在读取序列化值时出错。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Serialize(System.String,System.Object)">
      <summary>将给定 <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> 序列化为要存储在 EDMX XML 中的字符串。</summary>
      <returns>序列化值。</returns>
      <param name="name">要序列化的注释的名称。</param>
      <param name="value">要序列化的、必须是 IndexAnnotation 对象的值。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs">
      <summary>表示传递到 <see cref="E:System.Data.Entity.DbConfiguration.Loaded" /> 事件处理程序的时间参数。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>将 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 实例添加到用于解决实体框架所需依赖项的解决程序的责任链中。与 AddDependencyResolver 方法不同，此方法将解析程序放置于责任链的底部，这样，该解析程序将仅用于解析任何其他解析程序无法解析的依赖项。</summary>
      <param name="resolver">要添加的解析程序。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Boolean)">
      <summary>将 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 实例添加到用于解决实体框架所需依赖项的解决程序的责任链中。</summary>
      <param name="resolver">要添加的解析程序。</param>
      <param name="overrideConfigFile">如果为 true，则添加的解析程序将优先于配置文件中的设置。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.DependencyResolver">
      <summary>获取将要锁定的 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 的快照。对此对象使用 GetService 方法可获取已注册的服务。</summary>
      <returns>将要锁定的 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 的快照。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.Equals(System.Object)">
      <summary>指定此实例是否等于指定对象。</summary>
      <returns>如果此实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetHashCode">
      <summary>获取与此实例关联的哈希代码。</summary>
      <returns>与此实例关联的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetType">
      <summary>获取此实例的类型。</summary>
      <returns>此实例的类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ReplaceService``1(System.Func{``0,System.Object,``0})">
      <summary>将一个包装解析程序添加到将要锁定的配置中。包装解析程序是这样一种解析程序：它截取解析程序链已返回的服务并且用相同类型的另一个服务包装或替换它。</summary>
      <param name="serviceInterceptor">获取未包装的服务和键并返回已包装或替换的服务的委托。</param>
      <typeparam name="TService">要包装或替换的服务的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ToString">
      <summary>返回 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs" /> 的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs" /> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions">
      <summary>用来调用使用泛型类型参数和/或不带名称的 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> 方法的扩展方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>调用 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" />，将该方法的泛型类型作为类型参数传递并为名称参数传递 null。</summary>
      <returns>解析的依赖项；如果解析程序无法解析它，则为 null。</returns>
      <param name="resolver">要使用的解析程序。</param>
      <typeparam name="T">要解析的协定类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
      <summary>调用 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" />，将该方法的泛型类型和给定名称作为参数传递。</summary>
      <returns>解析的依赖项；如果解析程序无法解析它，则为 null。</returns>
      <param name="resolver">要使用的解析程序。</param>
      <param name="key">要解析的依赖项的键。</param>
      <typeparam name="T">要解析的协定类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
      <summary>调用 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" />，以传递给定类型参数并对名称参数使用 null。</summary>
      <returns>解析的依赖项；如果解析程序无法解析它，则为 null。</returns>
      <param name="resolver">要使用的解析程序。</param>
      <param name="type">要解析的协定类型。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>调用 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" />，将该方法的泛型类型作为类型参数传递并为名称参数传递 null。</summary>
      <returns>所有已解析的依赖项，如果没有解析任何服务，则为 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="resolver">要使用的解析程序。</param>
      <typeparam name="T">要解析的协定类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
      <summary>调用 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" />，将该方法的泛型类型和给定名称作为参数传递。</summary>
      <returns>所有已解析的依赖项，如果没有解析任何服务，则为 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="resolver">要使用的解析程序。</param>
      <param name="key">要解析的依赖项的键。</param>
      <typeparam name="T">要解析的协定类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
      <summary>调用 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" />，以传递给定类型参数并对名称参数使用 null。</summary>
      <returns>所有已解析的依赖项，如果没有解析任何服务，则为 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="resolver">要使用的解析程序。</param>
      <param name="type">要解析的协定类型。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1">
      <summary>用于解析 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> 工厂的 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 实现。</summary>
      <typeparam name="T">解析的执行策略的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.#ctor(System.String,System.String,System.Func{`0})">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1" /> 的新实例。</summary>
      <param name="providerInvariantName">ADO.NET 提供程序固定名称，指示此执行策略将用于的 ADO.NET 连接的类型。</param>
      <param name="serverName">将与连接字符串中的服务器名称进行匹配的字符串。null 将匹配任意内容。</param>
      <param name="getExecutionStrategy">返回执行策略的新实例的函数。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetService(System.Type,System.Object)">
      <summary>如果给定类型为 <see cref="T:System.Func`1" />，则此解析程序将尝试返回要使用的服务，否则它将返回 null。在给定类型为 Func{IExecutionStrategy} 时，键应该是 <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />。</summary>
      <returns>
        <see cref="T:System.Func`1" /> 或 null。</returns>
      <param name="type">要解析的服务类型。</param>
      <param name="key">用于确定要返回的服务的键。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetServices(System.Type,System.Object)">
      <summary>如果给定类型为 <see cref="T:System.Func`1" />，则此解析程序将尝试返回要使用的服务，否则它将返回空枚举。在给定类型为 Func{IExecutionStrategy} 时，键应该是 <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />。</summary>
      <returns>可枚举的 <see cref="T:System.Func`1" /> 或空枚举。</returns>
      <param name="type">要解析的服务类型。</param>
      <param name="key">用于确定要返回的服务的键。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver">
      <summary>此接口由可以解析依赖项（直接解析或通过使用外部容器进行解析）的任何对象实现。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)">
      <summary>尝试为给定的协定类型和可选的给定键解析依赖项。如果解析程序无法解析依赖项，则它必须返回 null 并且不引发。这允许解析程序用于责任链模式中，以便可以请求多个解析程序解析某一依赖项，直到其中一个解析程序最终解析了该依赖项。</summary>
      <returns>解析的依赖项，它必须是给定协定类型的实例；如果无法解析该依赖项，则为 null。</returns>
      <param name="type">定义要解析的依赖项的接口或抽象基类。返回的对象应是此类型的实例。</param>
      <param name="key">或者为要解析的依赖项的键。对于并非按键进行区分的依赖项，可以是 null。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)">
      <summary>尝试为给定协定类型和可选的给定键解析依赖项。如果解析程序无法解析依赖项，则它必须返回空枚举并且不引发。此方法与 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> 不同，因为它返回给定类型和键组合的所有注册服务。</summary>
      <returns>解析依赖项的所有服务，它们必须是给定协定类型的实例，如果无法解析依赖项，则为空枚举。</returns>
      <param name="type">定义要解析的依赖项的接口或抽象基类。每个返回的对象应是此类型的实例。</param>
      <param name="key">或者为要解析的依赖项的键。对于并非按键进行区分的依赖项，可以是 null。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1">
      <summary>实现 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 以便解析某一依赖项，使其可以始终返回相同的实例。</summary>
      <typeparam name="T">定义将解析的依赖项的协定的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0)">
      <summary>构造一个新的解析程序，该解析程序将返回协定类型的给定实例，而与传递给 Get 方法的键无关。</summary>
      <param name="singletonInstance">要返回的实例。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Func{System.Object,System.Boolean})">
      <summary>构造一个新解析程序，如果给定键与基于给定谓词传递给 Get 方法的键匹配，该解析程序将返回协定类型的给定实例。</summary>
      <param name="singletonInstance">要返回的实例。</param>
      <param name="keyPredicate">采用键对象并在当且仅当它匹配时才返回 true 的谓词。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Object)">
      <summary>构造一个新的解析程序，如果给定键完全匹配传递给 Get 方法的键，该解析程序将返回协定类型的给定实例。</summary>
      <param name="singletonInstance">要返回的实例。</param>
      <param name="key">或者为要解析的依赖项的键。对于并非按键进行区分的依赖项，可以是 null。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetService(System.Type,System.Object)">
      <summary>尝试为给定的协定类型和可选的给定键解析依赖项。如果解析程序无法解析依赖项，则它必须返回 null 并且不引发。这允许解析程序用于责任链模式中，以便可以请求多个解析程序解析某一依赖项，直到其中一个解析程序最终解析了该依赖项。</summary>
      <returns>解析的依赖项，它必须是给定协定类型的实例；如果无法解析该依赖项，则为 null。</returns>
      <param name="type">定义要解析的依赖项的接口或抽象基类。返回的对象应是此类型的实例。</param>
      <param name="key">或者为要解析的依赖项的键。对于并非按键进行区分的依赖项，可以是 null。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetServices(System.Type,System.Object)">
      <summary>尝试为给定协定类型和可选的给定键解析依赖项。如果解析程序无法解析依赖项，则它必须返回空枚举并且不引发。</summary>
      <returns>解析依赖项的所有服务，它们必须是给定协定类型的实例，如果无法解析依赖项，则为空枚举。</returns>
      <param name="type">定义要解析的依赖项的接口或抽象基类。每个返回的对象应是此类型的实例。</param>
      <param name="key">或者为要解析的依赖项的键。对于并非按键进行区分的依赖项，可以是 null。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver">
      <summary>表示用于解析 <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> 工厂的 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 实现。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.#ctor(System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String,System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver" /> 类的新实例。</summary>
      <param name="transactionHandlerFactory">一个返回事务处理程序的新实例的函数。</param>
      <param name="providerInvariantName">ADO.NET 提供程序固定名称，指示将使用事务处理程序的 ADO.NET 连接的类型。null 将匹配任意内容。</param>
      <param name="serverName">将与连接字符串中的服务器名称进行匹配的字符串。null 将匹配任意内容。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetHashCode">
      <summary>检索对象实例的哈希代码。</summary>
      <returns>对象实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetService(System.Type,System.Object)">
      <summary>如果给定类型为 <see cref="T:System.Func`1" />，则此方法将尝试返回要使用的服务，否则它将返回 null。在给定类型为 <see cref="T:System.Func`1" /> 时，键应该是 <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />。</summary>
      <returns>
        <see cref="T:System.Func`1" /> 或 null。</returns>
      <param name="type">要解析的服务类型。</param>
      <param name="key">用于确定要返回的服务的键。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetServices(System.Type,System.Object)">
      <summary>如果给定类型为 <see cref="T:System.Func`1" />，则此解析程序将尝试返回要使用的服务，否则它将返回空枚举。在给定类型为 <see cref="T:System.Func`1" /> 时，键应该是 <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />。</summary>
      <returns>可枚举的 <see cref="T:System.Func`1" /> 或空枚举。</returns>
      <param name="type">要解析的服务类型。</param>
      <param name="key">用于确定要返回的服务的键。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Design.AppConfigReader">
      <summary>提供用于从 App.config 或 Web.config 文件读取的实用工具方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Design.AppConfigReader.#ctor(System.Configuration.Configuration)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.Design.AppConfigReader" /> 的新实例。</summary>
      <param name="configuration">要从中读取的配置。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Design.AppConfigReader.GetProviderServices(System.String)">
      <summary>从配置获取指定的提供程序服务。</summary>
      <returns>提供程序服务类型名称或 null（如果未找到）。</returns>
      <param name="invariantName">提供程序服务的固定名称。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView">
      <summary>表示映射视图。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.#ctor(System.String)">
      <summary>创建具有指定实体 SQL 的 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" /> 实例。</summary>
      <param name="entitySql">一个指定实体 SQL 的字符串。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.EntitySql">
      <summary>获取实体 SQL。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache">
      <summary>表示映射视图缓冲实现的抽象基类。派生类如果与 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" /> 一起使用，则必须具有无参数构造函数。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.GetView(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>获取与指定范围对应的视图。</summary>
      <returns>一个指定映射视图的 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />，如果范围不与映射视图关联，则为 null。</returns>
      <param name="extent">一个指定范围的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.MappingHashValue">
      <summary>获取通过映射结束计算出的哈希值。</summary>
      <returns>通过映射结束计算出的哈希值。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory">
      <summary>指定用于创建具体的 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> 实例的方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.Create(System.String,System.String)">
      <summary>为由已映射容器的名称指定的容器映射创建生成的视图缓存实例。</summary>
      <returns>一个指定生成的视图缓存的 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />。</returns>
      <param name="conceptualModelContainerName">概念模型中容器的名称。</param>
      <param name="storeModelContainerName">存储模型中容器的名称。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute">
      <summary>定义指定与上下文类型（<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或 <see cref="T:System.Data.Entity.DbContext" /> 的子类）关联的映射视图缓存类型（<see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> 的子类）的自定义属性。缓存类型在运行时实例化并用于在相应上下文中检索预先生成的视图。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.String)">
      <summary>创建将上下文类型与映射视图缓存类型相关联的 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" /> 实例。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或 <see cref="T:System.Data.Entity.DbContext" /> 的子类。</param>
      <param name="cacheTypeName">缓存类型的程序集限定的全名。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.Type)">
      <summary>创建将上下文类型与映射视图缓存类型相关联的 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" /> 实例。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 或 <see cref="T:System.Data.Entity.DbContext" /> 的子类。</param>
      <param name="cacheType">
        <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> 的子类。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry">
      <summary>表示 <see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService" /> 要使用的自定义复数形式术语</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.#ctor(System.String,System.String)">
      <summary>创建一个新实例</summary>
      <param name="singular">表示单数的非 null 或空字符串。</param>
      <param name="plural">表示复数的非 null 或空字符串。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Plural">
      <summary>获取复数。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Singular">
      <summary>获取单数。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService">
      <summary>要由实体框架使用的默认复数形式服务实现。此复数形式服务基于英文区域设置。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor">
      <summary>构造实体框架中使用的默认复数形式服务的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry})">
      <summary>构造实体框架中使用的默认复数形式服务的新实例。</summary>
      <param name="userDictionaryEntries">要由此服务使用的用户字典项的集合。这些输入信息可以根据用户需要对服务进行自定义。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Pluralize(System.String)">
      <summary>返回指定单词的复数形式。</summary>
      <returns>输入参数的复数形式。</returns>
      <param name="word">要改为复数形式的单词。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Singularize(System.String)">
      <summary>返回指定单词的单数形式。</summary>
      <returns>输入参数的单数形式。</returns>
      <param name="word">要改为单数形式的单词。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService">
      <summary>要由 EF 运行时使用的复数形式服务实现此接口。默认情况下，使用 <see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService" />，但是可以在从 <see cref="T:System.Data.Entity.DbConfiguration" /> 派生的类中设置要使用的复数形式服务。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Pluralize(System.String)">
      <summary>使用服务使单词变为复数形式。</summary>
      <returns>已变为复数形式的单词</returns>
      <param name="word">要变为复数形式的单词。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Singularize(System.String)">
      <summary>使用服务使单词变为单数形式。</summary>
      <returns>已变为单数形式的单词。</returns>
      <param name="word">要变为单数形式的单词。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigration">
      <summary>表示基于代码的迁移的基类。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>添加将列添加到现有表的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">列将添加到的表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="name">要添加的列的名称。</param>
      <param name="columnAction">一个指定要添加的列的操作。例如，c =&amp;gt; c.Int(nullable:false, defaultValue:3)</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>添加创建新外键约束的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="dependentTable">包含外键列的表。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="dependentColumn">外键列。</param>
      <param name="principalTable">包含此外键引用的列的表。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="principalColumn">此外键引用的列。如果未提供任何值，则将引用主体表的主键。</param>
      <param name="cascadeDelete">指示是否应针对外键关系配置级联删除的值。如果未提供任何值，则将关闭级联删除。</param>
      <param name="name">数据库中的外键约束的名称。如果未提供任何值，则将生成唯一名称。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>添加创建新外键约束的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="dependentTable">包含外键列的表。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="dependentColumns">外键列。</param>
      <param name="principalTable">包含此外键引用的列的表。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="principalColumns">此外键引用的列。如果未提供任何值，则将引用主体表的主键。</param>
      <param name="cascadeDelete">指示是否应针对外键关系配置级联删除的值。如果未提供任何值，则将关闭级联删除。</param>
      <param name="name">数据库中的外键约束的名称。如果未提供任何值，则将生成唯一名称。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Boolean,System.Object)">
      <summary>添加创建新主键的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">包含主键列的表。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="column">主键列。</param>
      <param name="name">数据库中的主键的名称。如果未提供任何值，则将生成唯一名称。</param>
      <param name="clustered">指示此键是否是聚集的主键。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Boolean,System.Object)">
      <summary>添加基于多列创建新主键的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">包含主键列的表。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="columns">主键列。</param>
      <param name="name">数据库中的主键的名称。如果未提供任何值，则将生成唯一名称。</param>
      <param name="clustered">指示此键是否是聚集的主键。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>添加更改现有列的定义的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">列所在的表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="name">要更改的列的名称。</param>
      <param name="columnAction">一个指定列的新定义的操作。例如，c =&amp;gt; c.String(nullable:false, defaultValue:"none")</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
      <summary>添加更改存储过程的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">存储过程的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="parametersAction">指定存储过程参数的操作。</param>
      <param name="body">存储过程的主体。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数。例如，“new { SampleArgument = "MyValue" }”。</param>
      <typeparam name="TParameters">此更改存储过程操作中的参数。无需指定此类型，将根据您提供的 <paramref name="parametersAction" /> 参数推断此类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure(System.String,System.String,System.Object)">
      <summary>添加更改存储过程的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">存储过程的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="body">存储过程的主体。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数。例如，“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterTableAnnotations``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Object)">
      <summary>添加一项操作以处理表中所定义的注释的更改。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="columnsAction">指定表中要包含的列的操作。例如，t =&amp;gt; new { Id = t.Int(identity:true), Name = t.String() }</param>
      <param name="annotations">表中已更改的自定义注释。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
      <typeparam name="TColumns">此操作中的列。无需指定此类型，将根据您提供的 columnsAction 参数推断此类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Object)">
      <summary>添加在单列上创建索引的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">要在其上创建索引的表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="column">要在其上创建索引的列的名称。</param>
      <param name="unique">指示此索引是否是唯一索引的值。如果未提供任何值，则将创建非唯一索引。</param>
      <param name="name">用于数据库中的索引的名称。如果未提供任何值，则将生成唯一名称。</param>
      <param name="clustered">指示此索引是否是聚集索引的值。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Boolean,System.Object)">
      <summary>添加在多列上创建索引的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">要在其上创建索引的表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="columns">要在其上创建索引的列的名称。</param>
      <param name="unique">指示此索引是否是唯一索引的值。如果未提供任何值，则将创建非唯一索引。</param>
      <param name="name">用于数据库中的索引的名称。如果未提供任何值，则将生成唯一名称。</param>
      <param name="clustered">指示此索引是否是聚集索引的值。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
      <summary>添加创建新存储过程的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">存储过程的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="parametersAction">指定存储过程参数的操作。</param>
      <param name="body">存储过程的主体。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数。例如，“new { SampleArgument = "MyValue" }”。</param>
      <typeparam name="TParameters">此存储过程创建操作中的参数。无需指定此类型，将根据您提供的 <paramref name="parametersAction" /> 参数推断此类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure(System.String,System.String,System.Object)">
      <summary>添加创建新存储过程的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">存储过程的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="body">存储过程的主体。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数。例如，“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>添加创建新表的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>允许进一步配置表创建操作的对象。</returns>
      <param name="name">表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="columnsAction">指定表中要包含的列的操作。例如，t =&amp;gt; new { Id = t.Int(identity:true), Name = t.String() }</param>
      <param name="annotations">要创建的表中存在的自定义注释。可能为 null 或为空。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
      <typeparam name="TColumns">此表中的列创建表操作。无需指定此类型，将根据您提供的 columnsAction 参数推断此类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
      <summary>添加创建新表的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>允许进一步配置表创建操作的对象。</returns>
      <param name="name">表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="columnsAction">指定表中要包含的列的操作。例如，t =&amp;gt; new { Id = t.Int(identity:true), Name = t.String() }</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
      <typeparam name="TColumns">此表中的列创建表操作。无需指定此类型，将根据您提供的 columnsAction 参数推断此类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
      <summary>要在降级过程中执行的操作。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>添加删除现有列的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">要从中删除列的表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="name">要删除的列的名称。</param>
      <param name="removedAnnotations">要删除的列中存在的自定义注释。可能为 null 或为空。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
      <summary>添加删除现有列的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">要从中删除列的表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="name">要删除的列的名称。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
      <summary>添加基于外键约束名称删除外键约束的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="dependentTable">包含外键列的表。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="name">数据库中的外键约束的名称。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.Object)">
      <summary>添加基于外键约束面向的列删除外键约束的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="dependentTable">包含外键列的表。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="dependentColumn">外键列。</param>
      <param name="principalTable">包含此外键引用的列的表。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
      <summary>添加基于外键约束面向的列删除外键约束的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="dependentTable">包含外键列的表。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="dependentColumn">外键列。</param>
      <param name="principalTable">包含此外键引用的列的表。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="principalColumn">此外键引用的列。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
      <summary>添加基于外键约束面向的列删除外键约束的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="dependentTable">包含外键列的表。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="dependentColumns">外键列。</param>
      <param name="principalTable">包含此外键引用的列的表。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
      <summary>添加基于索引名称删除索引的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">要从中删除索引的表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="name">要删除的索引的名称。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
      <summary>添加基于索引面向的列删除索引的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">要从中删除索引的表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="columns">索引面向的列的名称。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
      <summary>添加删除使用默认名称创建的现有主键的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">包含主键列的表。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
      <summary>添加删除没有默认名称的现有主键的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">包含主键列的表。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="name">要删除的主键的名称。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropStoredProcedure(System.String,System.Object)">
      <summary>添加一个操作，以删除具有使用指定名称的现有存储过程。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要删除的过程的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数。例如，“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>添加删除表的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要删除的表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="removedColumnAnnotations">要删除的表的各列中存在的自定义注释。可能为 null 或为空。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>添加删除表的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要删除的表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="removedAnnotations">要删除的表中存在的自定义注释。可能为 null 或为空。</param>
      <param name="removedColumnAnnotations">要删除的表的各列中存在的自定义注释。可能为 null 或为空。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>添加删除表的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要删除的表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="removedAnnotations">要删除的表中存在的自定义注释。可能为 null 或为空。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
      <summary>添加删除表的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要删除的表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
      <summary>确定此实例是否等于指定对象。</summary>
      <returns>如果指定的对象等于当前实例，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
      <summary>返回当前对象的哈希函数。</summary>
      <returns>当前对象的哈希函数。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
      <summary>返回当前实例的运行时类型。</summary>
      <returns>当前实例的运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
      <summary>创建当前对象的浅表副本。</summary>
      <returns>当前对象的浅表副本。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveStoredProcedure(System.String,System.String,System.Object)">
      <summary>添加将存储过程移至新架构的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要移动的存储过程的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="newSchema">要将存储过程移到其中的架构。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
      <summary>添加将表移至新架构的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要移动的表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="newSchema">表将移至的架构。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
      <summary>添加重命名列的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">包含要重命名的列的表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="name">要重命名的列的名称。</param>
      <param name="newName">列的新名称。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameIndex(System.String,System.String,System.String,System.Object)">
      <summary>添加一项重命名索引的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">包含要重命名的索引的表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="name">要重命名的索引的名称。</param>
      <param name="newName">索引的新名称。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameStoredProcedure(System.String,System.String,System.Object)">
      <summary>添加重命名存储过程的操作。若要更改存储过程的架构，请使用 MoveStoredProcedure 实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要重命名的存储过程的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="newName">存储过程的新名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
      <summary>添加重命名表的操作。若要更改表的架构，请使用 MoveTable。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要重命名的表的名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="newName">表的新名称。架构名称是可选的，如果未指定架构，则将假定 dbo。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
      <summary>添加执行 SQL 命令的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="sql">要执行的 SQL。</param>
      <param name="suppressTransaction">指示是否应在用于迁移过程的事务之外执行 SQL 的值。如果未提供任何值，则将在事务内执行 SQL。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.SqlFile(System.String,System.Boolean,System.Object)">
      <summary>添加要执行 SQL 文件的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="sqlFile">要执行的 SQL 文件。相对路径假定相对于当前 AppDomain 的 BaseDirectory。</param>
      <param name="suppressTransaction">指示是否应在用于迁移过程的事务之外执行 SQL 的值。如果未提供任何值，则将在事务内执行 SQL。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.SqlResource(System.String,System.Reflection.Assembly,System.Boolean,System.Object)">
      <summary>添加要执行 SQL 资源文件的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="sqlResource">要执行的 SQL 资源文件的清单资源名称。</param>
      <param name="resourceAssembly">包含资源文件的程序集。如果未提供，采用调用的程序集。</param>
      <param name="suppressTransaction">指示是否应在用于迁移过程的事务之外执行 SQL 的值。如果未提供任何值，则将在事务内执行 SQL。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.System#Data#Entity#Migrations#Infrastructure#IDbMigration#AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
      <summary>添加迁移操作。</summary>
      <param name="migrationOperation">要添加的迁移操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
      <summary>要在升级过程中执行的操作。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
      <summary>与对给定模型使用迁移相关的配置。通常将创建派生自 <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" /> 的配置类，而不是使用此类。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
      <summary>初始化 DbMigrationsConfiguration 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
      <summary>获取或设置指示是否可接受自动迁移期间的数据丢失的值。如果设置为 false，则将在数据丢失可能作为自动迁移一部分出现时引发异常。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
      <summary>获取或设置指示迁移数据库时是否可使用自动迁移的值。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
      <summary>获取或设置为迁移搭建基架时要使用的代码生成器。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CommandTimeout">
      <summary>获取或设置在迁移中用于单个命令的超时值。null 值指示将使用基础提供程序的默认值。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextKey">
      <summary>获取或设置字符串，它可用于区分属于此配置的迁移和属于其他使用同一数据库的配置的迁移。该属性使来自多个不同模型的迁移能够应用于一个数据库。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
      <summary>获取或设置表示要迁移的模型的派生 DbContext。</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrationsConfiguration.DefaultMigrationsDirectory">
      <summary>存储迁移的默认目录。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetHistoryContextFactory(System.String)">
      <summary>获取设置为与给定数据库提供程序结合使用的历史记录上下文工厂。</summary>
      <returns>为数据库提供程序设置的历史记录上下文工厂。</returns>
      <param name="providerInvariantName">要为其获取工厂的数据库提供程序的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
      <summary>获取设置为用于给定数据库提供程序的 SQL 生成器。</summary>
      <returns>为数据库提供程序设置的 SQL 生成器。</returns>
      <param name="providerInvariantName">要为之获取 SQL 生成器的数据库提供程序的名称。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
      <summary>获取或设置包含基于代码的迁移的程序集。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
      <summary>获取或设置其中存储基于代码的迁移的子目录。请注意，此属性必须设置为 Visual Studio 项目根目录下子目录的相对路径；它不能设置为绝对路径。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
      <summary>获取或设置用于基于代码的迁移的命名空间。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>添加一个新工厂，以便创建要用于给定数据库提供程序的 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> 实例。</summary>
      <param name="providerInvariantName">要为之设置 SQL 生成器的数据库提供程序的名称。</param>
      <param name="factory">一个工厂，用于为表示默认架构的给定 <see cref="T:System.Data.Common.DbConnection" /> 和 <see cref="T:System.String" /> 创建 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> 实例。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
      <summary>添加新的要同于给定数据库提供程序的 SQL 生成器。</summary>
      <param name="providerInvariantName">要为之设置 SQL 生成器的数据库提供程序的名称。</param>
      <param name="migrationSqlGenerator">要使用的 SQL 生成器。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
      <summary>获取或设置用于重写要迁移的数据库的连接的值。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
      <summary>与对给定模型使用迁移相关的配置。</summary>
      <typeparam name="TContext">表示此配置应用于的模型的上下文。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
      <summary>初始化 DbMigrationsConfiguration 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
      <summary>确定当前配置是否等于指定的对象。</summary>
      <returns>如果当前配置等于指定的对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前配置进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
      <summary>获取此实例的哈希函数。</summary>
      <returns>此实例的哈希函数。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
      <summary>返回当前实例的运行时类型。</summary>
      <returns>当前实例的运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
      <summary>创建当前对象的浅表副本。</summary>
      <returns>当前对象的浅表副本。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
      <summary>在升级到最新迁移以允许更新种子数据后运行。</summary>
      <param name="context">要用于更新种子数据的上下文。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
      <summary>返回此配置的字符串表示形式。</summary>
      <returns>此配置的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrator">
      <summary>DbMigrator 用于将现有迁移应用于数据库。DbMigrator 可用于升级和降级到任何给定迁移。若要基于对模型的更改为迁移搭建基架，请使用 <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>初始化 DbMigrator 类的新实例。</summary>
      <param name="configuration">用于迁移过程的配置。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
      <summary>获取要用于迁移过程的配置。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
      <summary>获取已应用于目标数据库的所有迁移。</summary>
      <returns>迁移的列表。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
      <summary>获取已在配置的迁移程序集中定义的所有迁移。</summary>
      <returns>迁移的列表。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
      <summary>获取已在程序集中定义但尚未应用于目标数据库的所有迁移。</summary>
      <returns>迁移的列表。</returns>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
      <summary>表示应用任何迁移前数据库的状态的迁移 Id。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
      <summary>将目标数据库更新到给定迁移。</summary>
      <param name="targetMigration">要升级/降级到的迁移。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbSetMigrationsExtensions">
      <summary>
        <see cref="T:System.Data.Entity.IDbSet`1" /> 的一组扩展方法</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
      <summary>调用 SaveChanges 时，按自定义标识表达式添加或更新实体。等效于数据库术语中的“upsert”操作。此方法在使用迁移设置数据的种子时很有用。</summary>
      <param name="set">实体所属的集。</param>
      <param name="identifierExpression">指定在确定是应执行添加操作还是更新操作时应使用的属性的表达式。</param>
      <param name="entities">要添加或更新的实体。</param>
      <typeparam name="TEntity">要添加或更新的实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
      <summary>调用 SaveChanges 时，按键添加或更新实体。等效于数据库术语中的“upsert”操作。此方法在使用迁移设置数据的种子时很有用。</summary>
      <param name="set">实体所属的集。</param>
      <param name="entities">要添加或更新的实体。</param>
      <typeparam name="TEntity">要添加或更新的实体类型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
      <summary>用于配置列的帮助器类。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Builders.ColumnBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>创建新的列定义以存储二进制数据。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>新构造的列定义。</returns>
      <param name="nullable">指示列是否允许 null 值的值。</param>
      <param name="maxLength">数组数据的最大允许长度。</param>
      <param name="fixedLength">指示是否应将所有数据填充至最大长度的值。</param>
      <param name="defaultValue">用作此列的默认值的常量值。</param>
      <param name="defaultValueSql">用作此列的默认值的 SQL 表达式。</param>
      <param name="timestamp">指示是否应将此列配置为时间戳的值。</param>
      <param name="name">列的名称。</param>
      <param name="storeType">用于此列的提供程序特有数据类型。</param>
      <param name="annotations">自定义注释通常来自 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>创建新的列定义以存储布尔数据。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>新构造的列定义。</returns>
      <param name="nullable">指示列是否允许 null 值的值。</param>
      <param name="defaultValue">用作此列的默认值的常量值。</param>
      <param name="defaultValueSql">用作此列的默认值的 SQL 表达式。</param>
      <param name="name">列的名称。</param>
      <param name="storeType">用于此列的提供程序特有数据类型。</param>
      <param name="annotations">自定义注释通常来自 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>创建新的列定义以存储字节数据。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>新构造的列定义。</returns>
      <param name="nullable">指示列是否允许 null 值的值。</param>
      <param name="identity">指示插入过程中数据库是否会为此列生成值的值。</param>
      <param name="defaultValue">用作此列的默认值的常量值。</param>
      <param name="defaultValueSql">用作此列的默认值的 SQL 表达式。</param>
      <param name="name">列的名称。</param>
      <param name="storeType">用于此列的提供程序特有数据类型。</param>
      <param name="annotations">自定义注释通常来自 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>创建新的列定义以存储 DateTime 数据。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>新构造的列定义。</returns>
      <param name="nullable">指示列是否允许 null 值的值。</param>
      <param name="precision">列的精度。</param>
      <param name="defaultValue">用作此列的默认值的常量值。</param>
      <param name="defaultValueSql">用作此列的默认值的 SQL 表达式。</param>
      <param name="name">列的名称。</param>
      <param name="storeType">用于此列的提供程序特有数据类型。</param>
      <param name="annotations">自定义注释通常来自 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>创建新的列定义以存储 DateTimeOffset 数据。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>新构造的列定义。</returns>
      <param name="nullable">指示列是否允许 null 值的值。</param>
      <param name="precision">列的精度。</param>
      <param name="defaultValue">用作此列的默认值的常量值。</param>
      <param name="defaultValueSql">用作此列的默认值的 SQL 表达式。</param>
      <param name="name">列的名称。</param>
      <param name="storeType">用于此列的提供程序特有数据类型。</param>
      <param name="annotations">自定义注释通常来自 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>创建新的列定义以存储 Decimal 数据。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>新构造的列定义。</returns>
      <param name="nullable">指示列是否允许 null 值的值。</param>
      <param name="precision">列的数值精度。</param>
      <param name="scale">列的数值刻度。</param>
      <param name="defaultValue">用作此列的默认值的常量值。</param>
      <param name="defaultValueSql">用作此列的默认值的 SQL 表达式。</param>
      <param name="name">列的名称。</param>
      <param name="storeType">用于此列的提供程序特有数据类型。</param>
      <param name="identity">指示插入过程中数据库是否会为此列生成值的值。</param>
      <param name="annotations">自定义注释通常来自 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>创建新的列定义以存储 Double 数据。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>新构造的列定义。</returns>
      <param name="nullable">指示列是否允许 null 值的值。</param>
      <param name="defaultValue">用作此列的默认值的常量值。</param>
      <param name="defaultValueSql">用作此列的默认值的 SQL 表达式。</param>
      <param name="name">列的名称。</param>
      <param name="storeType">用于此列的提供程序特有数据类型。</param>
      <param name="annotations">自定义注释通常来自 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)">
      <summary>指示指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>创建新的列定义以存储 geography 数据。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>新构造的列定义。</returns>
      <param name="nullable">指示列是否允许 null 值的值。</param>
      <param name="defaultValue">用作此列的默认值的常量值。</param>
      <param name="defaultValueSql">用作此列的默认值的 SQL 表达式。</param>
      <param name="name">列的名称。</param>
      <param name="storeType">用于此列的提供程序特有数据类型。</param>
      <param name="annotations">自定义注释通常来自 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>创建新的列定义以存储 geometry 数据。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>新构造的列定义。</returns>
      <param name="nullable">指示列是否允许 null 值的值。</param>
      <param name="defaultValue">用作此列的默认值的常量值。</param>
      <param name="defaultValueSql">用作此列的默认值的 SQL 表达式。</param>
      <param name="name">列的名称。</param>
      <param name="storeType">用于此列的提供程序特有数据类型。</param>
      <param name="annotations">自定义注释通常来自 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>创建新的列定义以存储 GUID 数据。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>新构造的列定义。</returns>
      <param name="nullable">指示列是否允许 null 值的值。</param>
      <param name="identity">指示插入过程中数据库是否会为此列生成值的值。</param>
      <param name="defaultValue">用作此列的默认值的常量值。</param>
      <param name="defaultValueSql">用作此列的默认值的 SQL 表达式。</param>
      <param name="name">列的名称。</param>
      <param name="storeType">用于此列的提供程序特有数据类型。</param>
      <param name="annotations">自定义注释通常来自 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>创建新的列定义以存储 Integer 数据。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>新构造的列定义。</returns>
      <param name="nullable">指示列是否允许 null 值的值。</param>
      <param name="identity">指示插入过程中数据库是否会为此列生成值的值。</param>
      <param name="defaultValue">用作此列的默认值的常量值。</param>
      <param name="defaultValueSql">用作此列的默认值的 SQL 表达式。</param>
      <param name="name">列的名称。</param>
      <param name="storeType">用于此列的提供程序特有数据类型。</param>
      <param name="annotations">自定义注释通常来自 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>创建新的列定义以存储 Long 数据。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>新构造的列定义。</returns>
      <param name="nullable">指示列是否允许 null 值的值。</param>
      <param name="identity">指示插入过程中数据库是否会为此列生成值的值。</param>
      <param name="defaultValue">用作此列的默认值的常量值。</param>
      <param name="defaultValueSql">用作此列的默认值的 SQL 表达式。</param>
      <param name="name">列的名称。</param>
      <param name="storeType">用于此列的提供程序特有数据类型。</param>
      <param name="annotations">自定义注释通常来自 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone">
      <summary>创建当前 <see cref="T:System.Object" /> 的浅表副本。</summary>
      <returns>当前 <see cref="T:System.Object" /> 的浅表副本。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>创建新的列定义以存储 Short 数据。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>新构造的列定义。</returns>
      <param name="nullable">指示列是否允许 null 值的值。</param>
      <param name="identity">指示插入过程中数据库是否会为此列生成值的值。</param>
      <param name="defaultValue">用作此列的默认值的常量值。</param>
      <param name="defaultValueSql">用作此列的默认值的 SQL 表达式。</param>
      <param name="name">列的名称。</param>
      <param name="storeType">用于此列的提供程序特有数据类型。</param>
      <param name="annotations">自定义注释通常来自 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>创建新的列定义以存储 Single 数据。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>新构造的列定义。</returns>
      <param name="nullable">指示列是否允许 null 值的值。</param>
      <param name="defaultValue">用作此列的默认值的常量值。</param>
      <param name="defaultValueSql">用作此列的默认值的 SQL 表达式。</param>
      <param name="name">列的名称。</param>
      <param name="storeType">用于此列的提供程序特有数据类型。</param>
      <param name="annotations">自定义注释通常来自 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>创建新的列定义以存储字符串数据。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>新构造的列定义。</returns>
      <param name="nullable">指示列是否允许 null 值的值。</param>
      <param name="maxLength">字符串数据的最大允许长度。</param>
      <param name="fixedLength">指示是否应将所有数据填充至最大长度的值。</param>
      <param name="unicode">指示列是否支持 Unicode 内容的值。</param>
      <param name="defaultValue">用作此列的默认值的常量值。</param>
      <param name="defaultValueSql">用作此列的默认值的 SQL 表达式。</param>
      <param name="name">列的名称。</param>
      <param name="storeType">用于此列的提供程序特有数据类型。</param>
      <param name="annotations">自定义注释通常来自 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>创建新的列定义以存储 Time 数据。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>新构造的列定义。</returns>
      <param name="nullable">指示列是否允许 null 值的值。</param>
      <param name="precision">列的精度。</param>
      <param name="defaultValue">用作此列的默认值的常量值。</param>
      <param name="defaultValueSql">用作此列的默认值的 SQL 表达式。</param>
      <param name="name">列的名称。</param>
      <param name="storeType">用于此列的提供程序特有数据类型。</param>
      <param name="annotations">自定义注释通常来自 Code First 模型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ParameterBuilder">
      <summary>表示用于配置参数的类。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Builders.ParameterBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Binary(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.String,System.String,System.Boolean)">
      <summary>创建新参数定义以传递 Binary 数据。</summary>
      <returns>新构造的参数定义。</returns>
      <param name="maxLength">数组数据的最大允许长度。</param>
      <param name="fixedLength">指示是否应将所有数据填充至最大长度的值。</param>
      <param name="defaultValue">用作此参数的默认值的常量值。</param>
      <param name="defaultValueSql">用作此参数的默认值的 SQL 表达式。</param>
      <param name="name">参数名。</param>
      <param name="storeType">用于此参数的提供程序特有数据类型。</param>
      <param name="outParameter">一个指示参数是否为输出参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Boolean(System.Nullable{System.Boolean},System.String,System.String,System.String,System.Boolean)">
      <summary>创建新参数定义以传递 Boolean 数据。</summary>
      <returns>新构造的参数定义。</returns>
      <param name="defaultValue">用作此参数默认值的常量值。</param>
      <param name="defaultValueSql">用作此参数默认值的 SQL 表达式。</param>
      <param name="name">参数名。</param>
      <param name="storeType">用于此参数的提供程序特有数据类型。</param>
      <param name="outParameter">一个指示参数是否为输出参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Byte(System.Nullable{System.Byte},System.String,System.String,System.String,System.Boolean)">
      <summary>创建新参数定义以传递 Byte 数据。</summary>
      <returns>新构造的参数定义。</returns>
      <param name="defaultValue">用作此参数默认值的常量值。</param>
      <param name="defaultValueSql">用作此参数默认值的 SQL 表达式。</param>
      <param name="name">参数名。</param>
      <param name="storeType">用于此参数的提供程序特有数据类型。</param>
      <param name="outParameter">一个指示参数是否为输出参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTime(System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Boolean)">
      <summary>创建新参数定义以传递 DateTime 数据。</summary>
      <returns>新构造的参数定义。</returns>
      <param name="precision">参数的精度。</param>
      <param name="defaultValue">用作此参数默认值的常量值。</param>
      <param name="defaultValueSql">用作此参数默认值的 SQL 表达式。</param>
      <param name="name">参数名。</param>
      <param name="storeType">用于此参数的提供程序特有数据类型。</param>
      <param name="outParameter">一个指示参数是否为输出参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTimeOffset(System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Boolean)">
      <summary>创建新参数定义以传递 DateTimeOffset 数据。</summary>
      <returns>新构造的参数定义。</returns>
      <param name="precision">参数的精度。</param>
      <param name="defaultValue">用作此参数默认值的常量值。</param>
      <param name="defaultValueSql">用作此参数默认值的 SQL 表达式。</param>
      <param name="name">参数名。</param>
      <param name="storeType">用于此参数的提供程序特有数据类型。</param>
      <param name="outParameter">一个指示参数是否为输出参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Decimal(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
      <summary>创建新参数定义以传递 Decimal 数据。</summary>
      <returns>新构造的参数定义。</returns>
      <param name="precision">参数的数值精度。</param>
      <param name="scale">参数的小数位数。</param>
      <param name="defaultValue">用作此参数默认值的常量值。</param>
      <param name="defaultValueSql">用作此参数默认值的 SQL 表达式。</param>
      <param name="name">参数名。</param>
      <param name="storeType">用于此参数的提供程序特有数据类型。</param>
      <param name="outParameter">一个指示参数是否为输出参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Double(System.Nullable{System.Double},System.String,System.String,System.String,System.Boolean)">
      <summary>创建新参数定义以传递 Double 数据。</summary>
      <returns>新构造的参数定义。</returns>
      <param name="defaultValue">用作此参数默认值的常量值。</param>
      <param name="defaultValueSql">用作此参数默认值的 SQL 表达式。</param>
      <param name="name">参数名。</param>
      <param name="storeType">用于此参数的提供程序特有数据类型。</param>
      <param name="outParameter">一个指示参数是否为输出参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Equals(System.Object)">
      <summary>指定此实例是否等于指定对象。</summary>
      <returns>如果此实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geography(System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Boolean)">
      <summary>创建新参数定义以传递 geography 数据。</summary>
      <returns>新构造的参数定义。</returns>
      <param name="defaultValue">用作此参数默认值的常量值。</param>
      <param name="defaultValueSql">用作此参数默认值的 SQL 表达式。</param>
      <param name="name">参数名。</param>
      <param name="storeType">用于此参数的提供程序特有数据类型。</param>
      <param name="outParameter">一个指示参数是否为输出参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geometry(System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Boolean)">
      <summary>创建新参数定义以传递 geometry 数据。</summary>
      <returns>新构造的参数定义。</returns>
      <param name="defaultValue">用作此参数默认值的常量值。</param>
      <param name="defaultValueSql">用作此参数默认值的 SQL 表达式。</param>
      <param name="name">参数名。</param>
      <param name="storeType">用于此参数的提供程序特有数据类型。</param>
      <param name="outParameter">一个指示参数是否为输出参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetHashCode">
      <summary>获取与此实例关联的哈希代码。</summary>
      <returns>与此实例关联的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Guid(System.Nullable{System.Guid},System.String,System.String,System.String,System.Boolean)">
      <summary>创建新参数定义以传递 GUID 数据。</summary>
      <returns>新构造的参数定义。</returns>
      <param name="defaultValue">用作此参数默认值的常量值。</param>
      <param name="defaultValueSql">用作此参数默认值的 SQL 表达式。</param>
      <param name="name">参数名。</param>
      <param name="storeType">用于此参数的提供程序特有数据类型。</param>
      <param name="outParameter">一个指示参数是否为输出参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Int(System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean)">
      <summary>创建新参数定义以传递 Integer 数据。</summary>
      <returns>新构造的参数定义。</returns>
      <param name="defaultValue">用作此参数默认值的常量值。</param>
      <param name="defaultValueSql">用作此参数默认值的 SQL 表达式。</param>
      <param name="name">参数名。</param>
      <param name="storeType">用于此参数的提供程序特有数据类型。</param>
      <param name="outParameter">一个指示参数是否为输出参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Long(System.Nullable{System.Int64},System.String,System.String,System.String,System.Boolean)">
      <summary>创建新参数定义以传递 Long 数据。</summary>
      <returns>新构造的参数定义。</returns>
      <param name="defaultValue">用作此参数默认值的常量值。</param>
      <param name="defaultValueSql">用作此参数默认值的 SQL 表达式。</param>
      <param name="name">参数名。</param>
      <param name="storeType">用于此参数的提供程序特有数据类型。</param>
      <param name="outParameter">一个指示参数是否为输出参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.MemberwiseClone">
      <summary>创建当前 <see cref="T:System.Object" /> 的浅表副本。</summary>
      <returns>当前 <see cref="T:System.Object" /> 的浅表副本。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Short(System.Nullable{System.Int16},System.String,System.String,System.String,System.Boolean)">
      <summary>创建新参数定义以传递 Short 数据。</summary>
      <returns>新构造的参数定义。</returns>
      <param name="defaultValue">用作此参数默认值的常量值。</param>
      <param name="defaultValueSql">用作此参数默认值的 SQL 表达式。</param>
      <param name="name">参数名。</param>
      <param name="storeType">用于此参数的提供程序特有数据类型。</param>
      <param name="outParameter">一个指示参数是否为输出参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Single(System.Nullable{System.Single},System.String,System.String,System.String,System.Boolean)">
      <summary>创建新参数定义以传递 Single 数据。</summary>
      <returns>新构造的参数定义。</returns>
      <param name="defaultValue">用作此参数默认值的常量值。</param>
      <param name="defaultValueSql">用作此参数默认值的 SQL 表达式。</param>
      <param name="name">参数名。</param>
      <param name="storeType">用于此参数的提供程序特有数据类型。</param>
      <param name="outParameter">一个指示参数是否为输出参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.String(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>创建新参数定义以传递 String 数据。</summary>
      <returns>新构造的参数定义。</returns>
      <param name="maxLength">字符串数据的最大允许长度。</param>
      <param name="fixedLength">指示是否应将所有数据填充至最大长度的值。</param>
      <param name="unicode">指示参数是否支持 Unicode 内容的值。</param>
      <param name="defaultValue">用作此参数默认值的常量值。</param>
      <param name="defaultValueSql">用作此参数默认值的 SQL 表达式。</param>
      <param name="name">参数名。</param>
      <param name="storeType">用于此参数的提供程序特有数据类型。</param>
      <param name="outParameter">一个指示参数是否为输出参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Time(System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Boolean)">
      <summary>创建新参数定义以传递 Time 数据。</summary>
      <returns>新构造的参数定义。</returns>
      <param name="precision">参数的精度。</param>
      <param name="defaultValue">用作此参数默认值的常量值。</param>
      <param name="defaultValueSql">用作此参数默认值的 SQL 表达式。</param>
      <param name="name">参数名。</param>
      <param name="storeType">用于此参数的提供程序特有数据类型。</param>
      <param name="outParameter">一个指示参数是否为输出参数的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
      <summary>用于进一步配置从 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 上的 CreateTable 调用创建的表的帮助器类。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <typeparam name="TColumns">标识表的列的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
      <summary>初始化 TableBuilder 类的新实例。</summary>
      <param name="createTableOperation">要进一步配置的表创建操作。</param>
      <param name="migration">其中创建了表的迁移。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
      <summary>指定要在表上创建的外键约束。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>对象自身，以便多个调用可以链接在一起。</returns>
      <param name="principalTable">该外键约束面向的表的名称。</param>
      <param name="dependentKeyExpression">表示外键属性的 lambda 表达式。C#：t =&amp;gt; t.PropertyOne VB.Net：Function(t) t.PropertyOne 如果外键由多个属性组成，则请指定包括这些属性的匿名类型。C#：t =&amp;gt; new { t.PropertyOne, t.PropertyTwo } VB.Net：Function(t) New With { t.PropertyOne, t.PropertyTwo }</param>
      <param name="cascadeDelete">指示是否应在外键约束上配置级联删除的值。</param>
      <param name="name">此外键约束的名称。如果未提供名称，则将计算默认名称。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode">
      <summary>获取当前对象的哈希代码。</summary>
      <returns>当前对象的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,System.Boolean,System.Object)">
      <summary>指定要在表上创建的索引。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>对象自身，以便多个调用可以链接在一起。</returns>
      <param name="indexExpression">表示要编制索引的属性的 lambda 表达式。C#：t =&amp;gt; t.PropertyOne VB.Net：Function(t) t.PropertyOne 如果要对多个属性编制索引，则请指定包括这些属性的匿名类型。C#：t =&amp;gt; new { t.PropertyOne, t.PropertyTwo } VB.Net：Function(t) New With { t.PropertyOne, t.PropertyTwo }</param>
      <param name="name">索引的名称。</param>
      <param name="unique">指示此索引是否是唯一索引的值。</param>
      <param name="clustered">指示此索引是否是聚集索引的值。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone">
      <summary>创建当前 <see cref="T:System.Object" /> 的浅表副本。</summary>
      <returns>当前 <see cref="T:System.Object" /> 的浅表副本。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,System.Object)">
      <summary>指定表的主键。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>对象自身，以便多个调用可以链接在一起。</returns>
      <param name="keyExpression">表示要用作主键的属性的 lambda 表达式。C#：t =&amp;gt; t.Id VB.Net：Function(t) t.Id 如果主键由多个属性组成，则请指定包括这些属性的匿名类型。C#：t =&amp;gt; new { t.Id1, t.Id2 } VB.Net：Function(t) New With { t.Id1, t.Id2 }</param>
      <param name="name">主键的名称。如果未提供，则将生成默认名称。</param>
      <param name="clustered">指示此键是否是聚集的主键。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString">
      <summary>返回当前对象的字符串表示形式。</summary>
      <returns>当前对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
      <summary>为基于代码的迁移生成 C# 代码。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>生成代码以指定 <see cref="T:byte[]" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>生成用户可查看和编辑的主代码文件。</summary>
      <returns>生成的代码。</returns>
      <param name="operations">迁移要执行的操作。</param>
      <param name="namespace">其中应生成代码的命名空间。</param>
      <param name="className">应生成的类的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以指定使用 lambda 表达式的一组列名称。</summary>
      <param name="columns">要为之生成代码的列。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />。</summary>
      <param name="addColumnOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />。</summary>
      <param name="addForeignKeyOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />。</summary>
      <param name="addPrimaryKeyOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />。</summary>
      <param name="alterColumnOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />。</summary>
      <param name="alterProcedureOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>为 <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" /> 生成代码。</summary>
      <param name="alterTableOperation">应为其生成代码的操作。</param>
      <param name="writer">应向其中写入生成的代码的编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>生成代码以指定 <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" /> 的定义。</summary>
      <param name="column">要为之生成代码的列定义。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
      <param name="emitName">指示定义中是否包含列名称的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />。</summary>
      <param name="createIndexOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />。</summary>
      <param name="createProcedureOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="createTableOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />。</summary>
      <param name="dropColumnOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />。</summary>
      <param name="dropForeignKeyOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />。</summary>
      <param name="dropIndexOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />。</summary>
      <param name="dropPrimaryKeyOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />。</summary>
      <param name="dropProcedureOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />。</summary>
      <param name="dropTableOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />。</summary>
      <param name="moveProcedureOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />。</summary>
      <param name="moveTableOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>生成代码以指定 <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" /> 的定义。</summary>
      <param name="parameterModel">要为之生成代码的参数定义。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
      <param name="emitName">指示定义中是否包含列名称的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />。</summary>
      <param name="renameColumnOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.RenameIndexOperation" />。</summary>
      <param name="renameIndexOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />。</summary>
      <param name="renameProcedureOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />。</summary>
      <param name="renameTableOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />。</summary>
      <param name="sqlOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
      <summary>生成代码以指定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>生成代码以指定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>生成代码以指定 <see cref="T:System.DateTime" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>生成代码以指定 <see cref="T:System.DateTimeOffset" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>生成代码以指定 <see cref="T:System.Decimal" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
      <summary>生成代码以指定 <see cref="T:System.Guid" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
      <summary>生成代码以指定 <see cref="T:System.Int64" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
      <summary>生成代码以指定数据类型未知的列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
      <summary>生成代码以指定 <see cref="T:System.Single" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
      <summary>生成代码以指定 <see cref="T:System.String" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>使用 <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" /> 生成代码隐藏文件。</summary>
      <returns>生成的代码。</returns>
      <param name="migrationId">迁移的唯一标识符。</param>
      <param name="operations">要为之生成代码的操作。</param>
      <param name="sourceModel">要存储在迁移元数据中的源模型。</param>
      <param name="targetModel">要存储在迁移元数据中的目标模型。</param>
      <param name="namespace">其中应生成代码的命名空间。</param>
      <param name="className">应生成的类的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>使用迁移元数据生成代码隐藏文件。</summary>
      <returns>生成的代码。</returns>
      <param name="migrationId">迁移的唯一标识符。</param>
      <param name="sourceModel">要存储在迁移元数据中的源模型。</param>
      <param name="targetModel">要存储在迁移元数据中的目标模型。</param>
      <param name="namespace">其中应生成代码的命名空间。</param>
      <param name="className">应生成的类的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>生成代码以指定 <see cref="T:System.TimeSpan" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotation(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>为可能为 null 的给定注释值生成代码。默认行为是使用 <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" />（如果已注册一个），否则将对注释值调用 ToString。</summary>
      <param name="name">需要代码的注释的名称。</param>
      <param name="annotation">要生成的注释值。</param>
      <param name="writer">应向其中写入生成的代码的编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以重新创建注释的给定字典，在将这些注释作为 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 调用的参数传递时使用该字典。</summary>
      <param name="annotations">要生成的注释。</param>
      <param name="writer">应向其中写入生成的代码的编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以重新创建注释的给定字典，在将这些注释作为 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 调用的参数传递时使用该字典。</summary>
      <param name="annotations">要生成的注释。</param>
      <param name="writer">应向其中写入生成的代码的编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行作为 <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="addForeignKeyOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行作为 <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="addPrimaryKeyOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行作为 <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="createIndexOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
      <summary>使用相应的转义将标识符用引号引起来以允许它存储在字符串中。</summary>
      <returns>保存的标识符。</returns>
      <param name="identifier">要用引号引起来的标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
      <summary>从数据库体系结构名称中删除所有无效字符。</summary>
      <returns>已擦除的名称。</returns>
      <param name="name">要擦除的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>获取用于给定数据类型的列的类型名称。</summary>
      <returns>要在生成的迁移中使用的类型名称。</returns>
      <param name="primitiveTypeKind">要转换的数据类型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassAttributes(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>生成类特性。</summary>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
      <param name="designer">指示是否应为代码隐藏文件生成此类的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>为以 WriteClassStart 开头的类生成结束代码。</summary>
      <param name="namespace">其中应生成代码的命名空间。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>使用语句和类定义生成命名空间。</summary>
      <param name="namespace">其中应生成代码的命名空间。</param>
      <param name="className">应生成的类的名称。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
      <param name="base">生成的类的基类。</param>
      <param name="designer">指示是否应为代码隐藏文件生成此类的值。</param>
      <param name="namespaces">将为其添加 using 指令的命名空间。如果为 null，则将使用从 GetDefaultNamespaces 返回的命名空间。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成属性以在代码隐藏文件中返回源或目标模型。</summary>
      <param name="name">属性的名称。</param>
      <param name="value">要返回的值。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
      <summary>为基于代码的迁移生成代码的提供程序的基类。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.AnnotationGenerators">
      <summary>获取所使用的 <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> 实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>生成应添加到用户项目的代码。</summary>
      <returns>生成的代码。</returns>
      <param name="migrationId">迁移的唯一标识符。</param>
      <param name="operations">迁移要执行的操作。</param>
      <param name="sourceModel">要存储在迁移元数据中的源模型。</param>
      <param name="targetModel">要存储在迁移元数据中的目标模型。</param>
      <param name="namespace">其中应生成代码的命名空间。</param>
      <param name="className">应生成的类的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
      <summary>为生成的所有代码获取必须输出为“using”或“Imports”指令的默认命名空间。</summary>
      <returns>命名空间名称的有序列表。</returns>
      <param name="designer">指示是否应为代码隐藏文件生成此类的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary>获取必须输出为可处理给定操作生成的代码的“using”或“Imports”指令的命名空间。</summary>
      <returns>命名空间名称的有序列表。</returns>
      <param name="operations">将为其生成代码的操作。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
      <summary>为基于代码的迁移搭建基架以将挂起的模型更改应用于数据库。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>初始化 MigrationScaffolder 类的新实例。</summary>
      <param name="migrationsConfiguration">要用于搭建基架的配置。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
      <summary>获取或设置迁移生成的代码中使用的命名空间。默认情况下，此命名空间与传入构造函数的迁移配置对象上的 MigrationsNamespace 相同。对于 VB.NET 项目，此命名空间将需要更新为将项目的根命名空间考虑进去。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
      <summary>为基于代码的迁移搭建基架以将挂起的所有模型更改应用于数据库。</summary>
      <returns>已搭建基架的迁移。</returns>
      <param name="migrationName">要用于已搭建基架的迁移的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
      <summary>为基于代码的迁移搭建基架以将挂起的所有模型更改应用于数据库。</summary>
      <returns>已搭建基架的迁移。</returns>
      <param name="migrationName">要用于已搭建基架的迁移的名称。</param>
      <param name="ignoreChanges">是否包括模型更改。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
      <summary>为与之前运行的数据库初始值设定项对应的基于代码的初始迁移搭建基架。</summary>
      <returns>已搭建基架的迁移。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
      <summary>表示已搭建基架并准备写入文件的基于代码的迁移。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ScaffoldedMigration.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
      <summary>获取或设置应存储在代码隐藏文件中的已搭建基架的迁移代码。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
      <summary>获取或设置此迁移应保存在其中的用户项目中的子目录。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.IsRescaffold">
      <summary>获取或设置迁移是否已重新搭建基架。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
      <summary>获取或设置用于此迁移的编程语言。通常用于生成的代码的文件扩展名。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
      <summary>获取或设置此迁移的唯一标识符。通常用于生成的代码的文件名。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Resources">
      <summary>获取要添加到迁移资源文件中的字符串资源的字典。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
      <summary>获取或设置用户可编辑的已搭建基架的迁移代码。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
      <summary>设计时工具用于运行需要与正在 Visual Studio 中编辑的应用程序进行交互的迁移相关命令的帮助器类。由于应用程序处于编辑状态，因此需要在单独的 AppDomain 中加载程序集以确保始终加载的是最新版本。还将复制启动项目中的 App/Web.config 文件以确保应用所有配置。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>初始化 ToolingFacade 类的新实例。</summary>
      <param name="migrationsAssemblyName">包含要使用的迁移配置的程序集的名称。</param>
      <param name="contextAssemblyName">包含要使用的 DbContext 的程序集的名称。</param>
      <param name="configurationTypeName">要使用的迁移配置的命名空间限定名称。</param>
      <param name="workingDirectory">包含已编译程序集的工作目录。</param>
      <param name="configurationFilePath">启动项目中的配置文件的路径。</param>
      <param name="dataDirectory">启动项目中的应用程序数据目录的路径。通常，App_Data 目录用于 Web 应用程序，或者工作目录用于可执行文件。</param>
      <param name="connectionStringInfo">与要迁移的数据库的连接。如果未提供，则将使用上下文的默认连接。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
      <summary>释放 <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" /> 类的当前实例所使用的资源。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
      <summary>释放由外观使用的所有资源。</summary>
      <param name="disposing">如果为 true，则同时释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
      <summary>释放由 facade 使用的所有非托管资源。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextType(System.String)">
      <summary>获取派生自 <see cref="T:System.Data.Entity.DbContext" /> 的类型的完全限定名。</summary>
      <returns>找到的上下文类型。</returns>
      <param name="contextTypeName">上下文类型的名称。如果为 nul，将返回在程序集中找到的单个上下文类型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
      <summary>获取派生自 <see cref="T:System.Data.Entity.DbContext" /> 的所有类型的完全限定名。</summary>
      <returns>找到的所有上下文类型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
      <summary>获取已应用于数据库的所有迁移的列表。</summary>
      <returns>已应用迁移的 ID。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
      <summary>获取尚未应用于数据库的所有迁移的列表。</summary>
      <returns>挂起的迁移的 ID。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
      <summary>获取或设置要运行以记录信息的操作。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
      <summary>获取或设置要运行以记录详细信息的操作。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
      <summary>获取或设置要运行以记录警告的操作。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
      <summary>为基于代码的迁移搭建基架以应用所有挂起的模型更改。</summary>
      <returns>已搭建基架的迁移。</returns>
      <param name="migrationName">生成的迁移的名称。</param>
      <param name="language">生成的迁移的编程语言。</param>
      <param name="rootNamespace">迁移将添加到的项目的根命名空间。</param>
      <param name="ignoreChanges">是否包括模型更改。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
      <summary>为与之前运行的数据库初始值设定项对应的基于代码的初始迁移搭建基架。</summary>
      <returns>已搭建基架的迁移。</returns>
      <param name="language">生成的迁移的编程语言。</param>
      <param name="rootNamespace">迁移将添加到的项目的根命名空间。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
      <summary>生成 SQL 脚本以在两个迁移之间进行迁移。</summary>
      <returns>生成的 SQL 脚本。</returns>
      <param name="sourceMigration">要从其进行更新的迁移。如果未提供，则将生成更新当前数据库的脚本。</param>
      <param name="targetMigration">要更新到的迁移。如果未提供，则将生成更新到最新迁移的脚本。</param>
      <param name="force">指示是否可接受自动迁移期间的数据丢失的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
      <summary>将数据库更新到指定的迁移。</summary>
      <param name="targetMigration">要迁移到的迁移的 ID。如果未提供，则会将数据库更新到最新迁移。</param>
      <param name="force">指示是否可接受自动迁移期间的数据丢失的值。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
      <summary>为基于代码的迁移生成 VB.Net 代码。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>生成代码以指定 <see cref="T:byte[]" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>生成用户可查看和编辑的主代码文件。</summary>
      <returns>生成的代码。</returns>
      <param name="operations">迁移要执行的操作。</param>
      <param name="namespace">其中应生成代码的命名空间。</param>
      <param name="className">应生成的类的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以指定使用 lambda 表达式的一组列名称。</summary>
      <param name="columns">要为之生成代码的列。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />。</summary>
      <param name="addColumnOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />。</summary>
      <param name="addForeignKeyOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />。</summary>
      <param name="addPrimaryKeyOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />。</summary>
      <param name="alterColumnOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />。</summary>
      <param name="alterProcedureOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>为 <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" /> 生成代码。</summary>
      <param name="alterTableOperation">应为其生成代码的操作。</param>
      <param name="writer">应向其中写入生成的代码的编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>生成代码以指定 <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" /> 的定义。</summary>
      <param name="column">要为之生成代码的列定义。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
      <param name="emitName">指示定义中是否包含列名称的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />。</summary>
      <param name="createIndexOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />。</summary>
      <param name="createProcedureOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="createTableOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />。</summary>
      <param name="dropColumnOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />。</summary>
      <param name="dropForeignKeyOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />。</summary>
      <param name="dropIndexOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />。</summary>
      <param name="dropPrimaryKeyOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />。</summary>
      <param name="dropProcedureOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />。</summary>
      <param name="dropTableOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />。</summary>
      <param name="moveProcedureOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />。</summary>
      <param name="moveTableOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" />。</summary>
      <param name="parameterModel">要为其生成代码的参数模型定义。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
      <param name="emitName">为 true 则在定义中包含列名称；否则为 false。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />。</summary>
      <param name="renameColumnOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.RenameIndexOperation" />。</summary>
      <param name="renameIndexOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />。</summary>
      <param name="renameProcedureOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />。</summary>
      <param name="renameTableOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行 <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />。</summary>
      <param name="sqlOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
      <summary>生成代码以指定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>生成代码以指定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>生成代码以指定 <see cref="T:System.DateTime" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>生成代码以指定 <see cref="T:System.DateTimeOffset" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>生成代码以指定 <see cref="T:System.Decimal" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
      <summary>生成代码以指定 <see cref="T:System.Guid" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
      <summary>生成代码以指定 <see cref="T:System.Int64" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
      <summary>生成代码以指定数据类型未知的列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
      <summary>生成代码以指定 <see cref="T:System.Single" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
      <summary>生成代码以指定 <see cref="T:System.String" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>使用迁移元数据生成代码隐藏文件。</summary>
      <returns>生成的代码。</returns>
      <param name="migrationId">迁移的唯一标识符。</param>
      <param name="operations">迁移要执行的操作。</param>
      <param name="sourceModel">要存储在迁移元数据中的源模型。</param>
      <param name="targetModel">要存储在迁移元数据中的目标模型。</param>
      <param name="namespace">其中应生成代码的命名空间。</param>
      <param name="className">应生成的类的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>使用迁移元数据生成代码隐藏文件。</summary>
      <returns>生成的代码。</returns>
      <param name="migrationId">迁移的唯一标识符。</param>
      <param name="sourceModel">要存储在迁移元数据中的源模型。</param>
      <param name="targetModel">要存储在迁移元数据中的目标模型。</param>
      <param name="namespace">其中应生成代码的命名空间。</param>
      <param name="className">应生成的类的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>生成代码以指定 <see cref="T:System.TimeSpan" /> 列的默认值。</summary>
      <returns>表示默认值的代码。</returns>
      <param name="defaultValue">要用作默认值的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotation(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>为可能为 null 的给定注释值生成代码。默认行为是使用 <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" />（如果已注册一个），否则将对注释值调用 ToString。</summary>
      <param name="name">需要代码的注释的名称。</param>
      <param name="annotation">要生成的注释值。</param>
      <param name="writer">应向其中写入生成的代码的编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以便重新创建注释的给定字典，在将这些注释作为 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 调用的参数传递时使用该字典。</summary>
      <param name="annotations">要生成的注释。</param>
      <param name="writer">应向其中写入生成的代码的编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以便重新创建注释的给定字典，在将这些注释作为 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 调用的参数传递时使用该字典。</summary>
      <param name="annotations">要生成的注释。</param>
      <param name="writer">应向其中写入生成的代码的编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行作为 <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="addForeignKeyOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行作为 <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="addPrimaryKeyOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成代码以执行作为 <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="createIndexOperation">要为之生成代码的操作。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
      <summary>使用相应的转义将标识符用引号引起来以允许它存储在字符串中。</summary>
      <returns>保存的标识符。</returns>
      <param name="identifier">要用引号引起来的标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
      <summary>从数据库体系结构名称中删除所有无效字符。</summary>
      <returns>已擦除的名称。</returns>
      <param name="name">要擦除的名称。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>获取用于给定数据类型的列的类型名称。</summary>
      <returns>要在生成的迁移中使用的类型名称。</returns>
      <param name="primitiveTypeKind">要转换的数据类型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassAttributes(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>生成类特性。</summary>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
      <param name="designer">指示是否应为代码隐藏文件生成此类的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>为以 WriteClassStart 开头的类生成结束代码。</summary>
      <param name="namespace">其中应生成代码的命名空间。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>使用语句和类定义生成命名空间。</summary>
      <param name="namespace">其中应生成代码的命名空间。</param>
      <param name="className">应生成的类的名称。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
      <param name="base">生成的类的基类。</param>
      <param name="designer">指示是否应为代码隐藏文件生成此类的值。</param>
      <param name="namespaces">将为其添加 Imports 指令的命名空间。如果为 null，则将使用从 GetDefaultNamespaces 返回的命名空间。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>生成属性以在代码隐藏文件中返回源或目标模型。</summary>
      <param name="name">属性的名称。</param>
      <param name="value">要返回的值。</param>
      <param name="writer">生成的代码要添加到的文本编写器。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryContext">
      <summary>此类由 Code First 迁移用于读取和写入数据库中的迁移历史记录。要对迁移历史记录表进行自定义，您可以从此类派生并重写 OnModelCreating。派生的实例可以使用 <see cref="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" /> 基于每个迁移配置注册，或使用 <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" /> 全局注册。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryContext.#ctor(System.Data.Common.DbConnection,System.String)">
      <summary>初始化 HistoryContext 类的新实例。如果要创建派生历史记录上下文，通常将公开一个构造函数，接受这同样的这些参数，然后将它们传递给此基构造函数。</summary>
      <param name="existingConnection">要用于新的上下文的现有连接。</param>
      <param name="defaultSchema">要迁移的模型的默认架构。如果未在 OnModelCreating 中配置另一架构，则此架构将用于迁移历史记录表。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.CacheKey">
      <summary>获取用于查找以前为此上下文生成的模型的键。这用于避免在每次创建新的上下文实例时处理 OnModelCreating 并计算模型。默认情况下，此属性返回默认架构。在多数情况下，您不需要重写此属性。但是，如果您的 OnModelCreating 实现包含导致为同一数据库提供程序和默认架构生成不同模型的条件逻辑，应重写此属性并计算相应的键。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.DefaultSchema">
      <summary>获取要迁移的模型的默认架构。如果未在 OnModelCreating 中配置另一架构，则此架构将用于迁移历史记录表。</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.History.HistoryContext.DefaultTableName">
      <summary>用于迁移历史记录表的默认名称。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.History">
      <summary>获取或设置可用于读取和写入 <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" /> 实例的 <see cref="T:System.Data.Entity.DbSet`1" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>应用迁移历史记录表的默认配置。如果重写此方法，建议在应用您的自定义配置前调用这个基实现。</summary>
      <param name="modelBuilder">定义要创建的上下文的模型的生成器。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
      <summary>此类由 Code First 迁移用于读取和写入数据库中的迁移历史记录。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryRow.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ContextKey">
      <summary>获取或设置一个键，该键表示行应用的上下文。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
      <summary>获取或设置此行表示的迁移的 ID。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
      <summary>获取或设置此迁移应用后模型的状态。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
      <summary>获取或设置创建此条目的实体框架的版本。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
      <summary>表示自动迁移将导致数据丢失时出现的错误。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor">
      <summary>初始化 AutomaticDataLossException 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
      <summary>初始化 AutomaticDataLossException 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String,System.Exception)">
      <summary>初始化 MigrationsException 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致当前异常的异常，如果未指定内部异常，则为一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
      <summary>表示在应用最后一个迁移后仍然存在挂起的模型更改并且禁用了自动迁移时出现的错误。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor">
      <summary>初始化 AutomaticMigrationsDisabledException 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
      <summary>初始化 AutomaticMigrationsDisabledException 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String,System.Exception)">
      <summary>初始化 MigrationsException 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致当前异常的异常，如果未指定内部异常，则为一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration">
      <summary>由 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 显式实现，用于防止某些成员在已搭建基架的迁移的 IntelliSense 中出现。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.IDbMigration.AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
      <summary>将自定义 <see cref="T:System.Data.Entity.Migrations.Model.MigrationOperation" /> 添加到迁移中。鼓励自定义操作实现人员在 <see cref="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration" /> 上创建扩展方法，为添加新操作提供 Fluent 样式的 API。</summary>
      <param name="migrationOperation">要添加的操作。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
      <summary>提供有关基于代码的迁移的其他元数据。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
      <summary>获取迁移的唯一标识符。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
      <summary>获取此迁移运行前模型的状态。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
      <summary>获取此迁移运行后模型的状态。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
      <summary>表示 Code First 迁移管道内出现的错误。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor">
      <summary>初始化 MigrationsException 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化数据初始化 MigrationsException 类的新实例。</summary>
      <param name="info">包含有关正在发生的异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">包含有关源或目标的上下文信息的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
      <summary>初始化 MigrationsException 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String,System.Exception)">
      <summary>初始化 MigrationsException 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致当前异常的异常，如果未指定内部异常，则为一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
      <summary>可用于迁移过程的记录器的基类。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
      <summary>记录信息性消息。</summary>
      <param name="message">要记录的消息。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
      <summary>记录只应在用户请求详细输出时呈现给他们的一些其他信息。</summary>
      <param name="message">要记录的消息。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
      <summary>记录用户应了解的警告。</summary>
      <param name="message">要记录的消息。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException">
      <summary>当由于某些现有迁移尚未应用到数据库，导致无法执行操作时引发。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor">
      <summary>初始化 MigrationsPendingException 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String)">
      <summary>初始化 MigrationsPendingException 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String,System.Exception)">
      <summary>初始化 MigrationsPendingException 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致当前异常的异常，如果未指定内部异常，则为一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
      <summary>表示包装核心 <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> 的修饰器的基类。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase" /> 类的新实例。</summary>
      <param name="innerMigrator">此修饰器将包装的迁移程序。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
      <summary>获取要用于迁移过程的配置。</summary>
      <returns>要用于迁移过程的过程。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
      <summary>获取已应用于数据库的迁移的列表。</summary>
      <returns>迁移 ID 的列表。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
      <summary>获取程序集中定义的迁移的列表。</summary>
      <returns>迁移 ID 的列表。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
      <summary>获取尚未应用于数据库的挂起的迁移的列表。</summary>
      <returns>迁移 ID 的列表。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
      <summary>将目标数据库更新到最新迁移。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
      <summary>将目标数据库更新到给定迁移。</summary>
      <param name="targetMigration">要升级/降级到的迁移。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
      <summary>在迁移操作期间提供日志记录的修饰器。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
      <summary>初始化 MigratorLoggingDecorator 类的新实例。</summary>
      <param name="innerMigrator">此修饰器将包装的迁移程序。</param>
      <param name="logger">消息将写入到的记录器。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
      <summary>生成 SQL 脚本而不是将更改应用于数据库的修饰器。使用此修饰器包装 <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> 将防止 <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> 将任何更改应用于目标数据库。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>初始化 MigratorScriptingDecorator 类的新实例。</summary>
      <param name="innerMigrator">此修饰器将包装的迁移程序。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)">
      <summary>生成更新数据库的脚本。</summary>
      <returns>生成的 SQL 脚本。</returns>
      <param name="sourceMigration">要从其进行更新的迁移。如果未提供，则将生成更新当前数据库的脚本。</param>
      <param name="targetMigration">要更新到的迁移。如果未提供，则将生成更新到最新迁移的脚本。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
      <summary>表示将添加到表中的列。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
      <summary>初始化 AddColumnOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">列应添加到的表的名称。</param>
      <param name="column">将添加的列的详细信息。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
      <summary>获取将添加的列的详细信息。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
      <summary>获取表示删除已添加列的操作。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
      <summary>获取一个值，该值指示更改是否具有破坏性。</summary>
      <returns>如果更改具有破坏性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
      <summary>获取列应添加到的表的名称。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
      <summary>表示将添加到表中的外键约束。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
      <summary>初始化 AddForeignKeyOperation 类的新实例。还应填充 PrincipalTable、PrincipalColumns、DependentTable 和 DependentColumns 属性。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
      <summary>获取或设置指示是否应在外键约束上配置级联删除的值。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
      <summary>获取在外键列上创建索引的操作。</summary>
      <returns>添加索引的操作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
      <summary>获取删除外键约束的操作。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
      <summary>获取或设置一个值，该值指示此更改是否将导致数据丢失。</summary>
      <returns>如果此更改将导致数据丢失，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
      <summary>外键约束应面向的列的名称。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
      <summary>表示向表添加主键。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
      <summary>初始化 AddPrimaryKeyOperation 类的新实例。还应填充 Table 和 Columns 属性。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
      <summary>获取删除主键的操作。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.IsClustered">
      <summary>获取或设置此键是否为聚集主键。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
      <summary>表示更改现有列。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
      <summary>初始化 AlterColumnOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">列所属表的名称。</param>
      <param name="column">列应更改为的内容的详细信息。</param>
      <param name="isDestructiveChange">指示此更改是否会导致数据丢失的值。</param>
      <param name="inverse">还原对此列的更改的操作。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
      <summary>初始化 AlterColumnOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">列所属表的名称。</param>
      <param name="column">列应更改为的内容的详细信息。</param>
      <param name="isDestructiveChange">指示此更改是否会导致数据丢失的值。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
      <summary>获取列的新定义。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
      <summary>获取表示还原更改的操作。无法自动计算反向，如果未向构造函数提供反向，则此属性将返回 null。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
      <summary>获取一个值，该值指示此更改是否会导致数据丢失。</summary>
      <returns>如果此更改将导致数据丢失，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
      <summary>获取列所属表的名称。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation">
      <summary>表示更改现有存储过程。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" /> 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">存储过程的名称。</param>
      <param name="bodySql">SQL 中表示的存储过程的主体。</param>
      <param name="anonymousArguments">使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterProcedureOperation.Inverse">
      <summary>获取将还原此操作的操作。始终返回 <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation" />。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterTableOperation">
      <summary>表示对表中的自定义注释所做的更改。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" /> 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">其中注释已更改的表的名称。</param>
      <param name="annotations">表中已更改的自定义注释。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Annotations">
      <summary>获取表中已更改的自定义注释。</summary>
      <returns>表中已更改的自定义注释。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Columns">
      <summary>获取要包括在表中的注释已更改的列。</summary>
      <returns>要包括在其注释已更改的表中的列。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Inverse">
      <summary>获取此操作的反向操作，以便注释将在应用此操作之前恢复原样。</summary>
      <returns>此操作的方向操作，以便注释将在应用此操作之前恢复原样。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.IsDestructiveChange">
      <summary>获取一个值，该值指示此操作是否会导致数据丢失。</summary>
      <returns>如果此操作会导致数据丢失，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Name">
      <summary>获取其中注释已更改的表的名称。</summary>
      <returns>其中注释已更改的表的名称。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
      <summary>表示有关列的信息。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>初始化 ColumnModel 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="type">此列的数据类型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>初始化 ColumnModel 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="type">此列的数据类型。</param>
      <param name="typeUsage">有关数据类型的其他详细信息。这些信息包括最大长度、可为空属性等详细信息。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Annotations">
      <summary>获取或设置列中已更改的自定义注释。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
      <summary>获取与此列的数据库类型对应的 CLR 类型的默认值。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
      <summary>获取与此列的数据库类型对应的 CLR 类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
      <summary>获取或设置指示此列的值是否由使用标识模式的数据库生成的值。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Core.Common.DbProviderManifest)">
      <summary>确定此列的数据类型是否窄于另一列的。用于确定将提供的列定义更改为此定义是否会导致数据丢失。</summary>
      <returns>如果此列的数据类型更窄，则为 True。</returns>
      <param name="column">要与之比较的列。</param>
      <param name="providerManifest">正使用的数据库提供程序的详细信息。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
      <summary>获取或设置指示此列是否可存储 null 值的值。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
      <summary>获取或设置一个值，指示是否应将此属性模型配置为时间戳。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
      <summary>表示创建数据库索引。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
      <summary>初始化 CreateIndexOperation 类的新实例。还应填充 Table 和 Columns 属性。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
      <summary>获取删除此索引的操作。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsClustered">
      <summary>获取或设置此索引是否为聚集索引。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
      <summary>获取或设置一个值，该值指示此更改是否将导致数据丢失。</summary>
      <returns>如果此更改将导致数据丢失，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
      <summary>获取或设置指示此索引是否是唯一索引的值。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation">
      <summary>要向数据库中添加新存储过程的迁移操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" /> 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">存储过程的名称。</param>
      <param name="bodySql">SQL 中表示的存储过程的主体。</param>
      <param name="anonymousArguments">使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateProcedureOperation.Inverse">
      <summary>获取删除存储过程的操作。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
      <summary>表示创建表。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要创建的表的名称。</param>
      <param name="annotations">要创建的表中存在的自定义注释。可能为 null 或为空。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要创建的表的名称。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Annotations">
      <summary>获取要创建的表中存在的自定义注释。</summary>
      <returns>要创建的表中存在的自定义注释。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
      <summary>获取要包含在新表中的列。</summary>
      <returns>要包含在新表中的列。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
      <summary>获取删除表的操作。</summary>
      <returns>删除表的操作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
      <summary>获取指示此操作是否会导致数据丢失的值。</summary>
      <returns>如果此操作会导致数据丢失，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
      <summary>获取要创建的表的名称。</summary>
      <returns>要创建的表的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
      <summary>获取或设置新表的主键。</summary>
      <returns>新表的主键。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
      <summary>表示将从表中删除的列。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>初始化 DropColumnOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">应从中删除列的表的名称。</param>
      <param name="name">要删除的列的名称。</param>
      <param name="removedAnnotations">要删除的列中存在的自定义注释。可能为 null 或为空。</param>
      <param name="inverse">表示还原删除操作的操作。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>初始化 DropColumnOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">应从中删除列的表的名称。</param>
      <param name="name">要删除的列的名称。</param>
      <param name="removedAnnotations">要删除的列中存在的自定义注释。可能为 null 或为空。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>初始化 DropColumnOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">应从中删除列的表的名称。</param>
      <param name="name">要删除的列的名称。</param>
      <param name="inverse">表示还原删除操作的操作。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
      <summary>初始化 DropColumnOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">应从中删除列的表的名称。</param>
      <param name="name">要删除的列的名称。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
      <summary>获取表示还原删除列的操作。无法自动计算反向，如果未向构造函数提供反向，则此属性将返回 null。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
      <summary>获取一个值，该值指示此操作是否会导致数据丢失。</summary>
      <returns>如果此操作会导致数据丢失，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
      <summary>获取要删除的列的名称。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.RemovedAnnotations">
      <summary>获取要删除的列中存在的自定义注释。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
      <summary>获取应从中删除列的表的名称。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
      <summary>表示将从表中删除的外键约束。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" /> 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="inverse">表示还原删除外键约束的操作。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" /> 类的新实例。还应填充 PrincipalTable、DependentTable 和 DependentColumns 属性。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
      <summary>获取删除外键列上关联的索引的操作。</summary>
      <returns>删除索引的操作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
      <summary>获取表示还原删除外键约束的操作。无法自动计算反向，如果未向构造函数提供反向，则此属性将返回 null。</summary>
      <returns>表示还原删除外键约束的操作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
      <summary>获取一个值，该值指示更改是否具有破坏性。</summary>
      <returns>如果更改具有破坏性，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
      <summary>表示删除现有索引。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
      <summary>初始化 DropIndexOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="inverse">表示还原删除索引的操作。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
      <summary>初始化 DropIndexOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
      <summary>获取表示还原删除索引的操作。无法自动计算反向，如果未向构造函数提供反向，则此属性将返回 null。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
      <summary>获取一个值，该值指示此操作是否会导致数据丢失。</summary>
      <returns>如果此操作会导致数据丢失，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
      <summary>表示从表中删除主键。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
      <summary>初始化 DropPrimaryKeyOperation 类的新实例。还应填充 Table 和 Columns 属性。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.CreateTableOperation">
      <summary>在更改迁移历史记录表时使用，以便可以重新构建表，而不是简单地删除和添加主键。</summary>
      <returns>用于迁移历史记录表的创建表操作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
      <summary>获取添加主键的操作。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropProcedureOperation">
      <summary>从数据库中删除存储过程。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropProcedureOperation.#ctor(System.String,System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" /> 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要删除的存储过程的名称。</param>
      <param name="anonymousArguments">使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Inverse">
      <summary>获取将还原此操作的操作。始终返回 <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.IsDestructiveChange">
      <summary>获取指示此操作是否会导致数据丢失的值。始终返回 false。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Name">
      <summary>获取要删除的存储过程的名称。</summary>
      <returns>要删除的存储过程的名称。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
      <summary>表示删除现有表。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>初始化 DropTableOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要删除的表的名称。</param>
      <param name="removedAnnotations">要删除的表中存在的自定义注释。可能为 null 或为空。</param>
      <param name="removedColumnAnnotations">要删除的表的列中存在的自定义注释。可能为 null 或为空。</param>
      <param name="inverse">表示还原删除表的操作。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>初始化 DropTableOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要删除的表的名称。</param>
      <param name="removedAnnotations">要删除的表中存在的自定义注释。可能为 null 或为空。</param>
      <param name="removedColumnAnnotations">要删除的表的列中存在的自定义注释。可能为 null 或为空。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>初始化 DropTableOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要删除的表的名称。</param>
      <param name="inverse">表示还原删除表的操作。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
      <summary>初始化 DropTableOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要删除的表的名称。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
      <summary>获取表示还原删除表的操作。无法自动计算反向，如果未向构造函数提供反向，则此属性将返回 null。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
      <summary>获取一个值，该值指示此操作是否会导致数据丢失。</summary>
      <returns>如果此操作会导致数据丢失，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
      <summary>获取要删除的表的名称。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.RemovedAnnotations">
      <summary>获取要删除的表中存在的自定义注释。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.RemovedColumnAnnotations">
      <summary>获取要删除的表的各列中的自定义注释。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
      <summary>影响外键约束的更改的基类。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
      <summary>初始化 ForeignKeyOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
      <summary>外键列的名称。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
      <summary>获取或设置其中存在外键列的表的名称。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
      <summary>获取指示是否为此外键约束提供了特定名称的值。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
      <summary>获取或设置此外键约束的名称。如果未提供名称，则将计算默认名称。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
      <summary>获取或设置外键约束面向的表的名称。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
      <summary>表示对迁移历史记录表的 DML 更改的操作。迁移历史记录表用于存储已应用于数据库的迁移的日志。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.Object)">
      <summary>初始化 HistoryOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="commandTrees">表示要应用于历史记录表的操作的命令目录树序列。</param>
      <param name="anonymousArguments">使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.CommandTrees">
      <summary>表示要应用于历史记录表的操作的命令序列。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
      <summary>获取一个值，该值指示此操作是否会导致数据丢失。</summary>
      <returns>如果此操作会导致数据丢失，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
      <summary>影响索引的操作的常规基类。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
      <summary>初始化 IndexOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.BuildDefaultName(System.Collections.Generic.IEnumerable{System.String})">
      <summary>根据提供的列名创建一个默认索引名称。</summary>
      <returns>默认索引名称。</returns>
      <param name="columns">用于创建默认索引名称的列名。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
      <summary>获取已编制索引的列。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
      <summary>获取指示是否为此索引提供了特定名称的值。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
      <summary>获取或设置此索引的名称。如果未提供名称，则将计算默认名称。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
      <summary>获取或设置此索引所属的表。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
      <summary>表示修改数据库架构的操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
      <summary>初始化 MigrationOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="anonymousArguments">使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
      <summary>获取提供程序可能会处理的其他参数。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
      <summary>获取将还原此操作的操作。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
      <summary>获取指示此操作是否会导致数据丢失的值。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation">
      <summary>表示将存储过程移动到数据库中的新架构。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" /> 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要移动的存储过程的名称。</param>
      <param name="newSchema">存储过程的新架构。</param>
      <param name="anonymousArguments">使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Inverse">
      <summary>获取将还原此操作的操作。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.IsDestructiveChange">
      <summary>获取指示此操作是否会导致数据丢失的值。始终返回 false。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Name">
      <summary>获取要移动的存储过程的名称。</summary>
      <returns>要移动的存储过程的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.NewSchema">
      <summary>获取存储过程的新架构。</summary>
      <returns>存储过程的新架构。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
      <summary>表示将表从一个架构移至另一个架构。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>初始化 MoveTableOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要移动的表的名称。</param>
      <param name="newSchema">要将表移至的架构的名称。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.ContextKey">
      <summary>在更改迁移历史记录表时使用，以便可以将数据移到新表。</summary>
      <returns>模型的上下文键。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.CreateTableOperation">
      <summary>在更改迁移历史记录表时使用，以便可以重新构建表，而不是简单地删除和添加主键。</summary>
      <returns>用于迁移历史记录表的创建表操作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
      <summary>获取将表移回其原始架构的操作。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
      <summary>获取一个值，该值指示此更改是否将导致数据丢失。</summary>
      <returns>如果此更改将导致数据丢失，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsSystem">
      <summary>获取一个指示表是否为系统表的值。</summary>
      <returns>如果表是系统表，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
      <summary>获取要移动的表的名称。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
      <summary>获取要将表移至的架构的名称。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.NotSupportedOperation">
      <summary>表示一项可能因不受目标数据库提供程序的支持而无法执行的迁移操作。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.NotSupportedOperation.IsDestructiveChange">
      <summary>获取指示此操作是否会导致数据丢失的值。始终返回 false。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ParameterModel">
      <summary>表示有关参数的信息。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>使用指定类型初始化 ParameterModel 类的新实例。</summary>
      <param name="type">此参数的数据类型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>使用指定类型和类型用法初始化 ParameterModel 类的新实例。</summary>
      <param name="type">此参数的数据类型。</param>
      <param name="typeUsage">有关数据类型的其他详细信息。这些信息包括最大长度、可为空属性等详细信息。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ParameterModel.IsOutParameter">
      <summary>获取或设置一个指示此实例是否为 out 参数的值。</summary>
      <returns>如果此实例是 out 参数，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
      <summary>用于表示影响主键的操作的常规基类。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
      <summary>初始化 PrimaryKeyOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.BuildDefaultName(System.String)">
      <summary>返回主键的默认名称。</summary>
      <returns>默认主键名称。</returns>
      <param name="table">目标表名。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
      <summary>获取组成主键的列。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
      <summary>获取指示是否为此主键提供了特定名称的值。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
      <summary>获取一个值，该值指示此操作是否会导致数据丢失。</summary>
      <returns>如果此操作会导致数据丢失，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
      <summary>获取或设置此主键的名称。如果未提供名称，则将计算默认名称。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
      <summary>获取或设置包含主键的表的名称。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ProcedureOperation">
      <summary>影响存储过程的迁移操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.ProcedureOperation" /> 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">存储过程的名称。</param>
      <param name="bodySql">SQL 中表示的存储过程的主体。</param>
      <param name="anonymousArguments">使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.BodySql">
      <summary>获取 SQL 中表示的存储过程的主体。</summary>
      <returns>SQL 中表示的存储过程的主体。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.IsDestructiveChange">
      <summary>获取指示此操作是否会导致数据丢失的值。始终返回 false。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Name">
      <summary>获取存储过程的名称。</summary>
      <returns>存储过程的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Parameters">
      <summary>获取存储过程的参数。</summary>
      <returns>存储过程的参数。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PropertyModel">
      <summary>表示有关实体属性的信息。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PropertyModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>初始化 PropertyModel 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="type">此属性模型的数据类型。</param>
      <param name="typeUsage">有关数据类型的其他详细信息。这些信息包括最大长度、可为空属性等详细信息。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValue">
      <summary>获取或设置要用作此属性模型的默认值的常量值。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValueSql">
      <summary>获取或设置用作此属性模型的默认值的 SQL 表达式。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsFixedLength">
      <summary>获取或设置一个指示此属性模型的长度是否固定的值。仅对数组数据类型有效。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsUnicode">
      <summary>获取或设置一个指示此属性模型是否支持 Unicode 字符的值。仅对文本数据类型有效。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.MaxLength">
      <summary>获取或设置此属性模型的最大长度。仅对数组数据类型有效。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Name">
      <summary>获取或设置属性模型的名称。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Precision">
      <summary>获取或设置此属性模型的精度。仅对十进制数据类型有效。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Scale">
      <summary>获取或设置此属性模型的小数位数。仅对十进制数据类型有效。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.StoreType">
      <summary>获取或设置要用于此属性模型的提供程序特定数据类型。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Type">
      <summary>获取此属性模型的数据类型。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.TypeUsage">
      <summary>获取有关此属性模型的数据类型的其他详细信息。这些信息包括最大长度、可为空属性等详细信息。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
      <summary>表示重命名现有列。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>初始化 RenameColumnOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="table">列所属表的名称。</param>
      <param name="name">要重命名的列的名称。</param>
      <param name="newName">列的新名称。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
      <summary>获取还原重命名的操作。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
      <summary>获取一个值，该值指示此操作是否会导致数据丢失。</summary>
      <returns>如果此操作会导致数据丢失，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
      <summary>获取要重命名的列的名称。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
      <summary>获取列的新名称。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
      <summary>获取列所属表的名称。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameIndexOperation">
      <summary>表示现有索引的重命名操作。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameIndexOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>初始化 RenameIndexOperation 类的新实例。</summary>
      <param name="table">索引所属表的名称。</param>
      <param name="name">要重命名的索引的名称。</param>
      <param name="newName">索引的新名称。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Inverse">
      <summary>获取还原索引原来名称的操作。</summary>
      <returns>还原索引原来名称的操作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.IsDestructiveChange">
      <summary>获取是否重命名索引对操作具有破坏性。</summary>
      <returns>如果重命名索引对操作具有破坏性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Name">
      <summary>获取要重命名的索引的名称。</summary>
      <returns>要重命名的索引的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.NewName">
      <summary>获取索引的新名称。</summary>
      <returns>索引的新名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Table">
      <summary>获取索引所属表的名称。</summary>
      <returns>索引所属表的名称。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation">
      <summary>表示重命名数据库中的一个存储过程。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" /> 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要重命名的存储过程的名称。</param>
      <param name="newName">存储过程的新名称。</param>
      <param name="anonymousArguments">使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Inverse">
      <summary>获取将还原此操作的操作。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.IsDestructiveChange">
      <summary>获取指示此操作是否会导致数据丢失的值。始终返回 false。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Name">
      <summary>获取要重命名的存储过程的名称。</summary>
      <returns>要重命名的存储过程的名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.NewName">
      <summary>获取存储过程的新名称。</summary>
      <returns>存储过程的新名称。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
      <summary>表示重命名现有表。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>初始化 RenameTableOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="name">要重命名的表的名称。</param>
      <param name="newName">表的新名称。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
      <summary>获取还原重命名的操作。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
      <summary>获取一个值，该值指示更改是否具有破坏性。</summary>
      <returns>如果更改具有破坏性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
      <summary>获取要重命名的表的名称。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
      <summary>获取表的新名称。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
      <summary>表示要直接对目标数据库执行的提供程序特定 SQL 语句。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
      <summary>初始化 SqlOperation 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="sql">要执行的 SQL。</param>
      <param name="anonymousArguments">提供程序可能会处理的其他参数。使用匿名类型语法指定参数，例如“new { SampleArgument = "MyValue" }”。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
      <summary>获取一个值，该值指示此操作是否会导致数据丢失。</summary>
      <returns>如果此操作会导致数据丢失，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
      <summary>获取要执行的 SQL。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
      <summary>获取或设置指示是否应在用于进行迁移过程事务的事务范围外执行此语句的值。如果设置为 true，则在迁移过程失败时，不会回滚此操作。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation">
      <summary>在对更新数据库操作编写脚本以存储已对数据库执行的操作时使用。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree})">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation" /> 类的新实例。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="historyQueryTrees">用于确定是否需要对数据库应用此迁移的查询。这用于生成可在任何版本中对数据库运行的幂等 SQL 脚本。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.AddMigration(System.String,System.Collections.Generic.IList{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary>为此更新数据库操作添加迁移。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <param name="migrationId">迁移的 ID。</param>
      <param name="operations">迁移所应用的各项操作。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.HistoryQueryTrees">
      <summary>用于确定是否需要对数据库应用此迁移的查询。这用于生成可在任何版本中对数据库运行的幂等 SQL 脚本。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.IsDestructiveChange">
      <summary>获取一个值，以指示其中任何操作是否会导致数据丢失。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migrations">
      <summary>获取在更新数据库期间应用的迁移。</summary>
      <returns>在更新数据库期间应用的迁移。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration">
      <summary>表示要应用于数据库的迁移。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.MigrationId">
      <summary>获取迁移的 ID。</summary>
      <returns>迁移的 ID。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.Operations">
      <summary>获取此迁移所应用的各项操作。</summary>
      <returns>此迁移所应用的各项操作。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
      <summary>将提供程序不可知的迁移操作转换为数据库提供程序特定 SQL 命令的提供程序的常规基类。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.BuildStoreTypeUsage(System.String,System.Data.Entity.Migrations.Model.PropertyModel)">
      <summary>使用指定 <paramref name="propertyModel" /> 中的 Facet 为指定 <paramref name="storeTypeName" /> 生成存储类型用法。</summary>
      <returns>特定于存储的 TypeUsage</returns>
      <param name="storeTypeName">存储类型的名称。</param>
      <param name="propertyModel">目标属性。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>将一组迁移操作转换为数据库提供程序特定 SQL。</summary>
      <returns>为执行迁移操作而要执行的 SQL 语句的列表。</returns>
      <param name="migrationOperations">要转换的操作。</param>
      <param name="providerManifestToken">表示将面向的数据库版本的标记。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.GenerateProcedureBody(System.Collections.Generic.ICollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.String,System.String)">
      <summary>为存储过程生成 SQL 主体。</summary>
      <returns>存储过程的 SQL 主体。</returns>
      <param name="commandTrees">表示针对插入、更新或删除操作的命令的命令目录树。</param>
      <param name="rowsAffectedParameter">影响了参数名称的行。</param>
      <param name="providerManifestToken">提供程序清单标记。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.ProviderManifest">
      <summary>获取或设置提供程序清单。</summary>
      <returns>提供程序清单。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
      <summary>表示已转换为 SQL 语句的迁移操作。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationStatement.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Sql.MigrationStatement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.BatchTerminator">
      <summary>为数据库提供程序获取或设置批处理终止符。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
      <returns>数据库提供程序的批处理终止符。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
      <summary>获取或设置为执行此迁移操作而要执行的 SQL。实体框架迁移 API 未被设计为接受不可信源（例如应用程序的最终用户）提供的输入。如果接受来自此类源的输入，则应该首先对其进行验证，然后传递给这些 API，以便防止 SQL 注入攻击之类的威胁。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
      <summary>获取或设置指示是否应在用于进行迁移过程事务的事务范围外执行此语句的值。如果设置为 true，则在迁移过程失败时，不会回滚此操作。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
      <summary>与 <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> 相同，但以部分信任模式运行，添加所生成缩进字符串的显式缓存，同时将仅包含 \r\n 或 \n 的字符串的写入识别为写入行，以确保在下一行正确缩进。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>使用指定的文本编写器和默认 Tab 字符串，初始化 IndentedTextWriter 类的新实例。请注意，传递到此构造函数的编写器必须使用 <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture" /> 属性指定的 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <param name="writer">用于输出的 <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>使用指定的文本编写器和 Tab 字符串，初始化 IndentedTextWriter 类的新实例。请注意，传递到此构造函数的编写器必须使用 <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture" /> 属性指定的 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <param name="writer">用于输出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="tabString">用于缩进的 Tab 字符串。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
      <summary>关闭正在向其写入的文档。</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture">
      <summary>指定将由基础 TextWriter 使用的区域性。此静态属性为只读。请注意，传递到 <see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter" /> 的构造函数之一的任何编写器都必须使用此相同的区域性。区域性为 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.CurrentIndentation">
      <summary>生成表示当前新行缩进级别的字符串。</summary>
      <returns>一个空字符串，或者是包含所指定 Tab 字符串 .Indent 级别值的字符串。</returns>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
      <summary>指定默认 Tab 字符串。此字段为常数。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
      <summary>获取供文本编写器使用的编码。</summary>
      <returns>指示供文本编写器使用的编码的 <see cref="T:System.Text.Encoding" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
      <summary>刷新流。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
      <summary>获取或设置要缩进的空格数。</summary>
      <returns>要缩进的空格数。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
      <summary>获取要使用的 <see cref="T:System.IO.TextWriter" />。</summary>
      <returns>要使用的 <see cref="T:System.IO.TextWriter" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
      <summary>获取或设置要使用的换行符。</summary>
      <returns>要使用的换行符。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
      <summary>根据 <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" /> 属性为每个缩进级别输出一次 Tab 字符串。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
      <summary>将 Boolean 值的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 Boolean 值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
      <summary>将字符写入文本流。</summary>
      <param name="value">要写入的字符。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
      <summary>将字符数组写入文本流。</summary>
      <param name="buffer">要写入的字符数组。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>将字符的子数组写入文本流。</summary>
      <param name="buffer">要从中写出数据的字符数组。</param>
      <param name="index">在缓冲区中开始索引。</param>
      <param name="count">要写入的字符数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
      <summary>将 Double 的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 double。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
      <summary>将整数的文本表示形式写入文本流。</summary>
      <param name="value">要写入的整数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
      <summary>将 8 字节整数的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 8 字节整数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
      <summary>将对象的文本表示形式写入文本流。</summary>
      <param name="value">要写入的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
      <summary>将 Single 的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 single。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
      <summary>将指定的字符串写入文本流。</summary>
      <param name="value">要写入的字符串。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>使用与指定语义相同的语义写出已格式化的字符串。</summary>
      <param name="format">格式化字符串。</param>
      <param name="arg0">要写入已格式化字符串的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>使用与指定语义相同的语义写出已格式化的字符串。</summary>
      <param name="format">要使用的格式化字符串。</param>
      <param name="arg0">第一个要写入已格式化字符串的对象。</param>
      <param name="arg1">第二个要写入已格式化字符串的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>使用与指定语义相同的语义写出已格式化的字符串。</summary>
      <param name="format">要使用的格式化字符串。</param>
      <param name="arg">要输出的参数数组。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
      <summary>写入一个行结束符。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>将后跟行结束符的 Boolean 的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 Boolean。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
      <summary>将后跟行结束符的字符写入文本流。</summary>
      <param name="value">要写入的字符。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>将后跟行结束符的字符数组写入文本流。</summary>
      <param name="buffer">要写入的字符数组。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>将后跟行结束符的字符子数组写入文本流。</summary>
      <param name="buffer">要从中写出数据的字符数组。</param>
      <param name="index">在缓冲区中开始索引。</param>
      <param name="count">要写入的字符数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
      <summary>将后跟行结束符的 Double 的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 double。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>将后跟行结束符的整数的文本表示形式写入文本流。</summary>
      <param name="value">要写入的整数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>将后跟行结束符的 8 字节整数的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 8 字节整数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
      <summary>将后跟行结束符的对象的文本表示形式写入文本流。</summary>
      <param name="value">要写入的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
      <summary>将后跟行结束符的 Single 的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 single。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
      <summary>将后跟行结束符的指定字符串写入文本流。</summary>
      <param name="value">要写入的字符串。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>使用与指定语义相同的语义写出后跟行结束符的已格式化字符串。</summary>
      <param name="format">格式化字符串。</param>
      <param name="arg0">要写入已格式化字符串的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>使用与指定语义相同的语义写出后跟行结束符的已格式化字符串。</summary>
      <param name="format">要使用的格式化字符串。</param>
      <param name="arg0">第一个要写入已格式化字符串的对象。</param>
      <param name="arg1">第二个要写入已格式化字符串的对象。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>使用与指定语义相同的语义写出后跟行结束符的已格式化字符串。</summary>
      <param name="format">要使用的格式化字符串。</param>
      <param name="arg">要输出的参数数组。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>将后跟行结束符的 UInt32 的文本表示形式写入文本流。</summary>
      <param name="value">要输出的 UInt32。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>将指定字符串写入无制表符的行。</summary>
      <param name="value">要写入的字符串。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
      <summary>允许为模型中的复杂类型执行配置。可以通过对 <see cref="T:System.Data.Entity.DbModelBuilder" /> 使用 ComplexType 方法来获取 ComplexTypeConfiguration，也可以通过对 <see cref="T:System.Data.Entity.DbModelBuilder" /> 使用 Configurations 属性来注册从 ComplexTypeConfiguration 派生的自定义类型。</summary>
      <typeparam name="TComplexType">要配置的复杂类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
      <summary>初始化 ComplexTypeConfiguration 的一个新实例</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果对象相等，则为 true；否则为 false。</returns>
      <param name="obj">要与指定对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>特定类型的哈希函数。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType">
      <summary>获取当前实例的类型。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>从模型中排除某个属性，使该属性不会映射到数据库。</summary>
      <returns>同一个 ComplexTypeConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <typeparam name="TProperty">要忽略的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
      <summary>允许为模型中的实体类型执行配置。可以通过对 <see cref="T:System.Data.Entity.DbModelBuilder" /> 使用 Entity 方法来获取 EntityTypeConfiguration，也可以通过对 <see cref="T:System.Data.Entity.DbModelBuilder" /> 使用 Configurations 属性来注册从 EntityTypeConfiguration 派生的自定义类型。</summary>
      <typeparam name="TEntityType">要配置的实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
      <summary>初始化 EntityTypeConfiguration 的一个新实例</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)">
      <summary>返回指定的配置模型是否等于当前配置模型。</summary>
      <returns>如果指定的配置模型等于当前配置模型，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的模型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode">
      <summary>返回指定配置模型的哈希函数。</summary>
      <returns>指定模型生成器的哈希函数。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType">
      <summary>获取当前模型配置的类型。</summary>
      <returns>当前模型配置的类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary>配置要用于此实体类型的实体集名称。只能为每个集中的基类型配置实体集名称。</summary>
      <returns>同一个 EntityTypeConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="entitySetName">实体集的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>配置此实体类型的主键属性。</summary>
      <returns>同一个 EntityTypeConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="keyExpression">表示要用作主键的属性的 lambda 表达式。C#：t =&amp;gt; t.Id VB.Net：Function(t) t.Id 如果主键由多个属性组成，则请指定包括这些属性的匿名类型。C#：t =&amp;gt; new { t.Id1, t.Id2 } VB.Net：Function(t) New With { t.Id1, t.Id2 }</param>
      <typeparam name="TKey">键的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>从此实体类型配置一对多关系。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
      <param name="navigationPropertyExpression">表示关系的导航属性的 lambda 表达式。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">关系另一端的实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>从此实体类型配置可选关系。实体类型的实例将能保存到数据库，而无需指定此关系。数据库中的外键可为 null。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
      <param name="navigationPropertyExpression">表示关系的导航属性的 lambda 表达式。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">关系另一端的实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>通过此实体类型配置必需关系。除非指定此关系，否则实体类型的实例将无法保存到数据库。数据库中的外键不可为 null。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
      <param name="navigationPropertyExpression">表示关系的导航属性的 lambda 表达式。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">关系另一端的实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>在此实体映射到的表的模型中设置注释。稍后可在处理表时（如创建迁移时）使用此注释值。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="name">注释名称，必须是有效的 C#/EDM 标识符。</param>
      <param name="value">注释值，可以是可使用 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的字符串或其他一些类型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>从模型中排除某个属性，使该属性不会映射到数据库。</summary>
      <returns>同一个 EntityTypeConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <typeparam name="TProperty">要忽略的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
      <summary>允许与派生的实体类型映射到数据库架构的方式相关的高级配置。Map 调用是累加性的，后续调用不会重写已通过 Map 执行的配置。</summary>
      <returns>同一个 EntityTypeConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="derivedTypeMapConfigurationAction">对 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> 执行配置的操作。</param>
      <typeparam name="TDerived">要配置的派生实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
      <summary>允许与此实体类型映射到数据库架构的方式相关的高级配置。默认情况下，任何配置都还会应用于从此实体类型派生的任何类型。可以使用配置派生类型的 Map 的重载，或使用派生类型的 EntityTypeConfiguration，来配置派生类型。可以使用多个 Map 调用，在多个表之间拆分实体的属性。Map 调用是累加性的，后续调用不会重写已通过 Map 执行的配置。</summary>
      <returns>同一个 EntityTypeConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="entityMappingConfigurationAction">对 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> 执行配置的操作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures">
      <summary>将此类型配置为使用插入、更新和删除的存储过程。将使用过程名称和参数名称的默认约定。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
      <summary>将此类型配置为使用插入、更新和删除的存储过程。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="modificationStoredProcedureMappingConfigurationAction">用于重写过程名称和参数名称默认约定的配置。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString">
      <summary>返回模型配置的字符串表示形式。</summary>
      <returns>模型生成器的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
      <summary>配置此实体类型映射到的表名。</summary>
      <returns>同一个 EntityTypeConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="tableName">表的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary>配置此实体类型映射到的表名。</summary>
      <returns>同一个 EntityTypeConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="tableName">表的名称。</param>
      <param name="schemaName">表的数据库架构。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
      <summary>在模型创建过程中，生成无效模型时，由 <see cref="T:System.Data.Entity.DbModelBuilder" /> 引发的异常。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
      <summary>初始化 ModelValidationException 的一个新实例</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化信息和流下文初始化 <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> 类的新实例。</summary>
      <param name="info">序列化信息。</param>
      <param name="context">流上下文。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
      <summary>初始化 ModelValidationException 的一个新实例</summary>
      <param name="message">异常消息。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
      <summary>初始化 ModelValidationException 的一个新实例</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
      <summary>用于执行关系配置的基类。通过 Code First Fluent API 可使用此配置功能，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1">
      <summary>允许为用于修改关系的存储过程执行配置。</summary>
      <typeparam name="TEntityType">将从中配置关系的实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
      <typeparam name="TProperty">属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
      <typeparam name="TProperty">属性的类型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
      <summary>用于配置实体类型或复杂类型的 <see cref="T:System.byte[]" /> 属性。通过 Code First Fluent API 可使用此配置功能，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>在用于存储属性的数据库列的模型中设置注释。可在稍后处理列时（如创建迁移时）使用此注释值。</summary>
      <returns>同一个 BinaryPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="name">注释名称，必须是有效的 C#/EDM 标识符。</param>
      <param name="value">注释值，可以是可使用 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的字符串或其他一些类型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
      <summary>配置用于存储属性的数据库列的名称。</summary>
      <returns>同一个 BinaryPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnName">列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>配置用于存储属性的数据库列的顺序。如果实体类型具有组合键，则此方法还用于指定键顺序。</summary>
      <returns>同一个 BinaryPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnOrder">此列应在数据库表中出现的顺序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
      <summary>配置用于存储属性的数据库列的数据类型。</summary>
      <returns>同一个 BinaryPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnType">特定于数据库提供程序的数据类型的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>配置数据库如何生成属性的值。</summary>
      <returns>同一个 BinaryPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="databaseGeneratedOption">用于在数据库中生成属性值的模式。设置“null”将导致使用默认选项，它可能为“None”、“Identity”或“Computed”，具体取决于属性的类型及其在模型中的语义（例如主键的处理方式不同）以及所使用的是哪组约定。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>将属性配置为具有指定的最大长度。</summary>
      <returns>同一个 BinaryPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="value">属性的最大长度。设置“null”将从属性中移除任何最大长度限制。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
      <summary>将属性配置为用作开放式并发标记。</summary>
      <returns>同一个 BinaryPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>配置属性是否要用作开放式并发标记。</summary>
      <returns>同一个 BinaryPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="concurrencyToken">指示属性是否为并发标记的值。指定“null”将从属性中移除并发标记方面。指定“null”将导致与指定“false”相同的运行时行为。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
      <summary>将属性配置为固定长度。使用 HasMaxLength 可设置属性的固定长度。</summary>
      <returns>同一个 BinaryPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
      <summary>将属性配置为允许使用数据库提供程序支持的最大长度。</summary>
      <returns>同一个 BinaryPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
      <summary>将属性配置为可选属性。用于存储此属性的数据库列将可以为 null。默认情况下，<see cref="T:System.byte[]" /> 属性是可选的。</summary>
      <returns>同一个 BinaryPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
      <summary>将属性配置为必需属性。用于存储此属性的数据库列将不可以为 null。</summary>
      <returns>同一个 BinaryPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
      <summary>将属性配置为数据库中的行版本。实际数据类型将因使用的数据库提供程序而异。将属性设置为行版本会自动将属性配置为开放式并发标记。</summary>
      <returns>同一个 BinaryPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
      <summary>将属性配置为可变长度。默认情况下，<see cref="T:System.byte[]" /> 属性为可变长度。</summary>
      <returns>同一个 BinaryPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
      <summary>配置可以支持级联删除功能的关系。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果对象相等，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前类型的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
      <summary>将级联删除配置为对关系启用。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
      <summary>配置是否对关系启用级联删除。</summary>
      <param name="value">指示是否启用级联删除的值。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
      <summary>允许实体和复杂类型的派生配置类向 <see cref="T:System.Data.Entity.DbModelBuilder" /> 注册。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
      <summary>将 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> 添加到 <see cref="T:System.Data.Entity.DbModelBuilder" /> 中。只能为模型中的每个类型添加一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" />。</summary>
      <returns>同一个 ConfigurationRegistrar 实例，以便多个调用可以链接在一起。</returns>
      <param name="complexTypeConfiguration">要添加的复杂类型配置</param>
      <typeparam name="TComplexType">要配置的复杂类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
      <summary>将 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> 添加到 <see cref="T:System.Data.Entity.DbModelBuilder" /> 中。只能为模型中的每个类型添加一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" />。</summary>
      <returns>同一个 ConfigurationRegistrar 实例，以便多个调用可以链接在一起。</returns>
      <param name="entityTypeConfiguration">要添加的实体类型配置。</param>
      <typeparam name="TEntityType">要配置的实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.AddFromAssembly(System.Reflection.Assembly)">
      <summary>发现从给定的程序集中的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> 或 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> 继承的所有类型并将每个发现的类型的实例添加到此注册器。</summary>
      <returns>同一个 ConfigurationRegistrar 实例，以便多个调用可以链接在一起。</returns>
      <param name="assembly">包含要添加的模型配置的程序集。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前对象的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration">
      <summary>创建一个约定，配置将用于在数据库中删除实体的存储过程。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>指定此实例是否等于指定对象。</summary>
      <returns>如果此实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetHashCode">
      <summary>获取与此实例关联的哈希代码。</summary>
      <returns>与此实例关联的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetType">
      <summary>获取此实例的基础类型。</summary>
      <returns>此实例的基础类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>配置存储过程的名称。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="procedureName">存储过程的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>配置存储过程的名称。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="procedureName">存储过程的名称。</param>
      <param name="schemaName">架构名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyInfo">将为其配置参数的属性。</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyName">将为其配置参数的属性的名称。</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
      <summary>配置将返回受此存储过程影响的行的输出参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration">
      <summary>创建一个约定，配置将用于在数据库中插入实体的存储过程。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>确定指定对象是否等于当前实例。</summary>
      <returns>如果指定的对象等于当前实例，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetHashCode">
      <summary>获取当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetType">
      <summary>获取与配置关联的类型。</summary>
      <returns>与配置关联的类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>配置存储过程的名称。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="procedureName">存储过程的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>配置存储过程的名称。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="procedureName">存储过程的名称。</param>
      <param name="schemaName">架构名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyInfo">将为其配置参数的属性。</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyName">将为其配置参数的属性的名称。</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
      <summary>将此存储过程的结果列配置为映射到属性。这适用于数据库生成的列。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyInfo">将为其配置结果的属性。</param>
      <param name="columnName">结果列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.String,System.String)">
      <summary>将此存储过程的结果列配置为映射到属性。这适用于数据库生成的列。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyName">将为其配置结果的属性的名称。</param>
      <param name="columnName">结果列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProcedureConfiguration">
      <summary>表示一个配置用于在数据库修改实体的存储过程的约定。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration">
      <summary>创建一个约定，配置将用于在数据库中修改实体的存储过程。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration})">
      <summary>配置用于删除实体的存储过程。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="modificationStoredProcedureConfigurationAction">一个 lambda 表达式，用于执行对存储过程的配置。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Equals(System.Object)">
      <summary>指定此配置是否等于特定对象。</summary>
      <returns>如果此配置等于特定对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetHashCode">
      <summary>获取与此配置关联的哈希代码。</summary>
      <returns>与此配置关联的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration})">
      <summary>配置用于插入实体的存储过程。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="modificationStoredProcedureConfigurationAction">一个 lambda 表达式，用于执行对存储过程的配置。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.ToString">
      <summary>返回 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration" /> 类的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration" /> 类的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration})">
      <summary>配置用于更新实体的存储过程。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="modificationStoredProcedureConfigurationAction">一个 lambda 表达式，用于执行对存储过程的配置。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration">
      <summary>标志实体类型或复杂类型的基元属性。</summary>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ClrPropertyInfo">
      <summary>获取该属性的 <see cref="T:System.Reflection.PropertyInfo" />。</summary>
      <returns>此属性的 <see cref="T:System.Reflection.PropertyInfo" />。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>指定此实例是否等于另一个对象。</summary>
      <returns>如果此实例等于另一个对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>在用于存储属性的数据库列的模型中设置注释。可在稍后处理列时（如创建迁移时）使用此注释值。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="name">注释名称，必须是有效的 C#/EDM 标识符。</param>
      <param name="value">注释值，可以是可使用 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的字符串或其他一些类型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary>配置用于存储属性的数据库列的名称。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnName">列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnOrder(System.Int32)">
      <summary>配置用于存储属性的数据库列的顺序。如果实体类型具有组合键，则此方法还用于指定键顺序。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnOrder">此列应在数据库表中出现的顺序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary>配置用于存储属性的数据库列的数据类型。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnType">特定于数据库提供程序的数据类型的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)">
      <summary>配置数据库如何生成属性的值。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="databaseGeneratedOption">用于在数据库中生成属性值的模式。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasMaxLength(System.Int32)">
      <summary>将属性配置为具有指定的最大长度。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="maxLength">属性的最大长度。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasParameterName(System.String)">
      <summary>配置存储过程中用于此属性的参数的名称。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="parameterName">参数的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte)">
      <summary>配置 <see cref="T:System.DateTime" /> 属性的精度。如果数据库提供程序不支持列的数据类型的精度，则忽略该值。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="value">属性的精度。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary>配置 <see cref="T:System.Decimal" /> 属性的精度和小数位数。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="precision">属性的精度。</param>
      <param name="scale">属性的小数位数。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary>将属性配置为用作开放式并发标记。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken(System.Boolean)">
      <summary>配置属性是否要用作开放式并发标记。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="concurrencyToken">指示属性是否为并发标记的值。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsFixedLength">
      <summary>将属性配置为固定长度。使用 HasMaxLength 可设置属性的固定长度。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsKey">
      <summary>将此属性配置为实体类型的主键的一部分。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsMaxLength">
      <summary>将属性配置为允许使用数据库提供程序支持的最大长度。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsOptional">
      <summary>将属性配置为可选属性。用于存储此属性的数据库列将可以为 null。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRequired">
      <summary>将属性配置为必需属性。用于存储此属性的数据库列将不可以为 null。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRowVersion">
      <summary>将属性配置为数据库中的行版本。实际数据类型将因使用的数据库提供程序而异。将属性设置为行版本会自动将属性配置为开放式并发标记。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode">
      <summary>将属性配置为支持 Unicode 字符串内容。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode(System.Boolean)">
      <summary>配置属性是否支持 Unicode 字符串内容。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="unicode">指示属性是否支持 Unicode 字符串内容的值。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsVariableLength">
      <summary>将属性配置为可变长度。属性在默认情况下为可变长度。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
      <summary>允许自定义 <see cref="T:System.Data.Entity.DbModelBuilder" /> 实例使用的约定。可在 System.Data.Entity.ModelConfiguration.Conventions 命名空间中找到默认约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add``1">
      <summary>启用 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的约定。</summary>
      <typeparam name="TConvention">要启用的约定类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
      <summary>启用 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的一个或多个约定。</summary>
      <param name="conventions">要启用的约定。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddAfter``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
      <summary>启用 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的约定。在指定一个约定后将运行此约定。</summary>
      <param name="newConvention">要启用的约定。</param>
      <typeparam name="TExistingConvention">在其之后将运行启用的约定的约定类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddBefore``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
      <summary>启用 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的配置约定。在指定一个约定前将运行此约定。</summary>
      <param name="newConvention">要启用的约定。</param>
      <typeparam name="TExistingConvention">在其之前将运行启用的约定的约定类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddFromAssembly(System.Reflection.Assembly)">
      <summary>发现给定程序集中的所有约定并将它们添加到 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
      <param name="assembly">包含要添加的约定的程序集。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果对象相等，则为 true；否则为 false。</returns>
      <param name="obj">一个对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前类型的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
      <summary>禁用 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的约定。可在 System.Data.Entity.ModelConfiguration.Conventions 命名空间中找到可移除的默认约定。</summary>
      <typeparam name="TConvention">要禁用的约定的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
      <summary>禁用 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的一个或多个约定。</summary>
      <param name="conventions">要禁用的约定。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration">
      <summary>允许为模型中的实体类型执行配置。通过轻型约定可使用此配置功能。</summary>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ClrType">
      <summary>获取此实体类型的 <see cref="T:System.Type" />。</summary>
      <returns>此实体类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Equals(System.Object)">
      <summary>确定指定对象是否等于当前实例。</summary>
      <returns>如果指定的对象等于当前实例，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasEntitySetName(System.String)">
      <summary>配置要用于此实体类型的实体集名称。只能为每个集中的基类型配置实体集名称。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="entitySetName">实体集的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
      <summary>配置此实体类型的主键属性。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="keyProperties">要用作主键的属性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.String})">
      <summary>配置此实体类型的主键属性。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="propertyNames">要用作主键的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Reflection.PropertyInfo)">
      <summary>配置此实体类型的主键属性。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="propertyInfo">要用作主键的属性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.String)">
      <summary>配置此实体类型的主键属性。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="propertyName">要用作主键的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasTableAnnotation(System.String,System.Object)">
      <summary>在此实体映射到的表的模型中设置注释。稍后可在处理表时（如创建迁移时）使用此注释值。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="name">注释名称，必须是有效的 C#/EDM 标识符。</param>
      <param name="value">注释值，可以是可使用 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的字符串或其他一些类型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore">
      <summary>从模型中排除此实体类型，使其不会映射到数据库。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.Reflection.PropertyInfo)">
      <summary>从模型中排除某个属性，使该属性不会映射到数据库。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="propertyInfo">要配置的属性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.String)">
      <summary>从模型中排除某个属性，使该属性不会映射到数据库。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="propertyName">要配置的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.IsComplexType">
      <summary>将此实体类型更改为复杂类型。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures">
      <summary>将此类型配置为使用插入、更新和删除的存储过程。将使用过程名称和参数名称的默认约定。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration})">
      <summary>将此类型配置为使用插入、更新和删除的存储过程。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="modificationStoredProceduresConfigurationAction">用于重写过程名称和参数名称默认约定的配置。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.Reflection.PropertyInfo)">
      <summary>配置在此类型上定义的属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyInfo">要配置的属性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.String)">
      <summary>配置在此类型上定义的属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyName">要配置的属性的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String)">
      <summary>配置此实体类型映射到的表名。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="tableName">表的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String,System.String)">
      <summary>配置此实体类型映射到的表名。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="tableName">表的名称。</param>
      <param name="schemaName">表的数据库架构。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1">
      <summary>允许为模型中的实体类型执行配置。通过轻型约定可使用此配置功能。</summary>
      <typeparam name="T">实体类型继承的类型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ClrType">
      <summary>获取此实体类型的 <see cref="T:System.Type" />。</summary>
      <returns>此实体类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Equals(System.Object)">
      <summary>确定指定对象是否等于当前实例。</summary>
      <returns>如果指定的对象等于当前实例，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetHashCode">
      <summary>检索当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary>配置要用于此实体类型的实体集名称。只能为每个集中的基类型配置实体集名称。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="entitySetName">实体集的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>配置此实体类型的主键属性。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="keyExpression">表示要用作主键的属性的 lambda 表达式。C#：t =&amp;gt; t.Id VB.Net：Function(t) t.Id 如果主键由多个属性组成，则请指定包括这些属性的匿名类型。C#：t =&amp;gt; new { t.Id1, t.Id2 } VB.Net：Function(t) New With { t.Id1, t.Id2 }</param>
      <typeparam name="TProperty">键的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>在此实体映射到的表的模型中设置注释。稍后可在处理表时（如创建迁移时）使用此注释值。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="name">注释名称，必须是有效的 C#/EDM 标识符。</param>
      <param name="value">注释值，可以是可使用 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 进行序列化的字符串或其他类型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore">
      <summary>从模型中排除此实体类型，使其不会映射到数据库。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>从模型中排除某个属性，使该属性不会映射到数据库。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <typeparam name="TProperty">要忽略的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.IsComplexType">
      <summary>将此实体类型更改为复杂类型。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures">
      <summary>将此类型配置为使用插入、更新和删除的存储过程。将使用过程名称和参数名称的默认约定。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
      <summary>将此类型配置为使用插入、更新和删除的存储过程。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="modificationStoredProceduresConfigurationAction">用于重写过程名称和参数名称默认约定的配置。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>配置在此类型上定义的属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <typeparam name="TProperty">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToString">
      <summary>将当前实例的值转换为其等效字符串表示形式。</summary>
      <returns>当前实例的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String)">
      <summary>配置此实体类型映射到的表名。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="tableName">表的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary>配置此实体类型映射到的表名。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="tableName">表的名称。</param>
      <param name="schemaName">表的数据库架构。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration">
      <summary>创建一个约定，配置将用于在数据库中更新实体的存储过程。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>确定此实例是否与指定对象相同。</summary>
      <returns>如果此实例与指定对象相同，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetType">
      <summary>返回与当前实例关联的类型。</summary>
      <returns>与当前实例关联的类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>配置存储过程的名称。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="procedureName">存储过程的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>配置存储过程的名称。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="procedureName">存储过程的名称。</param>
      <param name="schemaName">架构名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyInfo">将为其配置参数的属性。</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String,System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyInfo">将为其配置参数的属性。</param>
      <param name="currentValueParameterName">参数名称的当前值。</param>
      <param name="originalValueParameterName">参数名称的原始值。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyName">将为其配置参数的属性的名称。</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String,System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyName">将为其配置参数的属性的名称。</param>
      <param name="currentValueParameterName">参数名称的当前值。</param>
      <param name="originalValueParameterName">参数名称的原始值。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
      <summary>将此存储过程的结果列配置为映射到属性。这适用于数据库生成的列。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyInfo">将为其配置结果的属性。</param>
      <param name="columnName">结果列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.String,System.String)">
      <summary>将此存储过程的结果列配置为映射到属性。这适用于数据库生成的列。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyName">将为其配置结果的属性的名称。</param>
      <param name="columnName">结果列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
      <summary>配置将返回受此存储过程影响的行的输出参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
      <summary>用于配置实体类型或复杂类型的 <see cref="T:System.DateTime" /> 属性。通过 Code First Fluent API 可使用此配置功能，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>在用于存储属性的数据库列的模型中设置注释。可在稍后处理列时（如创建迁移时）使用此注释值。</summary>
      <returns>同一个 DateTimePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="name">注释名称，必须是有效的 C#/EDM 标识符。</param>
      <param name="value">注释值，可以是可使用 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的字符串或其他一些类型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
      <summary>配置用于存储属性的数据库列的名称。</summary>
      <returns>同一个 DateTimePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnName">列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>配置用于存储属性的数据库列的顺序。如果实体类型具有组合键，则此方法还用于指定键顺序。</summary>
      <returns>同一个 DateTimePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnOrder">此列应在数据库表中出现的顺序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
      <summary>配置用于存储属性的数据库列的数据类型。</summary>
      <returns>同一个 DateTimePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnType">特定于数据库提供程序的数据类型的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>配置数据库如何生成属性的值。</summary>
      <returns>同一个 DateTimePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="databaseGeneratedOption">用于在数据库中生成属性值的模式。设置“null”将导致使用默认选项，它可能为“None”、“Identity”或“Computed”，具体取决于属性的类型及其在模型中的语义（例如主键的处理方式不同）以及所使用的是哪组约定。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
      <summary>配置属性的精度。如果数据库提供程序不支持列的数据类型的精度，则忽略该值。</summary>
      <returns>同一个 DateTimePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="value">属性的精度。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
      <summary>将属性配置为用作开放式并发标记。</summary>
      <returns>同一个 DateTimePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>配置属性是否要用作开放式并发标记。</summary>
      <returns>同一个 DateTimePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="concurrencyToken">指示属性是否为并发标记的值。指定“null”将从属性中移除并发标记方面。指定“null”将导致与指定“false”相同的运行时行为。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
      <summary>将属性配置为可选属性。用于存储此属性的数据库列将可以为 null。</summary>
      <returns>同一个 DateTimePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
      <summary>将属性配置为必需属性。用于存储此属性的数据库列将不可以为 null。默认情况下，<see cref="T:System.DateTime" /> 属性是必需的。</summary>
      <returns>同一个 DateTimePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
      <summary>用于配置实体类型或复杂类型的 <see cref="T:System.decimal" /> 属性。通过 Code First Fluent API 可使用此配置功能，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>在用于存储属性的数据库列的模型中设置注释。可在稍后处理列时（如创建迁移时）使用此注释值。</summary>
      <returns>同一个 DecimalPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="name">注释名称，必须是有效的 C#/EDM 标识符。</param>
      <param name="value">注释值，可以是可使用 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的字符串或其他一些类型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
      <summary>配置用于存储属性的数据库列的名称。</summary>
      <returns>同一个 DecimalPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnName">列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>配置用于存储属性的数据库列的顺序。如果实体类型具有组合键，则此方法还用于指定键顺序。</summary>
      <returns>同一个 DecimalPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnOrder">此列应在数据库表中出现的顺序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
      <summary>配置用于存储属性的数据库列的数据类型。</summary>
      <returns>同一个 DecimalPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnType">特定于数据库提供程序的数据类型的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>配置数据库如何生成属性的值。</summary>
      <returns>同一个 DecimalPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="databaseGeneratedOption">用于在数据库中生成属性值的模式。设置“null”将导致使用默认选项，它可能为“None”、“Identity”或“Computed”，具体取决于属性的类型及其在模型中的语义（例如主键的处理方式不同）以及所使用的是哪组约定。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary>配置属性的精度和小数位数。</summary>
      <returns>同一个 DecimalPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="precision">属性的精度。</param>
      <param name="scale">属性的小数位数。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
      <summary>将属性配置为用作开放式并发标记。</summary>
      <returns>同一个 DecimalPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>配置属性是否要用作开放式并发标记。</summary>
      <returns>同一个 DecimalPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="concurrencyToken">指示属性是否为并发标记的值。指定“null”将从属性中移除并发标记方面。指定“null”将导致与指定“false”相同的运行时行为。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
      <summary>将属性配置为可选属性。用于存储此属性的数据库列将可以为 null。</summary>
      <returns>同一个 DecimalPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
      <summary>将属性配置为必需属性。用于存储此属性的数据库列将不可以为 null。默认情况下，<see cref="T:System.decimal" /> 属性是必需的。</summary>
      <returns>同一个 DecimalPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1">
      <summary>允许为用于删除实体的存储过程执行配置。</summary>
      <typeparam name="TEntityType">可使用存储过程进行删除的实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>检索当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetType">
      <summary>检索当前实例的类型。</summary>
      <returns>当前实例的类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>配置存储过程的名称。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="procedureName">存储过程的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>配置存储过程的名称。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="procedureName">存储过程的名称。</param>
      <param name="schemaName">架构名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>为外键属性未包含在此类中的关系配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="navigationPropertyExpression">表示关系的导航属性的 lambda 表达式。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">执行配置的 lambda 表达式。</param>
      <typeparam name="TPrincipalEntityType">关系中主体实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>为外键属性未包含在此类中的关系配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="navigationPropertyExpression">表示关系的导航属性的 lambda 表达式。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">执行配置的 lambda 表达式。</param>
      <typeparam name="TPrincipalEntityType">关系中主体实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
      <typeparam name="TProperty">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
      <typeparam name="TProperty">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
      <summary>配置将返回受此存储过程影响的行的输出参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.ToString">
      <summary>将当前实例的值转换为其等效字符串表示形式。</summary>
      <returns>当前实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
      <summary>配置可以支持在对象模型中公开的外键属性的关系。通过 Code First Fluent API 可使用此配置功能，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
      <typeparam name="TDependentEntityType">从属实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前对象的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType">
      <summary>获取当前实例的类型。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>将关系配置为使用在对象模型中公开的外键属性。如果未在对象模型中公开外键属性，则使用 Map 方法。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
      <param name="foreignKeyExpression">表示要用作外键的属性的 lambda 表达式。如果外键由多个属性组成，请指定包括这些属性的匿名类型。在使用多个外键属性时，指定这些属性的顺序必须与为主体实体类型配置主键属性的顺序相同。</param>
      <typeparam name="TKey">键的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
      <summary>配置实体类型或实体类型中属性子集的表和列映射。通过 Code First Fluent API 可使用此配置功能，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
      <typeparam name="TEntityType">要映射的实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前对象的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>在此实体映射到的表的模型中设置注释。稍后可在处理表时（如创建迁移时）使用此注释值。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="name">注释名称，必须是有效的 C#/EDM 标识符。</param>
      <param name="value">注释值，可以是可使用 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的字符串或其他一些类型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
      <summary>重新映射从基类型继承的所有属性。当将派生类型配置为映射到单独的表时，这会使所有属性都包含在该表中，而不仅仅是非继承的属性。这称为“每个具体类型一张表”(TPC) 映射。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>配置将包含在此映射片段中的属性。如果未调用此方法，则将配置尚未包含在映射片段中的所有属性。</summary>
      <param name="propertiesExpression">针对包含要映射的属性的匿名类型的 lambda 表达式。C#：t =&amp;gt; new { t.Id, t.Property1, t.Property2 } VB.Net：Function(t) New With { p.Id, t.Property1, t.Property2 }</param>
      <typeparam name="TObject">包含要映射的属性的匿名类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>配置将包含在此映射片段中的 <see cref="T:System.byte[]" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
      <summary>配置将包含在此映射片段中的 <see cref="T:DbGeography" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
      <summary>配置将包含在此映射片段中的 <see cref="T:DbGeometry" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary>配置将包含在此映射片段中的 <see cref="T:System.DateTime" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary>配置将包含在此映射片段中的 <see cref="T:System.DateTimeOffset" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary>配置将包含在此映射片段中的 <see cref="T:System.decimal" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary>配置将包含在此映射片段中的 <see cref="T:System.DateTime?" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary>配置将包含在此映射片段中的 <see cref="T:System.DateTimeOffset?" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary>配置将包含在此映射片段中的 <see cref="T:System.decimal?" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary>配置将包含在此映射片段中的 <see cref="T:System.TimeSpan?" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>配置将包含在此映射片段中的 <see cref="T:System.struct?" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <typeparam name="T">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>配置将包含在此映射片段中的 <see cref="T:System.string" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary>配置将包含在此映射片段中的 <see cref="T:System.TimeSpan" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>配置将包含在此映射片段中的 <see cref="T:System.struct" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <typeparam name="T">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>配置用于区分继承层次结构中各个类型的鉴别器条件。</summary>
      <returns>用于进一步配置鉴别器条件的配置对象。</returns>
      <param name="property">表示要用于鉴别各个类型的属性的 lambda 表达式。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <typeparam name="TProperty">要用于鉴别各个类型的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
      <summary>配置用于区分继承层次结构中的各个类型的鉴别器列。</summary>
      <returns>用于进一步配置鉴别器列和值的配置对象。</returns>
      <param name="discriminator">鉴别器列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
      <summary>配置要映射到的表名。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="tableName">表的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
      <summary>配置要映射到的表名和架构。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="tableName">表的名称。</param>
      <param name="schemaName">表的架构。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
      <summary>配置未在对象模型中公开外键属性的关系的表和列映射。通过 Code First Fluent API 可使用此配置功能，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果对象相等，则为 true；否则为 false。</returns>
      <param name="other">要与当前对象进行比较的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果对象相等，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前类型的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType">
      <summary>获取当前实例的类型。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.HasColumnAnnotation(System.String,System.String,System.Object)">
      <summary>在已使用 <see cref="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])" /> 配置的数据库列的模型中设置注释。可在稍后处理列时（如创建迁移时）使用此注释值。</summary>
      <returns>同一个 ForeignKeyAssociationMappingConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="keyColumnName">已使用 HasKey 方法配置的列的名称。</param>
      <param name="annotationName">注释名称，必须是有效的 C#/EDM 标识符。</param>
      <param name="value">注释值，可以是可使用 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的字符串或其他一些类型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
      <summary>配置外键的列名。</summary>
      <returns>同一个 ForeignKeyAssociationMappingConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="keyColumnNames">外键列名。在使用多个外键属性时，必须按照为目标实体类型配置主键属性的顺序来指定这些属性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>配置外键列所在表的名称。指定的表必须已针对实体类型进行映射。如果要外键位于其自己的表中，则对 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> 使用 Map 方法来执行实体拆分，以创建只有主键属性的表。然后可以使用此方法将外键添加到表。</summary>
      <returns>同一个 ForeignKeyAssociationMappingConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="tableName">表的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>配置外键列所在表的名称和架构。指定的表必须已针对实体类型进行映射。如果要外键位于其自己的表中，则对 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> 使用 Map 方法来执行实体拆分，以创建只有主键属性的表。然后可以使用此方法将外键添加到表。</summary>
      <returns>同一个 ForeignKeyAssociationMappingConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="tableName">表的名称。</param>
      <param name="schemaName">表的架构。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
      <summary>配置只能支持未在对象模型中公开的外键属性的关系。通过 Code First Fluent API 可使用此配置功能，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果对象相等，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象比较的对象</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前类型的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType">
      <summary>获取当前实例的类型。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
      <summary>将关系配置为使用未在对象模型中公开的外键属性。可通过指定配置操作来自定义列和表。如果指定了空的配置操作，则约定将生成列名。如果在对象模型中公开了外键属性，则使用 HasForeignKey 方法。并非所有关系都支持在对象模型中公开外键属性。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
      <param name="configurationAction">配置外键列和表的操作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1">
      <summary>表示允许为用于插入实体的存储过程执行配置。</summary>
      <typeparam name="TEntityType">可使用存储过程进行插入的实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>指定此实例是否等于指定对象。</summary>
      <returns>如果此实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetType">
      <summary>获取此实例的类型。</summary>
      <returns>此实例的类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>配置存储过程的名称。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="procedureName">存储过程的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>配置存储过程的名称。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="procedureName">存储过程的名称。</param>
      <param name="schemaName">架构名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>为外键属性未包含在此类中的关系配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="navigationPropertyExpression">表示关系的导航属性的 lambda 表达式。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">执行配置的 lambda 表达式。</param>
      <typeparam name="TPrincipalEntityType">关系中主体实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>为外键属性未包含在此类中的关系配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="navigationPropertyExpression">表示关系的导航属性的 lambda 表达式。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">执行配置的 lambda 表达式。</param>
      <typeparam name="TPrincipalEntityType">关系中主体实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
      <typeparam name="TProperty">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
      <typeparam name="TProperty">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>将此存储过程的结果列配置为映射到属性。这适用于数据库生成的列。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置结果的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="columnName">结果列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>将此存储过程的结果列配置为映射到属性。这适用于数据库生成的列。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置结果的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="columnName">结果列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>将此存储过程的结果列配置为映射到属性。这适用于数据库生成的列。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置结果的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="columnName">结果列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>将此存储过程的结果列配置为映射到属性。这适用于数据库生成的列。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置结果的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="columnName">结果列的名称。</param>
      <typeparam name="TProperty">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>将此存储过程的结果列配置为映射到属性。这适用于数据库生成的列。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置结果的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="columnName">结果列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>将此存储过程的结果列配置为映射到属性。这适用于数据库生成的列。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置结果的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="columnName">结果列的名称。</param>
      <typeparam name="TProperty">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration">
      <summary>用于为实体类型或复杂类型配置具有长度方面的列。此配置功能由 Code First Fluent API 公开，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果对象相等，则为 true；否则为 false。</returns>
      <param name="obj">一个对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前类型的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType">
      <summary>获取当前实例的类型。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>将列配置为具有指定的最大长度。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="value">列的最大长度。将值设置为 null 将从列中移除任何最大长度限制，并且会将默认长度用于数据库列。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength">
      <summary>将列配置为固定长度。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength">
      <summary>将列配置为允许使用数据库提供程序支持的最大长度。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength">
      <summary>将列配置为可变长度。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
      <summary>用于为实体类型或复杂类型配置具有长度方面的属性。通过 Code First Fluent API 可使用此配置功能，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>将属性配置为具有指定的最大长度。</summary>
      <returns>同一个 LengthPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="value">属性的最大长度。设置为“null”将从属性中移除任何最大长度限制，并且会将默认长度用于数据库列。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
      <summary>将属性配置为固定长度。使用 HasMaxLength 可设置属性的固定长度。</summary>
      <returns>同一个 LengthPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
      <summary>将属性配置为允许使用数据库提供程序支持的最大长度。</summary>
      <returns>同一个 LengthPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
      <summary>将属性配置为可变长度。属性在默认情况下为可变长度。</summary>
      <returns>同一个 LengthPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
      <summary>通过实体类型配置多关系。</summary>
      <typeparam name="TEntityType">关系源自的实体类型。</typeparam>
      <typeparam name="TTargetEntityType">作为关系目标的实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果对象相等，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前类型的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
      <summary>将关系配置为 many:many，且在关系的另一端无导航属性。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>将关系配置为 many:many，且在关系的另一端有导航属性。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
      <param name="navigationPropertyExpression">一个 lambda 表达式，表示关系另一端的导航属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
      <summary>将关系配置为 many:optional，且在关系的另一端无导航属性。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>将关系配置为 many:optional，且在关系的另一端有导航属性。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
      <param name="navigationPropertyExpression">一个 lambda 表达式，表示关系另一端的导航属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
      <summary>将关系配置为 many:required，且在关系的另一端无导航属性。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>将关系配置为 many:required，且在关系的另一端有导航属性。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
      <param name="navigationPropertyExpression">一个 lambda 表达式，表示关系另一端的导航属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
      <summary>配置 many:many 关系的表和列映射。通过 Code First Fluent API 可使用此配置功能，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="other">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前对象的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType">
      <summary>获取当前实例的类型。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.HasTableAnnotation(System.String,System.Object)">
      <summary>在联接表的模型中设置注释。稍后可在处理表时（如创建迁移时）使用此注释值。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="name">注释名称，必须是有效的 C#/EDM 标识符。</param>
      <param name="value">注释值，可以是可使用 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的字符串或其他一些类型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
      <summary>配置左外键的列名。左外键指向在 HasMany 调用中指定的导航属性的父实体。</summary>
      <returns>同一个 ManyToManyAssociationMappingConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="keyColumnNames">外键列名。在使用多个外键属性时，必须按照为目标实体类型配置主键属性的顺序来指定这些属性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
      <summary>配置右外键的列名。右外键指向在 WithMany 调用中指定的导航属性的父实体。</summary>
      <returns>同一个 ManyToManyAssociationMappingConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="keyColumnNames">外键列名。在使用多个外键属性时，必须按照为目标实体类型配置主键属性的顺序来指定这些属性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>配置关系的联接表名。</summary>
      <returns>同一个 ManyToManyAssociationMappingConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="tableName">表的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>配置关系的联接表名和架构。</summary>
      <returns>同一个 ManyToManyAssociationMappingConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="tableName">表的名称。</param>
      <param name="schemaName">表的架构。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2">
      <summary>允许为用于修改多对多关系的存储过程执行配置。</summary>
      <typeparam name="TEntityType">将从中配置关系的实体的类型。</typeparam>
      <typeparam name="TTargetEntityType">关系另一端的目标实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetHashCode">
      <summary>检索当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetType">
      <summary>检索此当前实例的类型。</summary>
      <returns>此当前实例的类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String)">
      <summary>设置存储过程的名称。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="procedureName">过程的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String,System.String)">
      <summary>设置存储过程的名称。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="procedureName">过程的名称。</param>
      <param name="schemaName">架构的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>为左键值配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>为左键值配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数的名称。</param>
      <typeparam name="TProperty">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>为左键值配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>为左键值配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数的名称。</param>
      <typeparam name="TProperty">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.Byte[]}},System.String)">
      <summary>为右键值配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``0}}},System.String)">
      <summary>为右键值配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数的名称。</param>
      <typeparam name="TProperty">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.String}},System.String)">
      <summary>为右键值配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.String)">
      <summary>为右键值配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数的名称。</param>
      <typeparam name="TProperty">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.ToString">
      <summary>将当前实例的值转换为其等效字符串表示形式。</summary>
      <returns>当前实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2">
      <summary>允许为用于修改多对多关系的存储过程执行配置。</summary>
      <typeparam name="TEntityType">将从中配置关系的实体的类型。</typeparam>
      <typeparam name="TTargetEntityType">关系另一端的目标实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
      <summary>配置用于删除关系的存储过程。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="modificationStoredProcedureConfigurationAction">一个 lambda 表达式，用于执行对存储过程的配置。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetHashCode">
      <summary>检索当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
      <summary>配置用于插入关系的存储过程。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="modificationStoredProcedureConfigurationAction">一个 lambda 表达式，用于执行对存储过程的配置。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.ToString">
      <summary>将当前实例的值转换为其等效字符串表示形式。</summary>
      <returns>当前实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2">
      <summary>配置 many:many 关系。通过 Code First Fluent API 可使用此配置功能，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
      <typeparam name="TEntityType">在 HasMany 调用中指定的导航属性的父实体类型。</typeparam>
      <typeparam name="TTargetEntityType">在 WithMany 调用中指定的导航属性的父实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果对象相等，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前类型的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
      <summary>配置用于存储关系的外键列和表。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="configurationAction">配置外键列和表的操作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures">
      <summary>配置将用于修改此关系的存储过程。将使用过程名称和参数名称的默认约定。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration{`0,`1}})">
      <summary>配置将用于修改此关系的存储过程。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="modificationStoredProcedureMappingConfigurationAction">用于重写过程名称和参数名称默认约定的配置。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProcedureConfigurationBase">
      <summary>执行用于在数据库中修改实体的存储过程的配置。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1">
      <summary>允许为用于修改实体的存储过程执行配置。</summary>
      <typeparam name="TEntityType">可使用存储过程进行修改的实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration{`0}})">
      <summary>配置用于删除实体的存储过程。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="modificationStoredProcedureConfigurationAction">一个 lambda 表达式，用于执行对存储过程的配置。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Equals(System.Object)">
      <summary>指定此实例是否等同于指定对象。</summary>
      <returns>如果此实例等同于指定对象，则为 true；否则为  false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration{`0}})">
      <summary>配置用于插入实体的存储过程。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="modificationStoredProcedureConfigurationAction">一个 lambda 表达式，用于执行对存储过程的配置。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration{`0}})">
      <summary>配置用于更新实体的存储过程。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="modificationStoredProcedureConfigurationAction">一个 lambda 表达式，用于执行对存储过程的配置。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
      <summary>配置一个条件，该条件用于基于赋给属性的值来区分继承层次结构中的各个类型。通过 Code First Fluent API 可使用此配置功能，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前对象的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
      <summary>将条件配置为属性中需要值。对于未向存储此属性的列赋值的行，假定这些行属于此实体类型的基类型。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
      <summary>通过实体类型配置可选关系。</summary>
      <typeparam name="TEntityType">关系源自的实体类型。</typeparam>
      <typeparam name="TTargetEntityType">作为关系目标的实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果对象相等，则为 true；否则为 false。</returns>
      <param name="obj">一个对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前类型的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
      <summary>将关系配置为 optional:many，且在关系的另一端无导航属性。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>将关系配置为 optional:many，且在关系的另一端有导航属性。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
      <param name="navigationPropertyExpression">一个 lambda 表达式，表示关系另一端的导航属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
      <summary>将关系配置为 optional:optional，且在关系的另一端无导航属性。要配置的实体类型将成为依赖对象，且包含主体的外键。作为关系目标的实体类型将成为关系中的主体。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>将关系配置为 optional:optional，且在关系的另一端有导航属性。要配置的实体类型将成为依赖对象，且包含主体的外键。作为关系目标的实体类型将成为关系中的主体。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
      <param name="navigationPropertyExpression">一个 lambda 表达式，表示关系另一端的导航属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
      <summary>将关系配置为 optional:optional，且在关系的另一端无导航属性。要配置的实体类型将成为关系中的主体。作为关系目标的实体类型将成为依赖对象，且包含主体的外键。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>将关系配置为 optional:optional，且在关系的另一端有导航属性。要配置的实体类型将成为关系中的主体。作为关系目标的实体类型将成为依赖对象，且包含主体的外键。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
      <param name="navigationPropertyExpression">一个 lambda 表达式，表示关系另一端的导航属性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
      <summary>将关系配置为 optional:required，且在关系的另一端无导航属性。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>将关系配置为 optional:required，且在关系的另一端有导航属性。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
      <param name="navigationPropertyExpression">一个 lambda 表达式，表示关系另一端的导航属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration">
      <summary>通过实体类型配置基元列。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果对象相等，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前类型的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>配置用于存储属性的基元列的顺序。如果实体类型具有组合键，则此方法还用于指定键顺序。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnOrder">此列应在数据库表中出现的顺序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)">
      <summary>配置用于存储属性的基元列的数据类型。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnType">特定于数据库提供程序的数据类型的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional">
      <summary>将基元列配置为可选列。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired">
      <summary>将基元列配置为必需列。</summary>
      <returns>同一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
      <summary>提供用于配置实体类型或复杂类型的基元属性的方法。通过 Code First Fluent API 可使用此配置功能，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>确定此实例是否与指定对象相同。</summary>
      <returns>如果此实例与指定对象相同，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>在用于存储属性的数据库列的模型中设置注释。可在稍后处理列时（如创建迁移时）使用此注释值。</summary>
      <returns>同一个 PrimitivePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="name">注释名称，必须是有效的 C#/EDM 标识符。</param>
      <param name="value">注释值，可以是可使用 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的字符串或其他一些类型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary>配置用于存储属性的数据库列的名称。</summary>
      <returns>同一个 PrimitivePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnName">列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>配置用于存储属性的数据库列的顺序。如果实体类型具有组合键，则此方法还用于指定键顺序。</summary>
      <returns>同一个 PrimitivePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnOrder">此列应在数据库表中出现的顺序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary>配置用于存储属性的数据库列的数据类型。</summary>
      <returns>同一个 PrimitivePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnType">特定于数据库提供程序的数据类型的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>配置数据库如何生成属性的值。</summary>
      <returns>同一个 PrimitivePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="databaseGeneratedOption">用于在数据库中生成属性值的模式。设置“null”将导致使用默认选项，它可能为“None”、“Identity”或“Computed”，具体取决于属性的类型及其在模型中的语义（例如主键的处理方式不同）以及所使用的是哪组约定。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasParameterName(System.String)">
      <summary>配置存储过程中用于此属性的参数的名称。</summary>
      <returns>同一个 PrimitivePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary>将属性配置为用作开放式并发标记。</summary>
      <returns>同一个 PrimitivePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>配置属性是否要用作开放式并发标记。</summary>
      <returns>同一个 PrimitivePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="concurrencyToken">指示属性是否为并发标记的值。指定“null”将从属性中移除并发标记方面。指定“null”将导致与指定“false”相同的运行时行为。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
      <summary>将属性配置为可选属性。用于存储此属性的数据库列将可以为 null。</summary>
      <returns>同一个 PrimitivePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
      <summary>将属性配置为必需属性。用于存储此属性的数据库列将不可以为 null。</summary>
      <returns>同一个 PrimitivePropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration">
      <summary>允许基于模型中的属性为轻型约定执行配置。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration})">
      <summary>允许此约定应用到的属性的配置。</summary>
      <param name="propertyConfigurationAction">对 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 执行配置的操作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Having``1(System.Func{System.Reflection.PropertyInfo,``0})">
      <summary>在配置期间捕获以后要使用的值时基于谓词筛选此约定应用到的属性。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="capturingPredicate">用于为每个属性捕获值的函数。如果值为 null，则筛选掉该属性。</param>
      <typeparam name="T">捕获的值的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>当前对象。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Where(System.Func{System.Reflection.PropertyInfo,System.Boolean})">
      <summary>基于谓词筛选此约定应用到的属性。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="predicate">用于测试每个属性是否满足条件的函数。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1">
      <summary>允许基于模型中实体类型的属性和捕获的值为轻型约定执行配置。</summary>
      <typeparam name="T">捕获的值的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0})">
      <summary>允许此约定应用到的属性的配置。</summary>
      <param name="propertyConfigurationAction">使用捕获的值对 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 执行配置的操作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前类型的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration">
      <summary>用于配置映射片段中的属性。通过 Code First Fluent API 可使用此配置功能，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>在用于存储属性的数据库列的模型中设置注释。可在稍后处理列时（如创建迁移时）使用此注释值。</summary>
      <returns>同一个 PropertyMappingConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="name">注释名称，必须是有效的 C#/EDM 标识符。</param>
      <param name="value">注释值，可以是可使用 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 序列化的字符串或其他一些类型</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnName(System.String)">
      <summary>配置用于存储映射片段中的属性的数据库列的名称。</summary>
      <returns>同一个 PropertyMappingConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnName">列的名称。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
      <summary>通过实体类型配置必需关系。</summary>
      <typeparam name="TEntityType">关系源自的实体类型。</typeparam>
      <typeparam name="TTargetEntityType">作为关系目标的实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>指定指定的对象是否与当前对象相同。</summary>
      <returns>如果指定的对象与当前对象相同，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode">
      <summary>获取与当前对象关联的哈希代码。</summary>
      <returns>与当前对象关联的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString">
      <summary>返回当前对象的字符串表示形式。</summary>
      <returns>当前对象的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
      <summary>将关系配置为 required:many，且在关系的另一端无导航属性。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>将关系配置为 required:many，且在关系的另一端有导航属性。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
      <param name="navigationPropertyExpression">一个 lambda 表达式，表示关系另一端的导航属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
      <summary>将关系配置为 required:optional，且在关系的另一端无导航属性。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>将关系配置为 required:optional，且在关系的另一端有导航属性。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
      <param name="navigationPropertyExpression">一个 lambda 表达式，表示关系另一端的导航属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
      <summary>将关系配置为 required:required，且在关系的另一端无导航属性。要配置的实体类型将成为依赖对象，且包含主体的外键。作为关系目标的实体类型将成为关系中的主体。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>将关系配置为 required:required，且在关系的另一端有导航属性。要配置的实体类型将成为依赖对象，且包含主体的外键。作为关系目标的实体类型将成为关系中的主体。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
      <param name="navigationPropertyExpression">一个 lambda 表达式，表示关系另一端的导航属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
      <summary>将关系配置为 required:required，且在关系的另一端无导航属性。要配置的实体类型将成为关系中的主体。作为关系目标的实体类型将成为依赖对象，且包含主体的外键。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>将关系配置为 required:required，且在关系的另一端有导航属性。要配置的实体类型将成为关系中的主体。作为关系目标的实体类型将成为依赖对象，且包含主体的外键。</summary>
      <returns>可用于进一步配置关系的配置对象。</returns>
      <param name="navigationPropertyExpression">一个 lambda 表达式，表示关系另一端的导航属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
      <summary>配置用于存储字符串值的数据库列。通过 Code First Fluent API 可使用此配置功能，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果对象相等，则为 true；否则为 false。</returns>
      <param name="obj">一个对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前类型的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType">
      <summary>获取当前实例的类型。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>配置数据库列的顺序。</summary>
      <returns>同一个 StringColumnConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnOrder">此列应在数据库表中出现的顺序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
      <summary>配置数据库列的数据类型。</summary>
      <returns>同一个 StringColumnConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnType">特定于数据库提供程序的数据类型的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>将属性配置为具有指定的最大长度。</summary>
      <returns>同一个 StringColumnConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="value">属性的最大长度。如果设置为“null”，将对此列使用默认长度。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
      <summary>将列配置为固定长度。使用 HasMaxLength 可设置属性的固定长度。</summary>
      <returns>同一个 StringColumnConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
      <summary>将列配置为允许使用数据库提供程序支持的最大长度。</summary>
      <returns>同一个 StringColumnConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
      <summary>将列配置为可选列。</summary>
      <returns>同一个 StringColumnConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
      <summary>将列配置为必需。</summary>
      <returns>同一个 StringColumnConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
      <summary>将列配置为支持 Unicode 字符串内容。</summary>
      <returns>同一个 StringColumnConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>配置列是否支持 Unicode 字符串内容。</summary>
      <returns>同一个 StringColumnConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="unicode">指示列是否支持 Unicode 字符串内容的值。指定“null”将从列中移除 Unicode 方面。指定“null”将导致与指定“false”相同的运行时行为。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
      <summary>将列配置为可变长度。列在默认情况下为可变长度。</summary>
      <returns>同一个 StringColumnConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
      <summary>用于配置实体类型或复杂类型的 <see cref="T:System.string" /> 属性。通过 Code First Fluent API 可使用此配置功能，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>在用于存储属性的数据库列的模型中设置注释。可在稍后处理列时（如创建迁移时）使用此注释值。</summary>
      <returns>同一个 StringPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="name">注释名称，必须是有效的 C#/EDM 标识符。</param>
      <param name="value">注释值，可以是可使用 <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> 进行序列化的字符串或其他类型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
      <summary>配置用于存储属性的数据库列的名称。</summary>
      <returns>同一个 StringPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnName">列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>配置用于存储属性的数据库列的顺序。如果实体类型具有组合键，则此方法还用于指定键顺序。</summary>
      <returns>同一个 StringPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnOrder">此列应在数据库表中出现的顺序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
      <summary>配置用于存储属性的数据库列的数据类型。</summary>
      <returns>同一个 StringPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="columnType">特定于数据库提供程序的数据类型的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>配置数据库如何生成属性的值。</summary>
      <returns>同一个 StringPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="databaseGeneratedOption">用于在数据库中生成属性值的模式。设置“null”将导致使用默认选项，它可能为“None”、“Identity”或“Computed”，具体取决于属性的类型及其在模型中的语义（例如主键的处理方式不同）以及所使用的是哪组约定。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>将属性配置为具有指定的最大长度。</summary>
      <returns>同一个 StringPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="value">属性的最大长度。设置为“null”将从属性中移除任何最大长度限制，并且会将默认长度用于数据库列。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
      <summary>将属性配置为用作开放式并发标记。</summary>
      <returns>同一个 StringPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>配置属性是否要用作开放式并发标记。</summary>
      <returns>同一个 StringPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="concurrencyToken">指示属性是否为并发标记的值。指定“null”将从属性中移除并发标记方面。指定“null”将导致与指定“false”相同的运行时行为。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
      <summary>将属性配置为固定长度。使用 HasMaxLength 可设置属性的固定长度。</summary>
      <returns>同一个 StringPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
      <summary>将属性配置为允许使用数据库提供程序支持的最大长度。</summary>
      <returns>同一个 StringPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
      <summary>将属性配置为可选属性。用于存储此属性的数据库列将可以为 null。默认情况下，<see cref="T:System.string" /> 属性是可选的。</summary>
      <returns>同一个 StringPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
      <summary>将属性配置为必需属性。用于存储此属性的数据库列将不可以为 null。</summary>
      <returns>同一个 StringPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
      <summary>将属性配置为支持 Unicode 字符串内容。</summary>
      <returns>同一个 StringPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>配置属性是否支持 Unicode 字符串内容。</summary>
      <returns>同一个 StringPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
      <param name="unicode">指示属性是否支持 Unicode 字符串内容的值。指定“null”将从属性中移除 Unicode 方面。指定“null”将导致与指定“false”相同的运行时行为。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
      <summary>将属性配置为可变长度。默认情况下，<see cref="T:System.string" /> 属性为可变长度。</summary>
      <returns>同一个 StringPropertyConfiguration 实例，以便多个调用可以链接在一起。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
      <summary>允许为模型中的类型执行配置。</summary>
      <typeparam name="TStructuralType">要配置的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前对象的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>配置在此类型上定义的 <see cref="T:System.byte[]" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
      <summary>配置在此类型上定义的 <see cref="T:DbGeography" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
      <summary>配置在此类型上定义的 <see cref="T:DbGeometry" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary>配置在此类型上定义的 <see cref="T:System.DateTime" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary>配置在此类型上定义的 <see cref="T:System.DateTimeOffset" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary>配置在此类型上定义的 <see cref="T:System.decimal" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary>配置在此类型上定义的 <see cref="T:System.DateTime?" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary>配置在此类型上定义的 <see cref="T:System.DateTimeOffset?" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary>配置在此类型上定义的 <see cref="T:System.decimal?" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary>配置在此类型上定义的 <see cref="T:System.TimeSpan?" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>配置在此类型上定义的 <see cref="T:System.struct?" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <typeparam name="T">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>配置在此类型上定义的 <see cref="T:System.string" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary>配置在此类型上定义的 <see cref="T:System.TimeSpan" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>配置在此类型上定义的 <see cref="T:System.struct" /> 属性。</summary>
      <returns>可用于配置属性的配置对象。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示将要配置的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <typeparam name="T">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration">
      <summary>允许基于模型中的实体类型为轻型约定执行配置。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration})">
      <summary>允许此约定应用到的实体类型的配置。</summary>
      <param name="entityConfigurationAction">对 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 执行配置的操作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Equals(System.Object)">
      <summary>指定此实例是否等于指定对象。</summary>
      <returns>如果此实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Having``1(System.Func{System.Type,``0})">
      <summary>在配置期间捕获以后要使用的值时基于谓词筛选此约定应用到的实体类型。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="capturingPredicate">用于为每个实体类型捕获值的函数。如果值为 null，则筛选掉该实体类型。</param>
      <typeparam name="T">捕获的值的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Where(System.Func{System.Type,System.Boolean})">
      <summary>基于谓词筛选此约定应用到的实体类型。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="predicate">用于测试每个实体类型是否满足条件的函数。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1">
      <summary>允许基于模型中从通用指定类型继承的实体类型为轻型约定执行配置。</summary>
      <typeparam name="T">此约定应用到的实体类型的通用类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0}})">
      <summary>允许此约定应用到的实体类型的配置。</summary>
      <param name="entityConfigurationAction">对 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 执行配置的操作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Equals(System.Object)">
      <summary>指定此实例是否等于指定对象。</summary>
      <returns>如果此实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Having``1(System.Func{System.Type,``0})">
      <summary>在配置期间捕获以后要使用的值时基于谓词筛选此约定应用到的实体类型。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="capturingPredicate">用于为每个实体类型捕获值的函数。如果值为 null，则筛选掉该实体类型。</param>
      <typeparam name="TValue">捕获的值的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Where(System.Func{System.Type,System.Boolean})">
      <summary>基于谓词筛选此约定应用到的实体类型。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1" /> 实例，以便多个调用可以链接在一起。</returns>
      <param name="predicate">用于测试每个实体类型是否满足条件的函数。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1">
      <summary>允许基于模型中的实体类型和捕获的值为轻型约定执行配置。</summary>
      <typeparam name="T">捕获的值的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0})">
      <summary>允许此约定应用到的实体类型的配置。</summary>
      <param name="entityConfigurationAction">使用捕获的值对 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 执行配置的操作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetHashCode">
      <summary>检索当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.ToString">
      <summary>将当前实例的值转换为其等效字符串表示。</summary>
      <returns>当前实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2">
      <summary>允许基于模型中从通用指定类型继承的实体类型和捕获的值为轻型约定执行配置。</summary>
      <typeparam name="T">此约定应用到的实体类型的通用类型。</typeparam>
      <typeparam name="TValue">捕获的值的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0},`1})">
      <summary>允许此约定应用到的实体类型的配置。</summary>
      <param name="entityConfigurationAction">使用捕获的值对 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 执行配置的操作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Equals(System.Object)">
      <summary>指定此实例是否等于指定对象。</summary>
      <returns>如果此实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1">
      <summary>允许为用于更新实体的存储过程执行配置。</summary>
      <typeparam name="TEntityType">可使用存储过程进行更新的实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>确定指定对象是否等于此实例对象。</summary>
      <returns>如果指定对象等于此实例对象，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>检索哈希代码。</summary>
      <returns>哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetType">
      <summary>检索此配置的类型。</summary>
      <returns>此配置的类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>配置存储过程的名称。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="procedureName">存储过程的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>配置存储过程的名称。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="procedureName">存储过程的名称。</param>
      <param name="schemaName">架构名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>为外键属性未包含在此类中的关系配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="navigationPropertyExpression">表示关系的导航属性的 lambda 表达式。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">执行配置的 lambda 表达式。</param>
      <typeparam name="TPrincipalEntityType">关系中主体实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>为外键属性未包含在此类中的关系配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="navigationPropertyExpression">表示关系的导航属性的 lambda 表达式。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">执行配置的 lambda 表达式。</param>
      <typeparam name="TPrincipalEntityType">关系中主体实体的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String,System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">参数名称的当前值。</param>
      <param name="originalValueParameterName">参数名称的原始值。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String,System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">参数名称的当前值。</param>
      <param name="originalValueParameterName">参数名称的原始值。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String,System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">参数名称的当前值。</param>
      <param name="originalValueParameterName">参数名称的原始值。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
      <typeparam name="TProperty">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String,System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">参数名称的当前值。</param>
      <param name="originalValueParameterName">参数名称的原始值。</param>
      <typeparam name="TProperty">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">参数名称的当前值。</param>
      <param name="originalValueParameterName">参数名称的原始值。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="parameterName">参数名。</param>
      <typeparam name="TProperty">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String)">
      <summary>为此存储过程配置参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置参数的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">参数名称的当前值。</param>
      <param name="originalValueParameterName">参数名称的原始值。</param>
      <typeparam name="TProperty">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>将此存储过程的结果列配置为映射到属性。这适用于数据库生成的列。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置结果的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="columnName">结果列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>将此存储过程的结果列配置为映射到属性。这适用于数据库生成的列。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置结果的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="columnName">结果列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>将此存储过程的结果列配置为映射到属性。这适用于数据库生成的列。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置结果的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="columnName">结果列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>将此存储过程的结果列配置为映射到属性。这适用于数据库生成的列。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置结果的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="columnName">结果列的名称。</param>
      <typeparam name="TProperty">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>将此存储过程的结果列配置为映射到属性。这适用于数据库生成的列。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置结果的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="columnName">结果列的名称。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>将此存储过程的结果列配置为映射到属性。这适用于数据库生成的列。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示要为其配置结果的属性。C#：t =&amp;gt; t.MyProperty VB.Net：Function(t) t.MyProperty</param>
      <param name="columnName">结果列的名称。</param>
      <typeparam name="TProperty">要配置的属性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
      <summary>配置将返回受此存储过程影响的行的输出参数。</summary>
      <returns>同一个配置实例，以便可以链接多个调用。</returns>
      <param name="parameterName">参数名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.ToString">
      <summary>将此实例的值转变为其等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
      <summary>配置用于区分继承层次结构中各个类型的鉴别器列。通过 Code First Fluent API 可使用此配置功能，请参见 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果对象相等，则为 true；否则为 false。</returns>
      <param name="obj">一个对象。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前类型的哈希代码。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
      <summary>配置用于标识通过继承层次结构中其他类型配置的实体类型的鉴别器值。</summary>
      <returns>用来配置用于存储鉴别器值的列的配置对象。</returns>
      <param name="value">用于标识实体类型的值。</param>
      <typeparam name="T">鉴别器值的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
      <summary>配置用于标识通过继承层次结构中其他类型配置的实体类型的鉴别器值。</summary>
      <returns>用来配置用于存储鉴别器值的列的配置对象。</returns>
      <param name="value">用于标识实体类型的值。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
      <summary>配置用于标识通过继承层次结构中其他类型配置的实体类型的鉴别器值。</summary>
      <returns>用来配置用于存储鉴别器值的列的配置对象。</returns>
      <param name="value">用于标识实体类型的值。</param>
      <typeparam name="T">鉴别器值的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
      <summary>提供用于在相关类型之间只存在一对导航属性时，将导航属性检测为相互反向的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将此约定应用于模型中的一项。</summary>
      <param name="item">要应用约定的项。</param>
      <param name="model">模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2">
      <summary>从 .NET 属性 (Property) 读取属性 (Attribute) 并根据这些属性 (Attribute) 生成列注释的 Code First 约定的通用类。</summary>
      <typeparam name="TAttribute">要发现的属性类型。</typeparam>
      <typeparam name="TAnnotation">将创建的注释类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2.#ctor(System.String,System.Func{System.Reflection.PropertyInfo,System.Collections.Generic.IList{`0},`1})">
      <summary>构造一个将创建具有给定名称且使用给定工厂委托的列注释的约定。</summary>
      <param name="annotationName">要创建的注释的名称。</param>
      <param name="annotationFactory">用于在各列中创建注释的工厂。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2">
      <summary>从 .NET 类型读取属性并根据这些属性生成表注释的 Code First 约定的通用类。</summary>
      <typeparam name="TAttribute">要发现的属性类型。</typeparam>
      <typeparam name="TAnnotation">将创建的注释类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2.#ctor(System.String,System.Func{System.Type,System.Collections.Generic.IList{`0},`1})">
      <summary>构造一个将创建具有给定名称且使用给定工厂委托的表注释的约定。</summary>
      <param name="annotationName">要创建的注释的名称。</param>
      <param name="annotationFactory">用于在各表中创建注释的工厂。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
      <summary>表示用于处理模型中属性上找到的 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" /> 实例的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.ColumnAttribute)">
      <summary>将约定应用到指定配置。</summary>
      <param name="configuration">配置。</param>
      <param name="attribute">列属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention">
      <summary>表示通过 <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> 或 <see cref="T:System.Data.Entity.DbModelBuilder" /> API 应用指定的列排序的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将配置应用到映射模型中的指定项。</summary>
      <param name="item">项。</param>
      <param name="model">映射模型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
      <summary>验证为列提供的排序配置。此基实现是一个空操作。</summary>
      <param name="table">列所属表的名称。</param>
      <param name="tableName">表的定义。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict">
      <summary>用于应用通过 <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> 或 <see cref="T:System.Data.Entity.DbModelBuilder" /> API 指定的列顺序的约定。如果检测重复配置的列顺序，则此约定引发。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
      <summary>验证为列提供的排序配置，以确保没有为两个列提供相同的序号。</summary>
      <param name="table">列所属表的名称。</param>
      <param name="tableName">表的定义。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
      <summary>表示用于处理模型中属性上找到的 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute" /> 实例的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute)">
      <summary>应用具有给定配置和特性的约定。</summary>
      <param name="configuration">配置。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
      <summary>表示用于在类型没有主键、没有映射的基类型且没有导航属性的情况下将其配置为复杂类型的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将配置应用到映射模型中的指定项。</summary>
      <param name="item">项。</param>
      <param name="model">映射模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
      <summary>表示处理模型中属性上找到的 <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" /> 实例的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute)">
      <summary>将此约定应用于属性。</summary>
      <param name="configuration">具有该属性 (Attribute) 的属性 (Property) 的配置。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.Convention">
      <summary>不重写配置的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.#ctor">
      <summary>派生的类可以使用默认构造函数应用更改模型配置的一组规则。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties">
      <summary>开始配置适用于模型中所有属性的轻型约定。</summary>
      <returns>约定的配置对象。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties``1">
      <summary>开始配置适用于模型中指定类型的所有基元属性的轻型约定。</summary>
      <returns>约定的配置对象。</returns>
      <typeparam name="T">此约定将适用于的属性类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types``1">
      <summary>开始配置应用于从指定类型派生或实现指定类型的模型中的所有映射类型的轻型约定。</summary>
      <returns>约定的配置对象。</returns>
      <typeparam name="T">此约定将适用于的实体类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types">
      <summary>开始配置应用于模型中所有映射类型的轻型约定。</summary>
      <returns>约定的配置对象。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
      <summary>表示用于处理模型中属性上找到的 <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute" /> 实例的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute)">
      <summary>将约定应用到具有给定配置的属性。</summary>
      <param name="configuration">配置。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
      <summary>用于为小数属性将精度设置为 18 并将小数位数设置为 2 的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention" /> 的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor(System.Byte,System.Byte)">
      <summary>使用指定的精度和小数位数初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention" /> 类的新实例。</summary>
      <param name="precision">Precision</param>
      <param name="scale">Scale</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将此约定应用于属性。</summary>
      <param name="item">项。</param>
      <param name="model">模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
      <summary>表示用于移动主键属性使其首先出现的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将此约定应用于模型中的一项。</summary>
      <param name="item">要应用约定的项。</param>
      <param name="model">模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
      <summary>表示用于基于外键属性的 CLR 可为 null 性区分可选和必需关系的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将配置应用到映射模型中的指定项。</summary>
      <param name="item">项。</param>
      <param name="model">映射模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention">
      <summary>表示发现外键属性的约定的基类。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将此约定应用于属性。</summary>
      <param name="item">项。</param>
      <param name="model">模型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>如果 <paramref name="dependentProperty" /> 应为外键的一部分，则当被重写时，返回 true。</summary>
      <returns>如果 dependentProperty 应为外键的一部分，则为 true；否则为 false。</returns>
      <param name="associationType">所配置的关联类型。</param>
      <param name="dependentAssociationEnd">依赖端。</param>
      <param name="dependentProperty">依赖端的候选属性。</param>
      <param name="principalEntityType">主体端实体类型。</param>
      <param name="principalKeyProperty">主体端的键属性，该键属性是外键的候选目标。</param>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
      <summary>获取约定是否支持具有其间定义的多个关联的实体类型对。</summary>
      <returns>如果约定支持具有其间定义的多个关联的实体类型对，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention">
      <summary>表示为外键引入索引的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将此约定应用于属性。</summary>
      <param name="item">项。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
      <summary>表示用于处理模型中导航属性上找到的 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> 实例的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention.Apply(System.Data.Entity.Core.Metadata.Edm.NavigationProperty,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将此约定应用于模型中的一项。</summary>
      <param name="item">要应用约定的项。</param>
      <param name="model">数据库模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
      <summary>表示用于处理在模型中的外键属性上发现的 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> 的实例的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute)">
      <summary>将配置应用到指定属性。</summary>
      <param name="memberInfo">属性信息。</param>
      <param name="configuration">要为模型中实体类型执行的配置。</param>
      <param name="attribute">从数据库映射中排除的属性或类。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1">
      <summary>在创建模型后对模型的概念性部分执行操作的约定。</summary>
      <typeparam name="T">此约定操作的元数据项的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将此约定应用于模型中的一项。</summary>
      <param name="item">要应用约定的项。</param>
      <param name="model">模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
      <summary>标识可以添加到 <see cref="T:System.Data.Entity.DbModelBuilder" /> 实例或从该实例中移除的约定。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
      <summary>用于检测主键属性的约定。按优先级顺序的可识别的命名模式为：1. ''Id' 2。[type name]Id。主键检测不区分大小写。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>要匹配 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 类的约定。</summary>
      <returns>要匹配的 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 类。</returns>
      <param name="entityType">实体类型。</param>
      <param name="primitiveProperties">基元属性的集合。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention">
      <summary>用于发现属性 (Property) 上的 <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> 属性 (Attribute)，以及在模型中生成 <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> 列注释的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention.#ctor">
      <summary>构造此约定的新实例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
      <summary>表示用于处理模型中属性上找到的 <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute" /> 实例的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute)">
      <summary>将约定应用到具有配置的指定模型。</summary>
      <param name="memberInfo">成员信息。</param>
      <param name="configuration">配置。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1">
      <summary>在创建模型后对模型的数据库部分执行操作的约定。</summary>
      <typeparam name="T">此约定操作的元数据项的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将此约定应用于模型中的一项。</summary>
      <param name="item">要应用约定的项。</param>
      <param name="model">模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
      <summary>用于处理在模型中属性上发现的 <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" /> 实例的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention">
      <summary>表示发现主键属性的约定的基类。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将此约定应用于模型中的一项。</summary>
      <param name="item">要应用约定的项。</param>
      <param name="model">模型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>如果被重写，则返回将成为主键一部分的属性子集。</summary>
      <returns>应成为主键一部分的属性。</returns>
      <param name="entityType">实体类型。</param>
      <param name="primitiveProperties">实体的基元类型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
      <summary>用于将级联删除从多对多关系中涉及的两个表添加到联接表的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
      <summary>确保在映射继承的属性时不创建无效/不支持的映射的约定</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
      <summary>表示用于处理模型中属性上找到的 <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" /> 实例的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.MaxLengthAttribute)">
      <summary>将约定应用到具有指定配置的属性。</summary>
      <param name="configuration">配置。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
      <summary>用于发现名称是从属导航属性名称和主体类型主键属性名称组合的外键属性的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>匹配依赖的实体模型的键。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
      <param name="associationType">关联类型元数据对象。</param>
      <param name="dependentAssociationEnd">依赖的关联的端。</param>
      <param name="dependentProperty">依赖的属性。</param>
      <param name="principalEntityType">主体实体类型</param>
      <param name="principalKeyProperty">主体键属性。</param>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
      <summary>获取或设置一个值，该值指示约定是否支持多个关联。</summary>
      <returns>如果约定支持多个关联，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
      <summary>表示用于处理模型中属性上找到的 <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" /> 实例的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)">
      <summary>将配置应用到指定属性。</summary>
      <param name="memberInfo">属性信息。</param>
      <param name="configuration">要为模型中实体类型执行的配置。</param>
      <param name="attribute">从数据库映射中排除的属性或类。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
      <summary>表示用于处理在模型中类型上发现的 <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" /> 实例的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)">
      <summary>将配置应用到指定属性。</summary>
      <param name="configuration">要为模型中实体类型执行的配置。</param>
      <param name="attribute">从数据库映射中排除的属性或类。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
      <summary>提供用于为任何必需关系启用级联删除的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将此约定应用于模型中的一项。</summary>
      <param name="item">要应用约定的项。</param>
      <param name="model">数据库模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
      <summary>提供用于将从属实体类型的主键配置为一对一关系中外键的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将此约定应用于模型中的一项。</summary>
      <param name="item">要应用约定的项。</param>
      <param name="model">数据库模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
      <summary>表示用于将实体集名称设置为实体类型名称的复数版本的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将此约定应用于属性。</summary>
      <param name="item">实体集。</param>
      <param name="model">数据库模型</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
      <summary>表示用于将表名称设置为实体类型名称的复数版本的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将此约定应用于模型中的一项。</summary>
      <param name="item">要应用约定的项。</param>
      <param name="model">模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
      <summary>用于发现名称与主体类型主键属性名称匹配的外键属性的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>匹配与约定关联的依赖键属性。</summary>
      <returns>匹配的依赖键属性。</returns>
      <param name="associationType">关联类型。</param>
      <param name="dependentAssociationEnd">依赖的关联端。</param>
      <param name="dependentProperty">依赖的属性。</param>
      <param name="principalEntityType">主体实体类型。</param>
      <param name="principalKeyProperty">主体键属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1">
      <summary>用于处理在模型的基元属性 (Property) 中找到的 CLR 属性 (Attribute) 的约定的基类。</summary>
      <typeparam name="TAttribute">要查找的特性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0)">
      <summary>对已应用 TAttribute 类型的属性 (Attribute) 的属性 (Property) 应用此约定。</summary>
      <param name="configuration">具有该属性 (Attribute) 的属性 (Property) 的配置。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1">
      <summary>用于处理在模型的类型属性 (Property) 中找到的 CLR 属性 (Attribute) 的约定的基类。</summary>
      <typeparam name="TAttribute">要查找的特性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
      <summary>对已应用 TAttribute 类型的属性 (Attribute) 的属性 (Property) 应用此约定。</summary>
      <param name="memberInfo">具有该属性 (Attribute) 的属性 (Property) 的成员信息。</param>
      <param name="configuration">包含该属性的类的配置。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
      <summary>表示用于为其类型支持长度方面的属性设置最大长度的约定。默认值为 128。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor">
      <summary>使用默认长度初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor(System.Int32)">
      <summary>使用指定长度初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention" /> 的新实例。</summary>
      <param name="length">属性的最大长度。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>应用具有给定模型配置的约定。</summary>
      <param name="item">项。</param>
      <param name="model">映射模型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>应用具有给定模型配置的约定。</summary>
      <param name="item">项。</param>
      <param name="model">映射模型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>应用具有给定模型配置的约定。</summary>
      <param name="item">项。</param>
      <param name="model">映射模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
      <summary>用于处理在模型中导航属性上发现的 <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> 实例的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
      <summary>表示用于处理模型中基元属性上找到的 <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> 实例的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.RequiredAttribute)">
      <summary>将约定应用到具有给定配置的属性。</summary>
      <param name="configuration">配置。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
      <summary>表示为其类型在 SqlCe 为提供程序时支持长度方面的属性设置默认最大长度为 4000 的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.#ctor">
      <summary>使用默认长度初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention" /> 的新实例。</summary>
      <param name="length">属性的默认最大长度。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将此约定应用到给定的提供程序。</summary>
      <param name="item">项。</param>
      <param name="model">模型。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将此约定应用到给定的提供程序。</summary>
      <param name="item">项。</param>
      <param name="model">模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
      <summary>表示用于将整数主键配置为标识的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>将配置应用到映射模型中的指定项。</summary>
      <param name="item">项。</param>
      <param name="model">映射模型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
      <summary>表示用于处理模型中属性上找到的 <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> 实例的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.StringLengthAttribute)">
      <summary>应用具有给定配置和特性的约定。</summary>
      <param name="configuration">配置。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
      <summary>表示用于处理在模型中类型上发现的 <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute" /> 实例的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.TableAttribute)">
      <summary>将此约定应用于属性。</summary>
      <param name="configuration">具有该属性 (Attribute) 的属性 (Property) 的配置。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
      <summary>表示用于处理模型中属性上找到的 <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" /> 实例的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.TimestampAttribute)">
      <summary>将此约定应用于属性。</summary>
      <param name="configuration">具有该属性 (Attribute) 的属性 (Property) 的配置。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1">
      <summary>用于处理在模型中找到的 CLR 特性的约定的基类。</summary>
      <typeparam name="TAttribute">要查找的特性的类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
      <summary>将此约定应用于已应用 TAttribute 类型的属性的类。</summary>
      <param name="configuration">包含该属性的类的配置。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
      <summary>用于发现名称是主体类型名称和主体类型主键属性名称组合的外键属性的约定。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>确定依赖键的属性是否与当前键匹配。</summary>
      <returns>如果依赖键的属性与当前键匹配，则为 true；否则为 false。</returns>
      <param name="associationType">关联类型。</param>
      <param name="dependentAssociationEnd">端上依赖的关联。</param>
      <param name="dependentProperty">依赖的属性。</param>
      <param name="principalEntityType">主体实体类型。</param>
      <param name="principalKeyProperty">主体键属性。</param>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeography">
      <summary>表示大地（圆地球）坐标系中的数据。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Area">
      <summary>获取指示此 DbGeography 值面积的可为 null 的双精度值，如果此值不表示面，则可能为 null。</summary>
      <returns>指示此 DbGeography 值的面积、可以为 null 的双精度值。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsBinary">
      <summary>生成此 DbGeography 值的已知二进制表示形式。</summary>
      <returns>此 DbGeography 值的已知二进制表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsGml">
      <summary>生成此 DbGeography 值的地理标记语言 (GML) 表示形式。</summary>
      <returns>包含此 DbGeography 值的 GML 表示形式的字符串。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsText">
      <summary>生成此 DbGeography 值的已知文本表示形式。仅包含点的经度和纬度。</summary>
      <returns>包含此 DbGeography 值的已知文本表示形式的字符串。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Buffer(System.Nullable{System.Double})">
      <summary>返回一个表示点并集的地理对象，该并集中所有点与地理实例的距离都小于或等于指定的值。</summary>
      <returns>一个地理对象，表示所有点的并集</returns>
      <param name="distance">距离。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.CoordinateSystemId">
      <summary>获取与坐标系关联的标识符。</summary>
      <returns>与坐标系关联的标识符。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId">
      <summary>获取地理值 (WGS 84) 的默认坐标系 ID (SRID)</summary>
      <returns>地理值 (WGS 84) 的默认坐标系 ID (SRID)</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Difference(System.Data.Entity.Spatial.DbGeography)">
      <summary>计算此 DbGeography 值和另一 DbGeography 值的差异。</summary>
      <returns>一个新 DbGeography 值，表示此地理值与其他地理值之间的差异。</returns>
      <param name="other">应计算它与此值的差异的地理值。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Dimension">
      <summary>获取给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的维度（如果值为集合）或最大的元素维度。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的维度。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Disjoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>确定此 DbGeography 在空间上是否与指定的 DbGeography 参数不相交。</summary>
      <returns>如果其他地理值不与此地理值相交，则为 true；否则为 false。</returns>
      <param name="other">应与此地理值比较不相交性的地理值。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Distance(System.Data.Entity.Spatial.DbGeography)">
      <summary>计算此 DbGeography 值和另一 DbGeography 值中两个最接近的点之间的距离。</summary>
      <returns>一个双精度值，指定此地理值和其他地理值中，最接近两点之间的距离。</returns>
      <param name="other">应计算与此值的距离的地理值。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.ElementAt(System.Int32)">
      <summary>如果表示地理集合，则从特定位置返回此 DbGeography 值的元素。&amp;amp;lt;param name="index"&amp;amp;gt;此地理值中，应采用该处元素的位置。&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;如果此地理值表示其他地理值的集合，则为它当中指定位置处的元素；否则为 null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>此 DbGeography 值在特定位置处的元素</returns>
      <param name="index">索引。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.ElementCount">
      <summary>如果此 DbGeography 值表示地理集合，则获取它当中的元素个数。&amp;amp;lt;returns&amp;amp;gt;如果此地理值表示其他地理值的集合，则为它当中的元素个数；否则为 null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>此 DbGeography 值中的元素数目。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Elevation">
      <summary>如果此 DbGeography 值表示点，则获取它的海拔（Z 坐标）值。&amp;amp;lt;returns&amp;amp;gt;如果此地理值表示点，则为它的海拔（Z 坐标）值；否则为 null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>此 DbGeography 值的海拔（Z 坐标）。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.EndPoint">
      <summary>获取表示此值起始点的 DbGeography 值，如果 DbGeography 值不表示曲线，此值可能是 null。</summary>
      <returns>表示此值起点的 DbGeography 值。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[])">
      <summary>基于指定的已知二进制值创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>使用默认的地理坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)、由已知二进制值定义的新 DbGeography 值。</returns>
      <param name="wellKnownBinary">包含地理值的已知二进制表示形式的字节数组。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>使用指定的坐标系标识符、由已知二进制值定义的新 DbGeography 值。</returns>
      <param name="wellKnownBinary">包含地理值的已知二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String)">
      <summary>基于指定的地理标记语言 (GML) 值创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>使用默认的地理坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)、由 GML 值定义的新 DbGeography 值。</returns>
      <param name="geographyMarkup">包含地理值的地理标记语言 (GML) 表示形式的字符串。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String,System.Int32)">
      <summary>基于指定的地理标记语言 (GML) 值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>使用指定的坐标系标识符、由 GML 值定义的新 DbGeography 值。</returns>
      <param name="geographyMarkup">包含地理值的地理标记语言 (GML) 表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String)">
      <summary>基于指定的已知文本值创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>使用默认的地理坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)、由已知文本值定义的新 DbGeography 值。</returns>
      <param name="wellKnownText">包含地理值的已知文本表示形式的字符串。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>使用指定的坐标系标识符、由已知文本值定义的新 DbGeography 值。</returns>
      <param name="wellKnownText">包含地理值的已知文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 集合值。</summary>
      <returns>使用指定的坐标系标识符、由已知二进制值定义的新 DbGeography 值。</returns>
      <param name="geographyCollectionWellKnownBinary">包含地理值的已知二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 集合值。</summary>
      <returns>使用指定的坐标系标识符、由已知文本值定义的新 DbGeography 值。</returns>
      <param name="geographyCollectionWellKnownText">包含地理值的已知文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Intersection(System.Data.Entity.Spatial.DbGeography)">
      <summary>计算此 DbGeography 值和另一 DbGeography 值的交集。</summary>
      <returns>一个新 DbGeography 值，表示此地理值与其他地理值之间的交集。</returns>
      <param name="other">应计算与此值的交集的地理值。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Intersects(System.Data.Entity.Spatial.DbGeography)">
      <summary>确定此 DbGeography 值在空间上是否和指定的 DbGeography 参数相交。</summary>
      <returns>如果其他地理值与此地理值相交，则为 true；否则为 false。</returns>
      <param name="other">应与此地理值比较相交性的地理值。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.IsClosed">
      <summary>获取指示此 DbGeography 值是否为闭合的可为 null 的布尔值，如果此值不表示曲线，则可能为 null。</summary>
      <returns>如果此 DbGeography 值为闭合值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.IsEmpty">
      <summary>获取一个可为 null 的布尔值，它指示此 DbGeography 值是否为空。</summary>
      <returns>如果此 DbGeography 值为空，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Latitude">
      <summary>如果此 DbGeography 值表示点，则获取它的纬度坐标。&amp;amp;lt;returns&amp;amp;gt;如果此地理值表示点，则为它的纬度坐标值；否则为 null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>此 DbGeography 值的纬度坐标。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Length">
      <summary>获取指示此 DbGeography 值长度的可为 null 的双精度值，如果此值不表示曲线，则可能为 null。</summary>
      <returns>指示此 DbGeography 值的长度、可以为 null 的双精度值。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 线值。</summary>
      <returns>使用指定的坐标系标识符、由已知二进制值定义的新 DbGeography 值。</returns>
      <param name="lineWellKnownBinary">包含地理值的已知二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 线值。</summary>
      <returns>使用指定的坐标系标识符、由已知文本值定义的新 DbGeography 值。</returns>
      <param name="lineWellKnownText">包含地理值的已知文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Longitude">
      <summary>如果此 DbGeography 值表示点，则获取它的经度坐标。&amp;amp;lt;returns&amp;amp;gt;如果此地理值表示点，则为它的经度坐标值；否则为 null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>此 DbGeography 值的经度坐标。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Measure">
      <summary>如果此 DbGeography 值表示点，则获取它的 M（度量值）坐标。&amp;amp;lt;returns&amp;amp;gt;如果此地理值表示点，则为它的 M（度量值）坐标值；否则为 null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>此 DbGeography 值的 M（度量值）坐标。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>返回二进制值中的多线值。</summary>
      <returns>二进制值中的多线值。</returns>
      <param name="multiLineWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromText(System.String,System.Int32)">
      <summary>返回已知文本值中的多线值。</summary>
      <returns>已知文本值中的多线值。</returns>
      <param name="multiLineWellKnownText">已知的文本。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>返回已知二进制值中的多点值。</summary>
      <returns>已知二进制值中的多点值。</returns>
      <param name="multiPointWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromText(System.String,System.Int32)">
      <summary>返回已知文本值中的多点值。</summary>
      <returns>已知文本值中的多点值。</returns>
      <param name="multiPointWellKnownText">已知的文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>返回已知二进制值的多多边形值。</summary>
      <returns>已知二进制值中的多多边形值。</returns>
      <param name="multiPolygonWellKnownBinary">多多边形已知二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromText(System.String,System.Int32)">
      <summary>返回已知文本值中的多多边形值。</summary>
      <returns>已知文本值中的多多边形值。</returns>
      <param name="multiPolygonWellKnownText">多多边形已知文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointAt(System.Int32)">
      <summary>如果表示行字符串或线性环，则从特定位置返回此 DbGeography 值的元素。&amp;amp;lt;param name="index"&amp;amp;gt;此地理值中，应采用该处元素的位置。&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;如果此地理值表示行字符串或线性环，则为它当中指定位置处的元素；否则为 null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>此 DbGeography 值在特定位置处的元素</returns>
      <param name="index">索引。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.PointCount">
      <summary>如果表示行字符串或线性环，则获取此 DbGeography 值中的点数。&amp;amp;lt;returns&amp;amp;gt;如果此地理值表示行字符串或线性环，则为它当中的元素个数；否则为 null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>此 DbGeography 值中的点数。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 点值。</summary>
      <returns>使用指定的坐标系标识符、由已知二进制值定义的新 DbGeography 值。</returns>
      <param name="pointWellKnownBinary">包含地理值的已知二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 点值。</summary>
      <returns>使用指定的坐标系标识符、由已知文本值定义的新 DbGeography 值。</returns>
      <param name="pointWellKnownText">包含地理值的已知文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多边形值。</summary>
      <returns>使用指定的坐标系标识符、由已知二进制值定义的新 DbGeography 值。</returns>
      <param name="polygonWellKnownBinary">包含地理值的已知二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多边形值。</summary>
      <returns>使用指定的坐标系标识符、由已知文本值定义的新 DbGeography 值。</returns>
      <param name="polygonWellKnownText">包含地理值的已知文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeography 值应使用的坐标系的标识符。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Provider">
      <summary>获取将用于此空间类型的操作的空间提供程序。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.ProviderValue">
      <summary>获取此 DbGeography 值的表示形式，它对于构造它的基础提供程序是特定的。</summary>
      <returns>此 DbGeography 值的表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.SpatialEquals(System.Data.Entity.Spatial.DbGeography)">
      <summary>确定此 DbGeography 在空间上是否与指定的 DbGeography 参数相等。</summary>
      <returns>如果其他地理值在空间上与此地理值相等，则为 true ；否则为 false。</returns>
      <param name="other">应与此地理值比较相等性的地理值。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.SpatialTypeName">
      <summary>获取 DBGeography 的空间类型名称。</summary>
      <returns>DBGeography 的空间类型名称。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.StartPoint">
      <summary>获取表示此值起始点的 DbGeography 值，如果 DbGeography 值不表示曲线，此值可能是 null。</summary>
      <returns>表示此值起点的 DbGeography 值。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.SymmetricDifference(System.Data.Entity.Spatial.DbGeography)">
      <summary>计算此 DbGeography 值和另一 DbGeography 值的对称差异。</summary>
      <returns>一个新 DbGeography 值，表示此地理值与其他地理值的对称差异。</returns>
      <param name="other">应计算与此值的对称差异的地理值。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.ToString">
      <summary>返回地理值的字符串表示形式。</summary>
      <returns>地理值的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Union(System.Data.Entity.Spatial.DbGeography)">
      <summary>计算此 DbGeography 值和另一 DbGeography 值的并集。</summary>
      <returns>一个新 DbGeography 值，表示此地理值与其他地理值之间的并集。</returns>
      <param name="other">应计算与此值的并集的地理值。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.WellKnownValue">
      <summary>获取或设置此 DbGeography 值的数据协定的可序列化已知表示形式。</summary>
      <returns>此 DbGeography 值的数据协定的可序列化的已知表示形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的数据协定的可序列化表示形式。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeographyWellKnownValue.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.CoordinateSystemId">
      <summary>获取或设置此值的坐标系标识符 (SRID)。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownBinary">
      <summary>获取或设置此值的已知二进制表示形式。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownText">
      <summary>获取或设置此值的已知文本表示形式。</summary>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeometry">
      <summary>表示几何形状。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Area">
      <summary>获取指示此 DbGeometry 值面积的可为 null 的双精度值，如果此值不表示面，则可能为 null。</summary>
      <returns>一个可以为 null 的双精度值，指示此 DbGeometry 值的面积。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsBinary">
      <summary>生成此 DbGeometry 值的已知二进制表示形式。</summary>
      <returns>此 DbGeometry 值的已知二进制表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsGml">
      <summary>生成此 DbGeometry 值的地理标记语言 (GML) 表示形式。</summary>
      <returns>包含此 DbGeometry 值的 GML 表示形式的字符串。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsText">
      <summary>生成此 DbGeometry 值的已知文本表示形式。仅包含点的 X 和 Y 坐标。</summary>
      <returns>包含此 DbGeometry 值的已知文本表示形式的字符串。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Boundary">
      <summary>获取 DbGeometry 对象的边界。</summary>
      <returns>DbGeometry 对象的边界。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Buffer(System.Nullable{System.Double})">
      <summary>返回一个表示所有点并集的几何对象，该并集中所有点与几何实例的距离都小于或等于指定的值。</summary>
      <returns>一个几何对象，表示所有点的并集。</returns>
      <param name="distance">距离。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Centroid">
      <summary>获取表示此 DbGeometry 值的形心的 DbGeometry 值，如果此值不表示面，则可能为 null。</summary>
      <returns>一个 DbGeometry 值，表示此 DbGeometry 值的形心。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Contains(System.Data.Entity.Spatial.DbGeometry)">
      <summary>确定此 DbGeography 值在空间上是否包含指定的 DbGeography 参数。</summary>
      <returns>如果此几何值包含其他几何值，则为 true；否则为 false。</returns>
      <param name="other">应与此几何值比较包含关系的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ConvexHull">
      <summary>获取此 DbGeometry 值的凸包作为另一 DbGeometry 值。</summary>
      <returns>用作另一 DbGeometry 值的此 DbGeometry 值的凸包。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.CoordinateSystemId">
      <summary>获取此 DbGeometry 对象的坐标系统标识符。</summary>
      <returns>此 DbGeometry 对象的坐标系统标识符。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Crosses(System.Data.Entity.Spatial.DbGeometry)">
      <summary>确定此 DbGeometry 值在空间上是否与指定的 DbGeometry 参数相交。</summary>
      <returns>如果其他几何值与此几何值相交，则为 true；否则为 false。</returns>
      <param name="other">应与此几何值比较的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId">
      <summary>获取几何值的默认坐标系统 ID (SRID)。</summary>
      <returns>几何值的默认坐标系统 ID (SRID)。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Difference(System.Data.Entity.Spatial.DbGeometry)">
      <summary>计算此 DbGeometry 值和另一 DbGeometry 值的差异。</summary>
      <returns>一个新 DbGeometry 值，表示此几何值与其他几何值的差异。</returns>
      <param name="other">应计算与此值的差异的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Dimension">
      <summary>获取给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的维度（如果该值为一个集合）或其中最大元素的维度。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的维度。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Disjoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>确定此 DbGeometry 在空间上是否与指定的 DbGeometry 参数不相交。</summary>
      <returns>如果其他几何值与此几何值不相交，则为 true；否则为 false。</returns>
      <param name="other">应与此几何值比较不相交性的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Distance(System.Data.Entity.Spatial.DbGeometry)">
      <summary>计算此 DbGeometry 值和另一 DbGeometry 值中两个最接近的点之间的距离。</summary>
      <returns>一个双精度值，指定此几何值和其他几何值中最接近的两点之间的距离。</returns>
      <param name="other">应计算与此值的距离的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.ElementAt(System.Int32)">
      <summary>如果表示几何集合，则从特定位置返回此 DbGeometry 值的元素。</summary>
      <returns>如果此几何值表示其他几何值的集合，则为其在指定位置的元素；否则为 null。</returns>
      <param name="index">在此几何值中应提取元素的位置。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ElementCount">
      <summary>如果表示几何集合，则获取此 DbGeometry 值中的元素数。</summary>
      <returns>如果此几何值表示其他几何值的集合，则为它当中的元素个数；否则为 null。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Elevation">
      <summary>如果此 DbGeometry 值表示点，则获取它的海拔（Z 坐标）值。</summary>
      <returns>如果此 DbGeometry 表示一个点，则为它的海拔（Z 坐标）；否则为 null。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.EndPoint">
      <summary>获取表示此值起始点的 DbGeometry 值，如果 DbGeometry 值不表示曲线，此值可能为 null。</summary>
      <returns>表示此值起点的 DbGeometry 值。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Envelope">
      <summary>获取此 DbGeometry 值的包络线（最小边界框）作为几何值。</summary>
      <returns>此 DbGeometry 值的包络线（最小边界框）。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ExteriorRing">
      <summary>获取表示此 DbGeometry 值的外部环的 DbGeometry 值，如果此值不表示多边形，则可能为 null。</summary>
      <returns>一个 DbGeometry 值，表示此 DbGeometry 值的外部环。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[])">
      <summary>基于指定的已知二进制值创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>使用默认的几何坐标系标识符 (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)、由已知二进制值定义的新 DbGeometry 值。</returns>
      <param name="wellKnownBinary">包含几何值的已知二进制表示形式的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>使用指定的坐标系标识符、由已知二进制值定义的新 DbGeometry 值。</returns>
      <param name="wellKnownBinary">包含几何值的已知二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 无效。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String)">
      <summary>基于指定的地理标记语言 (GML) 值创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>使用默认的几何坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)、由 GML 值定义的新 DbGeometry 值。</returns>
      <param name="geometryMarkup">包含几何值的地理标记语言 (GML) 表示形式的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String,System.Int32)">
      <summary>基于指定的地理标记语言 (GML) 值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>使用指定的坐标系标识符、由 GML 值定义的新 DbGeometry 值。</returns>
      <param name="geometryMarkup">包含几何值的地理标记语言 (GML) 表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 无效。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String)">
      <summary>基于指定的已知文本值创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>使用默认的几何坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)、由已知文本值定义的新 DbGeometry 值。</returns>
      <param name="wellKnownText">包含几何值的已知文本表示形式的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>使用指定的坐标系标识符、由已知文本值定义的新 DbGeometry 值。</returns>
      <param name="wellKnownText">包含几何值的已知文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 无效。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 集合值。</summary>
      <returns>使用指定的坐标系标识符、由已知二进制值定义的新 DbGeometry 值。</returns>
      <param name="geometryCollectionWellKnownBinary">包含几何值的已知二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownBinary" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 无效。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 集合值。</summary>
      <returns>使用指定的坐标系标识符、由已知文本值定义的新 DbGeometry 值。</returns>
      <param name="geometryCollectionWellKnownText">包含几何值的已知文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownText" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 无效。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.InteriorRingAt(System.Int32)">
      <summary>如果表示多边形，则从此 DbGeometry 值返回位于特定位置的内部环。</summary>
      <returns>如果此几何值表示多边形，则为其在指定位置的内部环；否则为 null。</returns>
      <param name="index">在此几何值中应提取内部环的位置。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.InteriorRingCount">
      <summary>如果表示多边形，则获取此 DbGeometry 值中的内部环数。</summary>
      <returns>如果此几何值表示多边形，则为它当中的元素个数；否则为 null。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersection(System.Data.Entity.Spatial.DbGeometry)">
      <summary>计算此 DbGeometry 值和另一 DbGeometry 值的交集。</summary>
      <returns>一个新 DbGeometry 值，表示此几何值与其他几何值的交集。</returns>
      <param name="other">应计算与此值的交集的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersects(System.Data.Entity.Spatial.DbGeometry)">
      <summary>确定此 DbGeometry 在空间上是否与指定的 DbGeometry 参数相交。</summary>
      <returns>如果其他几何值与此几何值相交，则为 true；否则为 false。</returns>
      <param name="other">应与此几何值比较相交性的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsClosed">
      <summary>获取指示此 DbGeometry 值是否为闭合的可为 null 的布尔值，如果此值不表示曲线，则可能为 null。</summary>
      <returns>如果此 DbGeometry 值为闭合值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsEmpty">
      <summary>获取一个可以为 null 的布尔值，该值指示此 DbGeometry 值是否为空；如果此值不表示曲线，则可能为 null。</summary>
      <returns>如果此 DbGeometry 值为空，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsRing">
      <summary>获取指示此 DbGeometry 值是否为环的可为 null 的布尔值，如果此值不表示曲线，则可能为 null。</summary>
      <returns>如果此 DbGeometry 值是一个环，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsSimple">
      <summary>获取一个可以为 null 的布尔值，该值指示此 DbGeometry 值是否为简单值。</summary>
      <returns>如果此 DbGeometry 值简单，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsValid">
      <summary>获取一个可以为 null 的布尔值，该值指示此 DbGeometry 值是否有效。</summary>
      <returns>如果此 DbGeometry 值有效，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Length">
      <summary>获取指示此 DbGeometry 值长度的可为 null 的双精度值，如果此值不表示曲线，则可能为 null。</summary>
      <returns>此 DbGeometry 值的长度。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 线值。</summary>
      <returns>使用指定的坐标系标识符、由已知二进制值定义的新 DbGeometry 值。</returns>
      <param name="lineWellKnownBinary">包含几何值的已知二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownBinary" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 无效。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 线值。</summary>
      <returns>使用指定的坐标系标识符、由已知文本值定义的新 DbGeometry 值。</returns>
      <param name="lineWellKnownText">包含几何值的已知文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownText" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 无效。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Measure">
      <summary>如果此 DbGeometry 值表示点，则获取它的度量值（M 坐标）。</summary>
      <returns>如果此几何值表示一个点，则为它的度量值（M 坐标）；否则为 null。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>返回二进制值中的多线值。</summary>
      <returns>二进制值中的多线值。</returns>
      <param name="multiLineWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromText(System.String,System.Int32)">
      <summary>返回已知文本值中的多线值。</summary>
      <returns>已知文本值中的多线值。</returns>
      <param name="multiLineWellKnownText">已知的文本。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>返回已知二进制值中的多点值。</summary>
      <returns>已知二进制值中的多点值。</returns>
      <param name="multiPointWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromText(System.String,System.Int32)">
      <summary>返回已知文本值中的多点值。</summary>
      <returns>已知文本值中的多点值。</returns>
      <param name="multiPointWellKnownText">已知的文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>返回已知二进制值的多多边形值。</summary>
      <returns>已知文本值中的多点值。</returns>
      <param name="multiPolygonWellKnownBinary">多多边形已知文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromText(System.String,System.Int32)">
      <summary>返回已知二进制值的多多边形值。</summary>
      <returns>已知二进制值中的多多边形值。</returns>
      <param name="multiPolygonWellKnownText">多多边形已知文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Overlaps(System.Data.Entity.Spatial.DbGeometry)">
      <summary>确定此 DbGeometry 值在空间上是否与指定的 DbGeometry 参数重叠。</summary>
      <returns>如果此几何值与其他几何值重叠，则为 true；否则为 false。</returns>
      <param name="other">应与此几何值比较重叠的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointAt(System.Int32)">
      <summary>如果此 DbGeometry 值表示行字符串或线性环，则返回它特定位置处的元素。</summary>
      <returns>如果此几何值表示行字符串或线性环，则为其在指定位置的元素；否则为 null。</returns>
      <param name="index">在此几何值中应提取元素的位置。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.PointCount">
      <summary>如果此 DbGeometry 值表示行字符串或线性环，则获取它当中的点数。</summary>
      <returns>如果此几何值表示行字符串或线性环，则为它的元素数。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 点值。</summary>
      <returns>使用指定的坐标系标识符、由已知二进制值定义的新 DbGeometry 值。</returns>
      <param name="pointWellKnownBinary">包含几何值的已知二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownBinary" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 无效。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 点值。</summary>
      <returns>使用指定的坐标系标识符、由已知文本值定义的新 DbGeometry 值。</returns>
      <param name="pointWellKnownText">包含几何值的已知文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownText" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 无效。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.PointOnSurface">
      <summary>获取此 DbGeometry 值面上的点，如果此值不表示面，则可能为 null。</summary>
      <returns>此 DbGeometry 值面上的点。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多边形值。</summary>
      <returns>使用指定的坐标系标识符、由已知二进制值定义的新 DbGeometry 值。</returns>
      <param name="polygonWellKnownBinary">包含几何值的已知二进制表示形式的字节数组。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownBinary" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 无效。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多边形值。</summary>
      <returns>使用指定的坐标系标识符、由已知文本值定义的新 DbGeometry 值。</returns>
      <param name="polygonWellKnownText">包含几何值的已知文本表示形式的字符串。</param>
      <param name="coordinateSystemId">新 DbGeometry 值应使用的坐标系的标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownText" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> 无效。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Provider">
      <summary>获取将用于此空间类型的操作的空间提供程序。</summary>
      <returns>将用于此空间类型的操作的空间提供程序。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ProviderValue">
      <summary>获取此 DbGeometry 值的表示形式，它对于构造它的基础提供程序是特定的。</summary>
      <returns>此 DbGeometry 值的表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Relate(System.Data.Entity.Spatial.DbGeometry,System.String)">
      <summary>根据给定的维度扩展的 9 交集模型 (DE-9IM) 交集模式来确定此 DbGeometry 值在空间上是否与指定的 DbGeometry 参数相关。</summary>
      <returns>如果根据指定的交集模式矩阵，此几何值与其他几何相关，则为 true；否则为 false。</returns>
      <param name="other">应与此几何值比较相关性的几何值。</param>
      <param name="matrix">包含定义了相关性的 (DE-9IM) 交集模式的文本表示形式的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 和 <paramref name="matrix" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.SpatialEquals(System.Data.Entity.Spatial.DbGeometry)">
      <summary>确定此 DbGeometry 在空间上是否与指定的 DbGeometry 参数相等。</summary>
      <returns>如果其他几何值在空间上与此几何值相等，则为 true；否则为 false。</returns>
      <param name="other">应与此几何值比较相等性的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.SpatialTypeName">
      <summary>获取此 DbGeometry 值的空间类型名称表示形式。</summary>
      <returns>此 DbGeometry 值的空间类型名称表示形式。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.StartPoint">
      <summary>获取表示此值起始点的 DbGeometry 值，如果 DbGeometry 值不表示曲线，此值可能为 null。</summary>
      <returns>表示此值起点的 DbGeometry 值。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry)">
      <summary>计算此 DbGeometry 值和另一 DbGeometry 值的对称差异。</summary>
      <returns>一个新 DbGeometry 值，表示此几何值与其他几何值的对称差异。</returns>
      <param name="other">应计算与此值的对称差异的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.ToString">
      <summary>返回几何值的字符串表示形式。</summary>
      <returns>此几何值的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Touches(System.Data.Entity.Spatial.DbGeometry)">
      <summary>确定此 DbGeometry 值在空间上是否与指定的 DbGeometry 参数接触。</summary>
      <returns>如果其他几何值与此几何值相接，则为 true；否则为 false。</returns>
      <param name="other">应与此几何值比较的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Union(System.Data.Entity.Spatial.DbGeometry)">
      <summary>计算此 DbGeometry 值和另一 DbGeometry 值的并集。</summary>
      <returns>一个新 DbGeometry 值，表示此几何值与其他几何值的并集。</returns>
      <param name="other">应计算与此值的并集的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.WellKnownValue">
      <summary>获取或设置此 DbGeometry 值的数据协定的可序列化已知表示形式。</summary>
      <returns>此 DbGeometry 值的数据协定的可序列化的已知表示形式。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Within(System.Data.Entity.Spatial.DbGeometry)">
      <summary>确定此 DbGeometry 值在空间上是否在指定的 DbGeometry 参数内。</summary>
      <returns>如果此几何值在其他几何值中，则为 true；否则为 false。</returns>
      <param name="other">应与此几何值比较包含关系的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.XCoordinate">
      <summary>如果此 DbGeometry 值表示点，则获取它的 X 坐标。</summary>
      <returns>如果表示点，则为此几何值的 X 坐标值；否则为 null。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.YCoordinate">
      <summary>如果此 DbGeometry 值表示点，则获取它的 Y 坐标。</summary>
      <returns>如果表示点，则为此几何值的 Y 坐标值；否则为 null。</returns>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的数据协定的可序列化表示形式。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometryWellKnownValue.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.CoordinateSystemId">
      <summary>获取或设置此值的坐标系标识符 (SRID)。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownBinary">
      <summary>获取或设置此值的已知二进制表示形式。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownText">
      <summary>获取或设置此值的已知文本表示形式。</summary>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbSpatialDataReader">
      <summary>与提供程序无关的服务 API，用于支持地理空间（几何/地理）类型。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Spatial.DbSpatialDataReader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeography(System.Int32)">
      <summary>当在派生类型中实现时，从指定列序号的列读取 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 的实例。</summary>
      <returns>位于指定列值处的 DbGeography 实例</returns>
      <param name="ordinal">包含地理值的列序号</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeographyAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>从位于指定的列序号的列异步读取 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 的实例。</summary>
      <returns>表示异步操作的任务。任务结果包含位于指定列值处的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 实例。</returns>
      <param name="ordinal">包含地理值的列序号。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeometry(System.Int32)">
      <summary>当在派生类型中实现时，从指定列序号的列读取 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 的实例。</summary>
      <returns>位于指定列值处的 DbGeometry 实例</returns>
      <param name="ordinal">包含提供程序专用几何数据的数据记录列的序号</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeometryAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>从位于指定的列序号的列异步读取 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 的实例。</summary>
      <returns>表示异步操作的任务。任务结果包含位于指定列值处的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 实例。</returns>
      <param name="ordinal">包含提供程序特定的几何数据的数据记录列的序号。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeographyColumn(System.Int32)">
      <summary>返回位于指定的列序号的列是否为地理类型</summary>
      <returns>如果位于指定的列序号的列为地理类型，则为 true；否则为 false。</returns>
      <param name="ordinal">列序号。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeometryColumn(System.Int32)">
      <summary>返回位于指定的列序号的列是否为几何类型</summary>
      <returns>如果位于指定的列序号的列为几何类型，则为 true；否则为 false。</returns>
      <param name="ordinal">列序号。</param>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbSpatialServices">
      <summary>与提供程序无关的服务 API，用于支持地理空间（几何/地理）类型。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeography)">
      <summary>获取给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的已知二进制表示形式。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的已知二进制表示形式。</returns>
      <param name="geographyValue">应为其生成已知二进制的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeometry)">
      <summary>获取给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的已知二进制表示形式。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的已知二进制表示形式。</returns>
      <param name="geometryValue">应为其生成已知二进制的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeography)">
      <summary>生成此 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的地理标记语言 (GML) 表示形式。</summary>
      <returns>包含此 DbGeography 值的 GML 表示形式的字符串。</returns>
      <param name="geographyValue">应生成 GML 的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeometry)">
      <summary>生成此 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的地理标记语言 (GML) 表示形式。</summary>
      <returns>包含此 DbGeometry 值的 GML 表示形式的字符串。</returns>
      <param name="geometryValue">应生成 GML 的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeography)">
      <summary>获取给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的已知文本表示形式。此值仅应包含点的经度和纬度。</summary>
      <returns>一个字符串，包含 geographyValue 的已知文本表示形式。</returns>
      <param name="geographyValue">应为其生成已知文本的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeometry)">
      <summary>获取给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的已知文本表示形式，仅包含点的 X 和 Y 坐标。</summary>
      <returns>一个字符串，包含 geometryValue 的已知文本表示形式。</returns>
      <param name="geometryValue">应为其生成已知文本的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeography)">
      <summary>返回 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 带有海拔和测量值的文本表示形式。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 的文本表示形式。</returns>
      <param name="geographyValue">地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 带有海拔和测量值的文本表示形式。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 带有海拔和测量值的文本表示形式。</returns>
      <param name="geometryValue">几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeography,System.Double)">
      <summary>创建一个地理值，该值表示所有距离小于或等于所给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的点。</summary>
      <returns>一个新 DbGeography 值，表示所有距离小于或等于 geographyValue 的点。</returns>
      <param name="geographyValue">地理值。</param>
      <param name="distance">一个双精度值，指定从 geographyValue 到缓冲区的距离。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeometry,System.Double)">
      <summary>创建一个几何值，该值表示所有距离小于或等于所给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 的点。</summary>
      <returns>一个新 DbGeometry 值，表示所有距离小于或等于 geometryValue 的点。</returns>
      <param name="geometryValue">几何值。</param>
      <param name="distance">一个双精度值，指定从 geometryValue 到缓冲区的距离。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Contains(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>确定一个 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否在空间上包含另一个值。</summary>
      <returns>如果 geometryValue 包含 otherGeometry，则为 true；否则为 false。</returns>
      <param name="geometryValue">第一个几何值。</param>
      <param name="otherGeometry">第二个几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeography(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
      <summary>在进行指定提供程序值的合适验证后，此方法主要由 <see cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)" /> 的派生实现使用，以确保其适用于派生实现。</summary>
      <returns>一个新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 实例，包含指定的 providerValue，使用指定的 spatialServices 作为其空间实现。</returns>
      <param name="spatialServices">返回的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值将依赖它实现空间功能的空间服务实例。</param>
      <param name="providerValue">提供程序值。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeometry(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
      <summary>在进行指定提供程序值的合适验证后，此方法主要由 <see cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)" /> 的派生实现使用，以确保其适用于派生实现。</summary>
      <returns>一个新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 实例，包含指定的 providerValue，使用指定的 spatialServices 作为其空间实现。</returns>
      <param name="spatialServices">返回的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值将依赖它实现空间功能的空间服务实例。</param>
      <param name="providerValue">提供程序值。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeographyWellKnownValue)">
      <summary>基于指定的已知 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 表示形式，创建一个兼容此空间服务实现的提供程序特定值。</summary>
      <returns>一个提供程序特定值，它按照兼容此空间服务实现的方式，对 wellKnownValue 中包含的信息进行编码。</returns>
      <param name="wellKnownValue">一个 <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" /> 实例，包含地理值的此已知表示形式。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeometryWellKnownValue)">
      <summary>基于指定的已知 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 表示形式，创建一个兼容此空间服务实现的提供程序特定值。</summary>
      <returns>一个提供程序特定值，它按照兼容此空间服务实现的方式，对 wellKnownValue 中包含的信息进行编码。</returns>
      <param name="wellKnownValue">一个 <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" /> 实例，包含几何值的此已知表示形式。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeography)">
      <summary>使用其中一个或这两个标准已知空间格式，创建表示指定 <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" /> 值的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 实例。</summary>
      <returns>geographyValue 的已知表示形式，用作新 <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" />。</returns>
      <param name="geographyValue">地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeometry)">
      <summary>使用其中一个或这两个标准已知空间格式，创建表示指定 <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" /> 值的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 实例。</summary>
      <returns>geometryValue 的已知表示形式，用作新 <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" />。</returns>
      <param name="geometryValue">几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Crosses(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>确定两个给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否在空间上相交。</summary>
      <returns>如果 geometryValue 与 otherGeometry 相交，则为 true；否则为 false。</returns>
      <param name="geometryValue">第一个几何值。</param>
      <param name="otherGeometry">第二个几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbSpatialServices.Default">
      <summary>为 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 获取默认服务。</summary>
      <returns>默认服务。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>计算两个 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的差异。</summary>
      <returns>一个新 DbGeography 值，表示 geographyValue 和 otherGeography 的差异。</returns>
      <param name="geographyValue">第一个地理值。</param>
      <param name="otherGeography">第二个地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>计算两个 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的差异。</summary>
      <returns>一个新 DbGeometry 值，表示 geometryValue 和 otherGeometry 的差异。</returns>
      <param name="geometryValue">第一个几何值。</param>
      <param name="otherGeometry">第二个几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>确定两个给定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值是否在空间上不相交。</summary>
      <returns>如果 geographyValue 不与 otherGeography 相交，则为 true；否则为 false。</returns>
      <param name="geographyValue">用来比较不相交性的第一个地理值。</param>
      <param name="otherGeography">用来比较不相交性的第二个地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>确定两个给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否在空间上不相交。</summary>
      <returns>如果 geometryValue 不与 otherGeometry 相交，则为 true；否则为 false。</returns>
      <param name="geometryValue">用来比较不相交性的第一个几何值。</param>
      <param name="otherGeometry">用来比较不相交性的第二个几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>计算两个 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值中最接近的点之间的距离。</summary>
      <returns>一个双精度值，表示 geographyValue 和 otherGeography 中，最接近两点之间的距离。</returns>
      <param name="geographyValue">第一个地理值。</param>
      <param name="otherGeography">第二个地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>计算两个 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值中最接近的点之间的距离。</summary>
      <returns>一个双精度值，指定 geometryValue 和 otherGeometry 中，最接近两点之间的距离。</returns>
      <param name="geometryValue">第一个几何值。</param>
      <param name="otherGeometry">第二个几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
      <summary>如果表示地理集合，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的元素。</summary>
      <returns>如果 geographyValue 表示其他地理值的集合，则为其在位置索引处的元素；否则为 null。</returns>
      <param name="geographyValue">不需要表示地理集合的地理值。</param>
      <param name="index">在地理值中应提取元素的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>如果表示几何集合，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的元素。</summary>
      <returns>如果 geometryValue 表示其他几何值的集合，则为其在位置索引上的元素；否则为 null。</returns>
      <param name="geometryValue">不需要表示几何集合的几何值。</param>
      <param name="index">在几何值中应提取元素的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 集合值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由已知二进制值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="geographyCollectionWellKnownBinary">一个字节数组，包含地理值的已知二进制表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 集合值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由已知文本值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="geographyCollectionWellKnownText">一个字符串，包含地理值的已知文本表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[])">
      <summary>基于指定的已知二进制值创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由已知二进制值使用默认 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="wellKnownBinary">一个字节数组，包含地理值的已知二进制表示形式。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由已知二进制值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="wellKnownBinary">一个字节数组，包含地理值的已知二进制表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String)">
      <summary>基于指定的地理标记语言 (GML) 值创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由 GML 值使用默认 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 坐标系统标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="geographyMarkup">包含地理值的几何标记语言 (GML) 表示形式的字符串。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String,System.Int32)">
      <summary>基于指定的地理标记语言 (GML) 值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由 GML 值使用指定的坐标系标识符 (SRID) 进行定义。</returns>
      <param name="geographyMarkup">包含地理值的几何标记语言 (GML) 表示形式的字符串。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)">
      <summary>基于与此空间服务实现兼容的提供程序特定的值创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" />DbGeometry 值，它受此空间服务实现和指定提供程序值的支持。</returns>
      <param name="providerValue">此空间服务实现可将其解释为地理值的提供程序特定的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String)">
      <summary>基于指定的已知文本值创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由已知文本值使用默认 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 坐标系标识符 (SRID) <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> 进行定义。</returns>
      <param name="wellKnownText">一个字符串，包含地理值的已知文本表示形式。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由已知文本值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="wellKnownText">一个字符串，包含地理值的已知文本表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 线值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由已知二进制值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="lineWellKnownBinary">一个字节数组，包含地理值的已知二进制表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 线值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由已知文本值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="lineWellKnownText">一个字符串，包含地理值的已知文本表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符，创建一个新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多线值。</summary>
      <returns>新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多线值。</returns>
      <param name="multiLineWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符，创建一个新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多线值。</summary>
      <returns>新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多线值。</returns>
      <param name="multiLineWellKnownText">已知的文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符，创建一个新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多点值。</summary>
      <returns>新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多点值。</returns>
      <param name="multiPointWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符，创建一个新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多点值。</summary>
      <returns>新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多点值。</returns>
      <param name="multiPointWellKnownText">已知的文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符，创建一个新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多多边形值。</summary>
      <returns>新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多边形值。</returns>
      <param name="multiPolygonWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符，创建一个新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多多边形值。</summary>
      <returns>新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多边形值。</returns>
      <param name="multiPolygonKnownText">已知的文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 点值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由已知二进制值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="pointWellKnownBinary">一个字节数组，包含地理值的已知二进制表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 点值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由已知文本值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="pointWellKnownText">一个字符串，包含地理值的已知文本表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多边形值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由已知二进制值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="polygonWellKnownBinary">一个字节数组，包含地理值的已知二进制表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 多边形值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，由已知文本值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="polygonWellKnownText">一个字符串，包含地理值的已知文本表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 集合值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由已知二进制值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="geometryCollectionWellKnownBinary">一个字节数组，包含几何值的已知二进制表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 集合值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由已知文本值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="geometryCollectionWellKnownText">一个字符串，包含几何值的已知文本表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[])">
      <summary>基于指定的已知二进制值创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由已知二进制值使用默认 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="wellKnownBinary">一个字节数组，包含几何值的已知二进制表示形式。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由已知二进制值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="wellKnownBinary">一个字节数组，包含几何值的已知二进制表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String)">
      <summary>基于指定的地理标记语言 (GML) 值创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由 GML 值使用默认 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 坐标系统标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="geometryMarkup">包含几何值的地理标记语言 (GML) 表示形式的字符串。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String,System.Int32)">
      <summary>基于指定的地理标记语言 (GML) 值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由 GML 值使用指定的坐标系标识符 (SRID) 进行定义。</returns>
      <param name="geometryMarkup">包含几何值的地理标记语言 (GML) 表示形式的字符串。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)">
      <summary>基于与此空间服务实现兼容的提供程序特定的值创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" />DbGeometry 值，它受此空间服务实现和指定提供程序值的支持。</returns>
      <param name="providerValue">此空间服务实现可将其解释为几何值的提供程序特定的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String)">
      <summary>基于指定的已知文本值创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由已知文本值使用默认 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 坐标系标识符 (SRID) <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> 进行定义。</returns>
      <param name="wellKnownText">一个字符串，包含几何值的已知文本表示形式。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由已知文本值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="wellKnownText">一个字符串，包含几何值的已知文本表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 线值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由已知二进制值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="lineWellKnownBinary">一个字节数组，包含几何值的已知二进制表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 线值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由已知文本值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="lineWellKnownText">一个字符串，包含几何值的已知文本表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符，创建一个新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多线值。</summary>
      <returns>新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多线值</returns>
      <param name="multiLineWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符，创建一个新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多线值。</summary>
      <returns>新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多线值</returns>
      <param name="multiLineWellKnownText">已知的文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符，创建一个新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多点值。</summary>
      <returns>新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多点值。</returns>
      <param name="multiPointWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符，创建一个新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多点值。</summary>
      <returns>新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多点值。</returns>
      <param name="multiPointWellKnownText">已知的文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符，创建一个新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多多边形值。</summary>
      <returns>新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多边形值。</returns>
      <param name="multiPolygonWellKnownBinary">已知的二进制值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符，创建一个新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多多边形值。</summary>
      <returns>新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多边形值。</returns>
      <param name="multiPolygonKnownText">已知的文本值。</param>
      <param name="coordinateSystemId">坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 点值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由已知二进制值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="pointWellKnownBinary">一个字节数组，包含几何值的已知二进制表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 点值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由已知文本值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="pointWellKnownText">一个字符串，包含几何值的已知文本表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>基于指定的已知二进制值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多边形值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由已知二进制值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="polygonWellKnownBinary">一个字节数组，包含几何值的已知二进制表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromText(System.String,System.Int32)">
      <summary>基于指定的已知文本值和坐标系标识符 (SRID) 创建新的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 多边形值。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，由已知文本值使用指定的坐标系标识符 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) 进行定义。</returns>
      <param name="polygonWellKnownText">一个字符串，包含几何值的已知文本表示形式。</param>
      <param name="coordinateSystemId">新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值应使用的坐标系标识符。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeography)">
      <summary>返回一个指示给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的面积、可以为 null 的双精度值，如果该值不表示面则可能为 null。</summary>
      <returns>一个可以为 null 的双精度值，指示给定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的面积。</returns>
      <param name="geographyValue">不需要表示面的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回一个指示给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的面积、可以为 null 的双精度值，如果该值不表示面则可能为 null。</summary>
      <returns>一个可以为 null 的双精度值，指示给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的面积。</returns>
      <param name="geometryValue">不需要表示面的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetBoundary(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回一个指示给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的边界、可以为 null 的双精度值。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的边界。</returns>
      <param name="geometryValue">几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCentroid(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回表示给定 DbGeometry 值形心的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，如果该值不表示面则可能为 null。</summary>
      <returns>如果 geometryValue 表示面，则为它的形心；否则为 null。</returns>
      <param name="geometryValue">不需要表示面的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetConvexHull(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回一个指示给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的凸包、可以为 null 的双精度值。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的凸包。</returns>
      <param name="geometryValue">几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeography)">
      <summary>返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的坐标系标识符。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的坐标系标识符。</returns>
      <param name="geographyValue">地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的坐标系标识符。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的坐标系标识符。</returns>
      <param name="geometryValue">几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeography)">
      <summary>获取给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的维度（如果值为集合）或最大的元素维度。</summary>
      <returns>geographyValue 的维度；如果 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 是一个集合，则为最大元素维度。</returns>
      <param name="geographyValue">应检索维度值的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeometry)">
      <summary>获取给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的维度（如果值为集合）或最大的元素维度。</summary>
      <returns>geometryValue 的维度；如果 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 是一个集合，则为最大元素维度。</returns>
      <param name="geometryValue">应检索维度值的几何值。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeography)">
      <summary>如果表示地理集合，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的元素数目。</summary>
      <returns>如果 geographyValue 表示其他地理值的集合，则为它当中的元素个数；否则为 null。</returns>
      <param name="geographyValue">不需要表示地理集合的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>如果表示几何集合，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的元素数目。</summary>
      <returns>如果此 geometryValue 表示其他几何值的集合，则为它当中的元素个数；否则为 null。</returns>
      <param name="geometryValue">不需要表示几何集合的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeography)">
      <summary>如果表示点，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的海拔（Z 坐标）。</summary>
      <returns>如果此 geographyValue 表示点，则为它的海拔（Z 坐标）；否则为 null。</returns>
      <param name="geographyValue">不需要表示点的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeometry)">
      <summary>如果表示点，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的海拔 (Z)。</summary>
      <returns>如果此 geometryValue 表示点，则为它的海拔（Z 坐标）；否则为 null。</returns>
      <param name="geometryValue">不需要表示点的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>返回表示给定 DbGeography 值终点的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，如果该值不表示曲线则可能为 null。</summary>
      <returns>如果此 geographyValue 表示曲线，则为它的终点；否则为 null。</returns>
      <param name="geographyValue">不需要表示曲线的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回表示给定 DbGeometry 值终点的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，如果该值不表示曲线则可能为 null。</summary>
      <returns>如果此 geometryValue 表示曲线，则为它的终点；否则为 null。</returns>
      <param name="geometryValue">不需要表示曲线的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEnvelope(System.Data.Entity.Spatial.DbGeometry)">
      <summary>获取给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的包络线（最小边界框）作为几何值。</summary>
      <returns>geometryValue 的包络线，用作 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值。</returns>
      <param name="geometryValue">应检索包络线值的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetExteriorRing(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回表示给定 DbGeometry 值外部环的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，如果该值不表示多边形则可能为 null。</summary>
      <returns>如果此 geometryValue 表示多边形，则为表示其上外部环的 DbGeometry 值；否则为 null。</returns>
      <param name="geometryValue">不需要表示多边形的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetInteriorRingCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>如果表示多边形，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值中的内部环数。</summary>
      <returns>如果此 geometryValue 表示多边形，则为它当中的元素个数；否则为 null。</returns>
      <param name="geometryValue">不需要表示多边形的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeography)">
      <summary>返回可以为 null 的布尔值，该值指示给定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值是否闭合；如果该值不表示曲线则可能为 null。</summary>
      <returns>如果给定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值为闭合值，则为 true；否则为 false。</returns>
      <param name="geographyValue">不需要表示曲线的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回可以为 null 的布尔值，该值指示给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否闭合；如果该值不表示曲线则可能为 null。</summary>
      <returns>如果给定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值为闭合值，则为 true；否则为 false。</returns>
      <param name="geometryValue">不需要表示曲线的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeography)">
      <summary>返回一个可以为 null 的布尔值，该值指示给定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值是否为空。</summary>
      <returns>如果给定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 为空，则为 true；否则为 false。</returns>
      <param name="geographyValue">地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回一个可以为 null 的布尔值，该值指示给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否为空。</summary>
      <returns>如果给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 为空，则为 true；否则为 false。</returns>
      <param name="geometryValue">几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsRing(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回可以为 null 的布尔值，该值指示给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否是环；如果该值不表示曲线则可能为 null。</summary>
      <returns>如果给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是一个环，则为 true；否则为 false。</returns>
      <param name="geometryValue">不需要表示曲线的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsSimple(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回一个可以为 null 的布尔值，该值指示给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否很简单。</summary>
      <returns>如果给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值简单，则为 true；否则为 false。</returns>
      <param name="geometryValue">几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsValid(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回一个可以为 null 的布尔值，该值指示给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否有效。</summary>
      <returns>如果给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值有效，则为 true；否则为 false。</returns>
      <param name="geometryValue">几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLatitude(System.Data.Entity.Spatial.DbGeography)">
      <summary>如果表示点，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的纬度坐标。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的维度坐标。</returns>
      <param name="geographyValue">不需要表示点的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeography)">
      <summary>返回一个指示给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的长度、可以为 null 的双精度值，如果该值不表示曲线则可能为 null。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的长度。</returns>
      <param name="geographyValue">不需要表示曲线的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回一个指示给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的长度、可以为 null 的双精度值，如果该值不表示曲线则可能为 null。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的长度。</returns>
      <param name="geometryValue">不需要表示曲线的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLongitude(System.Data.Entity.Spatial.DbGeography)">
      <summary>如果表示点，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的经度坐标。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的经度坐标。</returns>
      <param name="geographyValue">不需要表示点的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeography)">
      <summary>如果表示点，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的 M（度量值）坐标。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的 M（测量值）坐标。</returns>
      <param name="geographyValue">不需要表示点的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeometry)">
      <summary>如果表示点，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的 M（度量值）坐标。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的 M（测量值）坐标。</returns>
      <param name="geometryValue">不需要表示点的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeography)">
      <summary>如果表示行字符串或线性环，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值中的点数。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值中的点数。</returns>
      <param name="geographyValue">不需要表示行字符串或线性环的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>如果表示行字符串或线性环，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值中的点数。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值中的点数。</returns>
      <param name="geometryValue">不需要表示行字符串或线性环的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointOnSurface(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回表示给定 DbGeometry 值面上点的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，如果该值不表示面则可能为 null。</summary>
      <returns>一个 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，表示给定 DbGeometry 值面上的点。</returns>
      <param name="geometryValue">不需要表示面的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeography)">
      <summary>返回指示给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的空间类型名称的值。</summary>
      <returns>给定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的空间类型名称。</returns>
      <param name="geographyValue">地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回指示给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的空间类型名称的值。</summary>
      <returns>给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的空间类型名称。</returns>
      <param name="geometryValue">几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>返回表示给定 DbGeography 值起点的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，如果该值不表示曲线则可能为 null。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的起始点。</returns>
      <param name="geographyValue">不需要表示曲线的地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回表示给定 DbGeometry 值起点的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，如果该值不表示曲线则可能为 null。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的起始点。</returns>
      <param name="geometryValue">不需要表示曲线的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetXCoordinate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>如果表示点，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的 X 坐标。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的 X 坐标。</returns>
      <param name="geometryValue">不需要表示点的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetYCoordinate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>如果表示点，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的 Y 坐标。</summary>
      <returns>给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的 Y 坐标。</returns>
      <param name="geometryValue">不需要表示点的几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.InteriorRingAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>如果表示多边形，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值中的内部环。</summary>
      <returns>如果此 geometryValue 表示多边形，则为其处于位置索引的内部环；否则为 null。</returns>
      <param name="geometryValue">不需要表示多边形的几何值。</param>
      <param name="index">在几何值中应提取元素的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>计算两个 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的交集。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，代表 geographyValue 和 otherGeography 的交集。</returns>
      <param name="geographyValue">第一个地理值。</param>
      <param name="otherGeography">第二个地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>计算两个 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的交集。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，代表 geometryValue 和 otherGeometry 的交集。</returns>
      <param name="geometryValue">第一个几何值。</param>
      <param name="otherGeometry">第二个几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>确定两个给定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值是否在空间上相交。</summary>
      <returns>如果 geographyValue 与 otherGeography 相交，则为 true；否则为 false。</returns>
      <param name="geographyValue">用来比较相交性的第一个地理值。</param>
      <param name="otherGeography">用来比较相交性的第二个地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>确定两个给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否在空间上相交。</summary>
      <returns>如果 geometryValue 与 otherGeometry 相交，则为 true；否则为 false。</returns>
      <param name="geometryValue">用来比较相交性的第一个几何值。</param>
      <param name="otherGeometry">用来比较相交性的第二个几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbSpatialServices.NativeTypesAvailable">
      <summary>获取一个值，该值指示 EF 是否将在假定提供程序具有所需的类型/资源而非更快失败的情况下继续运行。默认值为 true。</summary>
      <returns>如果 EF 将在假定提供程序具有所需的类型/资源而非更快失败的情况下继续运行，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Overlaps(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>确定两个给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值是否在空间上重叠。</summary>
      <returns>如果 geometryValue 与 otherGeometry 重叠，则为 true；否则为 false。</returns>
      <param name="geometryValue">第一个几何值。</param>
      <param name="otherGeometry">第二个几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
      <summary>如果表示行字符串或线性环，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的点元素。</summary>
      <returns>如果此 geographyValue 表示字符串或线性环，则为其在位置索引处的点；否则为 null。</returns>
      <param name="geographyValue">不需要表示行字符串或线性环的地理值。</param>
      <param name="index">在地理值中应提取元素的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>如果表示行字符串或线性环，则返回给定 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的点元素。</summary>
      <returns>如果此 geometryValue 表示行字符串或线性环，则为其在位置索引处的点；否则为 null。</returns>
      <param name="geometryValue">不需要表示行字符串或线性环的几何值。</param>
      <param name="index">在几何值中应提取元素的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Relate(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry,System.String)">
      <summary>根据给定的维度扩展的 9 交集模型 (DE-9IM) 交集模式来确定两个给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值在空间上是否相关。</summary>
      <returns>如果根据指定的交集模式矩阵，此 geometryValue 与 otherGeometry 相关，则为 true；否则为 false。</returns>
      <param name="geometryValue">第一个几何值。</param>
      <param name="otherGeometry">应与第一个几何值比较相关性的几何值。</param>
      <param name="matrix">包含定义了相关性的 (DE-9IM) 交集模式的文本表示形式的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />、<paramref name="otherGeometry" /> 或 <paramref name="matrix" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>确定两个给定的 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值在空间上是否相等。</summary>
      <returns>如果 geographyValue 与 otherGeography 在空间上相等，则为 true；否则为 false。</returns>
      <param name="geographyValue">要比较是否相等的第一个地理值。</param>
      <param name="otherGeography">要比较是否相等的第二个地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>确定两个给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值在空间上是否相等。</summary>
      <returns>如果 geometryValue 与 otherGeometry 在空间上相等，则为 true；否则为 false。</returns>
      <param name="geometryValue">要比较是否相等的第一个几何值。</param>
      <param name="otherGeometry">要比较是否相等的第二个几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>计算两个 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的对称差异。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，表示此 geographyValue 和 otherGeography 的对称差异。</returns>
      <param name="geographyValue">第一个地理值。</param>
      <param name="otherGeography">第二个地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>计算两个 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的对称差异。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，表示 geometryValue 和 otherGeometry 的对称差异。</returns>
      <param name="geometryValue">第一个几何值。</param>
      <param name="otherGeometry">第二个几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Touches(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>确定两个给定的 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值在空间上是否接触。</summary>
      <returns>如果 geometryValue 与 otherGeometry 相接，则为 true；否则为 false。</returns>
      <param name="geometryValue">第一个几何值。</param>
      <param name="otherGeometry">第二个几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>计算两个 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值的并集。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 值，代表 geographyValue 和 otherGeography 的并集。</returns>
      <param name="geographyValue">第一个地理值。</param>
      <param name="otherGeography">第二个地理值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 或 <paramref name="otherGeography" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>计算两个 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值的并集。</summary>
      <returns>一个新 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值，代表 geometryValue 和 otherGeometry 的并集。</returns>
      <param name="geometryValue">第一个几何值。</param>
      <param name="otherGeometry">第二个几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Within(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>确定一个 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 值在空间上是否在另一几何值内。</summary>
      <returns>如果 geometryValue 在 otherGeometry 中，则为 true；否则为 false。</returns>
      <param name="geometryValue">第一个几何值。</param>
      <param name="otherGeometry">第二个几何值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 或 <paramref name="otherGeometry" /> 与此空间服务实现不兼容。</exception>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions">
      <summary>包含 <see cref="T:System.Threading.Tasks.Task" /> 类的扩展方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture(System.Threading.Tasks.Task)">
      <summary>配置用于等待此 <see cref="T:System.Threading.Tasks.Task" /> 的等待器，以避免封送继续部分回原始上下文，但是保留当前区域性和 UI 区域性。</summary>
      <returns>用于等待此任务的对象。</returns>
      <param name="task">要等待的任务。</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture``1(System.Threading.Tasks.Task{``0})">
      <summary>配置用于等待此 <see cref="T:System.Threading.Tasks.Task`1" /> 的等待器，以避免封送继续部分回原始上下文，但是保留当前区域性和 UI 区域性。</summary>
      <returns>用于等待此任务的对象。</returns>
      <param name="task">要等待的任务。</param>
      <typeparam name="T">相关 <see cref="T:System.Threading.Tasks.Task`1" /> 所生成的结果类型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter">
      <summary>提供一个可等待的对象，它允许等待保留区域性的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.#ctor(System.Threading.Tasks.Task)">
      <summary>构造 <see cref="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter" /> 类的新实例。</summary>
      <param name="task">要等待的任务。</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.GetAwaiter">
      <summary>获取用于等待此 <see cref="T:System.Threading.Tasks.Task" /> 的等待器。</summary>
      <returns>等待器实例。</returns>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.GetResult">
      <summary>结束等待已完成的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <exception cref="T:System.NullReferenceException">未正确初始化等待器。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">该任务已取消。</exception>
      <exception cref="T:System.Exception">任务在错误状态下完成。</exception>
    </member>
    <member name="P:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.IsCompleted">
      <summary>获取此 <see cref="T:System.Threading.Tasks.Task" /> 是否已完成的信息。</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.OnCompleted(System.Action)">
      <summary>未实施此方法，不应调用它。</summary>
      <param name="continuation">等待操作完成时要调用的操作。</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>计划继续操作到与此 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> 关联的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="continuation">等待操作完成时要调用的操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 参数为 null（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.InvalidOperationException">未正确初始化等待器。</exception>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1">
      <summary>提供一个可等待的对象，它允许等待保留区域性的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <typeparam name="T">相关 <see cref="T:System.Threading.Tasks.Task`1" /> 所生成的结果类型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.#ctor(System.Threading.Tasks.Task{`0})">
      <summary>构造 <see cref="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1" /> 类的新实例。</summary>
      <param name="task">要等待的任务。</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.GetAwaiter">
      <summary>获取用于等待此 <see cref="T:System.Threading.Tasks.Task`1" /> 的等待器。</summary>
      <returns>等待器实例。</returns>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.GetResult">
      <summary>结束等待已完成的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <returns>已完成的 <see cref="T:System.Threading.Tasks.Task`1" /> 的结果。</returns>
      <exception cref="T:System.NullReferenceException">未正确初始化等待器。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">该任务已取消。</exception>
      <exception cref="T:System.Exception">任务在错误状态下完成。</exception>
    </member>
    <member name="P:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.IsCompleted">
      <summary>获取此 <see cref="T:System.Threading.Tasks.Task" /> 是否已完成的信息。</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.OnCompleted(System.Action)">
      <summary>未实施此方法，不应调用它。</summary>
      <param name="continuation">等待操作完成时要调用的操作。</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.UnsafeOnCompleted(System.Action)">
      <summary>计划继续操作到与此 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> 关联的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="continuation">等待操作完成时要调用的操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 参数为 null（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.InvalidOperationException">未正确初始化等待器。</exception>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
      <summary>表示在实体验证失败时从 <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> 引发的异常。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
      <summary>使用指定错误消息初始化 <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
      <summary>使用指定错误消息和验证结果初始化 <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="entityValidationResults">验证结果。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
      <summary>使用指定错误消息、验证结果和内部异常初始化 <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="entityValidationResults">验证结果。</param>
      <param name="innerException">导致异常的错误。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和内部异常初始化 <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">导致异常的错误。</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
      <summary>获取与实体关联的验证错误。</summary>
      <returns>与实体关联的验证错误。</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
      <summary>表示单个实体的验证结果。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
      <summary>创建 <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> 类的实例。</summary>
      <param name="entry">应用结果的实体项。绝不会为 null。</param>
      <param name="validationErrors">
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 实例的列表。绝不会为 null。可以为空意味着实体有效。</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
      <summary>获取应用结果的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 的实例。</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
      <summary>获取指示实体是否有效的指示器。</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
      <summary>获取验证错误。绝不会为 null。</summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
      <summary>在从验证代码引发异常时，从 <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> 引发的异常。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
      <summary>初始化 DbUnexpectedValidationException 的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用指定的序列化信息和上下文初始化 DbUnexpectedValidationException 的新实例。</summary>
      <param name="info">序列化信息。</param>
      <param name="context">流上下文。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
      <summary>初始化 DbUnexpectedValidationException 的新实例。</summary>
      <param name="message">异常消息。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
      <summary>初始化 DbUnexpectedValidationException 的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="T:System.Data.Entity.Validation.DbValidationError">
      <summary>验证错误。可以是实体级别或属性级别验证错误。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
      <summary>创建 <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 的实例。</summary>
      <param name="propertyName">无效属性的名称。可以为 null。</param>
      <param name="errorMessage">验证错误消息。可以为 null。</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
      <summary>获取验证错误消息。</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
      <summary>获取无效属性的名称。</summary>
    </member>
  </members>
</doc>