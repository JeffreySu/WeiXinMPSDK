<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web.Mvc</name>
  </assembly>
  <members>
    <member name="T:System.Web.Mvc.AcceptVerbsAttribute">
      <summary>Represents an attribute that specifies which HTTP verbs an action method will respond to.</summary>
    </member>
    <member name="M:System.Web.Mvc.AcceptVerbsAttribute.#ctor(System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AcceptVerbsAttribute" /> class by using a list of HTTP verbs that the action method will respond to.</summary>
      <param name="verbs">The HTTP verbs that the action method will respond to.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="verbs" /> parameter is null or zero length.</exception>
    </member>
    <member name="M:System.Web.Mvc.AcceptVerbsAttribute.#ctor(System.Web.Mvc.HttpVerbs)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AcceptVerbsAttribute" /> class using the HTTP verbs that the action method will respond to.</summary>
      <param name="verbs">The HTTP verbs that the action method will respond to.</param>
    </member>
    <member name="M:System.Web.Mvc.AcceptVerbsAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether the specified method information is valid for the specified controller context.</summary>
      <returns>true if the method information is valid; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="methodInfo">The method information.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext " />parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.AcceptVerbsAttribute.Verbs">
      <summary>Gets or sets the list of HTTP verbs that the action method will respond to.</summary>
      <returns>The list of HTTP verbs that the action method will respond to.</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionDescriptor">
      <summary>Provides information about an action method, such as its name, controller, parameters, attributes, and filters.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionDescriptor" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ActionDescriptor.ActionName">
      <summary>Gets the name of the action method.</summary>
      <returns>The name of the action method.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionDescriptor.ControllerDescriptor">
      <summary>Gets the controller descriptor.</summary>
      <returns>The controller descriptor.</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Executes the action method by using the specified parameters and controller context.</summary>
      <returns>The result of executing the action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameters">The parameters of the action method.</param>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes of the specified type exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attritubeType" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetFilterAttributes(System.Boolean)">
      <summary>Gets the filter attributes.</summary>
      <returns>The filter attributes.</returns>
      <param name="useCache">true to use the cache, otherwise false.</param>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetFilters">
      <summary>Returns the filters that are associated with this action method.</summary>
      <returns>The filters that are associated with this action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetParameters">
      <summary>Returns the parameters of the action method.</summary>
      <returns>The parameters of the action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetSelectors">
      <summary>Returns the action-method selectors.</summary>
      <returns>The action-method selectors.</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether one or more instances of the specified attribute type are defined for this member.</summary>
      <returns>true if <paramref name="attributeType" /> is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attribute.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attritubeType" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ActionDescriptor.UniqueId">
      <summary>Gets the unique ID for the action descriptor using lazy initialization.</summary>
      <returns>The unique ID.</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionExecutedContext">
      <summary>Provides the context for the ActionExecuted method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutedContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionExecutedContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutedContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Boolean,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionExecutedContext" /> class.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action method descriptor.</param>
      <param name="canceled">true if the action is canceled.</param>
      <param name="exception">The exception object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="actionDescriptor" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.ActionDescriptor">
      <summary>Gets or sets the action descriptor.</summary>
      <returns>The action descriptor.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.Canceled">
      <summary>Gets or sets a value that indicates that this <see cref="T:System.Web.Mvc.ActionExecutedContext" /> object is canceled.</summary>
      <returns>true if the context canceled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.Exception">
      <summary>Gets or sets the exception that occurred during the execution of the action method, if any.</summary>
      <returns>The exception that occurred during the execution of the action method.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.ExceptionHandled">
      <summary>Gets or sets a value that indicates whether the exception is handled.</summary>
      <returns>true if the exception is handled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.Result">
      <summary>Gets or sets the result returned by the action method.</summary>
      <returns>The result returned by the action method.</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionExecutingContext">
      <summary>Provides the context for the ActionExecuting method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutingContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionExecutingContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutingContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionExecutingContext" /> class by using the specified controller context, action descriptor, and action-method parameters.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="actionParameters">The action-method parameters.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="ActionParameters" /> or <paramref name="actionDescriptor" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutingContext.ActionDescriptor">
      <summary>Gets or sets the action descriptor.</summary>
      <returns>The action descriptor.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutingContext.ActionParameters">
      <summary>Gets or sets the action-method parameters.</summary>
      <returns>The action-method parameters.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutingContext.Result">
      <summary>Gets or sets the result that is returned by the action method.</summary>
      <returns>The result that is returned by the action method.</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionFilterAttribute">
      <summary>Represents the base class for filter attributes.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>Called by the ASP.NET MVC framework after the action method executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>Called by the ASP.NET MVC framework before the action method executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>Called by the ASP.NET MVC framework after the action result executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>Called by the ASP.NET MVC framework before the action result executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.ActionMethodSelectorAttribute">
      <summary>Represents an attribute that is used to influence the selection of an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionMethodSelectorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionMethodSelectorAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionMethodSelectorAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether the action method selection is valid for the specified controller context.</summary>
      <returns>true if the action method selection is valid for the specified controller context; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="methodInfo">Information about the action method.</param>
    </member>
    <member name="T:System.Web.Mvc.ActionNameAttribute">
      <summary>Represents an attribute that is used for the name of an action.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionNameAttribute" /> class.</summary>
      <param name="name">Name of the action.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.ActionNameAttribute.IsValidName(System.Web.Mvc.ControllerContext,System.String,System.Reflection.MethodInfo)">
      <summary>Determines whether the action name is valid within the specified controller context.</summary>
      <returns>true if the action name is valid within the specified controller context; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
      <param name="methodInfo">Information about the action method.</param>
    </member>
    <member name="P:System.Web.Mvc.ActionNameAttribute.Name">
      <summary>Gets or sets the name of the action.</summary>
      <returns>The name of the action.</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionNameSelectorAttribute">
      <summary>Represents an attribute that affects the selection of an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionNameSelectorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionNameSelectorAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionNameSelectorAttribute.IsValidName(System.Web.Mvc.ControllerContext,System.String,System.Reflection.MethodInfo)">
      <summary>Determines whether the action name is valid in the specified controller context.</summary>
      <returns>true if the action name is valid in the specified controller context; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
      <param name="methodInfo">Information about the action method.</param>
    </member>
    <member name="T:System.Web.Mvc.ActionResult">
      <summary>Encapsulates the result of an action method and is used to perform a framework-level operation on behalf of the action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
    </member>
    <member name="T:System.Web.Mvc.ActionSelector">
      <summary>Represents a delegate that contains the logic for selecting an action method.</summary>
      <returns>true if an action method was successfully selected; otherwise, false.</returns>
      <param name="controllerContext">The current HTTP request context.</param>
    </member>
    <member name="T:System.Web.Mvc.AdditionalMetadataAttribute">
      <summary>Provides a class that implements the <see cref="T:System.Web.Mvc.IMetadataAware" /> interface in order to support additional metadata. </summary>
    </member>
    <member name="M:System.Web.Mvc.AdditionalMetadataAttribute.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AdditionalMetadataAttribute" /> class.</summary>
      <param name="name">The name of the model metadata.</param>
      <param name="value">The value of the model metadata.</param>
    </member>
    <member name="P:System.Web.Mvc.AdditionalMetadataAttribute.Name">
      <summary>Gets the name of the additional metadata attribute.</summary>
      <returns>The name of the of the additional metadata attribute.</returns>
    </member>
    <member name="M:System.Web.Mvc.AdditionalMetadataAttribute.OnMetadataCreated(System.Web.Mvc.ModelMetadata)">
      <summary>Provides metadata to the model metadata creation process.</summary>
      <param name="metadata">The meta data.</param>
    </member>
    <member name="P:System.Web.Mvc.AdditionalMetadataAttribute.TypeId">
      <summary>Gets the type of the of the additional metadata attribute.</summary>
      <returns>The type of the of the additional metadata attribute.</returns>
    </member>
    <member name="P:System.Web.Mvc.AdditionalMetadataAttribute.Value">
      <summary>Gets the value of the of the additional metadata attribute.</summary>
      <returns>The value of the of the additional metadata attribute.</returns>
    </member>
    <member name="T:System.Web.Mvc.AjaxHelper">
      <summary>Represents support for rendering HTML in AJAX scenarios within a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AjaxHelper" /> class using the specified view context and view data container.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <exception cref="T:System.ArgumentNullException">One or both of the parameters is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AjaxHelper" /> class by using the specified view context, view data container, and route collection.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <param name="routeCollection">The URL route collection.</param>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.GlobalizationScriptPath">
      <summary>Gets or sets the root path for the location to use for globalization script files.</summary>
      <returns>The location of the folder where globalization script files are stored. The default location is "~/Scripts/Globalization".</returns>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper.JavaScriptStringEncode(System.String)">
      <summary>Serializes the specified message and returns the resulting JSON-formatted string.</summary>
      <returns>The serialized message as a JSON-formatted string.</returns>
      <param name="message">The message to serialize.</param>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.RouteCollection">
      <summary>Gets the collection of URL routes for the application.</summary>
      <returns>The collection of routes for the application.</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.ViewBag">
      <summary>Gets the ViewBag.</summary>
      <returns>The ViewBag.</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.ViewContext">
      <summary>Gets the context information about the view.</summary>
      <returns>The context of the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.ViewData">
      <summary>Gets the current view data dictionary.</summary>
      <returns>The view data dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.ViewDataContainer">
      <summary>Gets the view data container.</summary>
      <returns>The view data container.</returns>
    </member>
    <member name="T:System.Web.Mvc.AjaxHelper`1">
      <summary>Represents support for rendering HTML in AJAX scenarios within a strongly typed view.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AjaxHelper`1" /> class by using the specified view context and view data container.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AjaxHelper`1" /> class by using the specified view context, view data container, and URL route collection.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <param name="routeCollection">The URL route collection.</param>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper`1.ViewBag">
      <summary>Gets the ViewBag.</summary>
      <returns>The ViewBag.</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper`1.ViewData">
      <summary>Gets the strongly typed version of the view data dictionary.</summary>
      <returns>The strongly typed data dictionary of the view.</returns>
    </member>
    <member name="T:System.Web.Mvc.AjaxRequestExtensions">
      <summary>Represents a class that extends the <see cref="T:System.Web.HttpRequestBase" /> class by adding the ability to determine whether an HTTP request is an AJAX request.</summary>
    </member>
    <member name="M:System.Web.Mvc.AjaxRequestExtensions.IsAjaxRequest(System.Web.HttpRequestBase)"></member>
    <member name="T:System.Web.Mvc.AllowAnonymousAttribute">
      <summary>Represents an attribute that marks controllers and actions to skip the <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> during authorization.</summary>
    </member>
    <member name="M:System.Web.Mvc.AllowAnonymousAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AllowAnonymousAttribute" /> class.</summary>
    </member>
    <member name="T:System.Web.Mvc.AllowHtmlAttribute">
      <summary>Allows a request to include HTML markup during model binding by skipping request validation for the property. (It is strongly recommended that your application explicitly check all models where you disable request validation in order to prevent script exploits.)</summary>
    </member>
    <member name="M:System.Web.Mvc.AllowHtmlAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AllowHtmlAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.AllowHtmlAttribute.OnMetadataCreated(System.Web.Mvc.ModelMetadata)">
      <summary>This method supports the ASP.NET MVC validation infrastructure and is not intended to be used directly from your code.</summary>
      <param name="metadata">The model metadata.</param>
    </member>
    <member name="T:System.Web.Mvc.AreaRegistration">
      <summary>Provides a way to register one or more areas in an ASP.NET MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AreaRegistration" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistration.AreaName">
      <summary>Gets the name of the area to register.</summary>
      <returns>The name of the area to register.</returns>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.RegisterAllAreas">
      <summary>Registers all areas in an ASP.NET MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.RegisterAllAreas(System.Object)">
      <summary>Registers all areas in an ASP.NET MVC application by using the specified user-defined information.</summary>
      <param name="state">An object that contains user-defined information to pass to the area.</param>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.RegisterArea(System.Web.Mvc.AreaRegistrationContext)">
      <summary>Registers an area in an ASP.NET MVC application using the specified area's context information.</summary>
      <param name="context">Encapsulates the information that is required in order to register the area.</param>
    </member>
    <member name="T:System.Web.Mvc.AreaRegistrationContext">
      <summary>Encapsulates the information that is required in order to register an area within an ASP.NET MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.#ctor(System.String,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AreaRegistrationContext" /> class using the specified area name and routes collection.</summary>
      <param name="areaName">The name of the area to register.</param>
      <param name="routes">The collection of routes for the application.</param>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.#ctor(System.String,System.Web.Routing.RouteCollection,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AreaRegistrationContext" /> class using the specified area name, routes collection, and user-defined data.</summary>
      <param name="areaName">The name of the area to register.</param>
      <param name="routes">The collection of routes for the application.</param>
      <param name="state">An object that contains user-defined information to pass to the area.</param>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.AreaName">
      <summary>Gets the name of the area to register.</summary>
      <returns>The name of the area to register.</returns>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String)">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object)">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property, using the specified route default values.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object,System.Object)">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property, using the specified route default values and constraint.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="constraints">A set of expressions that specify valid values for a URL parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object,System.Object,System.String[])">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property, using the specified route default values, constraints, and namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="constraints">A set of expressions that specify valid values for a URL parameter.</param>
      <param name="namespaces">An enumerable set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object,System.String[])">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property, using the specified route default values and namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="namespaces">An enumerable set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.String[])">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property, using the specified namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="namespaces">An enumerable set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.Namespaces">
      <summary>Gets the namespaces for the application.</summary>
      <returns>An enumerable set of namespaces for the application.</returns>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.Routes">
      <summary>Gets a collection of defined routes for the application.</summary>
      <returns>A collection of defined routes for the application.</returns>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.State">
      <summary>Gets an object that contains user-defined information to pass to the area.</summary>
      <returns>An object that contains user-defined information to pass to the area.</returns>
    </member>
    <member name="T:System.Web.Mvc.AssociatedMetadataProvider">
      <summary>Provides an abstract class to implement a metadata provider.</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.#ctor">
      <summary>Called from constructors in a derived class to initialize the <see cref="T:System.Web.Mvc.AssociatedMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>When overridden in a derived class, creates the model metadata for the property.</summary>
      <returns>The model metadata for the property.</returns>
      <param name="attributes">The set of attributes.</param>
      <param name="containerType">The type of the container.</param>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.FilterAttributes(System.Type,System.ComponentModel.PropertyDescriptor,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Gets a list of attributes.</summary>
      <returns>A list of attributes.</returns>
      <param name="containerType">The type of the container.</param>
      <param name="propertyDescriptor">The property descriptor.</param>
      <param name="attributes">The attribute container.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
      <summary>Returns a list of properties for the model.</summary>
      <returns>A list of properties for the model.</returns>
      <param name="container">The model container.</param>
      <param name="containerType">The type of the container.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.ComponentModel.PropertyDescriptor)">
      <summary>Returns the metadata for the specified property using the container type and property descriptor.</summary>
      <returns>The metadata for the specified property using the container type and property descriptor.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="containerType">The type of the container.</param>
      <param name="propertyDescriptor">The property descriptor</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>Returns the metadata for the specified property using the container type and property name.</summary>
      <returns>The metadata for the specified property using the container type and property name.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="containerType">The type of the container.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>Returns the metadata for the specified property using the type of the model.</summary>
      <returns>The metadata for the specified property using the type of the model.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetTypeDescriptor(System.Type)">
      <summary>Returns the type descriptor from the specified type.</summary>
      <returns>The type descriptor.</returns>
      <param name="type">The type.</param>
    </member>
    <member name="T:System.Web.Mvc.AssociatedValidatorProvider">
      <summary>Provides an abstract class for classes that implement a validation provider.</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.#ctor">
      <summary>Called from constructors in derived classes to initialize the <see cref="T:System.Web.Mvc.AssociatedMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.GetTypeDescriptor(System.Type)">
      <summary>Gets a type descriptor for the specified type.</summary>
      <returns>A type descriptor for the specified type.</returns>
      <param name="type">The type of the validation provider.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Gets the validators for the model using the metadata and controller context.</summary>
      <returns>The validators for the model.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Gets the validators for the model using the metadata, the controller context, and a list of attributes.</summary>
      <returns>The validators for the model.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The controller context.</param>
      <param name="attributes">The list of attributes.</param>
    </member>
    <member name="T:System.Web.Mvc.AsyncController">
      <summary>Provided for backward compatibility with ASP.NET MVC 3.</summary>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AsyncController" /> class.</summary>
    </member>
    <member name="T:System.Web.Mvc.AsyncTimeoutAttribute">
      <summary>Represents an attribute that is used to set the timeout value, in milliseconds, for an asynchronous method.</summary>
    </member>
    <member name="M:System.Web.Mvc.AsyncTimeoutAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AsyncTimeoutAttribute" /> class.</summary>
      <param name="duration">The timeout value, in milliseconds.</param>
    </member>
    <member name="P:System.Web.Mvc.AsyncTimeoutAttribute.Duration">
      <summary>Gets the timeout duration, in milliseconds.</summary>
      <returns>The timeout duration, in milliseconds.</returns>
    </member>
    <member name="M:System.Web.Mvc.AsyncTimeoutAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>Called by ASP.NET before the asynchronous action method executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.AuthorizationContext">
      <summary>Encapsulates the information that is required for using an <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizationContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AuthorizationContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizationContext.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AuthorizationContext" /> class using the specified controller context.</summary>
      <param name="controllerContext">The context within which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
    </member>
    <member name="M:System.Web.Mvc.AuthorizationContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AuthorizationContext" /> class using the specified controller context and action descriptor.</summary>
      <param name="controllerContext">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="actionDescriptor">An object that provides information about an action method, such as its name, controller, parameters, attributes, and filters.</param>
    </member>
    <member name="P:System.Web.Mvc.AuthorizationContext.ActionDescriptor">
      <summary>Provides information about the action method that is marked by the <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> attribute, such as its name, controller, parameters, attributes, and filters.</summary>
      <returns>The action descriptor for the action method that is marked by the <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> attribute.</returns>
    </member>
    <member name="P:System.Web.Mvc.AuthorizationContext.Result">
      <summary>Gets or sets the result that is returned by an action method.</summary>
      <returns>The result that is returned by an action method.</returns>
    </member>
    <member name="T:System.Web.Mvc.AuthorizeAttribute">
      <summary>Represents an attribute that is used to restrict access by callers to an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.AuthorizeCore(System.Web.HttpContextBase)">
      <summary>When overridden, provides an entry point for custom authorization checks.</summary>
      <returns>true if the user is authorized; otherwise, false.</returns>
      <param name="httpContext">The HTTP context, which encapsulates all HTTP-specific information about an individual HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="httpContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Mvc.AuthorizationContext)">
      <summary>Processes HTTP requests that fail authorization.</summary>
      <param name="filterContext">Encapsulates the information for using <see cref="T:System.Web.Mvc.AuthorizeAttribute" />. The <paramref name="filterContext" /> object contains the controller, HTTP context, request context, action result, and route data.</param>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when a process requests authorization.</summary>
      <param name="filterContext">The filter context, which encapsulates information for using <see cref="T:System.Web.Mvc.AuthorizeAttribute" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.OnCacheAuthorization(System.Web.HttpContextBase)">
      <summary>Called when the caching module requests authorization.</summary>
      <returns>A reference to the validation status.</returns>
      <param name="httpContext">The HTTP context, which encapsulates all HTTP-specific information about an individual HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="httpContext" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.AuthorizeAttribute.Roles">
      <summary>Gets or sets the user roles.</summary>
      <returns>The user roles.</returns>
    </member>
    <member name="P:System.Web.Mvc.AuthorizeAttribute.TypeId">
      <summary>Gets the unique identifier for this attribute.</summary>
      <returns>The unique identifier for this attribute.</returns>
    </member>
    <member name="P:System.Web.Mvc.AuthorizeAttribute.Users">
      <summary>Gets or sets the authorized users.</summary>
      <returns>The authorized users.</returns>
    </member>
    <member name="T:System.Web.Mvc.BindAttribute">
      <summary>Represents an attribute that is used to provide details about how model binding to a parameter should occur.</summary>
    </member>
    <member name="M:System.Web.Mvc.BindAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.BindAttribute" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.BindAttribute.Exclude">
      <summary>Gets or sets a comma-delimited list of property names for which binding is not allowed.</summary>
      <returns>The exclude list.</returns>
    </member>
    <member name="P:System.Web.Mvc.BindAttribute.Include">
      <summary>Gets or sets a comma-delimited list of property names for which binding is allowed.</summary>
      <returns>The include list.</returns>
    </member>
    <member name="M:System.Web.Mvc.BindAttribute.IsPropertyAllowed(System.String)">
      <summary>Determines whether the specified property is allowed.</summary>
      <returns>true if the specified property is allowed; otherwise, false.</returns>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="P:System.Web.Mvc.BindAttribute.Prefix">
      <summary>Gets or sets the prefix to use when markup is rendered for binding to an action argument or to a model property.</summary>
      <returns>The prefix to use.</returns>
    </member>
    <member name="T:System.Web.Mvc.BuildManagerCompiledView">
      <summary>Represents the base class for views that are compiled by the BuildManager class before being rendered by a view engine.</summary>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerCompiledView.#ctor(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.BuildManagerCompiledView" /> class using the specified controller context and view path.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The view path.</param>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerCompiledView.#ctor(System.Web.Mvc.ControllerContext,System.String,System.Web.Mvc.IViewPageActivator)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.BuildManagerCompiledView" /> class using the specified controller context, view path, and view page activator.</summary>
      <param name="controllerContext">Context information for the current controller. This information includes the HTTP context, request context, route data, parent action view context, and more.</param>
      <param name="viewPath">The path to the view that will be rendered.</param>
      <param name="viewPageActivator">The object responsible for dynamically constructing the view page at run time. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="viewPath" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerCompiledView.Render(System.Web.Mvc.ViewContext,System.IO.TextWriter)">
      <summary>Renders the specified view context by using the specified the writer object.</summary>
      <param name="viewContext">Information related to rendering a view, such as view data, temporary data, and form context.</param>
      <param name="writer">The writer object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="viewContext" /> parameter is null.</exception>
      <exception cref="T:SInvalidOperationException">An instance of the view type could not be created.</exception>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerCompiledView.RenderView(System.Web.Mvc.ViewContext,System.IO.TextWriter,System.Object)">
      <summary>When overridden in a derived class, renders the specified view context by using the specified writer object and object instance.</summary>
      <param name="viewContext">Information related to rendering a view, such as view data, temporary data, and form context.</param>
      <param name="writer">The writer object.</param>
      <param name="instance">An object that contains additional information that can be used in the view.</param>
    </member>
    <member name="P:System.Web.Mvc.BuildManagerCompiledView.ViewPath">
      <summary>Gets or sets the view path.</summary>
      <returns>The view path.</returns>
    </member>
    <member name="T:System.Web.Mvc.BuildManagerViewEngine">
      <summary>Provides a base class for view engines.</summary>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerViewEngine.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.BuildManagerViewEngine" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerViewEngine.#ctor(System.Web.Mvc.IViewPageActivator)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.BuildManagerViewEngine" /> class using the specified view page activator.</summary>
      <param name="viewPageActivator">The view page activator.</param>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerViewEngine.FileExists(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Gets a value that indicates whether a file exists in the specified virtual file system (path).</summary>
      <returns>true if the file exists in the virtual file system; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="virtualPath">The virtual path.</param>
    </member>
    <member name="P:System.Web.Mvc.BuildManagerViewEngine.ViewPageActivator">
      <summary>Gets the view page activator.</summary>
      <returns>The view page activator.</returns>
    </member>
    <member name="T:System.Web.Mvc.ByteArrayModelBinder">
      <summary>Maps a browser request to a byte array.</summary>
    </member>
    <member name="M:System.Web.Mvc.ByteArrayModelBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ByteArrayModelBinder" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ByteArrayModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Binds the model by using the specified controller context and binding context.</summary>
      <returns>The bound data object.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bindingContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.CachedAssociatedMetadataProvider`1">
      <summary>Provides an abstract class to implement a cached metadata provider.</summary>
      <typeparam name="TModelMetadata"></typeparam>
    </member>
    <member name="M:System.Web.Mvc.CachedAssociatedMetadataProvider`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.CachedAssociatedMetadataProvider`1" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.CachedAssociatedMetadataProvider`1.CacheItemPolicy">
      <summary>Gets the cache item policy.</summary>
      <returns>The cache item policy.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedAssociatedMetadataProvider`1.CacheKeyPrefix">
      <summary>Gets the cache key prefix.</summary>
      <returns>The cache key prefix.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedAssociatedMetadataProvider`1.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>When overridden in a derived class, creates the cached model metadata for the property.</summary>
      <returns>The cached model metadata for the property.</returns>
      <param name="attributes">The attributes.</param>
      <param name="containerType">The container type.</param>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The model type.</param>
      <param name="propertyName">The property name.</param>
    </member>
    <member name="M:System.Web.Mvc.CachedAssociatedMetadataProvider`1.CreateMetadataFromPrototype(`0,System.Func{System.Object})">
      <summary>Creates prototype metadata by applying the prototype and  model access to yield the final metadata.</summary>
      <returns>The prototype metadata.</returns>
      <param name="prototype">The prototype.</param>
      <param name="modelAccessor">The model accessor.</param>
    </member>
    <member name="M:System.Web.Mvc.CachedAssociatedMetadataProvider`1.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>Creates a metadata prototype.</summary>
      <returns>A metadata prototype.</returns>
      <param name="attributes">The attributes.</param>
      <param name="containerType">The container type.</param>
      <param name="modelType">The model type.</param>
      <param name="propertyName">The property name.</param>
    </member>
    <member name="M:System.Web.Mvc.CachedAssociatedMetadataProvider`1.GetMetadataForProperties(System.Object,System.Type)">
      <summary>Gets the metadata for the properties.</summary>
      <returns>The metadata for the properties.</returns>
      <param name="container">The container.</param>
      <param name="containerType">The container type.</param>
    </member>
    <member name="M:System.Web.Mvc.CachedAssociatedMetadataProvider`1.GetMetadataForProperty(System.Func{System.Object},System.Type,System.ComponentModel.PropertyDescriptor)">
      <summary>Returns the metadata for the specified property.</summary>
      <returns>The metadata for the specified property.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="containerType">The container type.</param>
      <param name="propertyDescriptor">The property descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.CachedAssociatedMetadataProvider`1.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>Returns the metadata for the specified property.</summary>
      <returns>The metadata for the specified property.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="containerType">The container type.</param>
      <param name="propertyName">The property name.</param>
    </member>
    <member name="M:System.Web.Mvc.CachedAssociatedMetadataProvider`1.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>Returns the cached metadata for the specified property using the type of the model.</summary>
      <returns>The cached metadata for the specified property using the type of the model.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the container.</param>
    </member>
    <member name="P:System.Web.Mvc.CachedAssociatedMetadataProvider`1.PrototypeCache">
      <summary>Gets the prototype cache.</summary>
      <returns>The prototype cache.</returns>
    </member>
    <member name="T:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes">
      <summary>Provides a container to cache <see cref="N:System.ComponentModel.DataAnnotations" /> attributes.</summary>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.#ctor(System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes" /> class.</summary>
      <param name="attributes">The attributes.</param>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.DataType">
      <summary>Gets the data type.</summary>
      <returns>The data type.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.Display">
      <summary>Gets the display.</summary>
      <returns>The display.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.DisplayColumn">
      <summary>Gets the display column.</summary>
      <returns>The display column.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.DisplayFormat">
      <summary>Gets the display format.</summary>
      <returns>The display format.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.DisplayName">
      <summary>Gets the display name.</summary>
      <returns>The display name.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.Editable">
      <summary>Indicates whether a data field is editable.</summary>
      <returns>true if the field is editable; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.HiddenInput">
      <summary>Gets the hidden input.</summary>
      <returns>The hidden input.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.ReadOnly">
      <summary>Indicates whether a data field is read only.</summary>
      <returns>true if the field is read only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.Required">
      <summary>Indicates whether a data field is required.</summary>
      <returns>true if the field is required; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.ScaffoldColumn">
      <summary>Indicates whether a data field is scaffold.</summary>
      <returns>true if the field is scaffold; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedDataAnnotationsMetadataAttributes.UIHint">
      <summary>Gets the UI hint.</summary>
      <returns>The UI hint.</returns>
    </member>
    <member name="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata">
      <summary>Provides a container to cache <see cref="T:System.Web.Mvc.DataAnnotationsModelMetadata" />.</summary>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.#ctor(System.Web.Mvc.CachedDataAnnotationsModelMetadata,System.Func{System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> class using the prototype and model accessor.</summary>
      <param name="prototype">The prototype.</param>
      <param name="modelAccessor">The model accessor.</param>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.#ctor(System.Web.Mvc.CachedDataAnnotationsModelMetadataProvider,System.Type,System.Type,System.String,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" /> class using the provider, container type, model type, property name and attributes.</summary>
      <param name="provider">The provider.</param>
      <param name="containerType">The container type.</param>
      <param name="modelType">The model type.</param>
      <param name="propertyName">The property name.</param>
      <param name="attributes">The attributes.</param>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeConvertEmptyStringToNull">
      <summary>Gets a value that indicates whether empty strings that are posted back in forms should be converted to Nothing.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.</summary>
      <returns>A value that indicates whether empty strings that are posted back in forms should be converted to Nothing. </returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeDataTypeName">
      <summary>Gets  meta information about the data type.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.</summary>
      <returns>Meta information about the data type.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeDescription">
      <summary>Gets the description of the model.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.</summary>
      <returns>The description of the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeDisplayFormatString">
      <summary>Gets  the display format string for the model.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.</summary>
      <returns>The display format string for the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeDisplayName">
      <summary>Gets  the display name of the model.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.</summary>
      <returns>The display name of the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeEditFormatString">
      <summary>Gets the edit format string of the model.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.</summary>
      <returns>The edit format string of the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeHideSurroundingHtml">
      <summary>Gets a value that indicates whether the model object should be rendered using associated HTML elements.Gets a value that indicates whether the model object should be rendered using associated HTML elements.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.</summary>
      <returns>A value that indicates whether the model object should be rendered using associated HTML elements.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeIsReadOnly">
      <summary>Gets a value that indicates whether the model is read-only.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.</summary>
      <returns>A value that indicates whether the model is read-only.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeIsRequired">
      <summary>Gets a value that indicates whether the model is required.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.</summary>
      <returns>A value that indicates whether the model is required.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeNullDisplayText">
      <summary>Gets the string to display for null values.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.</summary>
      <returns>The string to display for null values.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeOrder">
      <summary>Gets a value that represents order of the current metadata.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.</summary>
      <returns>A value that represents order of the current metadata.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeShortDisplayName">
      <summary>Gets a short display name.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.</summary>
      <returns>A short display name.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeShowForDisplay">
      <summary>Gets a value that indicates whether the property should be displayed in read-only views such as list and detail views.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.</summary>
      <returns>A value that indicates whether the property should be displayed in read-only views such as list and detail views.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeShowForEdit">
      <summary>Gets or sets a value that indicates whether the model should be displayed in editable views.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeSimpleDisplayText">
      <summary>Gets the simple display string for the model.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.</summary>
      <returns>The simple display string for the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeTemplateHint">
      <summary>Gets a hint that suggests what template to use for this model.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.</summary>
      <returns>A hint that suggests what template to use for this model.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadata.ComputeWatermark">
      <summary>Gets a value that can be used as a watermark.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.</summary>
      <returns>A value that can be used as a watermark.</returns>
    </member>
    <member name="T:System.Web.Mvc.CachedDataAnnotationsModelMetadataProvider">
      <summary>Implements the default cached model metadata provider for ASP.NET MVC.</summary>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadataProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadataProvider.CreateMetadataFromPrototype(System.Web.Mvc.CachedDataAnnotationsModelMetadata,System.Func{System.Object})">
      <summary>Returns a container of real instances of the cached metadata class based on prototype and model accessor.</summary>
      <returns>A container of real instances of the cached metadata class.</returns>
      <param name="prototype">The prototype.</param>
      <param name="modelAccessor">The model accessor.</param>
    </member>
    <member name="M:System.Web.Mvc.CachedDataAnnotationsModelMetadataProvider.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>Returns a container prototype instances of the metadata class.</summary>
      <returns>a container prototype instances of the metadata class.</returns>
      <param name="attributes">The attributes type.</param>
      <param name="containerType">The container type.</param>
      <param name="modelType">The model type.</param>
      <param name="propertyName">The property name.</param>
    </member>
    <member name="T:System.Web.Mvc.CachedModelMetadata`1">
      <summary>Provides a container for cached metadata.</summary>
      <typeparam name="TPrototypeCache">he type of the container.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.#ctor(System.Web.Mvc.CachedDataAnnotationsModelMetadataProvider,System.Type,System.Type,System.String,`0)">
      <summary>Constructor for creating real instances of the metadata class based on a prototype.</summary>
      <param name="provider">The provider.</param>
      <param name="containerType">The container type.</param>
      <param name="modelType">The model type.</param>
      <param name="propertyName">The property name.</param>
      <param name="prototypeCache">The prototype.</param>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.#ctor(System.Web.Mvc.CachedModelMetadata{`0},System.Func{System.Object})">
      <summary>Constructor for creating the prototype instances of the metadata class.</summary>
      <param name="prototype">The prototype.</param>
      <param name="modelAccessor">The model accessor.</param>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeConvertEmptyStringToNull">
      <summary>This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" />.Gets or sets a cached value that indicates whether empty strings that are posted back in forms should be converted to null.</summary>
      <returns>A cached value that indicates whether empty strings that are posted back in forms should be converted to null.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeDataTypeName">
      <summary>This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" />.Gets or sets meta information about the data type.</summary>
      <returns>Meta information about the data type.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeDescription">
      <summary>This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" />.Gets or sets the description of the model.</summary>
      <returns>The description of the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeDisplayFormatString">
      <summary>This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" />.Gets or sets the display format string for the model.</summary>
      <returns>The display format string for the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeDisplayName">
      <summary>This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" />.Gets or sets the display name of the model.</summary>
      <returns>The display name of the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeEditFormatString">
      <summary>This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" />.Gets or sets the edit format string of the model.</summary>
      <returns>The edit format string of the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeHideSurroundingHtml">
      <summary>This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" />.Gets or sets a cached value that indicates whether the model object should be rendered using associated HTML elements.</summary>
      <returns>A cached value that indicates whether the model object should be rendered using associated HTML elements.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeIsReadOnly">
      <summary>This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" />.Gets or sets a cached value that indicates whether the model is read-only.</summary>
      <returns>A cached value that indicates whether the model is read-only.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeIsRequired">
      <summary>This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" />.Gets or sets a cached value that indicates whether the model is required.</summary>
      <returns>A cached value that indicates whether the model is required.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeNullDisplayText">
      <summary>This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" />.Gets or sets the cached string to display for null values.</summary>
      <returns>The cached string to display for null values.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeOrder">
      <summary>This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" />.Gets or sets a cached value that represents order of the current metadata.</summary>
      <returns>A cached value that represents order of the current metadata.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeShortDisplayName">
      <summary>This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" />.Gets or sets a short display name.</summary>
      <returns>A short display name.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeShowForDisplay">
      <summary>This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" />.Gets or sets a cached value that indicates whether the property should be displayed in read-only views such as list and detail views.</summary>
      <returns>A cached value that indicates whether the property should be displayed in read-only views such as list and detail views.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeShowForEdit">
      <summary>This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" />.Gets or sets a cached value that indicates whether the model should be displayed in editable views.</summary>
      <returns>A cached value that indicates whether the model should be displayed in editable views.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeSimpleDisplayText">
      <summary>This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" />.Gets or sets the cached simple display string for the model.</summary>
      <returns>The cached simple display string for the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeTemplateHint">
      <summary>This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" />.Gets or sets a cached hint that suggests what template to use for this model.</summary>
      <returns>A cached hint that suggests what template to use for this model.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.ComputeWatermark">
      <summary>This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as <see cref="T:System.Web.Mvc.CachedDataAnnotationsModelMetadata" />.Gets or sets a cached value that can be used as a watermark.</summary>
      <returns>A cached value that can be used as a watermark.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.ConvertEmptyStringToNull">
      <summary>Gets or sets a cached value that indicates whether empty strings that are posted back in forms should be converted to null.</summary>
      <returns>A cached value that indicates whether empty strings that are posted back in forms should be converted to null.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.DataTypeName">
      <summary>Gets or sets meta information about the data type.</summary>
      <returns>The meta information about the data type.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.Description">
      <summary>Gets or sets the description of the model.</summary>
      <returns>The description of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.DisplayFormatString">
      <summary>Gets or sets the display format string for the model.</summary>
      <returns>The display format string for the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.DisplayName">
      <summary>Gets or sets the display name of the model.</summary>
      <returns>The display name of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.EditFormatString">
      <summary>Gets or sets the edit format string of the model.</summary>
      <returns>The edit format string of the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.CachedModelMetadata`1.GetSimpleDisplayText">
      <summary>Gets or sets the simple display string for the model.</summary>
      <returns>The simple display string for the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.HideSurroundingHtml">
      <summary>Gets or sets a value that indicates whether the model object should be rendered using associated HTML elements.</summary>
      <returns>A value that indicates whether the model object should be rendered using associated HTML elements.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.IsReadOnly">
      <summary>Gets or sets a value that indicates whether the model is read-only.</summary>
      <returns>A value that indicates whether the model is read-only.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.IsRequired">
      <summary>Gets or sets a value that indicates whether the model is required.</summary>
      <returns>A value that indicates whether the model is required.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.NullDisplayText">
      <summary>Gets or sets the string to display for null values.</summary>
      <returns>The string to display for null values.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.Order">
      <summary>Gets or sets a value that represents order of the current metadata.</summary>
      <returns>The order value of the current metadata.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.PrototypeCache">
      <summary>Gets or sets the prototype cache.</summary>
      <returns>The prototype cache.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.ShortDisplayName">
      <summary>Gets or sets a short display name.</summary>
      <returns>The short display name.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.ShowForDisplay">
      <summary>Gets or sets a value that indicates whether the property should be displayed in read-only views such as list and detail views.</summary>
      <returns>true if the model should be displayed in read-only views; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.ShowForEdit">
      <summary>Gets or sets a value that indicates whether the model should be displayed in editable views.</summary>
      <returns>true if the model should be displayed in editable views; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.SimpleDisplayText">
      <summary>Gets or sets the simple display string for the model.</summary>
      <returns>The simple display string for the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.TemplateHint">
      <summary>Gets or sets a hint that suggests what template to use for this model.</summary>
      <returns>A hint that suggests what template to use for this model.</returns>
    </member>
    <member name="P:System.Web.Mvc.CachedModelMetadata`1.Watermark">
      <summary>Gets or sets a value that can be used as a watermark.</summary>
      <returns>A value that can be used as a watermark.</returns>
    </member>
    <member name="T:System.Web.Mvc.CancellationTokenModelBinder">
      <summary>Provides a mechanism to propagates notification that model binder operations should be canceled.</summary>
    </member>
    <member name="M:System.Web.Mvc.CancellationTokenModelBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.CancellationTokenModelBinder" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.CancellationTokenModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Returns the default cancellation token.</summary>
      <returns>The default cancellation token.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="bindingContext">The binding context.</param>
    </member>
    <member name="T:System.Web.Mvc.ChildActionOnlyAttribute">
      <summary>Represents an attribute that is used to indicate that an action method should be called only as a child action.</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionOnlyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ChildActionOnlyAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionOnlyAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when authorization is required.</summary>
      <param name="filterContext">An object that encapsulates the information that is required in order to authorize access to the child action.</param>
    </member>
    <member name="T:System.Web.Mvc.ChildActionValueProvider">
      <summary>Represents a value provider for values from child actions.</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ChildActionValueProvider" /> class.</summary>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.ChildActionValueProvider.GetValue(System.String)">
      <summary>Retrieves a value object using the specified key.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="T:System.Web.Mvc.ChildActionValueProviderFactory">
      <summary>Represents a factory for creating value provider objects for child actions.</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionValueProviderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ChildActionValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a <see cref="T:System.Web.Mvc.ChildActionValueProvider" /> object for the specified controller context.</summary>
      <returns>A <see cref="T:System.Web.Mvc.ChildActionValueProvider" /> object.</returns>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="T:System.Web.Mvc.ClientDataTypeModelValidatorProvider">
      <summary>Returns the client data-type model validators.</summary>
    </member>
    <member name="M:System.Web.Mvc.ClientDataTypeModelValidatorProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ClientDataTypeModelValidatorProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ClientDataTypeModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Returns the client data-type model validators.</summary>
      <returns>The client data-type model validators.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The context.</param>
    </member>
    <member name="P:System.Web.Mvc.ClientDataTypeModelValidatorProvider.ResourceClassKey">
      <summary>Gets the resource class key.</summary>
      <returns>The resource class key.</returns>
    </member>
    <member name="T:System.Web.Mvc.CompareAttribute">
      <summary>Provides an attribute that compares two properties of a model.</summary>
    </member>
    <member name="M:System.Web.Mvc.CompareAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.CompareAttribute" /> class.</summary>
      <param name="otherProperty">The property to compare with the current property.</param>
    </member>
    <member name="M:System.Web.Mvc.CompareAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to an error message based on the data field where the compare error occurred.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name of the field that caused the validation failure.</param>
    </member>
    <member name="M:System.Web.Mvc.CompareAttribute.FormatPropertyForClientValidation(System.String)">
      <summary>Formats the property for client validation by prepending an asterisk (*) and a dot.</summary>
      <returns>The string "*." is prepended to the property.</returns>
      <param name="property">The property.</param>
    </member>
    <member name="M:System.Web.Mvc.CompareAttribute.GetClientValidationRules(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Gets a list of compare-value client validation rules for the property using the specified model metadata and controller context.</summary>
      <returns>A list of compare-value client validation rules.</returns>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.CompareAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Determines whether the specified object is equal to the compared object.</summary>
      <returns>null if the value of the compared property is equal to the value parameter; otherwise, a validation result that contains the error message that indicates that the comparison failed.</returns>
      <param name="value">The value of the object to compare.</param>
      <param name="validationContext">The validation context.</param>
    </member>
    <member name="P:System.Web.Mvc.CompareAttribute.OtherProperty">
      <summary>Gets the property to compare with the current property.</summary>
      <returns>The property to compare with the current property.</returns>
    </member>
    <member name="P:System.Web.Mvc.CompareAttribute.OtherPropertyDisplayName">
      <summary>Gets the other properties display name.</summary>
      <returns>The other properties display name.</returns>
    </member>
    <member name="T:System.Web.Mvc.ContentResult">
      <summary>Represents a user-defined content type that is the result of an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.ContentResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ContentResult" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ContentResult.Content">
      <summary>Gets or sets the content.</summary>
      <returns>The content.</returns>
    </member>
    <member name="P:System.Web.Mvc.ContentResult.ContentEncoding">
      <summary>Gets or sets the content encoding.</summary>
      <returns>The content encoding.</returns>
    </member>
    <member name="P:System.Web.Mvc.ContentResult.ContentType">
      <summary>Gets or sets the type of the content.</summary>
      <returns>The type of the content.</returns>
    </member>
    <member name="M:System.Web.Mvc.ContentResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.Controller">
      <summary>Provides methods that respond to HTTP requests that are made to an ASP.NET MVC Web site.</summary>
    </member>
    <member name="M:System.Web.Mvc.Controller.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Controller" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.Controller.ActionInvoker">
      <summary>Gets the action invoker for the controller.</summary>
      <returns>The action invoker.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.AsyncManager">
      <summary>Provides asynchronous operations.</summary>
      <returns>Returns <see cref="T:System.Web.Mvc.Async.AsyncManager" />.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
      <summary>Begins execution of the specified request context</summary>
      <returns>Returns an IAsyncController instance. </returns>
      <param name="requestContext">The request context.</param>
      <param name="callback">The callback.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.BeginExecuteCore(System.AsyncCallback,System.Object)">
      <summary>Begins to invoke the action in the current controller context.</summary>
      <returns>Returns an IAsyncController instance.</returns>
      <param name="callback">The callback.</param>
      <param name="state">The state.</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.Binders">
      <summary>Gets or sets the binder.</summary>
      <returns>The binder.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.Content(System.String)">
      <summary>Creates a content result object by using a string.</summary>
      <returns>The content result instance.</returns>
      <param name="content">The content to write to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Content(System.String,System.String)">
      <summary>Creates a content result object by using a string and the content type. </summary>
      <returns>The content result instance.</returns>
      <param name="content">The content to write to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Content(System.String,System.String,System.Text.Encoding)">
      <summary>Creates a content result object by using a string, the content type, and content encoding.</summary>
      <returns>The content result instance.</returns>
      <param name="content">The content to write to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="contentEncoding">The content encoding.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.CreateActionInvoker">
      <summary>Creates an action invoker.</summary>
      <returns>An action invoker.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.CreateTempDataProvider">
      <summary>Creates a temporary data provider.</summary>
      <returns>A temporary data provider.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.DisableAsyncSupport">
      <summary>Disable asynchronous support to provide backward compatibility.</summary>
      <returns>true if asynchronous support is disabled; otherwise false.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.Dispose">
      <summary>Releases all resources that are used by the current instance of the <see cref="T:System.Web.Mvc.Controller" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Controller.Dispose(System.Boolean)">
      <summary>Releases unmanaged resources and optionally releases managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.EndExecute(System.IAsyncResult)">
      <summary>Ends the  invocation of  the action in the current controller context.</summary>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.EndExecuteCore(System.IAsyncResult)">
      <summary>Ends the execute core.</summary>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.ExecuteCore">
      <summary>Invokes the action in the current controller context.</summary>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.Byte[],System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FileContentResult" /> object by using the file contents and file type.</summary>
      <returns>The file-content result object.</returns>
      <param name="fileContents">The binary content to send to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.Byte[],System.String,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FileContentResult" /> object by using the file contents, content type, and the destination file name.</summary>
      <returns>The file-content result object.</returns>
      <param name="fileContents">The binary content to send to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="fileDownloadName">The file name to use in the file-download dialog box that is displayed in the browser.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.IO.Stream,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FileStreamResult" /> object by using the <see cref="T:System.IO.Stream" /> object and content type.  </summary>
      <returns>The file-content result object.</returns>
      <param name="fileStream">The stream to send to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.IO.Stream,System.String,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FileStreamResult" /> object using the <see cref="T:System.IO.Stream" /> object, the content type, and the target file name. </summary>
      <returns>The file-stream result object.</returns>
      <param name="fileStream">The stream to send to the response.</param>
      <param name="contentType">The content type (MIME type)</param>
      <param name="fileDownloadName">The file name to use in the file-download dialog box that is displayed in the browser.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.String,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FilePathResult" /> object by using the file name and the content type.</summary>
      <returns>The file-stream result object.</returns>
      <param name="fileName">The path of the file to send to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.String,System.String,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FilePathResult" /> object by using the file name, the content type, and the file download name.</summary>
      <returns>The file-stream result object.</returns>
      <param name="fileName">The path of the file to send to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="fileDownloadName">The file name to use in the file-download dialog box that is displayed in the browser.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.HandleUnknownAction(System.String)">
      <summary>Called when a request matches this controller, but no method with the specified action name is found in the controller.</summary>
      <param name="actionName">The name of the attempted action.</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.HttpContext">
      <summary>Gets HTTP-specific information about an individual HTTP request.</summary>
      <returns>The HTTP context.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.HttpNotFound">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.HttpNotFoundResult" /> class.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.HttpNotFoundResult" /> class.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.HttpNotFound(System.String)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.HttpNotFoundResult" /> class.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.HttpNotFoundResult" /> class.</returns>
      <param name="statusDescription">The status description.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Initialize(System.Web.Routing.RequestContext)">
      <summary>Initializes data that might not be available when the constructor is called.</summary>
      <param name="requestContext">The HTTP context and route data.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.JavaScript(System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JavaScriptResult" /> object.</summary>
      <returns>The <see cref="T:System.Web.Mvc.JavaScriptResult" /> object that writes the script to the response.</returns>
      <param name="script">The JavaScript code to run on the client</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON).</summary>
      <returns>The JSON result object that serializes the specified object to JSON format. The result object that is prepared by this method is written to the response by the ASP.NET MVC framework when the object is executed.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON) format.</summary>
      <returns>The JSON result object that serializes the specified object to JSON format.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
      <param name="contentType">The content type (MIME type).</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String,System.Text.Encoding)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON) format.</summary>
      <returns>The JSON result object that serializes the specified object to JSON format.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="contentEncoding">The content encoding.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String,System.Text.Encoding,System.Web.Mvc.JsonRequestBehavior)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON) format using the content type, content encoding, and the JSON request behavior.</summary>
      <returns>The result object that serializes the specified object to JSON format.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="contentEncoding">The content encoding.</param>
      <param name="behavior">The JSON request behavior </param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String,System.Web.Mvc.JsonRequestBehavior)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON) format using the specified content type and JSON request behavior.</summary>
      <returns>The result object that serializes the specified object to JSON format.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="behavior">The JSON request behavior</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.Web.Mvc.JsonRequestBehavior)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON) format using the specified JSON request behavior.</summary>
      <returns>The result object that serializes the specified object to JSON format.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
      <param name="behavior">The JSON request behavior.</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.ModelState">
      <summary>Gets the model state dictionary object that contains the state of the model and of model-binding validation.</summary>
      <returns>The model state dictionary.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>Called after the action method is invoked.</summary>
      <param name="filterContext">Information about the current request and action.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>Called before the action method is invoked.</summary>
      <param name="filterContext">Information about the current request and action.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when authorization occurs.</summary>
      <param name="filterContext">Information about the current request and action.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>Called when an unhandled exception occurs in the action.</summary>
      <param name="filterContext">Information about the current request and action.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>Called after the action result that is returned by an action method is executed.</summary>
      <param name="filterContext">Information about the current request and action result</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>Called before the action result that is returned by an action method is executed.</summary>
      <param name="filterContext">Information about the current request and action result</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView">
      <summary>Creates a <see cref="T:System.Web.Mvc.PartialViewResult" /> object that renders a partial view.</summary>
      <returns>A partial-view result object.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView(System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.PartialViewResult" /> object that renders a partial view, by using the specified model. </summary>
      <returns>A partial-view result object.</returns>
      <param name="model">The model that is rendered by the partial view</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView(System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.PartialViewResult" /> object that renders a partial view, by using the specified view name. </summary>
      <returns>A partial-view result object.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView(System.String,System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.PartialViewResult" /> object that renders a partial view, by using the specified view name and model. </summary>
      <returns>A partial-view result object.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
      <param name="model">The model that is rendered by the partial view</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.Profile">
      <summary>Gets the HTTP context profile.</summary>
      <returns>The HTTP context profile.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.Redirect(System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.RedirectResult" /> object that redirects to the specified URL.</summary>
      <returns>The redirect result object.</returns>
      <param name="url">The URL to redirect to.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectPermanent(System.String)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true.</returns>
      <param name="url">The URL to redirect to.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String)">
      <summary>Redirects to the specified action using the action name.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.Object)">
      <summary>Redirects to the specified action using the action name and route values.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">The parameters for a route. </param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.String)">
      <summary>Redirects to the specified action using the action name and controller name.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.String,System.Object)">
      <summary>Redirects to the specified action using the action name, controller name, and route values.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller</param>
      <param name="routeValues">The parameters for a route. </param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Redirects to the specified action using the action name, controller name, and route dictionary.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller</param>
      <param name="routeValues">The parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Redirects to the specified action using the action name and route dictionary.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">The parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name, controller name, and route values.</returns>
      <param name="actionName">The action name.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String,System.Object)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name, and route values.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name, and route values.</returns>
      <param name="actionName">The action name.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String,System.String)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name,  and controller name.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name,  and controller name.</returns>
      <param name="actionName">The action name.</param>
      <param name="controllerName">The controller name.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String,System.String,System.Object)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name, controller name, and route values.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true.</returns>
      <param name="actionName">The action name.</param>
      <param name="controllerName">The controller name.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name, controller name, and route values.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name, controller name, and route values.</returns>
      <param name="actionName">The action name.</param>
      <param name="controllerName">The controller name.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name,  and route values.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name,  and route values.</returns>
      <param name="actionName">The action name.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.Object)">
      <summary>Redirects to the specified route using the specified route values.</summary>
      <returns>The redirect-to-route result object.</returns>
      <param name="routeValues">The parameters for a route. </param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.String)">
      <summary>Redirects to the specified route using the route name.</summary>
      <returns>The redirect-to-route result object.</returns>
      <param name="routeName">The name of the route</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.String,System.Object)">
      <summary>Redirects to the specified route using the route name and route values.</summary>
      <returns>The redirect-to-route result object.</returns>
      <param name="routeName">The name of the route</param>
      <param name="routeValues">The parameters for a route. </param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Redirects to the specified route using the route name and route dictionary.</summary>
      <returns>The redirect-to-route result object.</returns>
      <param name="routeName">The name of the route</param>
      <param name="routeValues">The parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.Web.Routing.RouteValueDictionary)">
      <summary>Redirects to the specified route using the route dictionary.</summary>
      <returns>The redirect-to-route result object.</returns>
      <param name="routeValues">The parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoutePermanent(System.Object)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified route values.</summary>
      <returns>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true.</returns>
      <param name="routeValues">The route name.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoutePermanent(System.String)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified route name.</summary>
      <returns>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified route name.</returns>
      <param name="routeName">The route name.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoutePermanent(System.String,System.Object)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified route name and route values.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true.</returns>
      <param name="routeName">The route name.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoutePermanent(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified route name and route values.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified route name and route values.</returns>
      <param name="routeName">The route name.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoutePermanent(System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified route values.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified route values.</returns>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.Request">
      <summary>Gets the <see cref="T:System.Web.HttpRequestBase" /> object for the current HTTP request.</summary>
      <returns>The request object.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Response">
      <summary>Gets the <see cref="T:System.Web.HttpResponseBase" /> object for the current HTTP response.</summary>
      <returns>The response object.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.RouteData">
      <summary>Gets the route data for the current request.</summary>
      <returns>The route data.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Server">
      <summary>Gets the <see cref="T:System.Web.HttpServerUtilityBase" /> object that provides methods that are used during Web request processing.</summary>
      <returns>The HTTP server object.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Session">
      <summary>Gets the <see cref="T:System.Web.HttpSessionStateBase" /> object for the current HTTP request.</summary>
      <returns>The HTTP session-state object for the current HTTP request.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#Async#IAsyncController#BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
      <summary>Initializes a new instance of the <see cref="M:System.Web.Mvc.Controller.System#Web#Mvc#Async#IAsyncController#BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)" /> class.</summary>
      <returns>Returns an IAsyncController instance.</returns>
      <param name="requestContext">The request context.</param>
      <param name="callback">The callback.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#Async#IAsyncController#EndExecute(System.IAsyncResult)">
      <summary>Ends the execute task.</summary>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IActionFilter#OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IActionFilter#OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IAuthorizationFilter#OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnAuthorization(System.Web.Mvc.AuthorizationContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IExceptionFilter#OnException(System.Web.Mvc.ExceptionContext)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnException(System.Web.Mvc.ExceptionContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IResultFilter#OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IResultFilter#OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.TempDataProvider">
      <summary>Gets the temporary-data provider object that is used to store data for the next request.</summary>
      <returns>The temporary-data provider.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0)">
      <summary>Updates the specified model instance using values from the controller's current value provider.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="model" /> parameter or the <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> property is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String)">
      <summary>Updates the specified model instance using values from the controller's current value provider and a prefix.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="model" /> parameter or the <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> property is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[])">
      <summary>Updates the specified model instance using values from the controller's current value provider, a prefix, and included properties.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="model" /> parameter or the <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> property is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[],System.String[])">
      <summary>Updates the specified model instance using values from the controller's current value provider, a prefix, a list of properties to exclude, and a list of properties to include.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="excludeProperties">A list of properties to explicitly exclude from the update. These are excluded even if they are listed in the <paramref name="includeProperties" /> parameter list.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="model" /> parameter or the <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> property is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[],System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider, a prefix, a list of properties to exclude , and a list of properties to include.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="excludeProperties">A list of properties to explicitly exclude from the update. These are excluded even if they are listed in the <paramref name="includeProperties" /> parameter list.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider, a prefix, and included properties.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider and a prefix.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String[])">
      <summary>Updates the specified model instance using values from the controller's current value provider and included properties.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="model" /> parameter or the <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> property is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider and a list of properties to include.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryValidateModel(System.Object)">
      <summary>Validates the specified model instance.</summary>
      <returns>true if the model validation is successful; otherwise, false.</returns>
      <param name="model">The model instance to validate.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryValidateModel(System.Object,System.String)">
      <summary>Validates the specified model instance using an HTML prefix.</summary>
      <returns>true if the model validation is successful; otherwise, false.</returns>
      <param name="model">The model to validate.</param>
      <param name="prefix">The prefix to use when looking up values in the model provider.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0)">
      <summary>Updates the specified model instance using values from the controller's current value provider.</summary>
      <param name="model">The model instance to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.InvalidOperationException">The model was not successfully updated.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String)">
      <summary>Updates the specified model instance using values from the controller's current value provider and a prefix.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">A prefix to use when looking up values in the value provider.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[])">
      <summary>Updates the specified model instance using values from the controller's current value provider, a prefix, and included properties.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">A prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[],System.String[])">
      <summary>Updates the specified model instance using values from the controller's current value provider, a prefix, a list of properties to exclude, and a list of properties to include.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">A prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="excludeProperties">A list of properties to explicitly exclude from the update. These are excluded even if they are listed in the <paramref name="includeProperties" /> list.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[],System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider, a prefix, a list of properties to exclude, and a list of properties to include.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="excludeProperties">A list of properties to explicitly exclude from the update. These are excluded even if they are listed in the <paramref name="includeProperties" /> parameter list.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider, a prefix, and a list of properties to include.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider and a prefix.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String[])">
      <summary>Updates the specified model instance using values from the controller object's current value provider.</summary>
      <param name="model">The model instance to update.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider, a prefix, and a list of properties to include.</summary>
      <param name="model">The model instance to update.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider.</summary>
      <param name="model">The model instance to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="P:System.Web.Mvc.Controller.Url">
      <summary>Gets the URL helper object that is used to generate URLs by using routing.</summary>
      <returns>The URL helper object.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.User">
      <summary>Gets the user security information for the current HTTP request.</summary>
      <returns>The user security information for the current HTTP request.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.ValidateModel(System.Object)">
      <summary>Validates the specified model instance.</summary>
      <param name="model">The model to validate.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.ValidateModel(System.Object,System.String)">
      <summary>Validates the specified model instance using an HTML prefix.</summary>
      <param name="model">The model to validate.</param>
      <param name="prefix">The prefix to use when looking up values in the model provider.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object that renders a view to the response.</summary>
      <returns>The view result that renders a view to the response.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object by using the model that renders a view to the response.</summary>
      <returns>The view result.</returns>
      <param name="model">The model that is rendered by the view.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object by using the view name that renders a view.</summary>
      <returns>The view result.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String,System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object by using the view name and model that renders a view to the response.</summary>
      <returns>The view result.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
      <param name="model">The model that is rendered by the view.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object using the view name and master-page name that renders a view to the response.</summary>
      <returns>The view result.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
      <param name="masterName">The name of the master page or template to use when the view is rendered.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String,System.String,System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object using the view name, master-page name, and model that renders a view.</summary>
      <returns>The view result.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
      <param name="masterName">The name of the master page or template to use when the view is rendered.</param>
      <param name="model">The model that is rendered by the view.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.Web.Mvc.IView)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object that renders the specified <see cref="T:System.Web.Mvc.IView" /> object.</summary>
      <returns>The view result.</returns>
      <param name="view">The view that is rendered to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.Web.Mvc.IView,System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object that renders the specified <see cref="T:System.Web.Mvc.IView" /> object.</summary>
      <returns>The view result.</returns>
      <param name="view">The view that is rendered to the response.</param>
      <param name="model">The model that is rendered by the view.</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.ViewEngineCollection">
      <summary>Gets the view engine collection.</summary>
      <returns>The view engine collection.</returns>
    </member>
    <member name="T:System.Web.Mvc.ControllerActionInvoker">
      <summary>Represents a class that is responsible for invoking the action methods of a controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerActionInvoker" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerActionInvoker.Binders">
      <summary>Gets or sets the model binders that are associated with the action.</summary>
      <returns>The model binders that are associated with the action.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.CreateActionResult(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Object)">
      <summary>Creates the action result.</summary>
      <returns>The action result object.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="actionReturnValue">The action return value.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.FindAction(System.Web.Mvc.ControllerContext,System.Web.Mvc.ControllerDescriptor,System.String)">
      <summary>Finds the information about the action method.</summary>
      <returns>Information about the action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="controllerDescriptor">The controller descriptor.</param>
      <param name="actionName">The name of the action.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetControllerDescriptor(System.Web.Mvc.ControllerContext)">
      <summary>Retrieves information about the controller by using the specified controller context.</summary>
      <returns>Information about the controller.</returns>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Retrieves information about the action filters.</summary>
      <returns>Information about the action filters.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetParameterValue(System.Web.Mvc.ControllerContext,System.Web.Mvc.ParameterDescriptor)">
      <summary>Gets the value of the specified action-method parameter.</summary>
      <returns>The value of the action-method parameter.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameterDescriptor">The parameter descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetParameterValues(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Gets the values of the action-method parameters.</summary>
      <returns>The values of the action-method parameters.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Invokes the specified action by using the specified controller context.</summary>
      <returns>The result of executing the action.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action to invoke.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.Threading.ThreadAbortException">The thread was aborted during invocation of the action.</exception>
      <exception cref="T:System.Exception">An unspecified error occurred during invocation of the action.</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes the specified action method by using the specified parameters and the controller context.</summary>
      <returns>The result of executing the action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionMethodWithFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IActionFilter},System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes the specified action method by using the specified parameters, controller context, and action filters.</summary>
      <returns>The context for the ActionExecuted method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="filters">The action filters.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionResult(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult)">
      <summary>Invokes the specified action result by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="actionResult">The action result.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionResultWithFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IResultFilter},System.Web.Mvc.ActionResult)">
      <summary>Invokes the specified action result by using the specified action filters and the controller context.</summary>
      <returns>The context for the ResultExecuted method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="filters">The action filters.</param>
      <param name="actionResult">The action result.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeAuthorizationFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IAuthorizationFilter},System.Web.Mvc.ActionDescriptor)">
      <summary>Invokes the specified authorization filters by using the specified action descriptor and controller context.</summary>
      <returns>The context for the <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> object.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="filters">The authorization filters.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeExceptionFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IExceptionFilter},System.Exception)">
      <summary>Invokes the specified exception filters by using the specified exception and controller context.</summary>
      <returns>The context for the <see cref="T:System.Web.Mvc.HandleErrorAttribute" /> object.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="filters">The exception filters.</param>
      <param name="exception">The exception.</param>
    </member>
    <member name="T:System.Web.Mvc.ControllerBase">
      <summary>Represents the base class for all MVC controllers.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerBase" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ControllerContext">
      <summary>Gets or sets the controller context.</summary>
      <returns>The controller context.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.Execute(System.Web.Routing.RequestContext)">
      <summary>Executes the specified request context.</summary>
      <param name="requestContext">The request context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.ExecuteCore">
      <summary>Executes the request.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.Initialize(System.Web.Routing.RequestContext)">
      <summary>Initializes the specified request context.</summary>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.System#Web#Mvc#IController#Execute(System.Web.Routing.RequestContext)">
      <summary>Executes the specified request context.</summary>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.TempData">
      <summary>Gets or sets the dictionary for temporary data.</summary>
      <returns>The dictionary for temporary data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ValidateRequest">
      <summary>Gets or sets a value that indicates whether request validation is enabled for this request.</summary>
      <returns>true if request validation is enabled for this request; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ValueProvider">
      <summary>Gets or sets the value provider for the controller.</summary>
      <returns>The value provider for the controller.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ViewBag">
      <summary>Gets the dynamic view data dictionary.</summary>
      <returns>The dynamic view data dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ViewData">
      <summary>Gets or sets the dictionary for view data.</summary>
      <returns>The dictionary for the view data.</returns>
    </member>
    <member name="T:System.Web.Mvc.ControllerBuilder">
      <summary>Represents a class that is responsible for dynamically building a controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerBuilder" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerBuilder.Current">
      <summary>Gets the current controller builder object.</summary>
      <returns>The current controller builder.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBuilder.DefaultNamespaces">
      <summary>Gets the default namespaces.</summary>
      <returns>The default namespaces.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.GetControllerFactory">
      <summary>Gets the associated controller factory.</summary>
      <returns>The controller factory.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.SetControllerFactory(System.Type)">
      <summary>Sets the controller factory by using the specified type.</summary>
      <param name="controllerFactoryType">The type of the controller factory.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerFactoryType" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The controller factory cannot be assigned from the type in the <paramref name="controllerFactoryType" /> parameter.</exception>
      <exception cref="T:System.InvalidOperationException">An error occurred while the controller factory was being set.</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.SetControllerFactory(System.Web.Mvc.IControllerFactory)">
      <summary>Sets the specified controller factory.</summary>
      <param name="controllerFactory">The controller factory.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerFactory" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ControllerContext">
      <summary>Encapsulates information about an HTTP request that matches specified <see cref="T:System.Web.Routing.RouteBase" /> and <see cref="T:System.Web.Mvc.ControllerBase" /> instances.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor(System.Web.HttpContextBase,System.Web.Routing.RouteData,System.Web.Mvc.ControllerBase)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerContext" /> class by using the specified HTTP context, URL route data, and controller.</summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="routeData">The route data.</param>
      <param name="controller">The controller.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerContext" /> class by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor(System.Web.Routing.RequestContext,System.Web.Mvc.ControllerBase)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerContext" /> class by using the specified request context and controller.</summary>
      <param name="requestContext">The request context.</param>
      <param name="controller">The controller.</param>
      <exception cref="T:System.ArgumentNullException">One or both parameters are null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.Controller">
      <summary>Gets or sets the controller.</summary>
      <returns>The controller.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.DisplayMode">
      <summary>Gets the display mode.</summary>
      <returns>The display mode.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.HttpContext">
      <summary>Gets or sets the HTTP context.</summary>
      <returns>The HTTP context.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.IsChildAction">
      <summary>Gets a value that indicates whether the associated action method is a child action.</summary>
      <returns>true if the associated action method is a child action; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.ParentActionViewContext">
      <summary>Gets an object that contains the view context information for the parent action method.</summary>
      <returns>An object that contains the view context information for the parent action method.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.RequestContext">
      <summary>Gets or sets the request context.</summary>
      <returns>The request context.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.RouteData">
      <summary>Gets or sets the URL route data.</summary>
      <returns>The URL route data.</returns>
    </member>
    <member name="T:System.Web.Mvc.ControllerDescriptor">
      <summary>Encapsulates information that describes a controller, such as its name, type, and actions.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerDescriptor" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerDescriptor.ControllerName">
      <summary>Gets the name of the controller.</summary>
      <returns>The name of the controller.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerDescriptor.ControllerType">
      <summary>Gets the type of the controller.</summary>
      <returns>The type of the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.FindAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Finds an action method by using the specified name and controller context.</summary>
      <returns>The information about the action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.GetCanonicalActions">
      <summary>Retrieves a list of action-method descriptors in the controller.</summary>
      <returns>A list of action-method descriptors in the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Retrieves custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Retrieves custom attributes of a specified type that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attributeType" /> parameter is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.GetFilterAttributes(System.Boolean)">
      <summary>Gets the filter attributes.</summary>
      <returns>The filter attributes.</returns>
      <param name="useCache">true if the cache should be used; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Retrieves a value that indicates whether one or more instance of the specified custom attribute are defined for this member.</summary>
      <returns>true if the <paramref name="attributeType" /> is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attribute.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attributeType" /> parameter is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Web.Mvc.ControllerDescriptor.UniqueId">
      <summary>When implemented in a derived class, gets the unique ID for the controller descriptor using lazy initialization.</summary>
      <returns>The unique ID.</returns>
    </member>
    <member name="T:System.Web.Mvc.ControllerInstanceFilterProvider">
      <summary>Adds the controller to the <see cref="T:System.Web.Mvc.FilterProviderCollection" /> instance.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerInstanceFilterProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerInstanceFilterProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerInstanceFilterProvider.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Returns the collection of controller instance filters.</summary>
      <returns>The collection of controller instance filters.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="T:System.Web.Mvc.CustomModelBinderAttribute">
      <summary>Represents an attribute that invokes a custom model binder.</summary>
    </member>
    <member name="M:System.Web.Mvc.CustomModelBinderAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.CustomModelBinderAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.CustomModelBinderAttribute.GetBinder">
      <summary>Retrieves the associated model binder.</summary>
      <returns>A reference to an object that implements the <see cref="T:System.Web.Mvc.IModelBinder" /> interface.</returns>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelMetadata">
      <summary>Provides a container for common metadata, for the <see cref="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider" /> class, and for the <see cref="T:System.Web.Mvc.DataAnnotationsModelValidator" /> class for a data model.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadata.#ctor(System.Web.Mvc.DataAnnotationsModelMetadataProvider,System.Type,System.Func{System.Object},System.Type,System.String,System.ComponentModel.DataAnnotations.DisplayColumnAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider" /> class.</summary>
      <param name="provider">The data-annotations model metadata provider.</param>
      <param name="containerType">The type of the container.</param>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
      <param name="propertyName">The name of the property.</param>
      <param name="displayColumnAttribute">The display column attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadata.GetSimpleDisplayText">
      <summary>Returns simple text for the model data.</summary>
      <returns>Simple text for the model data.</returns>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider">
      <summary>Implements the default model metadata provider for ASP.NET MVC.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadataProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>Gets the metadata for the specified property.</summary>
      <returns>The metadata for the property.</returns>
      <param name="attributes">The attributes.</param>
      <param name="containerType">The type of the container.</param>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidationFactory">
      <summary>Represents the method that creates a <see cref="T:System.Web.Mvc.DataAnnotationsModelValidatorProvider" /> instance.</summary>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidator">
      <summary>Provides a model validator.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.ValidationAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataAnnotationsModelValidator" /> class.</summary>
      <param name="metadata">The metadata for the model.</param>
      <param name="context">The controller context for the model.</param>
      <param name="attribute">The validation attribute for the model.</param>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator.Attribute">
      <summary>Gets the validation attribute for the model validator.</summary>
      <returns>The validation attribute for the model validator.</returns>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator.ErrorMessage">
      <summary>Gets the error message for the validation failure.</summary>
      <returns>The error message for the validation failure.</returns>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator.GetClientValidationRules">
      <summary>Retrieves a collection of client validation rules.</summary>
      <returns>A collection of client validation rules.</returns>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator.IsRequired">
      <summary>Gets a value that indicates whether model validation is required.</summary>
      <returns>true if model validation is required; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator.Validate(System.Object)">
      <summary>Returns a list of validation error messages for the model.</summary>
      <returns>A list of validation error messages for the model, or an empty list if no errors have occurred.</returns>
      <param name="container">The container for the model.</param>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidator`1">
      <summary>Provides a model validator for a specified validation type.</summary>
      <typeparam name="TAttribute"></typeparam>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator`1.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataAnnotationsModelValidator" /> class.</summary>
      <param name="metadata">The metadata for the model.</param>
      <param name="context">The controller context for the model.</param>
      <param name="attribute">The validation attribute for the model.</param>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator`1.Attribute">
      <summary>Gets the validation attribute from the model validator.</summary>
      <returns>The validation attribute from the model validator.</returns>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidatorProvider">
      <summary>Implements the default validation provider for ASP.NET MVC.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataAnnotationsModelValidatorProvider" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidatorProvider.AddImplicitRequiredAttributeForValueTypes">
      <summary>Gets or sets a value that indicates whether non-nullable value types are required.</summary>
      <returns>true if non-nullable value types are required; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Gets a list of validators.</summary>
      <returns>A list of validators.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The context.</param>
      <param name="attributes">The list of validation attributes.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterAdapter(System.Type,System.Type)">
      <summary>Registers an adapter to provide client-side validation.</summary>
      <param name="attributeType">The type of the validation attribute.</param>
      <param name="adapterType">The type of the adapter.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterAdapterFactory(System.Type,System.Web.Mvc.DataAnnotationsModelValidationFactory)">
      <summary>Registers an adapter factory for the validation provider.</summary>
      <param name="attributeType">The type of the attribute.</param>
      <param name="factory">The factory that will be used to create the <see cref="T:System.Web.Mvc.ModelValidator" /> object for the specified attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapter(System.Type)">
      <summary>Registers the default adapter.</summary>
      <param name="adapterType">The type of the adapter.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapterFactory(System.Web.Mvc.DataAnnotationsModelValidationFactory)">
      <summary>Registers the default adapter factory.</summary>
      <param name="factory">The factory that will be used to create the <see cref="T:System.Web.Mvc.ModelValidator" /> object for the default adapter.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapter(System.Type)">
      <summary>Registers an adapter to provide default object validation.</summary>
      <param name="adapterType">The type of the adapter.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapterFactory(System.Web.Mvc.DataAnnotationsValidatableObjectAdapterFactory)">
      <summary>Registers an adapter factory for the default object validation provider.</summary>
      <param name="factory">The factory.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapter(System.Type,System.Type)">
      <summary>Registers an adapter to provide object validation.</summary>
      <param name="modelType">The type of the model.</param>
      <param name="adapterType">The type of the adapter.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapterFactory(System.Type,System.Web.Mvc.DataAnnotationsValidatableObjectAdapterFactory)">
      <summary>Registers an adapter factory for the object validation provider.</summary>
      <param name="modelType">The type of the model.</param>
      <param name="factory">The factory.</param>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsValidatableObjectAdapterFactory">
      <summary>Provides a factory for validators that are based on <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />.</summary>
    </member>
    <member name="T:System.Web.Mvc.DataErrorInfoModelValidatorProvider">
      <summary>Provides a container for the error-information model validator.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataErrorInfoModelValidatorProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataErrorInfoModelValidatorProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataErrorInfoModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Gets a list of error-information model validators.</summary>
      <returns>A list of error-information model validators.</returns>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="T:System.Web.Mvc.DefaultControllerFactory">
      <summary>Represents the controller factory that is registered by default.</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DefaultControllerFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.#ctor(System.Web.Mvc.IControllerActivator)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DefaultControllerFactory" /> class using a controller activator.</summary>
      <param name="controllerActivator">An object that implements the controller activator interface.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
      <summary>Creates the specified controller by using the specified request context.</summary>
      <returns>The controller.</returns>
      <param name="requestContext">The context of the HTTP request, which includes the HTTP context and route data.</param>
      <param name="controllerName">The name of the controller.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="controllerName" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.GetControllerInstance(System.Web.Routing.RequestContext,System.Type)">
      <summary>Retrieves the controller instance for the specified request context and controller type.</summary>
      <returns>The controller instance.</returns>
      <param name="requestContext">The context of the HTTP request, which includes the HTTP context and route data.</param>
      <param name="controllerType">The type of the controller.</param>
      <exception cref="T:System.Web.HttpException">
        <paramref name="controllerType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="controllerType" /> cannot be assigned.</exception>
      <exception cref="T:System.InvalidOperationException">An instance of <paramref name="controllerType" /> cannot be created.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.GetControllerSessionBehavior(System.Web.Routing.RequestContext,System.Type)">
      <summary>Returns the controller's session behavior.</summary>
      <returns>The controller's session behavior.</returns>
      <param name="requestContext">The request context.</param>
      <param name="controllerType">The type of the controller.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.GetControllerType(System.Web.Routing.RequestContext,System.String)">
      <summary>Retrieves the controller type for the specified name and request context.</summary>
      <returns>The controller type.</returns>
      <param name="requestContext">The context of the HTTP request, which includes the HTTP context and route data.</param>
      <param name="controllerName">The name of the controller.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.ReleaseController(System.Web.Mvc.IController)">
      <summary>Releases the specified controller.</summary>
      <param name="controller">The controller to release.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.System#Web#Mvc#IControllerFactory#GetControllerSessionBehavior(System.Web.Routing.RequestContext,System.String)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.DefaultControllerFactory.GetControllerSessionBehavior(System.Web.Routing.RequestContext,System.Type)" /> method.</summary>
      <returns>The controller's session behavior.</returns>
      <param name="requestContext">The request context.</param>
      <param name="controllerName">The controller name.</param>
    </member>
    <member name="T:System.Web.Mvc.DefaultModelBinder">
      <summary>Maps a browser request to a data object. This class provides a concrete implementation of a model binder.</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DefaultModelBinder" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.DefaultModelBinder.Binders">
      <summary>Gets or sets the model binders for the application.</summary>
      <returns>The model binders for the application.</returns>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Binds the model by using the specified controller context and binding context.</summary>
      <returns>The bound object.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bindingContext " />parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.BindProperty(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor)">
      <summary>Binds the specified property by using the specified controller context and binding context and the specified property descriptor.</summary>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="propertyDescriptor">Describes a property to be bound. The descriptor provides information such as the component type, property type, and property value. It also provides methods to get or set the property value.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.Type)">
      <summary>Creates the specified model type by using the specified controller context and binding context.</summary>
      <returns>A data object of the specified type.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="modelType">The type of the model object to return.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateSubIndexName(System.String,System.Int32)">
      <summary>Creates an index (a subindex) based on a category of components that make up a larger index, where the specified index value is an integer.</summary>
      <returns>The name of the subindex.</returns>
      <param name="prefix">The prefix for the subindex.</param>
      <param name="index">The index value.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateSubIndexName(System.String,System.String)">
      <summary>Creates an index (a subindex) based on a category of components that make up a larger index, where the specified index value is a string.</summary>
      <returns>The name of the subindex.</returns>
      <param name="prefix">The prefix for the subindex.</param>
      <param name="index">The index value.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateSubPropertyName(System.String,System.String)">
      <summary>Creates the name of the subproperty by using the specified prefix and property name.</summary>
      <returns>The name of the subproperty.</returns>
      <param name="prefix">The prefix for the subproperty.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetFilteredModelProperties(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Returns a set of properties that match the property filter restrictions that are established by the specified <paramref name="binding context" />.</summary>
      <returns>An enumerable set of property descriptors.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetModelProperties(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Returns the properties of the model by using the specified controller context and binding context.</summary>
      <returns>A collection of property descriptors.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetPropertyValue(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Web.Mvc.IModelBinder)">
      <summary>Returns the value of a property using the specified controller context, binding context, property descriptor, and property binder.</summary>
      <returns>An object that represents the property value.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="propertyDescriptor">The descriptor for the property to access. The descriptor provides information such as the component type, property type, and property value. It also provides methods to get or set the property value.</param>
      <param name="propertyBinder">An object that provides a way to bind the property.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetTypeDescriptor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Returns the descriptor object for a type that is specified by its controller context and binding context.</summary>
      <returns>A custom type descriptor object.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.IsModelValid(System.Web.Mvc.ModelBindingContext)">
      <summary>Determines whether a data model is valid for the specified binding context.</summary>
      <returns>true if the model is valid; otherwise, false.</returns>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bindingContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnModelUpdated(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Called when the model is updated.</summary>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnModelUpdating(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Called when the model is updating.</summary>
      <returns>true if the model is updating; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnPropertyValidated(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Called when the specified property is validated.</summary>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="propertyDescriptor">Describes a property to be validated. The descriptor provides information such as the component type, property type, and property value. It also provides methods to get or set the property value.</param>
      <param name="value">The value to set for the property.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnPropertyValidating(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Called when the specified property is validating.</summary>
      <returns>true if the property is validating; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="propertyDescriptor">Describes a property being validated. The descriptor provides information such as component type, property type, and property value. It also provides methods to get or set the property value.</param>
      <param name="value">The value to set for the property.</param>
    </member>
    <member name="P:System.Web.Mvc.DefaultModelBinder.ResourceClassKey">
      <summary>Gets or sets the name of the resource file (class key) that contains localized string values.</summary>
      <returns>The name of the resource file (class key).</returns>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.SetProperty(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Sets the specified property by using the specified controller context, binding context, and property value.</summary>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="propertyDescriptor">Describes a property to be set. The descriptor provides information such as the component type, property type, and property value. It also provides methods to get or set the property value.</param>
      <param name="value">The value to set for the property.</param>
    </member>
    <member name="T:System.Web.Mvc.DefaultViewLocationCache">
      <summary>Represents a memory cache for view locations.</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DefaultViewLocationCache" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.#ctor(System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DefaultViewLocationCache" /> class by using the specified cache time span.</summary>
      <param name="timeSpan">The cache time span.</param>
      <exception cref="T:System.InvalidOperationException">The Ticks attribute of the <paramref name="timeSpan" /> parameter is set to a negative number.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.GetViewLocation(System.Web.HttpContextBase,System.String)">
      <summary>Retrieves the default view location by using the specified HTTP context and cache key.</summary>
      <returns>The default view location.</returns>
      <param name="httpContext">The HTTP context.</param>
      <param name="key">The cache key</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="httpContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.InsertViewLocation(System.Web.HttpContextBase,System.String,System.String)">
      <summary>Inserts the view in the specified virtual path by using the specified HTTP context, cache key, and virtual path.</summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="key">The cache key.</param>
      <param name="virtualPath">The virtual path</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="httpContext" /> parameter is null.</exception>
    </member>
    <member name="F:System.Web.Mvc.DefaultViewLocationCache.Null">
      <summary>Creates an empty view location cache.</summary>
    </member>
    <member name="P:System.Web.Mvc.DefaultViewLocationCache.TimeSpan">
      <summary>Gets or sets the cache time span.</summary>
      <returns>The cache time span.</returns>
    </member>
    <member name="T:System.Web.Mvc.DependencyResolver">
      <summary>Provides a registration point for dependency resolvers that implement <see cref="T:System.Web.Mvc.IDependencyResolver" /> or the Common Service Locator IServiceLocator interface.</summary>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DependencyResolver" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.DependencyResolver.Current">
      <summary>Gets the implementation of the dependency resolver.</summary>
      <returns>The implementation of the dependency resolver.</returns>
    </member>
    <member name="P:System.Web.Mvc.DependencyResolver.InnerCurrent">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.</summary>
      <returns>The implementation of the dependency resolver.</returns>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.InnerSetResolver(System.Func{System.Type,System.Object},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Object}})">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.</summary>
      <param name="getService">The function that provides the service.</param>
      <param name="getServices">The function that provides the services.</param>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.InnerSetResolver(System.Object)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.</summary>
      <param name="commonServiceLocator">The common service locator.</param>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.InnerSetResolver(System.Web.Mvc.IDependencyResolver)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.</summary>
      <param name="resolver">The object that implements the dependency resolver.</param>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.SetResolver(System.Func{System.Type,System.Object},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Object}})">
      <summary>Provides a registration point for dependency resolvers using the specified service delegate and specified service collection delegates.</summary>
      <param name="getService">The service delegate.</param>
      <param name="getServices">The services delegates.</param>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.SetResolver(System.Object)">
      <summary>Provides a registration point for dependency resolvers using the provided common service locator when using a service locator interface.</summary>
      <param name="commonServiceLocator">The common service locator.</param>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.SetResolver(System.Web.Mvc.IDependencyResolver)">
      <summary>Provides a registration point for dependency resolvers, using the specified dependency resolver interface.</summary>
      <param name="resolver">The dependency resolver.</param>
    </member>
    <member name="T:System.Web.Mvc.DependencyResolverExtensions">
      <summary>Provides a type-safe implementation of <see cref="M:System.Web.Mvc.IDependencyResolver.GetService(System.Type)" /> and <see cref="M:System.Web.Mvc.IDependencyResolver.GetServices(System.Type)" />.</summary>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolverExtensions.GetService``1(System.Web.Mvc.IDependencyResolver)">
      <summary>Resolves singly registered services that support arbitrary object creation.</summary>
      <returns>The requested service or object.</returns>
      <param name="resolver">The dependency resolver instance that this method extends.</param>
      <typeparam name="TService">The type of the requested service or object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolverExtensions.GetServices``1(System.Web.Mvc.IDependencyResolver)">
      <summary>Resolves multiply registered services.</summary>
      <returns>The requested services.</returns>
      <param name="resolver">The dependency resolver instance that this method extends.</param>
      <typeparam name="TService">The type of the requested services.</typeparam>
    </member>
    <member name="T:System.Web.Mvc.DictionaryValueProvider`1">
      <summary>Represents the base class for value providers whose values come from a collection that implements the <see cref="T:System.Collections.Generic.IDictionary`2" /> interface.</summary>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.#ctor(System.Collections.Generic.IDictionary{System.String,`0},System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DictionaryValueProvider`1" /> class.</summary>
      <param name="dictionary">The name/value pairs that are used to initialize the value provider.</param>
      <param name="culture">Information about a specific culture, such as the names of the culture, the writing system, and the calendar used.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dictionary" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.ContainsPrefix(System.String)">
      <summary>Determines whether the collection contains the specified prefix.</summary>
      <returns>true if the collection contains the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to search for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="prefix" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.GetKeysFromPrefix(System.String)">
      <summary>Gets the keys from the prefix.</summary>
      <returns>The keys from the prefix.</returns>
      <param name="prefix">the prefix.</param>
    </member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.GetValue(System.String)">
      <summary>Returns a value object using the specified key and controller context.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key of the value object to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.EmptyModelMetadataProvider">
      <summary>Provides an empty metadata provider for data models that do not require metadata.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelMetadataProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.EmptyModelMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Web.Mvc.ModelMetadata" /> class.</summary>
      <returns>A new instance of the <see cref="T:System.Web.Mvc.ModelMetadata" /> class.</returns>
      <param name="attributes">The attributes.</param>
      <param name="containerType">The type of the container.</param>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
      <param name="propertyName">The name of the model.</param>
    </member>
    <member name="T:System.Web.Mvc.EmptyModelValidatorProvider">
      <summary>Provides an empty validation provider for models that do not require a validator.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelValidatorProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.EmptyModelValidatorProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Gets the empty model validator.</summary>
      <returns>The empty model validator.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The context.</param>
    </member>
    <member name="T:System.Web.Mvc.EmptyResult">
      <summary>Represents a result that does nothing, such as a controller action method that returns nothing.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.EmptyResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Executes the specified result context.</summary>
      <param name="context">The result context.</param>
    </member>
    <member name="T:System.Web.Mvc.ExceptionContext">
      <summary>Provides the context for using the <see cref="T:System.Web.Mvc.HandleErrorAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ExceptionContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ExceptionContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ExceptionContext.#ctor(System.Web.Mvc.ControllerContext,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ExceptionContext" /> class for the specified exception by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="exception">The exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ExceptionContext.Exception">
      <summary>Gets or sets the exception object.</summary>
      <returns>The exception object.</returns>
    </member>
    <member name="P:System.Web.Mvc.ExceptionContext.ExceptionHandled">
      <summary>Gets or sets a value that indicates whether the exception has been handled.</summary>
      <returns>true if the exception has been handled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ExceptionContext.Result">
      <summary>Gets or sets the action result.</summary>
      <returns>The action result.</returns>
    </member>
    <member name="T:System.Web.Mvc.ExpressionHelper">
      <summary>Provides a helper class to get the model name from an expression.</summary>
    </member>
    <member name="M:System.Web.Mvc.ExpressionHelper.GetExpressionText(System.Linq.Expressions.LambdaExpression)">
      <summary>Gets the model name from a lambda expression.</summary>
      <returns>The model name.</returns>
      <param name="expression">The expression.</param>
    </member>
    <member name="M:System.Web.Mvc.ExpressionHelper.GetExpressionText(System.String)">
      <summary>Gets the model name from a string expression.</summary>
      <returns>The model name.</returns>
      <param name="expression">The expression.</param>
    </member>
    <member name="T:System.Web.Mvc.FieldValidationMetadata">
      <summary>Provides a container for client-side field validation metadata.</summary>
    </member>
    <member name="M:System.Web.Mvc.FieldValidationMetadata.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FieldValidationMetadata" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.FieldName">
      <summary>Gets or sets the name of the data field.</summary>
      <returns>The name of the data field.</returns>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.ReplaceValidationMessageContents">
      <summary>Gets or sets a value that indicates whether the validation message contents should be replaced with the client validation error.</summary>
      <returns>true if the validation message contents should be replaced with the client validation error; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.ValidationMessageId">
      <summary>Gets or sets the validator message ID.</summary>
      <returns>The validator message ID.</returns>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.ValidationRules">
      <summary>Gets the client validation rules.</summary>
      <returns>The client validation rules.</returns>
    </member>
    <member name="T:System.Web.Mvc.FileContentResult">
      <summary>Sends the contents of a binary file to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.FileContentResult.#ctor(System.Byte[],System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FileContentResult" /> class by using the specified file contents and content type.</summary>
      <param name="fileContents">The byte array to send to the response.</param>
      <param name="contentType">The content type to use for the response.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileContents" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.FileContentResult.FileContents">
      <summary>The binary content to send to the response.</summary>
      <returns>The file contents.</returns>
    </member>
    <member name="M:System.Web.Mvc.FileContentResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>Writes the file content to the response.</summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:System.Web.Mvc.FilePathResult">
      <summary>Sends the contents of a file to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilePathResult.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilePathResult" /> class by using the specified file name and content type.</summary>
      <param name="fileName">The name of the file to send to the response.</param>
      <param name="contentType">The content type of the response.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="fileName" /> parameter is null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.FilePathResult.FileName">
      <summary>Gets or sets the path of the file that is sent to the response.</summary>
      <returns>The path of the file that is sent to the response.</returns>
    </member>
    <member name="M:System.Web.Mvc.FilePathResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>Writes the file to the response.</summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:System.Web.Mvc.FileResult">
      <summary>Represents a base class that is used to send binary file content to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.FileResult.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FileResult" /> class.</summary>
      <param name="contentType">The type of the content.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="contentType" /> parameter is null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.FileResult.ContentType">
      <summary>Gets the content type to use for the response.</summary>
      <returns>The type of the content.</returns>
    </member>
    <member name="M:System.Web.Mvc.FileResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.FileResult.FileDownloadName">
      <summary>Gets or sets the content-disposition header so that a file-download dialog box is displayed in the browser with the specified file name.</summary>
      <returns>The name of the file.</returns>
    </member>
    <member name="M:System.Web.Mvc.FileResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>Writes the file to the response.</summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:System.Web.Mvc.FileStreamResult">
      <summary>Sends binary content to the response by using a <see cref="T:System.IO.Stream" /> instance.</summary>
    </member>
    <member name="M:System.Web.Mvc.FileStreamResult.#ctor(System.IO.Stream,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FileStreamResult" /> class.</summary>
      <param name="fileStream">The stream to send to the response.</param>
      <param name="contentType">The content type to use for the response.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileStream" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.FileStreamResult.FileStream">
      <summary>Gets the stream that will be sent to the response.</summary>
      <returns>The file stream.</returns>
    </member>
    <member name="M:System.Web.Mvc.FileStreamResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>Writes the file to the response.</summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:System.Web.Mvc.Filter">
      <summary>Represents a metadata class that contains a reference to the implementation of one or more of the filter interfaces, the filter's order, and the filter's scope.</summary>
    </member>
    <member name="M:System.Web.Mvc.Filter.#ctor(System.Object,System.Web.Mvc.FilterScope,System.Nullable{System.Int32})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Filter" /> class.</summary>
      <param name="instance">The instance.</param>
      <param name="scope">The scope.</param>
      <param name="order">The order.</param>
    </member>
    <member name="F:System.Web.Mvc.Filter.DefaultOrder">
      <summary>Represents a constant that is used to specify the default ordering of filters.</summary>
    </member>
    <member name="P:System.Web.Mvc.Filter.Instance">
      <summary>Gets the instance of this class.</summary>
      <returns>The instance of this class.</returns>
    </member>
    <member name="P:System.Web.Mvc.Filter.Order">
      <summary>Gets the order in which the filter is applied.</summary>
      <returns>The order in which the filter is applied.</returns>
    </member>
    <member name="P:System.Web.Mvc.Filter.Scope">
      <summary>Gets the scope ordering of the filter.</summary>
      <returns>The scope ordering of the filter.</returns>
    </member>
    <member name="T:System.Web.Mvc.FilterAttribute">
      <summary>Represents the base class for action and result filter attributes.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilterAttribute" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.FilterAttribute.AllowMultiple">
      <summary>Gets or sets a value that indicates whether more than one instance of the filter attribute can be specified.</summary>
      <returns>true if more than one instance of the filter attribute can be specified; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterAttribute.Order">
      <summary>Gets or sets the order in which the action filters are executed.</summary>
      <returns>The order in which the action filters are executed.</returns>
    </member>
    <member name="T:System.Web.Mvc.FilterAttributeFilterProvider">
      <summary>Defines a filter provider for filter attributes.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterAttributeFilterProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilterAttributeFilterProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterAttributeFilterProvider.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilterAttributeFilterProvider" /> class and optionally caches attribute instances.</summary>
      <param name="cacheAttributeInstances">true to cache attribute instances; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.FilterAttributeFilterProvider.GetActionAttributes(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Gets a collection of custom action attributes.</summary>
      <returns>A collection of custom action attributes.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.FilterAttributeFilterProvider.GetControllerAttributes(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Gets a collection of controller attributes.</summary>
      <returns>A collection of controller attributes.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.FilterAttributeFilterProvider.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Aggregates the filters from all of the filter providers into one collection.</summary>
      <returns>The collection filters from all of the filter providers.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="T:System.Web.Mvc.FilterInfo">
      <summary>Encapsulates information about the available action filters.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilterInfo" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterInfo.#ctor(System.Collections.Generic.IEnumerable{System.Web.Mvc.Filter})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilterInfo" /> class using the specified filters collection.</summary>
      <param name="filters">The filters collection.</param>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.ActionFilters">
      <summary>Gets all the action filters in the application.</summary>
      <returns>The action filters.</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.AuthorizationFilters">
      <summary>Gets all the authorization filters in the application.</summary>
      <returns>The authorization filters.</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.ExceptionFilters">
      <summary>Gets all the exception filters in the application.</summary>
      <returns>The exception filters.</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.ResultFilters">
      <summary>Gets all the result filters in the application.</summary>
      <returns>The result filters.</returns>
    </member>
    <member name="T:System.Web.Mvc.FilterProviderCollection">
      <summary>Represents the collection of filter providers for the application.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterProviderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilterProviderCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterProviderCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.IFilterProvider})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilterProviderCollection" /> class using the filter providers collection.</summary>
      <param name="providers">The filter providers collection.</param>
    </member>
    <member name="M:System.Web.Mvc.FilterProviderCollection.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Returns the collection of filter providers.</summary>
      <returns>The collection of filter providers.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="T:System.Web.Mvc.FilterProviders">
      <summary>Provides a registration point for filters.</summary>
    </member>
    <member name="P:System.Web.Mvc.FilterProviders.Providers">
      <summary>Provides a registration point for filters.</summary>
      <returns>The collection of filters.</returns>
    </member>
    <member name="T:System.Web.Mvc.FilterScope">
      <summary>Defines values that specify the order in which ASP.NET MVC filters run within the same filter type and filter order.</summary>
    </member>
    <member name="F:System.Web.Mvc.FilterScope.First">
      <summary>Specifies first.</summary>
    </member>
    <member name="F:System.Web.Mvc.FilterScope.Global">
      <summary>Specifies an order before <see cref="F:System.Web.Mvc.FilterScope.Controller" /> and after <see cref="F:System.Web.Mvc.FilterScope.First" />.</summary>
    </member>
    <member name="F:System.Web.Mvc.FilterScope.Controller">
      <summary>Specifies an order before <see cref="F:System.Web.Mvc.FilterScope.Action" /> and after <see cref="F:System.Web.Mvc.FilterScope.Global" />.</summary>
    </member>
    <member name="F:System.Web.Mvc.FilterScope.Action">
      <summary>Specifies an order before <see cref="F:System.Web.Mvc.FilterScope.Last" /> and after <see cref="F:System.Web.Mvc.FilterScope.Controller" />.</summary>
    </member>
    <member name="F:System.Web.Mvc.FilterScope.Last">
      <summary>Specifies last.</summary>
    </member>
    <member name="T:System.Web.Mvc.FormCollection">
      <summary>Contains the form value providers for the application.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FormCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FormCollection" /> class.</summary>
      <param name="collection">The collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collection" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.GetValue(System.String)">
      <summary>Gets the specified value provider.</summary>
      <returns>The value provider.</returns>
      <param name="name">The name of the value provider to get.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.System#Web#Mvc#IValueProvider#ContainsPrefix(System.String)">
      <summary>Gets a value that indicates whether the value provider contains an entry that has the specified prefix.</summary>
      <returns>true if the value provider contains an entry that has the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to look for.</param>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.System#Web#Mvc#IValueProvider#GetValue(System.String)">
      <summary>Gets a value from a value provider using the specified key.</summary>
      <returns>A value from a value provider.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.ToValueProvider">
      <summary>Returns a dictionary that contains the value providers.</summary>
      <returns>A dictionary of value providers.</returns>
    </member>
    <member name="T:System.Web.Mvc.FormContext">
      <summary>Encapsulates information that is required in order to validate and process the input data from an HTML form.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FormContext" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.FormContext.FieldValidators">
      <summary>Gets the field validators for the form.</summary>
      <returns>A dictionary of field validators for the form.</returns>
    </member>
    <member name="P:System.Web.Mvc.FormContext.FormId">
      <summary>Gets or sets the form identifier.</summary>
      <returns>The form identifier.</returns>
    </member>
    <member name="M:System.Web.Mvc.FormContext.GetJsonValidationMetadata">
      <summary>Returns a serialized object that contains the form identifier and field-validation values for the form.</summary>
      <returns>A serialized object that contains the form identifier and field-validation values for the form.</returns>
    </member>
    <member name="M:System.Web.Mvc.FormContext.GetValidationMetadataForField(System.String)">
      <summary>Returns the validation value for the specified input field.</summary>
      <returns>The value to validate the field input with.</returns>
      <param name="fieldName">The name of the field to retrieve the validation value for.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="fieldName" /> parameter is either null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.FormContext.GetValidationMetadataForField(System.String,System.Boolean)">
      <summary>Returns the validation value for the specified input field and a value that indicates what to do if the validation value is not found.</summary>
      <returns>The value to validate the field input with.</returns>
      <param name="fieldName">The name of the field to retrieve the validation value for.</param>
      <param name="createIfNotFound">true to create a validation value if one is not found; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="fieldName" /> parameter is either null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.FormContext.RenderedField(System.String)">
      <summary>Returns a value that indicates whether the specified field has been rendered in the form.</summary>
      <returns>true if the field has been rendered; otherwise, false.</returns>
      <param name="fieldName">The field name.</param>
    </member>
    <member name="M:System.Web.Mvc.FormContext.RenderedField(System.String,System.Boolean)">
      <summary>Sets a value that indicates whether the specified field has been rendered in the form.</summary>
      <param name="fieldName">The field name.</param>
      <param name="value">true to specify that the field has been rendered in the form; otherwise, false.</param>
    </member>
    <member name="P:System.Web.Mvc.FormContext.ReplaceValidationSummary">
      <summary>Determines whether client validation errors should be dynamically added to the validation summary.</summary>
      <returns>true if client validation errors should be added to the validation summary; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.FormContext.ValidationSummaryId">
      <summary>Gets or sets the identifier for the validation summary.</summary>
      <returns>The identifier for the validation summary.</returns>
    </member>
    <member name="T:System.Web.Mvc.FormMethod">
      <summary>Enumerates the HTTP request types for a form.</summary>
    </member>
    <member name="F:System.Web.Mvc.FormMethod.Get">
      <summary>Specifies a GET request.</summary>
    </member>
    <member name="F:System.Web.Mvc.FormMethod.Post">
      <summary>Specifies a POST request.</summary>
    </member>
    <member name="T:System.Web.Mvc.FormValueProvider">
      <summary>Represents a value provider for form values that are contained in a <see cref="T:System.Collections.Specialized.NameValueCollection" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FormValueProvider" /> class.</summary>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
    </member>
    <member name="T:System.Web.Mvc.FormValueProviderFactory">
      <summary>Represents a class that is responsible for creating a new instance of a form-value provider object.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormValueProviderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FormValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a form-value provider object for the specified controller context.</summary>
      <returns>A form-value provider object.</returns>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.GlobalFilterCollection">
      <summary>Represents a class that contains all the global filters.</summary>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.GlobalFilterCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.Add(System.Object)">
      <summary>Adds the specified filter to the global filter collection.</summary>
      <param name="filter">The filter.</param>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.Add(System.Object,System.Int32)">
      <summary>Adds the specified filter to the global filter collection using the specified filter run order.</summary>
      <param name="filter">The filter.</param>
      <param name="order">The filter run order.</param>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.Clear">
      <summary>Removes all filters from the global filter collection.</summary>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.Contains(System.Object)">
      <summary>Determines whether a filter is in the global filter collection.</summary>
      <returns>true if <paramref name="filter" /> is found in the global filter collection; otherwise, false.</returns>
      <param name="filter">The filter.</param>
    </member>
    <member name="P:System.Web.Mvc.GlobalFilterCollection.Count">
      <summary>Gets the number of filters in the global filter collection.</summary>
      <returns>The number of filters in the global filter collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the global filter collection.</summary>
      <returns>An enumerator that iterates through the global filter collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.Remove(System.Object)">
      <summary>Removes all the filters that match the specified filter.</summary>
      <param name="filter">The filter to remove.</param>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. </summary>
      <returns>An enumerator that iterates through the global filter collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.System#Web#Mvc#IFilterProvider#GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.</summary>
      <returns>An enumerator that iterates through the global filter collection.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="T:System.Web.Mvc.GlobalFilters">
      <summary>Represents the global filter collection.</summary>
    </member>
    <member name="P:System.Web.Mvc.GlobalFilters.Filters">
      <summary>Gets or sets the global filter collection.</summary>
      <returns>The global filter collection.</returns>
    </member>
    <member name="T:System.Web.Mvc.HandleErrorAttribute">
      <summary>Represents an attribute that is used to handle an exception that is thrown by an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.HandleErrorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HandleErrorAttribute" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.ExceptionType">
      <summary>Gets or sets the type of the exception.</summary>
      <returns>The type of the exception.</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.Master">
      <summary>Gets or sets the master view for displaying exception information.</summary>
      <returns>The master view.</returns>
    </member>
    <member name="M:System.Web.Mvc.HandleErrorAttribute.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>Called when an exception occurs.</summary>
      <param name="filterContext">The action-filter context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.TypeId">
      <summary>Gets the unique identifier for this attribute.</summary>
      <returns>The unique identifier for this attribute.</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.View">
      <summary>Gets or sets the page view for displaying exception information.</summary>
      <returns>The page view.</returns>
    </member>
    <member name="T:System.Web.Mvc.HandleErrorInfo">
      <summary>Encapsulates information for handling an error that was thrown by an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.HandleErrorInfo.#ctor(System.Exception,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HandleErrorInfo" /> class.</summary>
      <param name="exception">The exception.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="actionName">The name of the action.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="controllerName" /> or <paramref name="actionName" /> parameter is null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorInfo.ActionName">
      <summary>Gets or sets the name of the action that was executing when the exception was thrown.</summary>
      <returns>The name of the action.</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorInfo.ControllerName">
      <summary>Gets or sets the name of the controller that contains the action method that threw the exception.</summary>
      <returns>The name of the controller.</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorInfo.Exception">
      <summary>Gets or sets the exception object.</summary>
      <returns>The exception object.</returns>
    </member>
    <member name="T:System.Web.Mvc.HiddenInputAttribute">
      <summary>Represents an attribute that is used to indicate whether a property or field value should be rendered as a hidden input element.</summary>
    </member>
    <member name="M:System.Web.Mvc.HiddenInputAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HiddenInputAttribute" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.HiddenInputAttribute.DisplayValue">
      <summary>Gets or sets a value that indicates whether to display the value of the hidden input element.</summary>
      <returns>true if the value should be displayed; otherwise, false.</returns>
    </member>
    <member name="T:System.Web.Mvc.HtmlHelper">
      <summary>Represents support for rendering HTML controls in a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HtmlHelper" /> class by using the specified view context and view data container.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="viewContext" /> or the <paramref name="viewDataContainer" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HtmlHelper" /> class by using the specified view context, view data container, and route collection.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <param name="routeCollection">The route collection.</param>
      <exception cref="T:System.ArgumentNullException">One or more parameters is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AnonymousObjectToHtmlAttributes(System.Object)">
      <summary>Replaces underscore characters (_) with hyphens (-) in the specified HTML attributes.</summary>
      <returns>The HTML attributes with underscore characters replaced by hyphens.</returns>
      <param name="htmlAttributes">The HTML attributes.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AntiForgeryToken">
      <summary>Generates a hidden form field (anti-forgery token) that is validated when the form is submitted.</summary>
      <returns>The generated form field (anti-forgery token).</returns>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AntiForgeryToken(System.String)">
      <summary>Generates a hidden form field (anti-forgery token) that is validated when the form is submitted. The field value is generated using the specified salt value.</summary>
      <returns>The generated form field (anti-forgery token).</returns>
      <param name="salt">The salt value, which can be any non-empty string.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AntiForgeryToken(System.String,System.String,System.String)">
      <summary>Generates a hidden form field (anti-forgery token) that is validated when the form is submitted. The field value is generated using the specified salt value, domain, and path.</summary>
      <returns>The generated form field (anti-forgery token).</returns>
      <param name="salt">The salt value, which can be any non-empty string.</param>
      <param name="domain">The application domain.</param>
      <param name="path">The virtual path.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AttributeEncode(System.Object)">
      <summary>Converts the specified attribute object to an HTML-encoded string.</summary>
      <returns>The HTML-encoded string. If the value parameter is null or empty, this method returns an empty string.</returns>
      <param name="value">The object to encode.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AttributeEncode(System.String)">
      <summary>Converts the specified attribute string to an HTML-encoded string.</summary>
      <returns>The HTML-encoded string. If the value parameter is null or empty, this method returns an empty string.</returns>
      <param name="value">The string to encode.</param>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ClientValidationEnabled">
      <summary>Gets or sets a value that indicates whether client validation is enabled.</summary>
      <returns>true if enable client validation is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.EnableClientValidation">
      <summary>Enables input validation that is performed by using client script in the browser.</summary>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.EnableClientValidation(System.Boolean)">
      <summary>Enables or disables client validation.</summary>
      <param name="enabled">true to enable client validation; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.EnableUnobtrusiveJavaScript">
      <summary>Enables unobtrusive JavaScript.</summary>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.EnableUnobtrusiveJavaScript(System.Boolean)">
      <summary>Enables or disables unobtrusive JavaScript.</summary>
      <param name="enabled">true to enable unobtrusive JavaScript; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.Encode(System.Object)">
      <summary>Converts the value of the specified object to an HTML-encoded string.</summary>
      <returns>The HTML-encoded string.</returns>
      <param name="value">The object to encode.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.Encode(System.String)">
      <summary>Converts the specified string to an HTML-encoded string.</summary>
      <returns>The HTML-encoded string.</returns>
      <param name="value">The string to encode.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.FormatValue(System.Object,System.String)">
      <summary>Formats the value.</summary>
      <returns>The formatted value.</returns>
      <param name="value">The value.</param>
      <param name="format">The format string. </param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateIdFromName(System.String)">
      <summary>Creates an HTML element ID using the specified element name.</summary>
      <returns>The ID of the HTML element.</returns>
      <param name="name">The name of the HTML element.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateIdFromName(System.String,System.String)">
      <summary>Creates an HTML element ID using the specified element name and a string that replaces dots in the name.</summary>
      <returns>The ID of the HTML element.</returns>
      <param name="name">The name of the HTML element.</param>
      <param name="idAttributeDotReplacement">The string that replaces dots (.) in the <paramref name="name" /> parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter or the <paramref name="idAttributeDotReplacement" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Generates an HTML anchor element (a element) that links to the specified action method, and enables the user to specify the communication protocol, name of the host, and a URL fragment.</summary>
      <returns>An HTML element that links to the specified action method.</returns>
      <param name="requestContext">The context of the HTTP request.</param>
      <param name="routeCollection">The collection of URL routes.</param>
      <param name="linkText">The text caption to display for the link.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="protocol">The communication protocol, such as HTTP or HTTPS. If this parameter is null, the protocol defaults to HTTP.</param>
      <param name="hostName">The name of the host.</param>
      <param name="fragment">The fragment identifier.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Generates an HTML anchor element (a element) that links to the specified action method.</summary>
      <returns>An HTML element that links to the specified action method.</returns>
      <param name="requestContext">The context of the HTTP request.</param>
      <param name="routeCollection">The collection of URL routes.</param>
      <param name="linkText">The text caption to display for the link.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateRouteLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Generates an HTML anchor element (a element) that links to the specified URL route, and enables the user to specify the communication protocol, name of the host, and a URL fragment.</summary>
      <returns>An HTML element that links to the specified URL route.</returns>
      <param name="requestContext">The context of the HTTP request.</param>
      <param name="routeCollection">The collection of URL routes.</param>
      <param name="linkText">The text caption to display for the link.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="protocol">The communication protocol, such as HTTP or HTTPS. If this parameter is null, the protocol defaults to HTTP.</param>
      <param name="hostName">The name of the host.</param>
      <param name="fragment">The fragment identifier.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateRouteLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Generates an HTML anchor element (a element) that links to the specified URL route.</summary>
      <returns>An HTML element that links to the specified URL route.</returns>
      <param name="requestContext">The context of the HTTP request.</param>
      <param name="routeCollection">The collection of URL routes.</param>
      <param name="linkText">The text caption to display for the link.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GetFormMethodString(System.Web.Mvc.FormMethod)">
      <summary>Returns the HTTP method that handles form input (GET or POST) as a string.</summary>
      <returns>The form method string, either "get" or "post".</returns>
      <param name="method">The HTTP method that handles the form.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GetInputTypeString(System.Web.Mvc.InputType)">
      <summary>Returns the HTML input control type as a string.</summary>
      <returns>The input type string ("checkbox", "hidden", "password", "radio", or "text").</returns>
      <param name="inputType">The enumerated input type.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GetUnobtrusiveValidationAttributes(System.String)">
      <summary>Gets the collection of unobtrusive JavaScript validation attributes using the specified HTML name attribute.</summary>
      <returns>The collection of unobtrusive JavaScript validation attributes.</returns>
      <param name="name">The HTML name attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GetUnobtrusiveValidationAttributes(System.String,System.Web.Mvc.ModelMetadata)">
      <summary>Gets the collection of unobtrusive JavaScript validation attributes using the specified HTML name attribute and model metadata.</summary>
      <returns>The collection of unobtrusive JavaScript validation attributes.</returns>
      <param name="name">The HTML name attribute.</param>
      <param name="metadata">The model metadata.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.HttpMethodOverride(System.String)">
      <summary>Returns a hidden input element that identifies the override method for the specified HTTP data-transfer method that was used by the client.</summary>
      <returns>The override method that uses the HTTP data-transfer method that was used by the client.</returns>
      <param name="httpMethod">The HTTP data-transfer method that was used by the client (DELETE, HEAD, or PUT).</param>
      <exception cref="T:System.ArgumentException">The <paramref name="httpVerb" /> parameter is not "PUT", "DELETE", or "HEAD".</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.HttpMethodOverride(System.Web.Mvc.HttpVerbs)">
      <summary>Returns a hidden input element that identifies the override method for the specified verb that represents the HTTP data-transfer method used by the client.</summary>
      <returns>The override method that uses the verb that represents the HTTP data-transfer method used by the client.</returns>
      <param name="httpVerb">The verb that represents the HTTP data-transfer method used by the client.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="httpVerb" /> parameter is not "PUT", "DELETE", or "HEAD".</exception>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.IdAttributeDotReplacement">
      <summary>Gets or sets the character that replaces periods in the ID attribute of an element.</summary>
      <returns>The character that replaces periods in the ID attribute of an element.</returns>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.Raw(System.Object)">
      <summary>Returns markup that is not HTML encoded.</summary>
      <returns>Markup that is not HTML encoded.</returns>
      <param name="value">The value.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.Raw(System.String)">
      <summary>Returns markup that is not HTML encoded.</summary>
      <returns>The HTML markup without encoding.</returns>
      <param name="value">The HTML markup.</param>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.RouteCollection">
      <summary>Gets or sets the collection of routes for the application.</summary>
      <returns>The collection of routes for the application.</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.UnobtrusiveJavaScriptEnabled">
      <summary>Gets or sets a value that indicates whether unobtrusive JavaScript is enabled.</summary>
      <returns>true if unobtrusive JavaScript is enabled; otherwise, false.</returns>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationInputCssClassName">
      <summary>The name of the CSS class that is used to style an input field when a validation error occurs.</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationInputValidCssClassName">
      <summary>The name of the CSS class that is used to style an input field when the input is valid.</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationMessageCssClassName">
      <summary>The name of the CSS class that is used to style the error message when a validation error occurs.</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationMessageValidCssClassName">
      <summary>The name of the CSS class that is used to style the validation message when the input is valid.</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationSummaryCssClassName">
      <summary>The name of the CSS class that is used to style validation summary error messages.</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationSummaryValidCssClassName">
      <summary>The name of the CSS class that is used to style the validation summary when the input is valid.</summary>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ViewBag">
      <summary>Gets the view bag.</summary>
      <returns>The view bag.</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ViewContext">
      <summary>Gets or sets the context information about the view.</summary>
      <returns>The context of the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ViewData">
      <summary>Gets the current view data dictionary.</summary>
      <returns>The view data dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ViewDataContainer">
      <summary>Gets or sets the view data container.</summary>
      <returns>The view data container.</returns>
    </member>
    <member name="T:System.Web.Mvc.HtmlHelper`1">
      <summary>Represents support for rendering HTML controls in a strongly typed view.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HtmlHelper`1" /> class by using the specified view context and view data container.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HtmlHelper`1" /> class by using the specified view context, view data container, and route collection.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <param name="routeCollection">The route collection.</param>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper`1.ViewBag">
      <summary>Gets the view bag.</summary>
      <returns>The view bag.</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper`1.ViewData">
      <summary>Gets the strongly typed view data dictionary.</summary>
      <returns>The strongly typed view data dictionary.</returns>
    </member>
    <member name="T:System.Web.Mvc.HttpDeleteAttribute">
      <summary>Represents an attribute that is used to restrict an action method so that the method handles only HTTP DELETE requests.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpDeleteAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpDeleteAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpDeleteAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether a request is a valid HTTP DELETE request.</summary>
      <returns>true if the request is valid; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="methodInfo">Encapsulates information about a method, such as its type, return type, and arguments.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpFileCollectionValueProvider">
      <summary>Represents a value provider to use with values that come from a collection of HTTP files.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpFileCollectionValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpFileCollectionValueProvider" /> class.</summary>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpFileCollectionValueProviderFactory">
      <summary>Represents a class that is responsible for creating a new instance of an HTTP file collection value provider object.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpFileCollectionValueProviderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpFileCollectionValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpFileCollectionValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a value provider object for the specified controller context.</summary>
      <returns>An HTTP file collection value provider.</returns>
      <param name="controllerContext">An object that encapsulates information about the HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.HttpGetAttribute">
      <summary>Represents an attribute that is used to restrict an action method so that the method handles only HTTP GET requests.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpGetAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpGetAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpGetAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether a request is a valid HTTP GET request.</summary>
      <returns>true if the request is valid; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="methodInfo">Encapsulates information about a method, such as its type, return type, and arguments.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpHeadAttribute">
      <summary>Specifies that the HTTP request must be the HTTP HEAD method.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpHeadAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpHeadAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpHeadAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether a request is a valid HTTP HEAD request.</summary>
      <returns>true if the request is HEAD; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="methodInfo">The method info.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpNotFoundResult">
      <summary>Defines an object that is used to indicate that the requested resource was not found.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpNotFoundResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpNotFoundResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpNotFoundResult.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpNotFoundResult" /> class using a status description.</summary>
      <param name="statusDescription">The status description.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpOptionsAttribute">
      <summary>Represents an attribute that is used to restrict an action method so that the method handles only HTTP OPTIONS requests.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpOptionsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpOptionsAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpOptionsAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether a request is a valid HTTP OPTIONS request.</summary>
      <returns>true if the request is OPTIONS; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="methodInfo">The method info.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpPatchAttribute">
      <summary>Represents an attribute that is used to restrict an action method so that the method handles only HTTP PATCH requests.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPatchAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpPatchAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPatchAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether a request is a valid HTTP PATCH request.</summary>
      <returns>true if the request is PATCH; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="methodInfo">The method info.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpPostAttribute">
      <summary>Represents an attribute that is used to restrict an action method so that the method handles only HTTP POST requests.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpPostAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether a request is a valid HTTP POST request.</summary>
      <returns>true if the request is valid; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="methodInfo">Encapsulates information about a method, such as its type, return type, and arguments.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpPostedFileBaseModelBinder">
      <summary>Binds a model to a posted file.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostedFileBaseModelBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpPostedFileBaseModelBinder" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostedFileBaseModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Binds the model.</summary>
      <returns>The bound value.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="bindingContext">The binding context.</param>
      <exception cref="T:System.ArgumentNullException">One or both parameters are null.</exception>
    </member>
    <member name="T:System.Web.Mvc.HttpPutAttribute">
      <summary>Represents an attribute that is used to restrict an action method so that the method handles only HTTP PUT requests.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPutAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpPutAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPutAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether a request is a valid HTTP PUT request.</summary>
      <returns>true if the request is valid; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="methodInfo">Encapsulates information about a method, such as its type, return type, and arguments.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpRequestExtensions">
      <summary>Extends the <see cref="T:System.Web.HttpRequestBase" /> class that contains the HTTP values that were sent by a client during a Web request.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpRequestExtensions.GetHttpMethodOverride(System.Web.HttpRequestBase)">
      <summary>Retrieves the HTTP data-transfer method override that was used by the client.</summary>
      <returns>The HTTP data-transfer method override that was used by the client.</returns>
      <param name="request">An object that contains the HTTP values that were sent by a client during a Web request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="request" /> parameter is null.</exception>
      <exception cref="T:System.NotImplementedException">The HTTP data-transfer method override was not implemented.</exception>
    </member>
    <member name="T:System.Web.Mvc.HttpStatusCodeResult">
      <summary>Provides a way to return an action result with a specific HTTP response status code and description.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpStatusCodeResult.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpStatusCodeResult" /> class using a status code.</summary>
      <param name="statusCode">The status code.</param>
    </member>
    <member name="M:System.Web.Mvc.HttpStatusCodeResult.#ctor(System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpStatusCodeResult" /> class using a status code and status description.</summary>
      <param name="statusCode">The status code.</param>
      <param name="statusDescription">The status description.</param>
    </member>
    <member name="M:System.Web.Mvc.HttpStatusCodeResult.#ctor(System.Net.HttpStatusCode)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpStatusCodeResult" /> class using a status code.</summary>
      <param name="statusCode">The status code.</param>
    </member>
    <member name="M:System.Web.Mvc.HttpStatusCodeResult.#ctor(System.Net.HttpStatusCode,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpStatusCodeResult" /> class using a status code and status description.</summary>
      <param name="statusCode">The status code.</param>
      <param name="statusDescription">The status description.</param>
    </member>
    <member name="M:System.Web.Mvc.HttpStatusCodeResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
    </member>
    <member name="P:System.Web.Mvc.HttpStatusCodeResult.StatusCode">
      <summary>Gets the HTTP status code.</summary>
      <returns>The HTTP status code.</returns>
    </member>
    <member name="P:System.Web.Mvc.HttpStatusCodeResult.StatusDescription">
      <summary>Gets the HTTP status description.</summary>
      <returns>the HTTP status description.</returns>
    </member>
    <member name="T:System.Web.Mvc.HttpUnauthorizedResult">
      <summary>Represents the result of an unauthorized HTTP request.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpUnauthorizedResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpUnauthorizedResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpUnauthorizedResult.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpUnauthorizedResult" /> class using the status description.</summary>
      <param name="statusDescription">The status description.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpVerbs">
      <summary>Enumerates the HTTP verbs.</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Get">
      <summary>Retrieves the information or entity that is identified by the URI of the request.</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Post">
      <summary>Posts a new entity as an addition to a URI.</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Put">
      <summary>Replaces an entity that is identified by a URI.</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Delete">
      <summary>Requests that a specified URI be deleted.</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Head">
      <summary>Retrieves the message headers for the information or entity that is identified by the URI of the request.</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Patch">
      <summary>Requests that a set of changes described in the   request entity be applied to the resource identified by the Request-   URI.</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Options">
      <summary>Represents a request for information about the communication options available on the request/response chain identified by the Request-URI.</summary>
    </member>
    <member name="T:System.Web.Mvc.IActionFilter">
      <summary>Defines the methods that are used in an action filter.</summary>
    </member>
    <member name="M:System.Web.Mvc.IActionFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>Called after the action method executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.IActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>Called before an action method executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.IActionInvoker">
      <summary>Defines the contract for an action invoker, which is used to invoke an action in response to an HTTP request.</summary>
    </member>
    <member name="M:System.Web.Mvc.IActionInvoker.InvokeAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Invokes the specified action by using the specified controller context.</summary>
      <returns>true if the action was found; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
    </member>
    <member name="T:System.Web.Mvc.IAuthorizationFilter">
      <summary>Defines the methods that are required for an authorization filter.</summary>
    </member>
    <member name="M:System.Web.Mvc.IAuthorizationFilter.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when authorization is required.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.IClientValidatable">
      <summary>Provides a way for the ASP.NET MVC validation framework to discover at run time whether a validator has support for client validation.</summary>
    </member>
    <member name="M:System.Web.Mvc.IClientValidatable.GetClientValidationRules(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>When implemented in a class, returns client validation rules for that class.</summary>
      <returns>The client validation rules for this validator.</returns>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="T:System.Web.Mvc.IController">
      <summary>Defines the methods that are required for a controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.IController.Execute(System.Web.Routing.RequestContext)">
      <summary>Executes the specified request context.</summary>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="T:System.Web.Mvc.IControllerActivator">
      <summary>Provides fine-grained control over how controllers are instantiated using dependency injection.</summary>
    </member>
    <member name="M:System.Web.Mvc.IControllerActivator.Create(System.Web.Routing.RequestContext,System.Type)">
      <summary>When implemented in a class, creates a controller.</summary>
      <returns>The created controller.</returns>
      <param name="requestContext">The request context.</param>
      <param name="controllerType">The controller type.</param>
    </member>
    <member name="T:System.Web.Mvc.IControllerFactory">
      <summary>Defines the methods that are required for a controller factory.</summary>
    </member>
    <member name="M:System.Web.Mvc.IControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
      <summary>Creates the specified controller by using the specified request context.</summary>
      <returns>The controller.</returns>
      <param name="requestContext">The request context.</param>
      <param name="controllerName">The name of the controller.</param>
    </member>
    <member name="M:System.Web.Mvc.IControllerFactory.GetControllerSessionBehavior(System.Web.Routing.RequestContext,System.String)">
      <summary>Gets the controller's session behavior.</summary>
      <returns>The controller's session behavior.</returns>
      <param name="requestContext">The request context.</param>
      <param name="controllerName">The name of the controller whose session behavior you want to get.</param>
    </member>
    <member name="M:System.Web.Mvc.IControllerFactory.ReleaseController(System.Web.Mvc.IController)">
      <summary>Releases the specified controller.</summary>
      <param name="controller">The controller.</param>
    </member>
    <member name="T:System.Web.Mvc.IDependencyResolver">
      <summary>Defines the methods that simplify service location and dependency resolution.</summary>
    </member>
    <member name="M:System.Web.Mvc.IDependencyResolver.GetService(System.Type)">
      <summary>Resolves singly registered services that support arbitrary object creation.</summary>
      <returns>The requested service or object.</returns>
      <param name="serviceType">The type of the requested service or object.</param>
    </member>
    <member name="M:System.Web.Mvc.IDependencyResolver.GetServices(System.Type)">
      <summary>Resolves multiply registered services.</summary>
      <returns>The requested services.</returns>
      <param name="serviceType">The type of the requested services.</param>
    </member>
    <member name="T:System.Web.Mvc.IEnumerableValueProvider">
      <summary>Represents a special <see cref="T:System.Web.Mvc.IValueProvider" /> that has the ability to be enumerable.</summary>
    </member>
    <member name="M:System.Web.Mvc.IEnumerableValueProvider.GetKeysFromPrefix(System.String)">
      <summary>Gets the keys from the prefix.</summary>
      <returns>The keys.</returns>
      <param name="prefix">The prefix.</param>
    </member>
    <member name="T:System.Web.Mvc.IExceptionFilter">
      <summary>Defines the methods that are required for an exception filter.</summary>
    </member>
    <member name="M:System.Web.Mvc.IExceptionFilter.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>Called when an exception occurs.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.IFilterProvider">
      <summary>Provides an interface for finding filters.</summary>
    </member>
    <member name="M:System.Web.Mvc.IFilterProvider.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Returns an enumerator that contains all the <see cref="T:System.Web.Mvc.IFilterProvider" /> instances in the service locator.</summary>
      <returns>The enumerator that contains all the <see cref="T:System.Web.Mvc.IFilterProvider" /> instances in the service locator.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="T:System.Web.Mvc.IMetadataAware">
      <summary>Provides an interface for exposing attributes to the <see cref="T:System.Web.Mvc.AssociatedMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.IMetadataAware.OnMetadataCreated(System.Web.Mvc.ModelMetadata)">
      <summary>When implemented in a class, provides metadata to the model metadata creation process.</summary>
      <param name="metadata">The model metadata.</param>
    </member>
    <member name="T:System.Web.Mvc.IModelBinder">
      <summary>Defines the methods that are required for a model binder.</summary>
    </member>
    <member name="M:System.Web.Mvc.IModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Binds the model to a value by using the specified controller context and binding context.</summary>
      <returns>The bound value.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="bindingContext">The binding context.</param>
    </member>
    <member name="T:System.Web.Mvc.IModelBinderProvider">
      <summary>Defines methods that enable dynamic implementations of model binding for classes that implement the <see cref="T:System.Web.Mvc.IModelBinder" /> interface. </summary>
    </member>
    <member name="M:System.Web.Mvc.IModelBinderProvider.GetBinder(System.Type)">
      <summary>Returns the model binder for the specified type.</summary>
      <returns>The model binder for the specified type.</returns>
      <param name="modelType">The type of the model.</param>
    </member>
    <member name="T:System.Web.Mvc.IMvcFilter">
      <summary>Defines members that specify the order of filters and whether multiple filters are allowed.</summary>
    </member>
    <member name="P:System.Web.Mvc.IMvcFilter.AllowMultiple">
      <summary>When implemented in a class, gets or sets a value that indicates whether multiple filters are allowed.</summary>
      <returns>true if multiple filters are allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.IMvcFilter.Order">
      <summary>When implemented in a class, gets the filter order.</summary>
      <returns>The filter order.</returns>
    </member>
    <member name="T:System.Web.Mvc.InputType">
      <summary>Enumerates the types of input controls.</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.CheckBox">
      <summary>A check box.</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Hidden">
      <summary>A hidden field.</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Password">
      <summary>A password box.</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Radio">
      <summary>A radio button.</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Text">
      <summary>A text box.</summary>
    </member>
    <member name="T:System.Web.Mvc.IResultFilter">
      <summary>Defines the methods that are required for a result filter.</summary>
    </member>
    <member name="M:System.Web.Mvc.IResultFilter.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>Called after an action result executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.IResultFilter.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>Called before an action result executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.IRouteWithArea">
      <summary>Associates a route with an area in an ASP.NET MVC application.</summary>
    </member>
    <member name="P:System.Web.Mvc.IRouteWithArea.Area">
      <summary>Gets the name of the area to associate the route with.</summary>
      <returns>The name of the area to associate the route with.</returns>
    </member>
    <member name="T:System.Web.Mvc.ITempDataProvider">
      <summary>Defines the contract for temporary-data providers that store data that is viewed on the next request.</summary>
    </member>
    <member name="M:System.Web.Mvc.ITempDataProvider.LoadTempData(System.Web.Mvc.ControllerContext)">
      <summary>Loads the temporary data.</summary>
      <returns>The temporary data.</returns>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.ITempDataProvider.SaveTempData(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Saves the temporary data.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="values">The values.</param>
    </member>
    <member name="T:System.Web.Mvc.IUnvalidatedValueProvider">
      <summary>Represents an <see cref="T:System.Web.Mvc.IValueProvider" /> interface that can skip request validation.</summary>
    </member>
    <member name="M:System.Web.Mvc.IUnvalidatedValueProvider.GetValue(System.String,System.Boolean)">
      <summary>Retrieves the value of the object that is associated with the specified key.</summary>
      <returns>The value of the object for the specified key.</returns>
      <param name="key">The key.</param>
      <param name="skipValidation">true if validation should be skipped; otherwise, false.</param>
    </member>
    <member name="T:System.Web.Mvc.IValueProvider">
      <summary>Defines the methods that are required for a value provider in ASP.NET MVC.</summary>
    </member>
    <member name="M:System.Web.Mvc.IValueProvider.ContainsPrefix(System.String)">
      <summary>Determines whether the collection contains the specified prefix.</summary>
      <returns>true if the collection contains the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to search for.</param>
    </member>
    <member name="M:System.Web.Mvc.IValueProvider.GetValue(System.String)">
      <summary>Retrieves a value object using the specified key.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key of the value object to retrieve.</param>
    </member>
    <member name="T:System.Web.Mvc.IView">
      <summary>Defines the methods that are required for a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.IView.Render(System.Web.Mvc.ViewContext,System.IO.TextWriter)">
      <summary>Renders the specified view context by using the specified the writer object.</summary>
      <param name="viewContext">The view context.</param>
      <param name="writer">The writer object.</param>
    </member>
    <member name="T:System.Web.Mvc.IViewDataContainer">
      <summary>Defines the methods that are required for a view data dictionary.</summary>
    </member>
    <member name="P:System.Web.Mvc.IViewDataContainer.ViewData">
      <summary>Gets or sets the view data dictionary.</summary>
      <returns>The view data dictionary.</returns>
    </member>
    <member name="T:System.Web.Mvc.IViewEngine">
      <summary>Defines the methods that are required for a view engine.</summary>
    </member>
    <member name="M:System.Web.Mvc.IViewEngine.FindPartialView(System.Web.Mvc.ControllerContext,System.String,System.Boolean)">
      <summary>Finds the specified partial view by using the specified controller context.</summary>
      <returns>The partial view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="useCache">true to specify that the view engine returns the cached view, if a cached view exists; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.IViewEngine.FindView(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean)">
      <summary>Finds the specified view by using the specified controller context.</summary>
      <returns>The page view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="viewName">The name of the view.</param>
      <param name="masterName">The name of the master.</param>
      <param name="useCache">true to specify that the view engine returns the cached view, if a cached view exists; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.IViewEngine.ReleaseView(System.Web.Mvc.ControllerContext,System.Web.Mvc.IView)">
      <summary>Releases the specified view by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="view">The view.</param>
    </member>
    <member name="T:System.Web.Mvc.IViewLocationCache">
      <summary>Defines the methods that are required in order to cache view locations in memory.</summary>
    </member>
    <member name="M:System.Web.Mvc.IViewLocationCache.GetViewLocation(System.Web.HttpContextBase,System.String)">
      <summary>Gets the view location by using the specified HTTP context and the cache key.</summary>
      <returns>The view location.</returns>
      <param name="httpContext">The HTTP context.</param>
      <param name="key">The cache key.</param>
    </member>
    <member name="M:System.Web.Mvc.IViewLocationCache.InsertViewLocation(System.Web.HttpContextBase,System.String,System.String)">
      <summary>Inserts the specified view location into the cache by using the specified HTTP context and the cache key.</summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="key">The cache key.</param>
      <param name="virtualPath">The virtual path.</param>
    </member>
    <member name="T:System.Web.Mvc.IViewPageActivator">
      <summary>Provides fine-grained control over how view pages are created using dependency injection.</summary>
    </member>
    <member name="M:System.Web.Mvc.IViewPageActivator.Create(System.Web.Mvc.ControllerContext,System.Type)">
      <summary>Provides fine-grained control over how view pages are created using dependency injection.</summary>
      <returns>The created view page.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="type">The type of the controller.</param>
    </member>
    <member name="T:System.Web.Mvc.JavaScriptResult">
      <summary>Sends JavaScript content to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.JavaScriptResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.JavaScriptResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.JavaScriptResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.JavaScriptResult.Script">
      <summary>Gets or sets the script.</summary>
      <returns>The script.</returns>
    </member>
    <member name="T:System.Web.Mvc.JsonRequestBehavior">
      <summary>Specifies whether HTTP GET requests from the client are allowed.</summary>
    </member>
    <member name="F:System.Web.Mvc.JsonRequestBehavior.AllowGet">
      <summary>HTTP GET requests from the client are allowed.</summary>
    </member>
    <member name="F:System.Web.Mvc.JsonRequestBehavior.DenyGet">
      <summary>HTTP GET requests from the client are not allowed.</summary>
    </member>
    <member name="T:System.Web.Mvc.JsonResult">
      <summary>Represents a class that is used to send JSON-formatted content to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.JsonResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.JsonResult" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.ContentEncoding">
      <summary>Gets or sets the content encoding.</summary>
      <returns>The content encoding.</returns>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.ContentType">
      <summary>Gets or sets the type of the content.</summary>
      <returns>The type of the content.</returns>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.Data">
      <summary>Gets or sets the data.</summary>
      <returns>The data.</returns>
    </member>
    <member name="M:System.Web.Mvc.JsonResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.JsonRequestBehavior">
      <summary>Gets or sets a value that indicates whether HTTP GET requests from the client are allowed.</summary>
      <returns>A value that indicates whether HTTP GET requests from the client are allowed.</returns>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.MaxJsonLength">
      <summary>Gets or sets the maximum length of data.</summary>
      <returns>The maximum length of data.</returns>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.RecursionLimit">
      <summary>Gets or sets the recursion limit.</summary>
      <returns>The recursion limit.</returns>
    </member>
    <member name="T:System.Web.Mvc.JsonValueProviderFactory">
      <summary>Enables action methods to send and receive JSON-formatted text and to model-bind the JSON text to parameters of action methods.</summary>
    </member>
    <member name="M:System.Web.Mvc.JsonValueProviderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.JsonValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.JsonValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a JSON value-provider object for the specified controller context.</summary>
      <returns>A JSON value-provider object for the specified controller context.</returns>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="T:System.Web.Mvc.LinqBinaryModelBinder">
      <summary>Maps a browser request to a LINQ <see cref="T:System.Data.Linq.Binary" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.LinqBinaryModelBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.LinqBinaryModelBinder" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.LinqBinaryModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Binds the model by using the specified controller context and binding context.</summary>
      <returns>The bound data object. If the model cannot be bound, this method returns null.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelBinderAttribute">
      <summary>Represents an attribute that is used to associate a model type to a model-builder type.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelBinderAttribute" /> class.</summary>
      <param name="binderType">The type of the binder.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="binderType" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderAttribute.BinderType">
      <summary>Gets or sets the type of the binder.</summary>
      <returns>The type of the binder.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderAttribute.GetBinder">
      <summary>Retrieves an instance of the model binder.</summary>
      <returns>A reference to an object that implements the <see cref="T:System.Web.Mvc.IModelBinder" /> interface.</returns>
      <exception cref="T:System.InvalidOperationException">An error occurred while an instance of the model binder was being created.</exception>
    </member>
    <member name="T:System.Web.Mvc.ModelBinderDictionary">
      <summary>Represents a class that contains all model binders for the application, listed by binder type.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelBinderDictionary" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Add(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder})">
      <summary>Adds the specified item to the model binder dictionary.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Add(System.Type,System.Web.Mvc.IModelBinder)">
      <summary>Adds the specified item to the model binder dictionary using the specified key.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element that has the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Clear">
      <summary>Removes all items from the model binder dictionary.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Contains(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder})">
      <summary>Determines whether the model binder dictionary contains a specified value.</summary>
      <returns>true if <paramref name="item" /> is found in the model binder dictionary; otherwise, false.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.ContainsKey(System.Type)">
      <summary>Determines whether the model binder dictionary contains an element that has the specified key.</summary>
      <returns>true if the model binder dictionary contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder}[],System.Int32)">
      <summary>Copies the elements of the model binder dictionary to an array, starting at a specified index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying starts.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or- The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> object is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination array. -or- Type <paramref name="T" /> cannot be cast automatically to the type of the destination array.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Count">
      <summary>Gets the number of elements in the model binder dictionary.</summary>
      <returns>The number of elements in the model binder dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.DefaultBinder">
      <summary>Gets or sets the default model binder.</summary>
      <returns>The default model binder.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.GetBinder(System.Type)">
      <summary>Retrieves the model binder for the specified type.</summary>
      <returns>The model binder.</returns>
      <param name="modelType">The type of the model to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="modelType" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.GetBinder(System.Type,System.Boolean)">
      <summary>Retrieves the model binder for the specified type or retrieves the default model binder.</summary>
      <returns>The model binder.</returns>
      <param name="modelType">The type of the model to retrieve.</param>
      <param name="fallbackToDefault">true to retrieve the default model binder.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="modelType" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.IsReadOnly">
      <summary>Gets a value that indicates whether the model binder dictionary is read-only.</summary>
      <returns>true if the model binder dictionary is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Item(System.Type)">
      <summary>Gets or sets the specified key in an object that implements the <see cref="T:System.Web.Mvc.IModelBinder" /> interface.</summary>
      <returns>The key for the specified item.</returns>
      <param name="key">The item key.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Keys">
      <summary>Gets a collection that contains the keys in the model binder dictionary.</summary>
      <returns>A collection that contains the keys in the model binder dictionary.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Remove(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder})">
      <summary>Removes the first occurrence of the specified element from the model binder dictionary.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the model binder dictionary; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the model binder dictionary.</returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Remove(System.Type)">
      <summary>Removes the element that has the specified key from the model binder dictionary.</summary>
      <returns>true if the element is successfully removed; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the model binder dictionary.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through a collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.TryGetValue(System.Type,System.Web.Mvc.IModelBinder@)">
      <summary>Gets the value that is associated with the specified key.</summary>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Values">
      <summary>Gets a collection that contains the values in the model binder dictionary.</summary>
      <returns>A collection that contains the values in the model binder dictionary.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelBinderProviderCollection">
      <summary>Provides a container for model binder providers.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderProviderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelBinderProviderCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderProviderCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.IModelBinderProvider})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelBinderProviderCollection" /> class using a list of model binder providers.</summary>
      <param name="list">A list of model binder providers.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderProviderCollection.GetBinder(System.Type)">
      <summary>Returns a model binder of the specified type.</summary>
      <returns>A model binder of the specified type.</returns>
      <param name="modelType">The type of the model binder.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderProviderCollection.InsertItem(System.Int32,System.Web.Mvc.IModelBinderProvider)">
      <summary>Inserts a model binder provider into the <see cref="T:System.Web.Mvc.ModelBinderProviderCollection" /> at the specified index.</summary>
      <param name="index">The index.</param>
      <param name="item">The model binder provider.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderProviderCollection.SetItem(System.Int32,System.Web.Mvc.IModelBinderProvider)">
      <summary>Replaces the model binder provider element at the specified index.</summary>
      <param name="index">The index.</param>
      <param name="item">The model binder provider.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelBinderProviders">
      <summary>Provides a container for model binder providers.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderProviders.BinderProviders">
      <summary>Provides a registration point for model binder providers for applications that do not use dependency injection.</summary>
      <returns>The model binder provider collection.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelBinders">
      <summary>Provides global access to the model binders for the application.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelBinders.Binders">
      <summary>Gets the model binders for the application.</summary>
      <returns>The model binders for the application.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelBindingContext">
      <summary>Provides the context in which a model binder functions.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBindingContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelBindingContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBindingContext.#ctor(System.Web.Mvc.ModelBindingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelBindingContext" /> class using the binding context.</summary>
      <param name="bindingContext">The binding context.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.FallbackToEmptyPrefix">
      <summary>Gets or sets a value that indicates whether the binder should use an empty prefix.</summary>
      <returns>true if the binder should use an empty prefix; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.Model">
      <summary>Gets or sets the model.</summary>
      <returns>The model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelMetadata">
      <summary>Gets or sets the model metadata.</summary>
      <returns>The model metadata.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelName">
      <summary>Gets or sets the name of the model.</summary>
      <returns>The name of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelState">
      <summary>Gets or sets the state of the model.</summary>
      <returns>The state of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelType">
      <summary>Gets or sets the type of the model.</summary>
      <returns>The type of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.PropertyFilter">
      <summary>Gets or sets the property filter.</summary>
      <returns>The property filter.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.PropertyMetadata">
      <summary>Gets the property metadata.</summary>
      <returns>The property metadata.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ValueProvider">
      <summary>Gets or sets the value provider.</summary>
      <returns>The value provider.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelError">
      <summary>Represents an error that occurs during model binding.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelError.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelError" /> class by using the specified exception.</summary>
      <param name="exception">The exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelError.#ctor(System.Exception,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelError" /> class by using the specified exception and error message.</summary>
      <param name="exception">The exception.</param>
      <param name="errorMessage">The error message.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelError.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelError" /> class by using the specified error message.</summary>
      <param name="errorMessage">The error message.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelError.ErrorMessage">
      <summary>Gets or sets the error message.</summary>
      <returns>The error message.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelError.Exception">
      <summary>Gets or sets the exception object.</summary>
      <returns>The exception object.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelErrorCollection">
      <summary>A collection of <see cref="T:System.Web.Mvc.ModelError" /> instances.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelErrorCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelErrorCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelErrorCollection.Add(System.Exception)">
      <summary>Adds the specified <see cref="T:System.Exception" /> object to the model-error collection.</summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelErrorCollection.Add(System.String)">
      <summary>Adds the specified error message to the model-error collection.</summary>
      <param name="errorMessage">The error message.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelMetadata">
      <summary>Provides a container for common metadata, for the <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> class, and for the <see cref="T:System.Web.Mvc.ModelValidator" /> class for a data model.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.#ctor(System.Web.Mvc.ModelMetadataProvider,System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelMetadata" /> class.</summary>
      <param name="provider">The provider.</param>
      <param name="containerType">The type of the container.</param>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
      <param name="propertyName">The name of the model.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.AdditionalValues">
      <summary>Gets a dictionary that contains additional metadata about the model.</summary>
      <returns>A dictionary that contains additional metadata about the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ContainerType">
      <summary>Gets or sets the type of the container for the model.</summary>
      <returns>The type of the container for the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ConvertEmptyStringToNull">
      <summary>Gets or sets a value that indicates whether empty strings that are posted back in forms should be converted to null.</summary>
      <returns>true if empty strings that are posted back in forms should be converted to null; otherwise, false. The default value is true.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.DataTypeName">
      <summary>Gets or sets meta information about the data type. </summary>
      <returns>Meta information about the data type. </returns>
    </member>
    <member name="F:System.Web.Mvc.ModelMetadata.DefaultOrder">
      <summary>The default order value, which is 10000.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Description">
      <summary>Gets or sets the description of the model.</summary>
      <returns>The description of the model. The default value is null.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.DisplayFormatString">
      <summary>Gets or sets the display format string for the model.</summary>
      <returns>The display format string for the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.DisplayName">
      <summary>Gets or sets the display name of the model.</summary>
      <returns>The display name of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.EditFormatString">
      <summary>Gets or sets the edit format string of the model.</summary>
      <returns>The edit format string of the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.FromLambdaExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Web.Mvc.ViewDataDictionary{``0})">
      <summary>Returns the metadata from the <see cref="T:System.Linq.Expressions.Expression" /> parameter for the model.</summary>
      <returns>The metadata.</returns>
      <param name="expression">An expression that identifies the model.</param>
      <param name="viewData">The view data dictionary.</param>
      <typeparam name="TParameter">The type of the parameter.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.FromStringExpression(System.String,System.Web.Mvc.ViewDataDictionary)">
      <summary>Gets the metadata from the expression parameter for the model.</summary>
      <returns>The metadata for the model.</returns>
      <param name="expression">An expression that identifies the model.</param>
      <param name="viewData">The view data dictionary.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.GetDisplayName">
      <summary>Gets the display name for the model.</summary>
      <returns>The display name for the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.GetSimpleDisplayText">
      <summary>Returns the simple description of the model.</summary>
      <returns>The simple description of the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.GetValidators(System.Web.Mvc.ControllerContext)">
      <summary>Gets a list of validators for the model.</summary>
      <returns>A list of validators for the model.</returns>
      <param name="context">The controller context.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.HideSurroundingHtml">
      <summary>Gets or sets a value that indicates whether the model object should be rendered using associated HTML elements.</summary>
      <returns>true if the associated HTML elements that contains the model object should be included with the object; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsComplexType">
      <summary>Gets or sets a value that indicates whether the model is a complex type.</summary>
      <returns>A value that indicates whether the model is considered a complex type by the MVC framework.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsNullableValueType">
      <summary>Gets a value that indicates whether the type is nullable.</summary>
      <returns>true if the type is nullable; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsReadOnly">
      <summary>Gets or sets a value that indicates whether the model is read-only.</summary>
      <returns>true if the model is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsRequired">
      <summary>Gets or sets a value that indicates whether the model is required.</summary>
      <returns>true if the model is required; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Model">
      <summary>Gets the value of the model.</summary>
      <returns>The value of the model. For more information about <see cref="T:System.Web.Mvc.ModelMetadata" />, see the entry ASP.NET MVC 2 Templates, Part 2: ModelMetadata on Brad Wilson's blog</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ModelType">
      <summary>Gets the type of the model.</summary>
      <returns>The type of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.NullDisplayText">
      <summary>Gets or sets the string to display for null values.</summary>
      <returns>The string to display for null values.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Order">
      <summary>Gets or sets a value that represents order of the current metadata.</summary>
      <returns>The order value of the current metadata.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Properties">
      <summary>Gets a collection of model metadata objects that describe the properties of the model.</summary>
      <returns>A collection of model metadata objects that describe the properties of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.PropertyName">
      <summary>Gets the property name.</summary>
      <returns>The property name.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Provider">
      <summary>Gets or sets the provider.</summary>
      <returns>The provider.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.RequestValidationEnabled">
      <summary>Gets or sets a value that indicates whether request validation is enabled.</summary>
      <returns>true if request validation is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ShortDisplayName">
      <summary>Gets or sets a short display name.</summary>
      <returns>The short display name.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ShowForDisplay">
      <summary>Gets or sets a value that indicates whether the property should be displayed in read-only views such as list and detail views.</summary>
      <returns>true if the model should be displayed in read-only views; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ShowForEdit">
      <summary>Gets or sets a value that indicates whether the model should be displayed in editable views.</summary>
      <returns>true if the model should be displayed in editable views; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.SimpleDisplayText">
      <summary>Gets or sets the simple display string for the model.</summary>
      <returns>The simple display string for the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.TemplateHint">
      <summary>Gets or sets a hint that suggests what template to use for this model.</summary>
      <returns>A hint that suggests what template to use for this model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Watermark">
      <summary>Gets or sets a value that can be used as a watermark.</summary>
      <returns>The watermark.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelMetadataProvider">
      <summary>Provides an abstract base class for a custom metadata provider.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.#ctor">
      <summary>When overridden in a derived class, initializes a new instance of the object that derives from the <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
      <summary>Gets a <see cref="T:System.Web.Mvc.ModelMetadata" /> object for each property of a model.</summary>
      <returns>A <see cref="T:System.Web.Mvc.ModelMetadata" /> object for each property of a model.</returns>
      <param name="container">The container.</param>
      <param name="containerType">The type of the container.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>Gets metadata for the specified property.</summary>
      <returns>A <see cref="T:System.Web.Mvc.ModelMetadata" /> object for the property.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="containerType">The type of the container.</param>
      <param name="propertyName">The property to get the metadata model for.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>Gets metadata for the specified model accessor and model type.</summary>
      <returns>A <see cref="T:System.Web.Mvc.ModelMetadata" /> object for the specified model accessor and model type.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelMetadataProviders">
      <summary>Provides a container for the current <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> instance.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadataProviders.Current">
      <summary>Gets or sets the current <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> object.</summary>
      <returns>The current <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> object.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelState">
      <summary>Encapsulates the state of model binding to a property of an action-method argument, or to the argument itself.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelState.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelState" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelState.Errors">
      <summary>Returns a <see cref="T:System.Web.Mvc.ModelErrorCollection" /> object that contains any errors that occurred during model binding.</summary>
      <returns>The errors.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelState.Value">
      <summary>Returns a <see cref="T:System.Web.Mvc.ValueProviderResult" /> object that encapsulates the value that was being bound during model binding.</summary>
      <returns>The value.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelStateDictionary">
      <summary>Represents the state of an attempt to bind a posted form to an action method, which includes validation information.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.#ctor(System.Web.Mvc.ModelStateDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> class by using values that are copied from the specified model-state dictionary.</summary>
      <param name="dictionary">The model-state dictionary.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dictionary " />parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState})">
      <summary>Adds the specified item to the model-state dictionary.</summary>
      <param name="item">The object to add to the model-state dictionary.</param>
      <exception cref="T:System.NotSupportedException">The model-state dictionary is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Add(System.String,System.Web.Mvc.ModelState)">
      <summary>Adds an element that has the specified key and value to the model-state dictionary.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The model-state dictionary is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element that has the specified key already occurs in the model-state dictionary.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.AddModelError(System.String,System.Exception)">
      <summary>Adds the specified model error to the errors collection for the model-state dictionary that is associated with the specified key.</summary>
      <param name="key">The key.</param>
      <param name="exception">The exception.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.AddModelError(System.String,System.String)">
      <summary>Adds the specified error message to the errors collection for the model-state dictionary that is associated with the specified key.</summary>
      <param name="key">The key.</param>
      <param name="errorMessage">The error message.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Clear">
      <summary>Removes all items from the model-state dictionary.</summary>
      <exception cref="T:System.NotSupportedException">The model-state dictionary is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState})">
      <summary>Determines whether the model-state dictionary contains a specific value.</summary>
      <returns>true if <paramref name="item" /> is found in the model-state dictionary; otherwise, false.</returns>
      <param name="item">The object to locate in the model-state dictionary.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.ContainsKey(System.String)">
      <summary>Determines whether the model-state dictionary contains the specified key.</summary>
      <returns>true if the model-state dictionary contains the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the model-state dictionary. </param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState}[],System.Int32)">
      <summary>Copies the elements of the model-state dictionary to an array, starting at a specified index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.ICollection`1" /> object. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying starts.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or- The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or- Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Count">
      <summary>Gets the number of key/value pairs in the collection.</summary>
      <returns>The number of key/value pairs in the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.IsValid">
      <summary>Gets a value that indicates whether this instance of the model-state dictionary is valid.</summary>
      <returns>true if this instance is valid; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.IsValidField(System.String)">
      <summary>Determines whether there are any <see cref="T:System.Web.Mvc.ModelError" /> objects that are associated with or prefixed with the specified key.</summary>
      <returns>true if the model-state dictionary contains a value that is associated with the specified key; otherwise, false.</returns>
      <param name="key">The key.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Item(System.String)">
      <summary>Gets or sets the value that is associated with the specified key.</summary>
      <returns>The model state item.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Keys">
      <summary>Gets a collection that contains the keys in the dictionary.</summary>
      <returns>A collection that contains the keys of the model-state dictionary.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Merge(System.Web.Mvc.ModelStateDictionary)">
      <summary>Copies the values from the specified <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object into this dictionary, overwriting existing values if keys are the same.</summary>
      <param name="dictionary">The dictionary.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState})">
      <summary>Removes the first occurrence of the specified object from the model-state dictionary.</summary>
      <returns>true if <paramref name="item" /> was successfully removed the model-state dictionary; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the model-state dictionary.</returns>
      <param name="item">The object to remove from the model-state dictionary.</param>
      <exception cref="T:System.NotSupportedException">The model-state dictionary is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Remove(System.String)">
      <summary>Removes the element that has the specified key from the model-state dictionary.</summary>
      <returns>true if the element is successfully removed; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the model-state dictionary.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">The model-state dictionary is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.SetModelValue(System.String,System.Web.Mvc.ValueProviderResult)">
      <summary>Sets the value for the specified key by using the specified value provider dictionary.</summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.TryGetValue(System.String,System.Web.Mvc.ModelState@)">
      <summary>Attempts to gets the value that is associated with the specified key.</summary>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Values">
      <summary>Gets a collection that contains the values in the dictionary.</summary>
      <returns>A collection that contains the values of the model-state dictionary.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelValidationResult">
      <summary>Provides a container for a validation result.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidationResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelValidationResult" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelValidationResult.MemberName">
      <summary>Gets or sets the name of the member.</summary>
      <returns>The name of the member.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelValidationResult.Message">
      <summary>Gets or sets the validation result message.</summary>
      <returns>The validation result message.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelValidator">
      <summary>Provides a base class for implementing validation logic.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Called from constructors in derived classes to initialize the <see cref="T:System.Web.Mvc.ModelValidator" /> class.</summary>
      <param name="metadata">The metadata.</param>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelValidator.ControllerContext">
      <summary>Gets the controller context.</summary>
      <returns>The controller context.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.GetClientValidationRules">
      <summary>When implemented in a derived class, returns metadata for client validation.</summary>
      <returns>The metadata for client validation.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.GetModelValidator(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Returns a composite model validator for the model.</summary>
      <returns>A composite model validator for the model.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelValidator.IsRequired">
      <summary>Gets or sets a value that indicates whether a model property is required.</summary>
      <returns>true if the model property is required; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelValidator.Metadata">
      <summary>Gets the metadata for the model validator.</summary>
      <returns>The metadata for the model validator.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.Validate(System.Object)">
      <summary>When implemented in a derived class, validates the object.</summary>
      <returns>A list of validation results.</returns>
      <param name="container">The container.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelValidatorProvider">
      <summary>Provides a list of validators for a model.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProvider.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Web.Mvc.ModelValidatorProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Gets a list of validators.</summary>
      <returns>A list of validators.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The context.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelValidatorProviderCollection">
      <summary>Provides a container for a list of validation providers.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelValidatorProviderCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.ModelValidatorProvider})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelValidatorProviderCollection" /> class using a list of model-validation providers.</summary>
      <param name="list">A list of model-validation providers.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Returns the list of model validators.</summary>
      <returns>The list of model validators.</returns>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.InsertItem(System.Int32,System.Web.Mvc.ModelValidatorProvider)">
      <summary>Inserts a model-validator provider into the collection.</summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="item">The model-validator provider object to insert.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.SetItem(System.Int32,System.Web.Mvc.ModelValidatorProvider)">
      <summary>Replaces the model-validator provider element at the specified index.</summary>
      <param name="index">The zero-based index of the model-validator provider element to replace.</param>
      <param name="item">The new value for the model-validator provider element.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelValidatorProviders">
      <summary>Provides a container for the current validation provider.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelValidatorProviders.Providers">
      <summary>Gets the model validator provider collection.</summary>
      <returns>The model validator provider collection.</returns>
    </member>
    <member name="T:System.Web.Mvc.MultiSelectList">
      <summary>Represents a list of items that users can select more than one item from.</summary>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MultiSelectList" /> class by using the specified items to include in the list.</summary>
      <param name="items">The items.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="items" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MultiSelectList" /> class by using the specified items to include in the list and the selected values.</summary>
      <param name="items">The items.</param>
      <param name="selectedValues">The selected values.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="items" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MultiSelectList" /> class by using the items to include in the list, the data value field, and the data text field.</summary>
      <param name="items">The items.</param>
      <param name="dataValueField">The data value field.</param>
      <param name="dataTextField">The data text field.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="items" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Collections.IEnumerable)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MultiSelectList" /> class by using the items to include in the list, the data value field, the data text field, and the selected values.</summary>
      <param name="items">The items.</param>
      <param name="dataValueField">The data value field.</param>
      <param name="dataTextField">The data text field.</param>
      <param name="selectedValues">The selected values.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="items" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.DataTextField">
      <summary>Gets or sets the data text field.</summary>
      <returns>The data text field.</returns>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.DataValueField">
      <summary>Gets or sets the data value field.</summary>
      <returns>The data value field.</returns>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.Items">
      <summary>Gets or sets the items in the list.</summary>
      <returns>The items in the list.</returns>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.SelectedValues">
      <summary>Gets or sets the selected values.</summary>
      <returns>The selected values.</returns>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator can be used to iterate through a collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Web.Mvc.MvcFilter">
      <summary>When implemented in a derived class, provides a metadata class that contains a reference to the implementation of one or more of the filter interfaces, the filter's order, and the filter's scope.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcFilter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcFilter" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcFilter.#ctor(System.Boolean,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcFilter" /> class and specifies the order of filters and whether multiple filters are allowed.</summary>
      <param name="allowMultiple">true to specify that multiple filters of the same type are allowed; otherwise, false.</param>
      <param name="order">The filter order.</param>
    </member>
    <member name="P:System.Web.Mvc.MvcFilter.AllowMultiple">
      <summary>Gets a value that indicates whether more than one instance of the filter attribute can be specified.</summary>
      <returns>true if more than one instance of the filter attribute is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.MvcFilter.Order">
      <summary>Gets a value that indicates the order in which a filter is applied.</summary>
      <returns>A value that indicates the order in which a filter is applied.</returns>
    </member>
    <member name="T:System.Web.Mvc.MvcHandler">
      <summary>Selects the controller that will handle an HTTP request.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.#ctor(System.Web.Routing.RequestContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcHandler" /> class.</summary>
      <param name="requestContext">The request context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.AddVersionHeader(System.Web.HttpContextBase)">
      <summary>Adds the version header by using the specified HTTP context.</summary>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="httpContext">The HTTP context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state of the asynchronous object.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.BeginProcessRequest(System.Web.HttpContextBase,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing using the base HTTP context.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="httpContext">The HTTP context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state of the asynchronous object.</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.DisableMvcResponseHeader">
      <summary>Gets or sets a value that indicates whether the MVC response header is disabled.</summary>
      <returns>true if the MVC response header is disabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.EndProcessRequest(System.IAsyncResult)">
      <summary>Called by ASP.NET when asynchronous request processing has ended.</summary>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.IsReusable">
      <summary>Gets a value that indicates whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
      <returns>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</returns>
    </member>
    <member name="F:System.Web.Mvc.MvcHandler.MvcVersionHeaderName">
      <summary>Contains the header name of the ASP.NET MVC version.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.ProcessRequest(System.Web.HttpContext)">
      <summary>Processes the request by using the specified HTTP request context.</summary>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.ProcessRequest(System.Web.HttpContextBase)">
      <summary>Processes the request by using the specified base HTTP request context.</summary>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.RequestContext">
      <summary>Gets the request context.</summary>
      <returns>The request context.</returns>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing using the base HTTP context.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="context">The HTTP context.</param>
      <param name="cb">The asynchronous callback method.</param>
      <param name="extraData">The data.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)">
      <summary>Called by ASP.NET when asynchronous request processing has ended.</summary>
      <param name="result">The asynchronous result.</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.System#Web#IHttpHandler#IsReusable">
      <summary>Gets a value that indicates whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
      <returns>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)">
      <summary>Enables processing of HTTP Web requests by a custom HTTP handler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
      <param name="httpContext">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) that are used to service HTTP requests.</param>
    </member>
    <member name="T:System.Web.Mvc.MvcHtmlString">
      <summary>Represents an HTML-encoded string that should not be encoded again.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcHtmlString" /> class.</summary>
      <param name="value">The string to create. If no value is assigned, the object is created using an empty-string value.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.Create(System.String)">
      <summary>Creates an HTML-encoded string using the specified text value.</summary>
      <returns>An HTML-encoded string.</returns>
      <param name="value">The value of the string to create .</param>
    </member>
    <member name="F:System.Web.Mvc.MvcHtmlString.Empty">
      <summary>Contains an empty HTML string.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.IsNullOrEmpty(System.Web.Mvc.MvcHtmlString)">
      <summary>Determines whether the specified string contains content or is either null or empty.</summary>
      <returns>true if the string is null or empty; otherwise, false.</returns>
      <param name="value">The string.</param>
    </member>
    <member name="T:System.Web.Mvc.MvcHttpHandler">
      <summary>Verifies and processes an HTTP request.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcHttpHandler" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="httpContext">The HTTP context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.BeginProcessRequest(System.Web.HttpContextBase,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="httpContext">The base HTTP context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.EndProcessRequest(System.IAsyncResult)">
      <summary>Called by ASP.NET when asynchronous request processing has ended.</summary>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="context">The context.</param>
      <param name="cb">The asynchronous callback method.</param>
      <param name="extraData">An object that contains data.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)">
      <summary>Called by ASP.NET when asynchronous request processing has ended.</summary>
      <param name="result">The status of the asynchronous operations.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.VerifyAndProcessRequest(System.Web.IHttpHandler,System.Web.HttpContextBase)">
      <summary>Verifies and processes an HTTP request.</summary>
      <param name="httpHandler">The HTTP handler.</param>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="T:System.Web.Mvc.MvcRouteHandler">
      <summary>Creates an object that implements the IHttpHandler interface and passes the request context to it.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcRouteHandler" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.#ctor(System.Web.Mvc.IControllerFactory)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcRouteHandler" /> class using the specified factory controller object.</summary>
      <param name="controllerFactory">The controller factory.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary>Returns the HTTP handler by using the specified HTTP context.</summary>
      <returns>The HTTP handler.</returns>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.GetSessionStateBehavior(System.Web.Routing.RequestContext)">
      <summary>Returns the session behavior.</summary>
      <returns>The session behavior.</returns>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.System#Web#Routing#IRouteHandler#GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary>Returns the HTTP handler by using the specified request context.</summary>
      <returns>The HTTP handler.</returns>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="T:System.Web.Mvc.MvcWebRazorHostFactory">
      <summary>Creates instances of <see cref="T:System.Web.Mvc.MvcWebPageRazorHost" /> files.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcWebRazorHostFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcWebRazorHostFactory" /> class. </summary>
    </member>
    <member name="M:System.Web.Mvc.MvcWebRazorHostFactory.CreateHost(System.String,System.String)">
      <summary>Creates a Razor host.</summary>
      <returns>A Razor host.</returns>
      <param name="virtualPath">The virtual path to the target file.</param>
      <param name="physicalPath">The physical path to the target file.</param>
    </member>
    <member name="T:System.Web.Mvc.NameValueCollectionExtensions">
      <summary>Extends a NameValueCollection object so that the collection can be copied to a specified dictionary.</summary>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionExtensions.CopyTo(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Copies the specified collection to the specified destination.</summary>
      <param name="collection">The collection.</param>
      <param name="destination">The destination.</param>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionExtensions.CopyTo(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
      <summary>Copies the specified collection to the specified destination, and optionally replaces previous entries.</summary>
      <param name="collection">The collection.</param>
      <param name="destination">The destination.</param>
      <param name="replaceEntries">true to replace previous entries; otherwise, false.</param>
    </member>
    <member name="T:System.Web.Mvc.NameValueCollectionValueProvider">
      <summary>Represents the base class for value providers whose values come from a <see cref="T:System.Collections.Specialized.NameValueCollection" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.#ctor(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.NameValueCollectionValueProvider" /> class using the specified unvalidated collection.</summary>
      <param name="collection">A collection that contains the values that are used to initialize the provider.</param>
      <param name="unvalidatedCollection">A collection that contains the values that are used to initialize the provider. This collection will not be validated.</param>
      <param name="culture">An object that contains information about the target culture.</param>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.#ctor(System.Collections.Specialized.NameValueCollection,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.NameValueCollectionValueProvider" /> class.</summary>
      <param name="collection">A collection that contains the values that are used to initialize the provider.</param>
      <param name="culture">An object that contains information about the target culture.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collection" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.ContainsPrefix(System.String)">
      <summary>Determines whether the collection contains the specified prefix.</summary>
      <returns>true if the collection contains the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to search for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="prefix" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.GetKeysFromPrefix(System.String)">
      <summary>Gets the keys using the specified prefix.</summary>
      <returns>They keys.</returns>
      <param name="prefix">The prefix.</param>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.GetValue(System.String)">
      <summary>Returns a value object using the specified key.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key of the value object to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.GetValue(System.String,System.Boolean)">
      <summary>Returns a value object using the specified key and validation directive.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key.</param>
      <param name="skipValidation">true if validation should be skipped; otherwise, false.</param>
    </member>
    <member name="T:System.Web.Mvc.NoAsyncTimeoutAttribute">
      <summary>Provides a convenience wrapper for the <see cref="T:System.Web.Mvc.AsyncTimeoutAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.NoAsyncTimeoutAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.NoAsyncTimeoutAttribute" /> class.</summary>
    </member>
    <member name="T:System.Web.Mvc.NonActionAttribute">
      <summary>Represents an attribute that is used to indicate that a controller method is not an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.NonActionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.NonActionAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.NonActionAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether the attribute marks a method that is not an action method by using the specified controller context.</summary>
      <returns>true if the attribute marks a valid non-action method; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="methodInfo">The method information.</param>
    </member>
    <member name="T:System.Web.Mvc.OutputCacheAttribute">
      <summary>Represents an attribute that is used to mark an action method whose output will be cached.</summary>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.OutputCacheAttribute" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.CacheProfile">
      <summary>Gets or sets the cache profile name.</summary>
      <returns>The cache profile name.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.ChildActionCache">
      <summary>Gets or sets the child action cache.</summary>
      <returns>The child action cache.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.Duration">
      <summary>Gets or sets the cache duration, in seconds.</summary>
      <returns>The cache duration.</returns>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.IsChildActionCacheActive(System.Web.Mvc.ControllerContext)">
      <summary>Returns a value that indicates whether a child action cache is active.</summary>
      <returns>true if the child action cache is active; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.Location">
      <summary>Gets or sets the location.</summary>
      <returns>The location.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.NoStore">
      <summary>Gets or sets a value that indicates whether to store the cache.</summary>
      <returns>true if the cache should be stored; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>This method is an implementation of <see cref="M:System.Web.Mvc.IActionFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)" /> and supports the ASP.NET MVC infrastructure. It is not intended to be used directly from your code. </summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>This method is an implementation of <see cref="M:System.Web.Mvc.IActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)" /> and supports the ASP.NET MVC infrastructure. It is not intended to be used directly from your code.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>This method is an implementation of <see cref="M:System.Web.Mvc.IExceptionFilter.OnException(System.Web.Mvc.ExceptionContext)" /> and supports the ASP.NET MVC infrastructure. It is not intended to be used directly from your code.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>This method is an implementation of <see cref="M:System.Web.Mvc.IResultFilter.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)" /> and supports the ASP.NET MVC infrastructure. It is not intended to be used directly from your code.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>Called before the action result executes.</summary>
      <param name="filterContext">The filter context, which encapsulates information for using <see cref="T:System.Web.Mvc.AuthorizeAttribute" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.SqlDependency">
      <summary>Gets or sets the SQL dependency.</summary>
      <returns>The SQL dependency.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByContentEncoding">
      <summary>Gets or sets the vary-by-content encoding.</summary>
      <returns>The vary-by-content encoding.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByCustom">
      <summary>Gets or sets the vary-by-custom value.</summary>
      <returns>The vary-by-custom value.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByHeader">
      <summary>Gets or sets the vary-by-header value.</summary>
      <returns>The vary-by-header value.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByParam">
      <summary>Gets or sets the vary-by-param value.</summary>
      <returns>The vary-by-param value.</returns>
    </member>
    <member name="T:System.Web.Mvc.ParameterBindingInfo">
      <summary>Encapsulates information for binding action-method parameters to a data model.</summary>
    </member>
    <member name="M:System.Web.Mvc.ParameterBindingInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ParameterBindingInfo" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Binder">
      <summary>Gets the model binder.</summary>
      <returns>The model binder.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Exclude">
      <summary>Gets a comma-delimited list of property names for which binding is disabled.</summary>
      <returns>The exclude list.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Include">
      <summary>Gets a comma-delimited list of property names for which binding is enabled.</summary>
      <returns>The include list.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Prefix">
      <summary>Gets the prefix to use when the MVC framework binds a value to an action parameter or to a model property.</summary>
      <returns>The prefix.</returns>
    </member>
    <member name="T:System.Web.Mvc.ParameterDescriptor">
      <summary>Contains information that describes a parameter.</summary>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ParameterDescriptor" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.ActionDescriptor">
      <summary>Gets the action descriptor.</summary>
      <returns>The action descriptor.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.BindingInfo">
      <summary>Gets the binding information.</summary>
      <returns>The binding information.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.DefaultValue">
      <summary>Gets the default value of the parameter.</summary>
      <returns>The default value of the parameter.</returns>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attributeType" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether one or more instances of a custom attribute type are defined for this member.</summary>
      <returns>true if the custom attribute type is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attributeType" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.ParameterName">
      <summary>Gets the name of the parameter.</summary>
      <returns>The name of the parameter.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.ParameterType">
      <summary>Gets the type of the parameter.</summary>
      <returns>The type of the parameter.</returns>
    </member>
    <member name="T:System.Web.Mvc.PartialViewResult">
      <summary>Represents a base class that is used to send a partial view to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.PartialViewResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.PartialViewResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.PartialViewResult.FindView(System.Web.Mvc.ControllerContext)">
      <summary>Returns the <see cref="T:System.Web.Mvc.ViewEngineResult" /> object that is used to render the view.</summary>
      <returns>The view engine result.</returns>
      <param name="context">The controller context.</param>
      <exception cref="T:System.InvalidOperationException">An error occurred while the method was attempting to find the view.</exception>
    </member>
    <member name="T:System.Web.Mvc.PreApplicationStartCode">
      <summary>Provides a registration point for ASP.NET Razor pre-application start code.</summary>
    </member>
    <member name="M:System.Web.Mvc.PreApplicationStartCode.Start">
      <summary>Registers Razor pre-application start code.</summary>
    </member>
    <member name="T:System.Web.Mvc.QueryStringValueProvider">
      <summary>Represents a value provider for query strings that are contained in a <see cref="T:System.Collections.Specialized.NameValueCollection" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.QueryStringValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.QueryStringValueProvider" /> class.</summary>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
    </member>
    <member name="T:System.Web.Mvc.QueryStringValueProviderFactory">
      <summary>Represents a class that is responsible for creating a new instance of a query-string value-provider object.</summary>
    </member>
    <member name="M:System.Web.Mvc.QueryStringValueProviderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.QueryStringValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.QueryStringValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a value-provider object for the specified controller context.</summary>
      <returns>A query-string value-provider object.</returns>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.RangeAttributeAdapter">
      <summary>Provides an adapter for the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.RangeAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.RangeAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class.</summary>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
      <param name="attribute">The range attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.RangeAttributeAdapter.GetClientValidationRules">
      <summary>Gets a list of client validation rules for a range check.</summary>
      <returns>A list of client validation rules for a range check.</returns>
    </member>
    <member name="T:System.Web.Mvc.RazorView">
      <summary>Represents the class used to create views that have Razor syntax.</summary>
    </member>
    <member name="M:System.Web.Mvc.RazorView.#ctor(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RazorView" /> class.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The view path.</param>
      <param name="layoutPath">The layout or master page.</param>
      <param name="runViewStartPages">A value that indicates whether view start files should be executed before the view.</param>
      <param name="viewStartFileExtensions">The set of extensions that will be used when looking up view start files.</param>
    </member>
    <member name="M:System.Web.Mvc.RazorView.#ctor(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Web.Mvc.IViewPageActivator)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RazorView" /> class using the view page activator.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The view path.</param>
      <param name="layoutPath">The layout or master page.</param>
      <param name="runViewStartPages">A value that indicates whether view start files should be executed before the view.</param>
      <param name="viewStartFileExtensions">The set of extensions that will be used when looking up view start files.</param>
      <param name="viewPageActivator">The view page activator.</param>
    </member>
    <member name="P:System.Web.Mvc.RazorView.LayoutPath">
      <summary>Gets the layout or master page.</summary>
      <returns>The layout or master page.</returns>
    </member>
    <member name="M:System.Web.Mvc.RazorView.RenderView(System.Web.Mvc.ViewContext,System.IO.TextWriter,System.Object)">
      <summary>Renders the specified view context by using the specified writer and <see cref="T:System.Web.Mvc.WebViewPage" /> instance.</summary>
      <param name="viewContext">The view context.</param>
      <param name="writer">The writer that is used to render the view to the response.</param>
      <param name="instance">The <see cref="T:System.Web.Mvc.WebViewPage" /> instance.</param>
    </member>
    <member name="P:System.Web.Mvc.RazorView.RunViewStartPages">
      <summary>Gets a value that indicates whether view start files should be executed before the view.</summary>
      <returns>A value that indicates whether view start files should be executed before the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.RazorView.ViewStartFileExtensions">
      <summary>Gets or sets the set of file extensions that will be used when looking up view start files.</summary>
      <returns>The set of file extensions that will be used when looking up view start files.</returns>
    </member>
    <member name="T:System.Web.Mvc.RazorViewEngine">
      <summary>Represents a view engine that is used to render a Web page that uses the ASP.NET Razor syntax.</summary>
    </member>
    <member name="M:System.Web.Mvc.RazorViewEngine.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RazorViewEngine" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.RazorViewEngine.#ctor(System.Web.Mvc.IViewPageActivator)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RazorViewEngine" /> class using the view page activator.</summary>
      <param name="viewPageActivator">The view page activator.</param>
    </member>
    <member name="M:System.Web.Mvc.RazorViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Creates a partial view using the specified controller context and partial path.</summary>
      <returns>The partial view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="partialPath">The path to the partial view.</param>
    </member>
    <member name="M:System.Web.Mvc.RazorViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>Creates a view by using the specified controller context and the paths of the view and master view.</summary>
      <returns>The view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The path to the view.</param>
      <param name="masterPath">The path to the master view.</param>
    </member>
    <member name="T:System.Web.Mvc.RedirectResult">
      <summary>Controls the processing of application actions by redirecting to a specified URI.</summary>
    </member>
    <member name="M:System.Web.Mvc.RedirectResult.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class.</summary>
      <param name="url">The target URL.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RedirectResult.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class using the specified URL and permanent-redirection flag.</summary>
      <param name="url">The URL.</param>
      <param name="permanent">A value that indicates whether the redirection should be permanent.</param>
    </member>
    <member name="M:System.Web.Mvc.RedirectResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.RedirectResult.Permanent">
      <summary>Gets a value that indicates whether the redirection should be permanent.</summary>
      <returns>true if the redirection should be permanent; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.RedirectResult.Url">
      <summary>Gets or sets the target URL.</summary>
      <returns>The target URL.</returns>
    </member>
    <member name="T:System.Web.Mvc.RedirectToRouteResult">
      <summary>Represents a result that performs a redirection by using the specified route values dictionary.</summary>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.#ctor(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RedirectToRouteResult" /> class by using the specified route name and route values.</summary>
      <param name="routeName">The name of the route.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.#ctor(System.String,System.Web.Routing.RouteValueDictionary,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RedirectToRouteResult" /> class by using the specified route name, route values, and permanent-redirection flag.</summary>
      <param name="routeName">The name of the route.</param>
      <param name="routeValues">The route values.</param>
      <param name="permanent">A value that indicates whether the redirection should be permanent.</param>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.#ctor(System.Web.Routing.RouteValueDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RedirectToRouteResult" /> class by using the specified route values.</summary>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.RedirectToRouteResult.Permanent">
      <summary>Gets a value that indicates whether the redirection should be permanent.</summary>
      <returns>true if the redirection should be permanent; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.RedirectToRouteResult.RouteName">
      <summary>Gets or sets the name of the route.</summary>
      <returns>The name of the route.</returns>
    </member>
    <member name="P:System.Web.Mvc.RedirectToRouteResult.RouteValues">
      <summary>Gets or sets the route values.</summary>
      <returns>The route values.</returns>
    </member>
    <member name="T:System.Web.Mvc.ReflectedActionDescriptor">
      <summary>Contains information that describes a reflected action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.#ctor(System.Reflection.MethodInfo,System.String,System.Web.Mvc.ControllerDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ReflectedActionDescriptor" /> class.</summary>
      <param name="methodInfo">The action-method information.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerDescriptor">The controller descriptor.</param>
      <exception cref="T:System.ArgumentNullException">Either the <paramref name="methodInfo" /> or <paramref name="controllerDescriptor" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.ActionName">
      <summary>Gets the name of the action.</summary>
      <returns>The name of the action.</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.ControllerDescriptor">
      <summary>Gets the controller descriptor.</summary>
      <returns>The controller descriptor.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Executes the specified controller context by using the specified action-method parameters.</summary>
      <returns>The action return value.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameters">The parameters.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="parameters" /> or <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetFilterAttributes(System.Boolean)">
      <summary>Gets the filter attributes.</summary>
      <returns>The filter attributes.</returns>
      <param name="useCache">true to use the cache, otherwise false.</param>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetParameters">
      <summary>Retrieves the parameters of the action method.</summary>
      <returns>The parameters of the action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetSelectors">
      <summary>Retrieves the action selectors.</summary>
      <returns>The action selectors.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether one or more instances of a custom attribute type are defined for this member.</summary>
      <returns>true if the custom attribute type is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.MethodInfo">
      <summary>Gets or sets the action-method information.</summary>
      <returns>The action-method information.</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.UniqueId">
      <summary>Gets the unique ID for the reflected action descriptor using lazy initialization.</summary>
      <returns>The unique ID.</returns>
    </member>
    <member name="T:System.Web.Mvc.ReflectedControllerDescriptor">
      <summary>Contains information that describes a reflected controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ReflectedControllerDescriptor" /> class.</summary>
      <param name="controllerType">The type of the controller.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerType" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ReflectedControllerDescriptor.ControllerType">
      <summary>Gets the type of the controller.</summary>
      <returns>The type of the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.FindAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Finds the specified action for the specified controller context.</summary>
      <returns>The information about the action.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.GetCanonicalActions">
      <summary>Returns the list of actions for the controller.</summary>
      <returns>A list of action descriptors for the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.GetFilterAttributes(System.Boolean)">
      <summary>Gets the filter attributes.</summary>
      <returns>The filter attributes.</returns>
      <param name="useCache">true to use the cache, otherwise false.</param>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether one or more instances of a custom attribute type are defined for this member.</summary>
      <returns>true if the custom attribute type is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="T:System.Web.Mvc.ReflectedParameterDescriptor">
      <summary>Contains information that describes a reflected action-method parameter.</summary>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.#ctor(System.Reflection.ParameterInfo,System.Web.Mvc.ActionDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ReflectedParameterDescriptor" /> class.</summary>
      <param name="parameterInfo">The parameter information.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> or <paramref name="actionDescriptor" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ActionDescriptor">
      <summary>Gets the action descriptor.</summary>
      <returns>The action descriptor.</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.BindingInfo">
      <summary>Gets the binding information.</summary>
      <returns>The binding information.</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.DefaultValue">
      <summary>Gets the default value of the reflected parameter.</summary>
      <returns>The default value of the reflected parameter.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether one or more instances of a custom attribute type are defined for this member.</summary>
      <returns>true if the custom attribute type is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ParameterInfo">
      <summary>Gets or sets the parameter information.</summary>
      <returns>The parameter information.</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ParameterName">
      <summary>Gets the name of the parameter.</summary>
      <returns>The name of the parameter.</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ParameterType">
      <summary>Gets the type of the parameter.</summary>
      <returns>The type of the parameter.</returns>
    </member>
    <member name="T:System.Web.Mvc.RegularExpressionAttributeAdapter">
      <summary>Provides an adapter for the <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.RegularExpressionAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.RegularExpressionAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RegularExpressionAttributeAdapter" /> class.</summary>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
      <param name="attribute">The regular expression attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.RegularExpressionAttributeAdapter.GetClientValidationRules">
      <summary>Gets a list of regular-expression client validation rules.</summary>
      <returns>A list of regular-expression client validation rules.</returns>
    </member>
    <member name="T:System.Web.Mvc.RemoteAttribute">
      <summary>Provides an attribute that uses the jQuery validation plug-in remote validator. </summary>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RemoteAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RemoteAttribute" /> class using the specified route name.</summary>
      <param name="routeName">The route name.</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RemoteAttribute" /> class using the specified action-method name and controller name.</summary>
      <param name="action">The name of the action method.</param>
      <param name="controller">The name of the controller.</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RemoteAttribute" /> class using the specified action-method name, controller name, and area name.</summary>
      <param name="action">The name of the action method.</param>
      <param name="controller">The name of the controller.</param>
      <param name="areaName">The name of the area.</param>
    </member>
    <member name="P:System.Web.Mvc.RemoteAttribute.AdditionalFields">
      <summary>Gets or sets the additional fields that are required for validation.</summary>
      <returns>The additional fields that are required for validation.</returns>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.FormatAdditionalFieldsForClientValidation(System.String)">
      <summary>Returns a comma-delimited string of validation field names.</summary>
      <returns>A comma-delimited string of validation field names.</returns>
      <param name="property">The name of the validation property.</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.FormatErrorMessage(System.String)">
      <summary>Formats the error message that is displayed when validation fails.</summary>
      <returns>A formatted error message.</returns>
      <param name="name">A name to display with the error message.</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.FormatPropertyForClientValidation(System.String)">
      <summary>Formats the property for client validation by prepending an asterisk (*) and a dot.</summary>
      <returns>The string "*." Is prepended to the property.</returns>
      <param name="property">The property.</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.GetClientValidationRules(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Gets a list of client validation rules for the property.</summary>
      <returns>A list of remote client validation rules for the property.</returns>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.GetUrl(System.Web.Mvc.ControllerContext)">
      <summary>Gets the URL for the remote validation call.</summary>
      <returns>The URL for the remote validation call.</returns>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="P:System.Web.Mvc.RemoteAttribute.HttpMethod">
      <summary>Gets or sets the HTTP method used for remote validation.</summary>
      <returns>The HTTP method used for remote validation. The default value is "Get".</returns>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.IsValid(System.Object)">
      <summary>This method always returns true.</summary>
      <returns>true</returns>
      <param name="value">The validation target.</param>
    </member>
    <member name="P:System.Web.Mvc.RemoteAttribute.RouteData">
      <summary>Gets the route data dictionary.</summary>
      <returns>The route data dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.RemoteAttribute.RouteName">
      <summary>Gets or sets the route name.</summary>
      <returns>The route name.</returns>
    </member>
    <member name="P:System.Web.Mvc.RemoteAttribute.Routes">
      <summary>Gets the route collection from the route table.</summary>
      <returns>The route collection from the route table.</returns>
    </member>
    <member name="T:System.Web.Mvc.RequiredAttributeAdapter">
      <summary>Provides an adapter for the <see cref="T:System.Runtime.CompilerServices.RequiredAttributeAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.RequiredAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.RequiredAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RequiredAttributeAttribute" /> class.</summary>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
      <param name="attribute">The required attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.RequiredAttributeAdapter.GetClientValidationRules">
      <summary>Gets a list of required-value client validation rules.</summary>
      <returns>A list of required-value client validation rules.</returns>
    </member>
    <member name="T:System.Web.Mvc.RequireHttpsAttribute">
      <summary>Represents an attribute that forces an unsecured HTTP request to be re-sent over HTTPS.</summary>
    </member>
    <member name="M:System.Web.Mvc.RequireHttpsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RequireHttpsAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.RequireHttpsAttribute.HandleNonHttpsRequest(System.Web.Mvc.AuthorizationContext)">
      <summary>Handles unsecured HTTP requests that are sent to the action method.</summary>
      <param name="filterContext">An object that encapsulates information that is required in order to use the <see cref="T:System.Web.Mvc.RequireHttpsAttribute" /> attribute.</param>
      <exception cref="T:System.InvalidOperationException">The HTTP request contains an invalid transfer method override. All GET requests are considered invalid.</exception>
    </member>
    <member name="M:System.Web.Mvc.RequireHttpsAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Determines whether a request is secured (HTTPS) and, if it is not, calls the <see cref="M:System.Web.Mvc.RequireHttpsAttribute.HandleNonHttpsRequest(System.Web.Mvc.AuthorizationContext)" /> method.</summary>
      <param name="filterContext">An object that encapsulates information that is required in order to use the <see cref="T:System.Web.Mvc.RequireHttpsAttribute" /> attribute.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ResultExecutedContext">
      <summary>Provides the context for the <see cref="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)" /> method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutedContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ResultExecutedContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutedContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult,System.Boolean,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ResultExecutedContext" /> class.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="result">The result object.</param>
      <param name="canceled">true to cancel execution; otherwise, false.</param>
      <param name="exception">The exception object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="result" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.Canceled">
      <summary>Gets or sets a value that indicates whether this <see cref="T:System.Web.Mvc.ResultExecutedContext" /> instance is canceled.</summary>
      <returns>true if the instance is canceled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.Exception">
      <summary>Gets or sets the exception object.</summary>
      <returns>The exception object.</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.ExceptionHandled">
      <summary>Gets or sets a value that indicates whether the exception has been handled.</summary>
      <returns>true if the exception has been handled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.Result">
      <summary>Gets or sets the action result.</summary>
      <returns>The action result.</returns>
    </member>
    <member name="T:System.Web.Mvc.ResultExecutingContext">
      <summary>Provides the context for the <see cref="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)" /> method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutingContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ResultExecutingContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutingContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ResultExecutingContext" /> class by using the specified controller context and action result.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="result">The action result.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="result" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutingContext.Cancel">
      <summary>Gets or sets a value that indicates whether this <see cref="T:System.Web.Mvc.ResultExecutingContext" /> value is "cancel".</summary>
      <returns>true if the value is "cancel"; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutingContext.Result">
      <summary>Gets or sets the action result.</summary>
      <returns>The action result.</returns>
    </member>
    <member name="T:System.Web.Mvc.RouteCollectionExtensions">
      <summary>Extends a <see cref="T:System.Web.Routing.RouteCollection" /> object for MVC routing.</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.GetVirtualPathForArea(System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an object that contains information about the route and virtual path that are the result of generating a URL in the current area.</summary>
      <returns>An object that contains information about the route and virtual path that are the result of generating a URL in the current area.</returns>
      <param name="routes">An object that contains the routes for the applications.</param>
      <param name="requestContext">An object that encapsulates information about the requested route.</param>
      <param name="name">The name of the route to use when information about the URL path is retrieved.</param>
      <param name="values">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.GetVirtualPathForArea(System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an object that contains information about the route and virtual path that are the result of generating a URL in the current area.</summary>
      <returns>An object that contains information about the route and virtual path that are the result of generating a URL in the current area.</returns>
      <param name="routes">An object that contains the routes for the applications.</param>
      <param name="requestContext">An object that encapsulates information about the requested route.</param>
      <param name="values">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.IgnoreRoute(System.Web.Routing.RouteCollection,System.String)">
      <summary>Ignores the specified URL route for the given list of available routes.</summary>
      <param name="routes">A collection of routes for the application.</param>
      <param name="url">The URL pattern for the route to ignore.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.IgnoreRoute(System.Web.Routing.RouteCollection,System.String,System.Object)">
      <summary>Ignores the specified URL route for the given list of the available routes and a list of constraints.</summary>
      <param name="routes">A collection of routes for the application.</param>
      <param name="url">The URL pattern for the route to ignore.</param>
      <param name="constraints">A set of expressions that specify values for the <paramref name="url" /> parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String)">
      <summary>Maps the specified URL route.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object)">
      <summary>Maps the specified URL route and sets default route values.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object)">
      <summary>Maps the specified URL route and sets default route values and constraints.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="constraints">A set of expressions that specify values for the <paramref name="url" /> parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object,System.String[])">
      <summary>Maps the specified URL route and sets default route values, constraints, and namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="constraints">A set of expressions that specify values for the <paramref name="url" /> parameter.</param>
      <param name="namespaces">A set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.String[])">
      <summary>Maps the specified URL route and sets default route values and namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="namespaces">A set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.String[])">
      <summary>Maps the specified URL route and sets the namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="namespaces">A set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.RouteDataValueProvider">
      <summary>Represents a value provider for route data that is contained in an object that implements the <see cref="T:System.Collections.Generic.IDictionary`2" /> interface.</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteDataValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RouteDataValueProvider" /> class.</summary>
      <param name="controllerContext">An object that contain information about the HTTP request.</param>
    </member>
    <member name="T:System.Web.Mvc.RouteDataValueProviderFactory">
      <summary>Represents a factory for creating route-data value provider objects.</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteDataValueProviderFactory.#ctor">
      <summary>Initialized a new instance of the <see cref="T:System.Web.Mvc.RouteDataValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteDataValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a value-provider object for the specified controller context.</summary>
      <returns>A value-provider object.</returns>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.SelectList">
      <summary>Represents a list that lets users select one item.</summary>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SelectList" /> class by using the specified items for the list.</summary>
      <param name="items">The items.</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SelectList" /> class by using the specified items for the list and a selected value.</summary>
      <param name="items">The items.</param>
      <param name="selectedValue">The selected value.</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SelectList" /> class by using the specified items for the list, the data value field, and the data text field.</summary>
      <param name="items">The items.</param>
      <param name="dataValueField">The data value field.</param>
      <param name="dataTextField">The data text field.</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SelectList" /> class by using the specified items for the list, the data value field, the data text field, and a selected value.</summary>
      <param name="items">The items.</param>
      <param name="dataValueField">The data value field.</param>
      <param name="dataTextField">The data text field.</param>
      <param name="selectedValue">The selected value.</param>
    </member>
    <member name="P:System.Web.Mvc.SelectList.SelectedValue">
      <summary>Gets the list value that was selected by the user.</summary>
      <returns>The selected value.</returns>
    </member>
    <member name="T:System.Web.Mvc.SelectListItem">
      <summary>Represents the selected item in an instance of the <see cref="T:System.Web.Mvc.SelectList" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.SelectListItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SelectListItem" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.SelectListItem.Selected">
      <summary>Gets or sets a value that indicates whether this <see cref="T:System.Web.Mvc.SelectListItem" /> is selected.</summary>
      <returns>true if the item is selected; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.SelectListItem.Text">
      <summary>Gets or sets the text of the selected item.</summary>
      <returns>The text.</returns>
    </member>
    <member name="P:System.Web.Mvc.SelectListItem.Value">
      <summary>Gets or sets the value of the selected item.</summary>
      <returns>The value.</returns>
    </member>
    <member name="T:System.Web.Mvc.SessionStateAttribute">
      <summary>Specifies the session state of the controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.SessionStateAttribute.#ctor(System.Web.SessionState.SessionStateBehavior)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SessionStateAttribute" /> class</summary>
      <param name="behavior">The type of the session state.</param>
    </member>
    <member name="P:System.Web.Mvc.SessionStateAttribute.Behavior">
      <summary>Get the session state behavior for the controller.</summary>
      <returns>The session state behavior for the controller.</returns>
    </member>
    <member name="T:System.Web.Mvc.SessionStateTempDataProvider">
      <summary>Provides session-state data to the current <see cref="T:System.Web.Mvc.TempDataDictionary" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.SessionStateTempDataProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SessionStateTempDataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.SessionStateTempDataProvider.LoadTempData(System.Web.Mvc.ControllerContext)">
      <summary>Loads the temporary data by using the specified controller context.</summary>
      <returns>The temporary data.</returns>
      <param name="controllerContext">The controller context.</param>
      <exception cref="T:System.InvalidOperationException">An error occurred when the session context was being retrieved.</exception>
    </member>
    <member name="M:System.Web.Mvc.SessionStateTempDataProvider.SaveTempData(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Saves the specified values in the temporary data dictionary by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="values">The values.</param>
      <exception cref="T:System.InvalidOperationException">An error occurred the session context was being retrieved.</exception>
    </member>
    <member name="T:System.Web.Mvc.StringLengthAttributeAdapter">
      <summary>Provides an adapter for the <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.StringLengthAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.StringLengthAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.StringLengthAttributeAdapter" /> class.</summary>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
      <param name="attribute">The string-length attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.StringLengthAttributeAdapter.GetClientValidationRules">
      <summary>Gets a list of string-length client validation rules.</summary>
      <returns>A list of string-length client validation rules.</returns>
    </member>
    <member name="T:System.Web.Mvc.TempDataDictionary">
      <summary>Represents a set of data that persists only from one request to the next.</summary>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.TempDataDictionary" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Add(System.String,System.Object)">
      <summary>Adds an element that has the specified key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element that has the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.ContainsKey(System.String)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> instance contains an element that has the specified key.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> instance contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" /> instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.ContainsValue(System.Object)">
      <summary>Determines whether the dictionary contains the specified value.</summary>
      <returns>true if the dictionary contains the specified value; otherwise, false.</returns>
      <param name="value">The value.</param>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Count">
      <summary>Gets the number of elements in the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</summary>
      <returns>The number of elements in the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.GetEnumerator">
      <summary>Gets the enumerator.</summary>
      <returns>The enumerator.</returns>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Item(System.String)">
      <summary>Gets or sets the object that has the specified key.</summary>
      <returns>The object that has the specified key.</returns>
      <param name="key">The key to access.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Keep">
      <summary>Marks all keys in the dictionary for retention.</summary>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Keep(System.String)">
      <summary>Marks the specified key in the dictionary for retention.</summary>
      <param name="key">The key to retain in the dictionary.</param>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Keys">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> object that contains the keys of elements in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</summary>
      <returns>The keys of the elements in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Load(System.Web.Mvc.ControllerContext,System.Web.Mvc.ITempDataProvider)">
      <summary>Loads the specified controller context by using the specified data provider.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="tempDataProvider">The temporary data provider.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Peek(System.String)">
      <summary>Returns an object that contains the element that is associated with the specified key, without marking the key for deletion.</summary>
      <returns>An object that contains the element that is associated with the specified key.</returns>
      <param name="key">The key of the element to return.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Remove(System.String)">
      <summary>Removes the element that has the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</summary>
      <returns>true if the element was removed successfully; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the <see cref="T:System.Collections.Generic.IDictionary`2" />. instance.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Save(System.Web.Mvc.ControllerContext,System.Web.Mvc.ITempDataProvider)">
      <summary>Saves the specified controller context by using the specified data provider.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="tempDataProvider">The temporary data provider.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds the specified key/value pair to the dictionary.</summary>
      <param name="keyValuePair">The key/value pair.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Determines whether a sequence contains a specified element by using the default equality comparer.</summary>
      <returns>true if the dictionary contains the specified key/value pair; otherwise, false.</returns>
      <param name="keyValuePair">The key/value pair to search for.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies a key/value pair to the specified array at the specified index.</summary>
      <param name="array">The target array.</param>
      <param name="index">The index.</param>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value that indicates whether the dictionary is read-only.</summary>
      <returns>true if the dictionary is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Deletes the specified key/value pair from the dictionary.</summary>
      <returns>true if the key/value pair was removed successfully; otherwise, false.</returns>
      <param name="keyValuePair">The key/value pair.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.TryGetValue(System.String,System.Object@)">
      <summary>Gets the value of the element that has the specified key.</summary>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, the value that is associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Values">
      <summary>Gets the <see cref="T:System.Collections.Generic.ICollection`1" /> object that contains the values in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</summary>
      <returns>The values of the elements in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="T:System.Web.Mvc.TemplateInfo">
      <summary>Encapsulates information about the current template context.</summary>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.TemplateInfo" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.TemplateInfo.FormattedModelValue">
      <summary>Gets or sets the formatted model value.</summary>
      <returns>The formatted model value.</returns>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.GetFullHtmlFieldId(System.String)">
      <summary>Retrieves the full DOM ID of a field using the specified HTML name attribute.</summary>
      <returns>The full DOM ID.</returns>
      <param name="partialFieldName">The value of the HTML name attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.GetFullHtmlFieldName(System.String)">
      <summary>Retrieves the fully qualified name (including a prefix) for a field using the specified HTML name attribute.</summary>
      <returns>The prefixed name of the field.</returns>
      <param name="partialFieldName">The value of the HTML name attribute.</param>
    </member>
    <member name="P:System.Web.Mvc.TemplateInfo.HtmlFieldPrefix">
      <summary>Gets or sets the HTML field prefix.</summary>
      <returns>The HTML field prefix.</returns>
    </member>
    <member name="P:System.Web.Mvc.TemplateInfo.TemplateDepth">
      <summary>Contains the number of objects that were visited by the user.</summary>
      <returns>The number of objects.</returns>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.Visited(System.Web.Mvc.ModelMetadata)">
      <summary>Determines whether the template has been visited by the user.</summary>
      <returns>true if the template has been visited by the user; otherwise, false.</returns>
      <param name="metadata">An object that encapsulates information that describes the model.</param>
    </member>
    <member name="T:System.Web.Mvc.UrlHelper">
      <summary>Contains methods to build URLs for ASP.NET MVC within an application.</summary>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.#ctor(System.Web.Routing.RequestContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.UrlHelper" /> class using the specified request context.</summary>
      <param name="requestContext">An object that contains information about the current request and about the route that it matched.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.#ctor(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.UrlHelper" /> class by using the specified request context and route collection.</summary>
      <param name="requestContext">An object that contains information about the current request and about the route that it matched.</param>
      <param name="routeCollection">A collection of routes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext" /> or the <paramref name="routeCollection" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.Object)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name and route values.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name and controller name.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Object)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name, controller name, and route values.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Object,System.String)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name, controller name, route values, and protocol to use.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name, controller name, and route values.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Web.Routing.RouteValueDictionary,System.String,System.String)">
      <summary>Generates a fully qualified URL for an action method by using the specified action name, controller name, route values, protocol to use, and host name.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Generates a fully qualified URL to an action method for the specified action name and route values.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Content(System.String)">
      <summary>Converts a virtual (relative) path to an application absolute path.</summary>
      <returns>The application absolute path.</returns>
      <param name="contentPath">The virtual path of the content.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Encode(System.String)">
      <summary>Encodes special characters in a URL string into character-entity equivalents.</summary>
      <returns>An encoded URL string.</returns>
      <param name="url">The text to encode.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.GenerateContentUrl(System.String,System.Web.HttpContextBase)">
      <summary>Returns a string that contains a content URL.</summary>
      <returns>A string that contains a content URL.</returns>
      <param name="contentPath">The content path.</param>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.GenerateUrl(System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.Boolean)">
      <summary>Returns a string that contains a URL.</summary>
      <returns>A string that contains a URL.</returns>
      <param name="routeName">The route name.</param>
      <param name="actionName">The action name.</param>
      <param name="controllerName">The controller name.</param>
      <param name="protocol">The HTTP protocol.</param>
      <param name="hostName">The host name.</param>
      <param name="fragment">The fragment.</param>
      <param name="routeValues">The route values.</param>
      <param name="routeCollection">The route collection.</param>
      <param name="requestContext">The request context.</param>
      <param name="includeImplicitMvcValues">true to include implicit MVC values; otherwise false.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.GenerateUrl(System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.Boolean)">
      <summary>Returns a string that contains a URL.</summary>
      <returns>A string that contains a URL.</returns>
      <param name="routeName">The route name.</param>
      <param name="actionName">The action name.</param>
      <param name="controllerName">The controller name.</param>
      <param name="routeValues">The route values.</param>
      <param name="routeCollection">The route collection.</param>
      <param name="requestContext">The request context.</param>
      <param name="includeImplicitMvcValues">true to include implicit MVC values; otherwise. false.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.HttpRouteUrl(System.String,System.Object)">
      <summary>Generates a fully qualified URL for the specified route values.</summary>
      <returns>A fully qualified URL for the specified route values.</returns>
      <param name="routeName">The route name.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.HttpRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Generates a fully qualified URL for the specified route values.</summary>
      <returns>A fully qualified URL for the specified route values.</returns>
      <param name="routeName">The route name.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.IsLocalUrl(System.String)">
      <summary>Returns a value that indicates whether the URL is local.</summary>
      <returns>true if the URL is local; otherwise, false.</returns>
      <param name="url">The URL.</param>
    </member>
    <member name="P:System.Web.Mvc.UrlHelper.RequestContext">
      <summary>Gets information about an HTTP request that matches a defined route.</summary>
      <returns>The request context.</returns>
    </member>
    <member name="P:System.Web.Mvc.UrlHelper.RouteCollection">
      <summary>Gets a collection that contains the routes that are registered for the application.</summary>
      <returns>The route collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.Object)">
      <summary>Generates a fully qualified URL for the specified route values.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String)">
      <summary>Generates a fully qualified URL for the specified route name.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeName">The name of the route that is used to generate the URL.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Object)">
      <summary>Generates a fully qualified URL for the specified route values by using a route name.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeName">The name of the route that is used to generate the URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Object,System.String)">
      <summary>Generates a fully qualified URL for the specified route values by using a route name and the protocol to use.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeName">The name of the route that is used to generate the URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Generates a fully qualified URL for the specified route values by using a route name.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeName">The name of the route that is used to generate the URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Web.Routing.RouteValueDictionary,System.String,System.String)">
      <summary>Generates a fully qualified URL for the specified route values by using the specified route name, protocol to use, and host name.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeName">The name of the route that is used to generate the URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.Web.Routing.RouteValueDictionary)">
      <summary>Generates a fully qualified URL for the specified route values.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="T:System.Web.Mvc.UrlParameter">
      <summary>Represents an optional parameter that is used by the <see cref="T:System.Web.Mvc.MvcHandler" /> class during routing.</summary>
    </member>
    <member name="F:System.Web.Mvc.UrlParameter.Optional">
      <summary>Contains the read-only value for the optional parameter.</summary>
    </member>
    <member name="M:System.Web.Mvc.UrlParameter.ToString">
      <summary>Returns an empty string. This method supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.</summary>
      <returns>An empty string.</returns>
    </member>
    <member name="T:System.Web.Mvc.ValidatableObjectAdapter">
      <summary>Provides an object adapter that can be validated.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidatableObjectAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValidatableObjectAdapter" /> class.</summary>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.ValidatableObjectAdapter.Validate(System.Object)">
      <summary>Validates the specified object.</summary>
      <returns>A list of validation results.</returns>
      <param name="container">The container.</param>
    </member>
    <member name="T:System.Web.Mvc.ValidateAntiForgeryTokenAttribute">
      <summary>Represents an attribute that is used to prevent forgery of a request.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidateAntiForgeryTokenAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValidateAntiForgeryTokenAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidateAntiForgeryTokenAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when authorization is required.</summary>
      <param name="filterContext">The filter context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ValidateAntiForgeryTokenAttribute.Salt">
      <summary>Gets or sets the salt string.</summary>
      <returns>The salt string.</returns>
    </member>
    <member name="T:System.Web.Mvc.ValidateInputAttribute">
      <summary>Represents an attribute that is used to mark action methods whose input must be validated.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidateInputAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValidateInputAttribute" /> class.</summary>
      <param name="enableValidation">true to enable validation.</param>
    </member>
    <member name="P:System.Web.Mvc.ValidateInputAttribute.EnableValidation">
      <summary>Gets or sets a value that indicates whether to enable validation.</summary>
      <returns>true if validation is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValidateInputAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when authorization is required.</summary>
      <param name="filterContext">The filter context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderCollection">
      <summary>Represents the collection of value-provider objects for the application.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.IValueProvider})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderCollection" /> class and registers the specified value providers.</summary>
      <param name="list">The list of value providers to register.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.ContainsPrefix(System.String)">
      <summary>Determines whether the collection contains the specified prefix.</summary>
      <returns>true if the collection contains the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to search for.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.GetKeysFromPrefix(System.String)">
      <summary>Gets the keys using the specified prefix.</summary>
      <returns>They keys.</returns>
      <param name="prefix">The prefix.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.GetValue(System.String)">
      <summary>Returns a value object using the specified key.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key of the value object to retrieve.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.GetValue(System.String,System.Boolean)">
      <summary>Returns a value object using the specified key and skip-validation parameter.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key of the value object to retrieve.</param>
      <param name="skipValidation">true to specify that validation should be skipped; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.InsertItem(System.Int32,System.Web.Mvc.IValueProvider)">
      <summary>Inserts the specified value-provider object into the collection at the specified index location.</summary>
      <param name="index">The zero-based index location at which to insert the value provider into the collection.</param>
      <param name="item">The value-provider object to insert.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.SetItem(System.Int32,System.Web.Mvc.IValueProvider)">
      <summary>Replaces the value provider at the specified index location with a new value provider.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderDictionary">
      <summary>Represents a dictionary of value providers for the application.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderDictionary" /> class.</summary>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult})">
      <summary>Adds the specified item to the collection of value providers.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Add(System.String,System.Object)">
      <summary>Adds an element that has the specified key and value to the collection of value providers.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element that has the specified key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Add(System.String,System.Web.Mvc.ValueProviderResult)">
      <summary>Adds an element that has the specified key and value to the collection of value providers.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element that has the specified key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Clear">
      <summary>Removes all items from the collection of value providers.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult})">
      <summary>Determines whether the collection of value providers contains the specified item.</summary>
      <returns>true if <paramref name="item" /> is found in the collection of value providers; otherwise, false.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.ContainsKey(System.String)">
      <summary>Determines whether the collection of value providers contains an element that has the specified key.</summary>
      <returns>true if the collection of value providers contains an element that has the key; otherwise, false.</returns>
      <param name="key">The key of the element to find in the <see cref="T:System.Collections.Generic.IDictionary`2" /> instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.ControllerContext">
      <summary>Gets or sets the controller context.</summary>
      <returns>The controller context.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult}[],System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at the specified index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.ICollection`1" /> object. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying starts.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type <paramref name="T" /> cannot be cast automatically to the type of the destination array.</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Count">
      <summary>Gets the number of elements in the collection.</summary>
      <returns>The number of elements in the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Item(System.String)">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.ValueProviderResult" /> object that has the specified key.</summary>
      <returns>The <see cref="T:System.Web.Mvc.ValueProviderResult" /> object.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Keys">
      <summary>Gets a collection that contains the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" /> instance.</summary>
      <returns>A collection that contains the keys of the object that implements the <see cref="T:System.Collections.Generic.IDictionary`2" /> interface.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult})">
      <summary>Removes the first occurrence of the specified item from the collection of value providers.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the collection; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the collection.</returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Remove(System.String)">
      <summary>Removes the element that has the specified key from the collection of value providers.</summary>
      <returns>true if the element was successfully removed; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the collection.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through a collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.System#Web#Mvc#IValueProvider#ContainsPrefix(System.String)">
      <summary>Determines whether the collection contains the specified prefix.</summary>
      <returns>true if the collection contains the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to search for.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.System#Web#Mvc#IValueProvider#GetValue(System.String)">
      <summary>Returns a value object using the specified key.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key of the value object to return.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.TryGetValue(System.String,System.Web.Mvc.ValueProviderResult@)">
      <summary>Gets the value of the element that has the specified key.</summary>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key of the element to get.</param>
      <param name="value">When this method returns, the value that is associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Values">
      <summary>Gets a collection that contains the values in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</summary>
      <returns>A collection of the values in the object that implements the <see cref="T:System.Collections.Generic.IDictionary`2" /> interface.</returns>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderFactories">
      <summary>Represents a container for value-provider factory objects.</summary>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderFactories.Factories">
      <summary>Gets the collection of value-provider factories for the application.</summary>
      <returns>The collection of value-provider factory objects.</returns>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderFactory">
      <summary>Represents a factory for creating value-provider objects.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a value-provider object for the specified controller context.</summary>
      <returns>A value-provider object.</returns>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderFactoryCollection">
      <summary>Represents the collection of value-provider factories for the application.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderFactoryCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.ValueProviderFactory})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderFactoryCollection" /> class using the specified list of value-provider factories.</summary>
      <param name="list">A list of value-provider factories to initialize the collection with.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns the value-provider factory for the specified controller context.</summary>
      <returns>The value-provider factory object for the specified controller context.</returns>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.InsertItem(System.Int32,System.Web.Mvc.ValueProviderFactory)">
      <summary>Inserts the specified value-provider factory object at the specified index location.</summary>
      <param name="index">The zero-based index location at which to insert the value provider into the collection.</param>
      <param name="item">The value-provider factory object to insert.</param>
      <exception cref="ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.SetItem(System.Int32,System.Web.Mvc.ValueProviderFactory)">
      <summary>Sets the specified value-provider factory object at the given index location.</summary>
      <param name="index">The zero-based index location at which to insert the value provider into the collection.</param>
      <param name="item">The value-provider factory object to set.</param>
      <exception cref="ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderResult">
      <summary>Represents the result of binding a value (such as from a form post or query string) to an action-method argument property, or to the argument itself.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.#ctor(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderResult" /> class by using the specified raw value, attempted value, and culture information.</summary>
      <param name="rawValue">The raw value.</param>
      <param name="attemptedValue">The attempted value.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderResult.AttemptedValue">
      <summary>Gets or sets the raw value that is converted to a string for display.</summary>
      <returns>The raw value.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.ConvertTo(System.Type)">
      <summary>Converts the value that is encapsulated by this result to the specified type.</summary>
      <returns>The converted value.</returns>
      <param name="type">The target type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.ConvertTo(System.Type,System.Globalization.CultureInfo)">
      <summary>Converts the value that is encapsulated by this result to the specified type by using the specified culture information.</summary>
      <returns>The converted value.</returns>
      <param name="type">The target type.</param>
      <param name="culture">The culture to use in the conversion.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderResult.Culture">
      <summary>Gets or sets the culture.</summary>
      <returns>The culture.</returns>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderResult.RawValue">
      <summary>Gets or set the raw value that is supplied by the value provider.</summary>
      <returns>The raw value.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewContext">
      <summary>Encapsulates information that is related to rendering a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.IView,System.Web.Mvc.ViewDataDictionary,System.Web.Mvc.TempDataDictionary,System.IO.TextWriter)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewContext" /> class by using the specified controller context, view, view data dictionary, temporary data dictionary, and text writer.</summary>
      <param name="controllerContext">Encapsulates information about the HTTP request.</param>
      <param name="view">The view to render.</param>
      <param name="viewData">The dictionary that contains the data that is required in order to render the view.</param>
      <param name="tempData">The dictionary that contains temporary data for the view.</param>
      <param name="writer">The text writer object that is used to write HTML output.</param>
      <exception cref="T:System.ArgumentNullException">One of the parameters is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.ClientValidationEnabled">
      <summary>Gets or sets a value that indicates whether client-side validation is enabled.</summary>
      <returns>true if client-side validation is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.FormContext">
      <summary>Gets or sets an object that encapsulates information that is required in order to validate and process the input data from an HTML form.</summary>
      <returns>An object that encapsulates information that is required in order to validate and process the input data from an HTML form.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewContext.OutputClientValidation">
      <summary>Writes the client validation information to the HTTP response.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.TempData">
      <summary>Gets data that is associated with this request and that is available for only one request.</summary>
      <returns>The temporary data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.UnobtrusiveJavaScriptEnabled">
      <summary>Gets or sets a value that indicates whether unobtrusive JavaScript is enabled.</summary>
      <returns>true if unobtrusive JavaScript is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.View">
      <summary>Gets an object that implements the <see cref="T:System.Web.Mvc.IView" /> interface to render in the browser.</summary>
      <returns>The view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.ViewBag">
      <summary>Gets the dynamic view data dictionary.</summary>
      <returns>The dynamic view data dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.ViewData">
      <summary>Gets the view data that is passed to the view.</summary>
      <returns>The view data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.Writer">
      <summary>Gets or sets the text writer object that is used to write HTML output.</summary>
      <returns>The object that is used to write the HTML output.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewDataDictionary">
      <summary>Represents a container that is used to pass data between a controller and a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> class by using the specified model.</summary>
      <param name="model">The model.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.#ctor(System.Web.Mvc.ViewDataDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> class by using the specified dictionary.</summary>
      <param name="dictionary">The dictionary.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dictionary" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds the specified item to the collection.</summary>
      <param name="item">The object to add to the collection.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Add(System.String,System.Object)">
      <summary>Adds an element to the collection using the specified key and value .</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Clear">
      <summary>Removes all items from the collection.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Determines whether the collection contains the specified item.</summary>
      <returns>true if <paramref name="item" /> is found in the collection; otherwise, false.</returns>
      <param name="item">The object to locate in the collection.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.ContainsKey(System.String)">
      <summary>Determines whether the collection contains an element that has the specified key.</summary>
      <returns>true if the collection contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key of the element to locate in the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at a particular index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or- The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or- Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Count">
      <summary>Gets the number of elements in the collection.</summary>
      <returns>The number of elements in the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Eval(System.String)">
      <summary>Evaluates the specified expression.</summary>
      <returns>The results of the evaluation.</returns>
      <param name="expression">The expression.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Eval(System.String,System.String)">
      <summary>Evaluates the specified expression by using the specified format.</summary>
      <returns>The results of the evaluation.</returns>
      <param name="expression">The expression.</param>
      <param name="format">The format.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.GetViewDataInfo(System.String)">
      <summary>Returns information about the view data as defined by the <paramref name="expression" /> parameter.</summary>
      <returns>An object that contains the view data information that is defined by the <paramref name="expression" /> parameter.</returns>
      <param name="expression">A set of key/value pairs that define the view-data information to return.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is either null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Item(System.String)">
      <summary>Gets or sets the item that is associated with the specified key.</summary>
      <returns>The value of the selected item.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Keys">
      <summary>Gets a collection that contains the keys of this dictionary.</summary>
      <returns>A collection that contains the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Model">
      <summary>Gets or sets the model that is associated with the view data.</summary>
      <returns>The model that is associated with the view data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.ModelMetadata">
      <summary>Gets or sets information about the model.</summary>
      <returns>Information about the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.ModelState">
      <summary>Gets the state of the model.</summary>
      <returns>The state of the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Removes the first occurrence of a specified object from the collection.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the collection; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the collection.</returns>
      <param name="item">The object to remove from the collection.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Remove(System.String)">
      <summary>Removes the element from the collection using the specified key.</summary>
      <returns>true if the element is successfully removed; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the original collection.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.SetModel(System.Object)">
      <summary>Sets the data model to use for the view.</summary>
      <param name="value">The data model to use for the view.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.TemplateInfo">
      <summary>Gets or sets an object that encapsulates information about the current template context.</summary>
      <returns>An object that contains information about the current template.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.TryGetValue(System.String,System.Object@)">
      <summary>Attempts to retrieve the value that is associated with the specified key.</summary>
      <returns>true if the collection contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, the value that is associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Values">
      <summary>Gets a collection that contains the values in this dictionary.</summary>
      <returns>A collection that contains the values of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewDataDictionary`1">
      <summary>Represents a container that is used to pass strongly typed data between a controller and a view.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.#ctor(System.Web.Mvc.ViewDataDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> class by using the specified view data dictionary.</summary>
      <param name="viewDataDictionary">An existing view data dictionary to copy into this instance.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> class by using the specified model.</summary>
      <param name="model">The data model to use for the view.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary`1.Model">
      <summary>Gets or sets the model.</summary>
      <returns>A reference to the data model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary`1.ModelMetadata">
      <summary>Gets or sets information about the model.</summary>
      <returns>Information about the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.SetModel(System.Object)">
      <summary>Sets the data model to use for the view.</summary>
      <param name="value">The data model to use for the view.</param>
      <exception cref="T:System.InvalidOperationException">An error occurred while the model was being set.</exception>
    </member>
    <member name="T:System.Web.Mvc.ViewDataInfo">
      <summary>Encapsulates information about the current template content that is used to develop templates and about HTML helpers that interact with templates.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataInfo" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataInfo.#ctor(System.Func{System.Object})">
      <summary>Initializes a new instance of the T:System.Web.Mvc.ViewDataInfo class and associates a delegate for accessing the view data information.</summary>
      <param name="valueAccessor">A delegate that defines how the view data information is accessed.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewDataInfo.Container">
      <summary>Gets or sets the object that contains the values to be displayed by the template.</summary>
      <returns>The object that contains the values to be displayed by the template.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataInfo.PropertyDescriptor">
      <summary>Gets or sets the description of the property to be displayed by the template.</summary>
      <returns>The description of the property to be displayed by the template.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataInfo.Value">
      <summary>Gets or sets the current value to be displayed by the template.</summary>
      <returns>The current value to be displayed by the template.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewEngineCollection">
      <summary>Represents a collection of view engines that are available to the application.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewEngineCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.IViewEngine})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewEngineCollection" /> class by using the specified list of view engines.</summary>
      <param name="list">The list that is wrapped by the new collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.FindPartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Finds the specified partial view by using the specified controller context.</summary>
      <returns>The partial view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="partialViewName" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.FindView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>Finds the specified view by using the specified controller context and master view.</summary>
      <returns>The view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="viewName">The name of the view.</param>
      <param name="masterName">The name of the master view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="viewName" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.InsertItem(System.Int32,System.Web.Mvc.IViewEngine)">
      <summary>Inserts an element into the collection at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than the number of items in the collection.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.SetItem(System.Int32,System.Web.Mvc.IViewEngine)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than the number of items in the collection.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ViewEngineResult">
      <summary>Represents the result of locating a view engine.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineResult.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewEngineResult" /> class by using the specified searched locations.</summary>
      <param name="searchedLocations">The searched locations.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="searchedLocations" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineResult.#ctor(System.Web.Mvc.IView,System.Web.Mvc.IViewEngine)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewEngineResult" /> class by using the specified view and view engine.</summary>
      <param name="view">The view.</param>
      <param name="viewEngine">The view engine.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="view " />or <paramref name="viewEngine" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewEngineResult.SearchedLocations">
      <summary>Gets or sets the searched locations.</summary>
      <returns>The searched locations.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewEngineResult.View">
      <summary>Gets or sets the view.</summary>
      <returns>The view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewEngineResult.ViewEngine">
      <summary>Gets or sets the view engine.</summary>
      <returns>The view engine.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewEngines">
      <summary>Represents a collection of view engines that are available to the application.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewEngines.Engines">
      <summary>Gets the view engines.</summary>
      <returns>The view engines.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewMasterPage">
      <summary>Represents the information that is needed to build a master view page.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewMasterPage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewMasterPage" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Ajax">
      <summary>Gets the AJAX script for the master page.</summary>
      <returns>The AJAX script for the master page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Html">
      <summary>Gets the HTML for the master page.</summary>
      <returns>The HTML for the master page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Model">
      <summary>Gets the model.</summary>
      <returns>The model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.TempData">
      <summary>Gets the temporary data.</summary>
      <returns>The temporary data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Url">
      <summary>Gets the URL.</summary>
      <returns>The URL.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.ViewBag">
      <summary>Gets the dynamic view-bag dictionary.</summary>
      <returns>The dynamic view-bag dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.ViewContext">
      <summary>Gets the view context.</summary>
      <returns>The view context.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.ViewData">
      <summary>Gets the view data.</summary>
      <returns>The view data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Writer">
      <summary>Gets the writer that is used to render the master page.</summary>
      <returns>The writer that is used to render the master page.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewMasterPage`1">
      <summary>Represents the information that is required in order to build a strongly typed master view page.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewMasterPage`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewMasterPage`1" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.Ajax">
      <summary>Gets the AJAX script for the master page.</summary>
      <returns>The AJAX script for the master page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.Html">
      <summary>Gets the HTML for the master page.</summary>
      <returns>The HTML for the master page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.Model">
      <summary>Gets the model.</summary>
      <returns>A reference to the data model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.ViewData">
      <summary>Gets the view data.</summary>
      <returns>The view data.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewPage">
      <summary>Represents the properties and methods that are needed to render a view as a Web Forms page.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewPage" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Ajax">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.AjaxHelper" /> object that is used to render HTML in Ajax scenarios.</summary>
      <returns>The Ajax helper object that is associated with the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Html">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.HtmlHelper" /> object that is used to render HTML elements.</summary>
      <returns>The HTML helper object that is associated with the view.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.InitHelpers">
      <summary>Initializes the <see cref="P:System.Web.Mvc.ViewPage.Ajax" />, <see cref="P:System.Web.Mvc.ViewPage.Html" />, and <see cref="P:System.Web.Mvc.ViewPage.Url" /> properties.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.MasterLocation">
      <summary>Gets or sets the path of the master view.</summary>
      <returns>The path of the master view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Model">
      <summary>Gets the Model property of the associated <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object.</summary>
      <returns>The Model property of the associated <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.OnPreInit(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Web.UI.Page.PreInit" /> event at the beginning of page initialization.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.ProcessRequest(System.Web.HttpContext)">
      <summary>Enables processing of the specified HTTP request by the ASP.NET MVC framework.</summary>
      <param name="context">An object that encapsulates HTTP-specific information about the current HTTP request.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.Render(System.Web.UI.HtmlTextWriter)">
      <summary>Initializes the <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the page content to be rendered.</summary>
      <param name="writer">The object that receives the page content.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.RenderView(System.Web.Mvc.ViewContext)">
      <summary>Renders the view page to the response using the specified view context.</summary>
      <param name="viewContext">An object that encapsulates the information that is required in order to render the view, which includes the controller context, form context, the temporary data, and the view data for the associated view.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.SetTextWriter(System.IO.TextWriter)">
      <summary>Sets the text writer that is used to render the view to the response.</summary>
      <param name="textWriter">The writer that is used to render the view to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>Sets the view data dictionary for the associated view.</summary>
      <param name="viewData">A dictionary of data to pass to the view.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.TempData">
      <summary>Gets the temporary data to pass to the view.</summary>
      <returns>The temporary data to pass to the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Url">
      <summary>Gets or sets the URL of the rendered page.</summary>
      <returns>The URL of the rendered page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.ViewBag">
      <summary>Gets the view bag.</summary>
      <returns>The view bag.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.ViewContext">
      <summary>Gets or sets the information that is used to render the view.</summary>
      <returns>The information that is used to render the view, which includes the form context, the temporary data, and the view data of the associated view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.ViewData">
      <summary>Gets or sets a dictionary that contains data to pass between the controller and the view.</summary>
      <returns>A dictionary that contains data to pass between the controller and the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Writer">
      <summary>Gets the text writer that is used to render the view to the response.</summary>
      <returns>The text writer that is used to render the view to the response.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewPage`1">
      <summary>Represents the information that is required in order to render a strongly typed view as a Web Forms page.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewPage`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewPage`1" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.Ajax">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.AjaxHelper`1" /> object that supports rendering HTML in Ajax scenarios.</summary>
      <returns>The Ajax helper object that is associated with the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.Html">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.HtmlHelper" /> object that provides support for rendering elements.</summary>
      <returns>The HTML helper object that is associated with the view.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage`1.InitHelpers">
      <summary>Instantiates and initializes the <see cref="P:System.Web.Mvc.ViewPage`1.Ajax" /> and <see cref="P:System.Web.Mvc.ViewPage`1.Html" /> properties.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.Model">
      <summary>Gets the <see cref="P:System.Web.Mvc.ViewDataDictionary`1.Model" /> property of the associated <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> object.</summary>
      <returns>A reference to the data model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage`1.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>Sets the view data dictionary for the associated view.</summary>
      <param name="viewData">A dictionary of data to pass to the view.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.ViewData">
      <summary>Gets or sets a dictionary that contains data to pass between the controller and the view.</summary>
      <returns>A dictionary that contains data to pass between the controller and the view.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewResult">
      <summary>Represents a class that is used to render a view by using an <see cref="T:System.Web.Mvc.IView" /> instance that is returned by an <see cref="T:System.Web.Mvc.IViewEngine" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResult.FindView(System.Web.Mvc.ControllerContext)">
      <summary>Searches the registered view engines and returns the object that is used to render the view.</summary>
      <returns>The object that is used to render the view.</returns>
      <param name="context">The controller context.</param>
      <exception cref="T:System.InvalidOperationException">An error occurred while the method was searching for the view.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewResult.MasterName">
      <summary>Gets the name of the master view (such as a master page or template) to use when the view is rendered.</summary>
      <returns>The name of the master view.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewResultBase">
      <summary>Represents a base class that is used to provide the model to the view and then render the view to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResultBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewResultBase" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResultBase.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>When called by the action invoker, renders the view to the response.</summary>
      <param name="context">The context that the result is executed in.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewResultBase.FindView(System.Web.Mvc.ControllerContext)">
      <summary>Returns the <see cref="T:System.Web.Mvc.ViewEngineResult" /> object that is used to render the view.</summary>
      <returns>The view engine.</returns>
      <param name="context">The context.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.Model">
      <summary>Gets the view data model.</summary>
      <returns>The view data model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.TempData">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.TempDataDictionary" /> object for this result.</summary>
      <returns>The temporary data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.View">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.IView" /> object that is rendered to the response.</summary>
      <returns>The view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewBag">
      <summary>Gets the view bag.</summary>
      <returns>The view bag.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewData">
      <summary>Gets or sets the view data <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object for this result.</summary>
      <returns>The view data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewEngineCollection">
      <summary>Gets or sets the collection of view engines that are associated with this result.</summary>
      <returns>The collection of view engines.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewName">
      <summary>Gets or sets the name of the view to render.</summary>
      <returns>The name of the view.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewStartPage">
      <summary>Provides an abstract class that can be used to implement a view start (master) page.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewStartPage.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Web.Mvc.ViewStartPage" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewStartPage.Html">
      <summary>When implemented in a derived class, gets the HTML markup for the view start page.</summary>
      <returns>The HTML markup for the view start page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewStartPage.Url">
      <summary>When implemented in a derived class, gets the URL for the view start page.</summary>
      <returns>The URL for the view start page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewStartPage.ViewContext">
      <summary>When implemented in a derived class, gets the view context for the view start page.</summary>
      <returns>The view context for the view start page.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewTemplateUserControl">
      <summary>Provides a container for <see cref="T:System.Web.Mvc.TemplateInfo" /> objects.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewTemplateUserControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewTemplateUserControl" /> class.</summary>
    </member>
    <member name="T:System.Web.Mvc.ViewTemplateUserControl`1">
      <summary>Provides a container for <see cref="T:System.Web.Mvc.TemplateInfo" /> objects.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewTemplateUserControl`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewTemplateUserControl`1" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewTemplateUserControl`1.FormattedModelValue">
      <summary>Gets the formatted value.</summary>
      <returns>The formatted value.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewType">
      <summary>Represents the type of a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewType" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewType.TypeName">
      <summary>Gets or sets the name of the type.</summary>
      <returns>The name of the type.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewUserControl">
      <summary>Represents the information that is needed to build a user control.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewUserControl" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Ajax">
      <summary>Gets the AJAX script for the view.</summary>
      <returns>The AJAX script for the view.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.EnsureViewData">
      <summary>Ensures that view data is added to the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object of the user control if the view data exists.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Html">
      <summary>Gets the HTML for the view.</summary>
      <returns>The HTML for the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Model">
      <summary>Gets the model.</summary>
      <returns>The model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.RenderView(System.Web.Mvc.ViewContext)">
      <summary>Renders the view by using the specified view context.</summary>
      <param name="viewContext">The view context.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.SetTextWriter(System.IO.TextWriter)">
      <summary>Sets the text writer that is used to render the view to the response.</summary>
      <param name="textWriter">The writer that is used to render the view to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>Sets the view-data dictionary by using the specified view data.</summary>
      <param name="viewData">The view data.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.TempData">
      <summary>Gets the temporary-data dictionary.</summary>
      <returns>The temporary-data dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Url">
      <summary>Gets the URL for the view.</summary>
      <returns>The URL for the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewBag">
      <summary>Gets the view bag.</summary>
      <returns>The view bag.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewContext">
      <summary>Gets or sets the view context.</summary>
      <returns>The view context.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewData">
      <summary>Gets or sets the view-data dictionary.</summary>
      <returns>The view-data dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewDataKey">
      <summary>Gets or sets the view-data key.</summary>
      <returns>The view-data key.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Writer">
      <summary>Gets the writer that is used to render the view to the response.</summary>
      <returns>The writer that is used to render the view to the response.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewUserControl`1">
      <summary>Represents the information that is required in order to build a strongly typed user control.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewUserControl`1" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.Ajax">
      <summary>Gets the AJAX script for the view.</summary>
      <returns>The AJAX script for the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.Html">
      <summary>Gets the HTML for the view.</summary>
      <returns>The HTML for the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.Model">
      <summary>Gets the model.</summary>
      <returns>A reference to the data model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl`1.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>Sets the view data for the view.</summary>
      <param name="viewData">The view data.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.ViewData">
      <summary>Gets or sets the view data.</summary>
      <returns>The view data.</returns>
    </member>
    <member name="T:System.Web.Mvc.VirtualPathProviderViewEngine">
      <summary>Represents an abstract base-class implementation of the <see cref="T:System.Web.Mvc.IViewEngine" /> interface.</summary>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.VirtualPathProviderViewEngine" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.AreaMasterLocationFormats">
      <summary>Gets or sets the area-enabled master location formats.</summary>
      <returns>The area-enabled master location formats.</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.AreaPartialViewLocationFormats">
      <summary>Gets or sets the area-enabled partial-view location formats.</summary>
      <returns>The area-enabled partial-view location formats.</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.AreaViewLocationFormats">
      <summary>Gets or sets the area-enabled view location formats.</summary>
      <returns>The area-enabled view location formats.</returns>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Creates the specified partial view by using the specified controller context.</summary>
      <returns>A reference to the partial view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="partialPath">The partial path for the new partial view.</param>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>Creates the specified view by using the controller context, path of the view, and path of the master view.</summary>
      <returns>A reference to the view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The path of the view.</param>
      <param name="masterPath">The path of the master view.</param>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.DisplayModeProvider">
      <summary>Gets or sets the display mode provider.</summary>
      <returns>The display mode provider.</returns>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.FileExists(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Returns a value that indicates whether the file is in the specified path by using the specified controller context.</summary>
      <returns>true if the file is in the specified path; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="virtualPath">The virtual path.</param>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.FileExtensions">
      <summary>Gets or sets the file-name extensions that are used to locate a view.</summary>
      <returns>The file-name extensions that are used to locate a view.</returns>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.FindPartialView(System.Web.Mvc.ControllerContext,System.String,System.Boolean)">
      <summary>Finds the specified partial view by using the specified controller context.</summary>
      <returns>The partial view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="useCache">true to use the cached partial view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="partialViewName" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.FindView(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean)">
      <summary>Finds the specified view by using the specified controller context and master view name.</summary>
      <returns>The page view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="viewName">The name of the view.</param>
      <param name="masterName">The name of the master view.</param>
      <param name="useCache">true to use the cached view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="viewName" /> parameter is null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.MasterLocationFormats">
      <summary>Gets or sets the master location formats.</summary>
      <returns>The master location formats.</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.PartialViewLocationFormats">
      <summary>Gets or sets the partial-view location formats.</summary>
      <returns>The partial-view location formats.</returns>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.ReleaseView(System.Web.Mvc.ControllerContext,System.Web.Mvc.IView)">
      <summary>Releases the specified view by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="view">The view to release.</param>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.ViewLocationCache">
      <summary>Gets or sets the view location cache.</summary>
      <returns>The view location cache.</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.ViewLocationFormats">
      <summary>Gets or sets the view location formats.</summary>
      <returns>The view location formats.</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.VirtualPathProvider">
      <summary>Gets or sets the virtual path provider.</summary>
      <returns>The virtual path provider.</returns>
    </member>
    <member name="T:System.Web.Mvc.WebFormView">
      <summary>Represents the information that is needed to build a Web Forms page in ASP.NET MVC.</summary>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.#ctor(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.WebFormView" /> class using the controller context and view path.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The view path.</param>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.#ctor(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.WebFormView" /> class using the controller context, view path, and the path to the master page.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The view path.</param>
      <param name="masterPath">The path to the master page.</param>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.#ctor(System.Web.Mvc.ControllerContext,System.String,System.String,System.Web.Mvc.IViewPageActivator)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.WebFormView" /> class using the controller context, view path, the path to the master page, and a <see cref="T:System.Web.Mvc.IViewPageActivator" /> instance.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The view path.</param>
      <param name="masterPath">The path to the master page.</param>
      <param name="viewPageActivator">An instance of the view page activator interface.</param>
    </member>
    <member name="P:System.Web.Mvc.WebFormView.MasterPath">
      <summary>Gets or sets the master path.</summary>
      <returns>The master path.</returns>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.RenderView(System.Web.Mvc.ViewContext,System.IO.TextWriter,System.Object)">
      <summary>Renders the view to the response.</summary>
      <param name="viewContext">An object that encapsulates the information that is required in order to render the view, which includes the controller context, form context, the temporary data, and the view data for the associated view.</param>
      <param name="writer">The text writer object that is used to write HTML output.</param>
      <param name="instance">The view page instance.</param>
    </member>
    <member name="T:System.Web.Mvc.WebFormViewEngine">
      <summary>Represents a view engine that is used to render a Web Forms page to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.WebFormViewEngine" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.#ctor(System.Web.Mvc.IViewPageActivator)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.WebFormViewEngine" /> class using the specified view page activator.</summary>
      <param name="viewPageActivator">An instance of a class that implements the <see cref="T:System.Web.Mvc.IViewPageActivator" /> interface.</param>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Creates the specified partial view by using the specified controller context.</summary>
      <returns>The partial view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="partialPath">The partial path.</param>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>Creates the specified view by using the specified controller context and the paths of the view and master view.</summary>
      <returns>The view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The view path.</param>
      <param name="masterPath">The master-view path.</param>
    </member>
    <member name="T:System.Web.Mvc.WebViewPage">
      <summary>Represents the properties and methods that are needed in order to render a view that uses ASP.NET Razor syntax.</summary>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.WebViewPage" /> class. </summary>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.Ajax">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.AjaxHelper" /> object that is used to render HTML using Ajax. </summary>
      <returns>The <see cref="T:System.Web.Mvc.AjaxHelper" /> object that is used to render HTML using Ajax.</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage.ConfigurePage(System.Web.WebPages.WebPageBase)">
      <summary>Sets the view context and view data for the page.</summary>
      <param name="parentPage">The parent page.</param>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.Context">
      <summary>Gets the <see cref="T:System.Web.HttpContext" /> object that is associated with the page.</summary>
      <returns>The <see cref="T:System.Web.HttpContext" /> object that is associated with the page.</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage.ExecutePageHierarchy">
      <summary>Runs the page hierarchy for the ASP.NET Razor execution pipeline.</summary>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.Html">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.HtmlHelper" /> object that is used to render HTML elements.</summary>
      <returns>The <see cref="T:System.Web.Mvc.HtmlHelper" /> object that is used to render HTML elements.</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage.InitHelpers">
      <summary>Initializes the <see cref="T:System.Web.Mvc.AjaxHelper" />, <see cref="T:System.Web.Mvc.HtmlHelper" />, and <see cref="T:System.Web.Mvc.UrlHelper" /> classes.</summary>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.Model">
      <summary>Gets the Model property of the associated <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object.</summary>
      <returns>The Model property of the associated <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object.</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>Sets the view data.</summary>
      <param name="viewData">The view data.</param>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.TempData">
      <summary>Gets the temporary data to pass to the view.</summary>
      <returns>The temporary data to pass to the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.Url">
      <summary>Gets or sets the URL of the rendered page.</summary>
      <returns>The URL of the rendered page.</returns>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.ViewBag">
      <summary>Gets the view bag.</summary>
      <returns>The view bag.</returns>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.ViewContext">
      <summary>Gets or sets the information that is used to render the view.</summary>
      <returns>The information that is used to render the view, which includes the form context, the temporary data, and the view data of the associated view.</returns>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.ViewData">
      <summary>Gets or sets a dictionary that contains data to pass between the controller and the view.</summary>
      <returns>A dictionary that contains data to pass between the controller and the view.</returns>
    </member>
    <member name="T:System.Web.Mvc.WebViewPage`1">
      <summary>Represents the properties and methods that are needed in order to render a view that uses ASP.NET Razor syntax.</summary>
      <typeparam name="TModel">The type of the view data model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.WebViewPage`1" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage`1.Ajax">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.AjaxHelper" /> object that is used to render HTML markup using Ajax.</summary>
      <returns>The <see cref="T:System.Web.Mvc.AjaxHelper" /> object that is used to render HTML markup using Ajax.</returns>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage`1.Html">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.HtmlHelper" /> object that is used to render HTML elements.</summary>
      <returns>The <see cref="T:System.Web.Mvc.HtmlHelper" /> object that is used to render HTML elements.</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage`1.InitHelpers">
      <summary>Initializes the <see cref="T:System.Web.Mvc.AjaxHelper" />, <see cref="T:System.Web.Mvc.HtmlHelper" />, and <see cref="T:System.Web.Mvc.UrlHelper" /> classes.</summary>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage`1.Model">
      <summary>Gets the Model property of the associated <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object.</summary>
      <returns>The Model property of the associated <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object.</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage`1.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>Sets the view data.</summary>
      <param name="viewData">The view data.</param>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage`1.ViewData">
      <summary>Gets or sets a dictionary that contains data to pass between the controller and the view.</summary>
      <returns>A dictionary that contains data to pass between the controller and the view.</returns>
    </member>
    <member name="T:System.Web.Mvc.Ajax.AjaxExtensions">
      <summary>Represents support for ASP.NET AJAX within an ASP.NET MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response. </summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element..</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response using the specified routing information.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response using the specified routing information.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response using the specified routing information.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response using the specified routing information.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response using the specified routing information.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.GlobalizationScript(System.Web.Mvc.AjaxHelper)">
      <summary>Returns an HTML script element that contains a reference to a globalization script that defines the culture information.</summary>
      <returns>A script element whose src attribute is set to the globalization script, as in the following example: &lt;script type="text/javascript"     src="/MvcApplication1/Scripts/Globalization/en-US.js"&gt;&lt;/script&gt;</returns>
      <param name="ajaxHelper">The AJAX helper object that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.GlobalizationScript(System.Web.Mvc.AjaxHelper,System.Globalization.CultureInfo)">
      <summary>Returns an HTML script element that contains a reference to a globalization script that defines the specified culture information.</summary>
      <returns>An HTML script element whose src attribute is set to the globalization script, as in the following example:&lt;script type="text/javascript"    src="/MvcApplication1/Scripts/Globalization/en-US.js"&gt;&lt;/script&gt;</returns>
      <param name="ajaxHelper">The AJAX helper object that this method extends.</param>
      <param name="cultureInfo">Encapsulates information about the target culture, such as date formats.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="cultureInfo" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="T:System.Web.Mvc.Ajax.AjaxOptions">
      <summary>Represents option settings for running Ajax scripts in an ASP.NET MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Ajax.AjaxOptions" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.Confirm">
      <summary>Gets or sets the message to display in a confirmation window before a request is submitted.</summary>
      <returns>The message to display in a confirmation window.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.HttpMethod">
      <summary>Gets or sets the HTTP request method ("Get" or "Post").</summary>
      <returns>The HTTP request method. The default value is "Post".</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.InsertionMode">
      <summary>Gets or sets the mode that specifies how to insert the response into the target DOM element.</summary>
      <returns>The insertion mode ("InsertAfter", "InsertBefore", or "Replace"). The default value is "Replace".</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.LoadingElementDuration">
      <summary>Gets or sets a value, in milliseconds, that controls the duration of the animation when showing or hiding the loading element.</summary>
      <returns>A value, in milliseconds, that controls the duration of the animation when showing or hiding the loading element.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.LoadingElementId">
      <summary>Gets or sets the id attribute of an HTML element that is displayed while the Ajax function is loading.</summary>
      <returns>The ID of the element that is displayed while the Ajax function is loading.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnBegin">
      <summary>Gets or sets the name of the JavaScript function to call immediately before the page is updated.</summary>
      <returns>The name of the JavaScript function to call before the page is updated.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnComplete">
      <summary>Gets or sets the JavaScript function to call when response data has been instantiated but before the page is updated.</summary>
      <returns>The JavaScript function to call when the response data has been instantiated.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnFailure">
      <summary>Gets or sets the JavaScript function to call if the page update fails.</summary>
      <returns>The JavaScript function to call if the page update fails.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnSuccess">
      <summary>Gets or sets the JavaScript function to call after the page is successfully updated.</summary>
      <returns>The JavaScript function to call after the page is successfully updated.</returns>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxOptions.ToUnobtrusiveHtmlAttributes">
      <summary>Returns the Ajax options as a collection of HTML attributes to support unobtrusive JavaScript.</summary>
      <returns>The Ajax options as a collection of HTML attributes to support unobtrusive JavaScript.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.UpdateTargetId">
      <summary>Gets or sets the ID of the DOM element to update by using the response from the server.</summary>
      <returns>The ID of the DOM element to update.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.Url">
      <summary>Gets or sets the URL to make the request to.</summary>
      <returns>The URL to make the request to.</returns>
    </member>
    <member name="T:System.Web.Mvc.Ajax.InsertionMode">
      <summary>Enumerates the AJAX script insertion modes.</summary>
    </member>
    <member name="F:System.Web.Mvc.Ajax.InsertionMode.Replace">
      <summary>Replace the element.</summary>
    </member>
    <member name="F:System.Web.Mvc.Ajax.InsertionMode.InsertBefore">
      <summary>Insert before the element.</summary>
    </member>
    <member name="F:System.Web.Mvc.Ajax.InsertionMode.InsertAfter">
      <summary>Insert after the element.</summary>
    </member>
    <member name="T:System.Web.Mvc.Async.AsyncActionDescriptor">
      <summary>Provides information about an asynchronous action method, such as its name, controller, parameters, attributes, and filters.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.AsyncActionDescriptor" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.BeginExecute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>Invokes the asynchronous action method by using the specified parameters and controller context.</summary>
      <returns>An object that contains the result of an asynchronous call.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameters">The parameters of the action method.</param>
      <param name="callback">The callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.EndExecute(System.IAsyncResult)">
      <summary>Returns the result of an asynchronous operation.</summary>
      <returns>The result of an asynchronous operation.</returns>
      <param name="asyncResult">An object that represents the status of an asynchronous operation.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Executes the asynchronous action method by using the specified parameters and controller context.</summary>
      <returns>The result of executing the asynchronous action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameters">The parameters of the action method.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.AsyncControllerActionInvoker">
      <summary>Represents a class that is responsible for invoking the action methods of an asynchronous controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.AsyncControllerActionInvoker" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.BeginInvokeAction(System.Web.Mvc.ControllerContext,System.String,System.AsyncCallback,System.Object)">
      <summary>Invokes the asynchronous action method by using the specified controller context, action name, callback method, and state.</summary>
      <returns>An object that contains the result of an asynchronous operation.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
      <param name="callback">The callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.BeginInvokeActionMethod(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>Invokes the asynchronous action method by using the specified controller context, action descriptor, parameters, callback method, and state.</summary>
      <returns>An object that contains the result of an asynchronous operation.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="parameters">The parameters for the asynchronous action method.</param>
      <param name="callback">The callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.BeginInvokeActionMethodWithFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IActionFilter},System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>Invokes the asynchronous action method by using the specified controller context, filters, action descriptor, parameters, callback method, and state.</summary>
      <returns>An object that contains the result of an asynchronous operation.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="filters">The filters.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="parameters">The parameters for the asynchronous action method.</param>
      <param name="callback">The callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeAction(System.IAsyncResult)">
      <summary>Cancels the action.</summary>
      <returns>true if the action was canceled; otherwise, false.</returns>
      <param name="asyncResult">The user-defined object that qualifies or contains information about an asynchronous operation.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(System.IAsyncResult)">
      <summary>Cancels the action.</summary>
      <returns>true if the action was canceled; otherwise, false.</returns>
      <param name="asyncResult">The user-defined object that qualifies or contains information about an asynchronous operation.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(System.IAsyncResult)">
      <summary>Cancels the action.</summary>
      <returns>true if the action was canceled; otherwise, false.</returns>
      <param name="asyncResult">The user-defined object that qualifies or contains information about an asynchronous operation.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.GetControllerDescriptor(System.Web.Mvc.ControllerContext)">
      <summary>Returns the controller descriptor.</summary>
      <returns>The controller descriptor.</returns>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.AsyncManager">
      <summary>Provides asynchronous operations for the <see cref="T:System.Web.Mvc.AsyncController" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.AsyncManager" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.#ctor(System.Threading.SynchronizationContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.AsyncManager" /> class using the synchronization context.</summary>
      <param name="syncContext">The synchronization context.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.Finish">
      <summary>Notifies ASP.NET that all asynchronous operations are complete.</summary>
    </member>
    <member name="E:System.Web.Mvc.Async.AsyncManager.Finished">
      <summary>Occurs when the <see cref="M:System.Web.Mvc.Async.AsyncManager.Finish" /> method is called.</summary>
    </member>
    <member name="P:System.Web.Mvc.Async.AsyncManager.OutstandingOperations">
      <summary>Gets the number of outstanding operations.</summary>
      <returns>The number of outstanding operations.</returns>
    </member>
    <member name="P:System.Web.Mvc.Async.AsyncManager.Parameters">
      <summary>Gets the parameters that were passed to the asynchronous completion method.</summary>
      <returns>The parameters that were passed to the asynchronous completion method.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.Sync(System.Action)">
      <summary>Executes a callback in the current synchronization context.</summary>
      <param name="action">The asynchronous action.</param>
    </member>
    <member name="P:System.Web.Mvc.Async.AsyncManager.Timeout">
      <summary>Gets or sets the asynchronous timeout value, in milliseconds.</summary>
      <returns>The asynchronous timeout value, in milliseconds.</returns>
    </member>
    <member name="T:System.Web.Mvc.Async.IAsyncActionInvoker">
      <summary>Defines the interface for an action invoker, which is used to invoke an asynchronous action in response to an HTTP request.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncActionInvoker.BeginInvokeAction(System.Web.Mvc.ControllerContext,System.String,System.AsyncCallback,System.Object)">
      <summary>Invokes the specified action.</summary>
      <returns>The status of the asynchronous result.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the asynchronous action.</param>
      <param name="callback">The callback method.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncActionInvoker.EndInvokeAction(System.IAsyncResult)">
      <summary>Cancels the asynchronous action.</summary>
      <returns>true if the asynchronous method could be canceled; otherwise, false.</returns>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.IAsyncController">
      <summary>Defines the methods that are required for an asynchronous controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncController.BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
      <summary>Executes the specified request context.</summary>
      <returns>The status of the asynchronous operation.</returns>
      <param name="requestContext">The request context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncController.EndExecute(System.IAsyncResult)">
      <summary>Ends the asynchronous operation.</summary>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.IAsyncManagerContainer">
      <summary>Provides a container for the asynchronous manager object.</summary>
    </member>
    <member name="P:System.Web.Mvc.Async.IAsyncManagerContainer.AsyncManager">
      <summary>Gets the asynchronous manager object.</summary>
      <returns>The asynchronous manager object.</returns>
    </member>
    <member name="T:System.Web.Mvc.Async.OperationCounter">
      <summary>Provides a container that maintains a count of pending asynchronous operations.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.OperationCounter" /> class.</summary>
    </member>
    <member name="E:System.Web.Mvc.Async.OperationCounter.Completed">
      <summary>Occurs when an asynchronous method completes.</summary>
    </member>
    <member name="P:System.Web.Mvc.Async.OperationCounter.Count">
      <summary>Gets the operation count.</summary>
      <returns>The operation count.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Decrement">
      <summary>Reduces the operation count by 1.</summary>
      <returns>The updated operation count.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Decrement(System.Int32)">
      <summary>Reduces the operation count by the specified value.</summary>
      <returns>The updated operation count.</returns>
      <param name="value">The number of operations to reduce the count by.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Increment">
      <summary>Increments the operation count by one.</summary>
      <returns>The updated operation count.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Increment(System.Int32)">
      <summary>Increments the operation count by the specified value.</summary>
      <returns>The updated operation count.</returns>
      <param name="value">The number of operations to increment the count by.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor">
      <summary>Provides information about an asynchronous action method, such as its name, controller, parameters, attributes, and filters.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.#ctor(System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.String,System.Web.Mvc.ControllerDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor" /> class.</summary>
      <param name="asyncMethodInfo">An object that contains information about the method that begins the asynchronous operation (the method whose name ends with "Asynch").</param>
      <param name="completedMethodInfo">An object that contains information about the completion method (method whose name ends with "Completed").</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerDescriptor">The controller descriptor.</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.ActionName">
      <summary>Gets the name of the action method.</summary>
      <returns>The name of the action method.</returns>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.AsyncMethodInfo">
      <summary>Gets the method information for the asynchronous action method.</summary>
      <returns>The method information for the asynchronous action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.BeginExecute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>Begins running the asynchronous action method by using the specified parameters and controller context.</summary>
      <returns>An object that contains the result of an asynchronous call.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameters">The parameters of the action method.</param>
      <param name="callback">The callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.CompletedMethodInfo">
      <summary>Gets the method information for the asynchronous completion method.</summary>
      <returns>The method information for the asynchronous completion method.</returns>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.ControllerDescriptor">
      <summary>Gets the controller descriptor for the asynchronous action method.</summary>
      <returns>The controller descriptor for the asynchronous action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.EndExecute(System.IAsyncResult)">
      <summary>Returns the result of an asynchronous operation.</summary>
      <returns>The result of an asynchronous operation.</returns>
      <param name="asyncResult">An object that represents the status of an asynchronous operation.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes of the specified type exist.</returns>
      <param name="attributeType">The type of the custom attributes to return.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetFilterAttributes(System.Boolean)">
      <summary>Gets the filter attributes.</summary>
      <returns>The filter attributes.</returns>
      <param name="useCache">Use cache flag.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetParameters">
      <summary>Returns the parameters of the action method.</summary>
      <returns>The parameters of the action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetSelectors">
      <summary>Returns the action-method selectors.</summary>
      <returns>The action-method selectors.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether one or more instances of the specified attribute type are defined for the action member.</summary>
      <returns>true if an attribute of type that is represented by <paramref name="attributeType" /> is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attribute.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.UniqueId">
      <summary>Gets the lazy initialized unique ID of the instance of this class.</summary>
      <returns>The lazy initialized unique ID of the instance of this class.</returns>
    </member>
    <member name="T:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor">
      <summary>Encapsulates information that describes an asynchronous controller, such as its name, type, and actions.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor" /> class.</summary>
      <param name="controllerType">The type of the controller.</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.ControllerType">
      <summary>Gets the type of the controller.</summary>
      <returns>The type of the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.FindAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Finds an action method by using the specified name and controller context.</summary>
      <returns>The information about the action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.GetCanonicalActions">
      <summary>Returns a list of action method descriptors in the controller.</summary>
      <returns>A list of action method descriptors in the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns custom attributes of a specified type that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.GetFilterAttributes(System.Boolean)">
      <summary>Gets the filter attributes.</summary>
      <returns>The filter attributes.</returns>
      <param name="useCache">true to use the cache, otherwise false.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether one or more instances of the specified custom attribute are defined for this member.</summary>
      <returns>true if an attribute of the type represented by <paramref name="attributeType" /> is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attribute.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.SynchronousOperationException">
      <summary>Represents an exception that occurred during the synchronous processing of an HTTP request in an ASP.NET MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.SynchronousOperationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.SynchronousOperationException" /> class using a system-supplied message.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.SynchronousOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.SynchronousOperationException" /> class using the specified message.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.SynchronousOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.SynchronousOperationException" /> class using a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Web.Mvc.Async.TaskAsyncActionDescriptor">
      <summary>When an action method returns either Task or Task&lt;T&gt; the <see cref="T:System.Web.Mvc.Async.TaskAsyncActionDescriptor" /> provides information about the action.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.#ctor(System.Reflection.MethodInfo,System.String,System.Web.Mvc.ControllerDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.TaskAsyncActionDescriptor" /> class.</summary>
      <param name="taskMethodInfo">The task method information.</param>
      <param name="actionName">The action name.</param>
      <param name="controllerDescriptor">The controller descriptor.</param>
    </member>
    <member name="P:System.Web.Mvc.Async.TaskAsyncActionDescriptor.ActionName">
      <summary>Gets the name of the action method.</summary>
      <returns>The name of the action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.BeginExecute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>Invokes the asynchronous action method using the specified parameters, controller context callback and state.</summary>
      <returns>An object that contains the result of an asynchronous call.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameters">The parameters of the action method.</param>
      <param name="callback">The optional callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="P:System.Web.Mvc.Async.TaskAsyncActionDescriptor.ControllerDescriptor">
      <summary>Gets the controller descriptor.</summary>
      <returns>The controller descriptor.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.EndExecute(System.IAsyncResult)">
      <summary>Ends the asynchronous operation.</summary>
      <returns>The result of an asynchronous operation.</returns>
      <param name="asyncResult">An object that represents the status of an asynchronous operation.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Executes the asynchronous action method</summary>
      <returns>The result of executing the asynchronous action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameters">The parameters of the action method.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.GetFilterAttributes(System.Boolean)">
      <summary>Returns an array of all custom attributes applied to this member.</summary>
      <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
      <param name="useCache">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.GetParameters">
      <summary>Returns the parameters of the asynchronous action method.</summary>
      <returns>The parameters of the asynchronous action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.GetSelectors">
      <summary>Returns the asynchronous action-method selectors.</summary>
      <returns>The asynchronous action-method selectors.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.TaskAsyncActionDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether one or more instance of the specified custom attribute are defined for this member.</summary>
      <returns>A value that indicates whether one or more instance of the specified custom attribute are defined for this member.</returns>
      <param name="attributeType">The type of the custom attribute.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="P:System.Web.Mvc.Async.TaskAsyncActionDescriptor.TaskMethodInfo">
      <summary>Gets information for the asynchronous task.</summary>
      <returns>Information for the asynchronous task.</returns>
    </member>
    <member name="P:System.Web.Mvc.Async.TaskAsyncActionDescriptor.UniqueId">
      <summary>Gets the unique ID for the task.</summary>
      <returns>The unique ID for the task.</returns>
    </member>
    <member name="T:System.Web.Mvc.Html.ChildActionExtensions">
      <summary>Represents support for calling child action methods and rendering the result inline in a parent view.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Invokes the specified child action method and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Invokes the specified child action method with the specified parameters and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <param name="routeValues">An object that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Invokes the specified child action method using the specified controller name and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Invokes the specified child action method using the specified parameters and controller name and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Invokes the specified child action method using the specified parameters and controller name and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <param name="routeValues">A dictionary that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Invokes the specified child action method using the specified parameters and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <param name="routeValues">A dictionary that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Invokes the specified child action method and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Invokes the specified child action method using the specified parameters and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <param name="routeValues">An object that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Invokes the specified child action method using the specified controller name and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Invokes the specified child action method using the specified parameters and controller name and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Invokes the specified child action method using the specified parameters and controller name and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <param name="routeValues">A dictionary that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Invokes the specified child action method using the specified parameters and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <param name="routeValues">A dictionary that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.DisplayExtensions">
      <summary>Represents support for rendering object values as HTML.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns HTML markup for each property in the object that is represented by a string expression.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the object that is represented by a string expression, using additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns HTML markup for each property in the object that is represented by the expression, using the specified template.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the object that is represented by the expression, using the specified template and additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
      <summary>Returns HTML markup for each property in the object that is represented by the expression, using the specified template and an HTML field ID.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the object that is represented by the expression, using the specified template, HTML field ID, and additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns HTML markup for each property in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" /> expression.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns a string that contains each property value in the object that is represented by the specified expression, using additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>Returns a string that contains each property value in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" />, using the specified template.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>Returns a string that contains each property value in the object that is represented by the specified expression, using the specified template and additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
      <summary>Returns HTML markup for each property in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" />, using the specified template and an HTML field ID.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the object that is represented by the specified expression, using the template, an HTML field ID, and additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper)">
      <summary>Returns HTML markup for each property in the model.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>Returns HTML markup for each property in the model, using additional view data.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns HTML markup for each property in the model using the specified template.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the model, using the specified template and additional view data.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns HTML markup for each property in the model using the specified template and HTML field ID.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the model, using the specified template, an HTML field ID, and additional view data.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.DisplayNameExtensions">
      <summary>Provides a mechanism to get display names.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayNameExtensions.DisplayName(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Gets the display name.</summary>
      <returns>The display name.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the display name.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayNameExtensions.DisplayNameFor``2(System.Web.Mvc.HtmlHelper{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Gets the display name for the model.</summary>
      <returns>The display name for the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the display name.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayNameExtensions.DisplayNameFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Gets the display name for the model.</summary>
      <returns>The display name for the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the display name.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayNameExtensions.DisplayNameForModel(System.Web.Mvc.HtmlHelper)">
      <summary>Gets the display name for the model.</summary>
      <returns>The display name for the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.DisplayTextExtensions">
      <summary>Provides a way to render object values as HTML.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayTextExtensions.DisplayText(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns HTML markup for each property in the object that is represented by the specified expression.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="name">An expression that identifies the object that contains the properties to display.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayTextExtensions.DisplayTextFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns HTML markup for each property in the object that is represented by the specified expression.</summary>
      <returns>The HTML markup for each property.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="T:System.Web.Mvc.Html.EditorExtensions">
      <summary>Represents support for the HTML input element in an application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template and additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template and HTML field name.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template, HTML field name, and additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns an HTML input element for each property in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" /> expression.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>Returns an HTML input element for each property in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" /> expression, using the specified template.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template and additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
      <summary>Returns an HTML input element for each property in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" /> expression, using the specified template and HTML field name.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template, HTML field name, and additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper)">
      <summary>Returns an HTML input element for each property in the model.</summary>
      <returns>An HTML input element for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>Returns an HTML input element for each property in the model, using additional view data.</summary>
      <returns>An HTML input element for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns an HTML input element for each property in the model, using the specified template.</summary>
      <returns>An HTML input element for each property in the model and in the specified template.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the model, using the specified template and additional view data.</summary>
      <returns>An HTML input element for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns an HTML input element for each property in the model, using the specified template name and HTML field name.</summary>
      <returns>An HTML input element for each property in the model and in the named template.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the model, using the template name, HTML field name, and additional view data.</summary>
      <returns>An HTML input element for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.FormExtensions">
      <summary>Represents support for HTML in an application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag. </returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Web.Mvc.FormMethod,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Mvc.FormMethod,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.Web.Routing.RouteValueDictionary)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.FormMethod,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.Web.Routing.RouteValueDictionary)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeValues">An object that contains the parameters for a route</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.EndForm(System.Web.Mvc.HtmlHelper)">
      <summary>Renders the closing &lt;/form&gt; tag to the response. </summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.InputExtensions">
      <summary>Represents support for HTML input controls in an application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a check box input element by using the specified HTML helper and the name of the form field.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Boolean)">
      <summary>Returns a check box input element by using the specified HTML helper, the name of the form field, and a value to indicate whether the check box is selected.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
      <param name="isChecked">true to select the check box; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a check box input element by using the specified HTML helper, the name of the form field, a value to indicate whether the check box is selected, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
      <param name="isChecked">true to select the check box; otherwise, false.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Boolean,System.Object)">
      <summary>Returns a check box input element by using the specified HTML helper, the name of the form field, a value that indicates whether the check box is selected, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
      <param name="isChecked">true to select the check box; otherwise, false.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a check box input element by using the specified HTML helper, the name of the form field, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns a check box input element by using the specified HTML helper, the name of the form field, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBoxFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns a check box input element for each property in the object that is represented by the specified expression.</summary>
      <returns>An HTML input element whose type attribute is set to "checkbox" for each property in the object that is represented by the specified expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBoxFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a check box input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "checkbox" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBoxFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
      <summary>Returns a check box input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "checkbox" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a hidden input element by using the specified HTML helper and the name of the form field.</summary>
      <returns>An input element whose type attribute is set to "hidden".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns a hidden input element by using the specified HTML helper, the name of the form field, and the value.</summary>
      <returns>An input element whose type attribute is set to "hidden".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the hidden input element. The value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object. If the element is not found in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" />, the value parameter is used.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a hidden input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "hidden".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the hidden input element. The value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object. If the element is not found in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object, the value parameter is used.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>Returns a hidden input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "hidden".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the hidden input element The value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object. If the element is not found in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object, the value parameter is used.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.HiddenFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns an HTML hidden input element for each property in the object that is represented by the specified expression.</summary>
      <returns>An input element whose type attribute is set to "hidden" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.HiddenFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML hidden input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "hidden" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.HiddenFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns an HTML hidden input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "hidden" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a password input element by using the specified HTML helper and the name of the form field.</summary>
      <returns>An input element whose type attribute is set to "password".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns a password input element by using the specified HTML helper, the name of the form field, and the value.</summary>
      <returns>An input element whose type attribute is set to "password".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the password input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a password input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "password".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the password input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>Returns a password input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "password".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the password input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.PasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns a password input element for each property in the object that is represented by the specified expression.</summary>
      <returns>An HTML input element whose type attribute is set to "password" for each property in the object that is represented by the specified expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.PasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a password input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "password" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.PasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns a password input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "password" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Boolean)">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="isChecked">true to select the radio button; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="isChecked">true to select the radio button; otherwise, false.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Boolean,System.Object)">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="isChecked">true to select the radio button; otherwise, false.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns a radio button input element for each property in the object that is represented by the specified expression.</summary>
      <returns>An HTML input element whose type attribute is set to "radio" for each property in the object that is represented by the specified expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a radio button input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "radio" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.Object)">
      <summary>Returns a radio button input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "radio" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a text input element by using the specified HTML helper and the name of the form field.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns a text input element by using the specified HTML helper, the name of the form field, and the value.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the text input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a text input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the text input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>Returns a text input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the text input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.String)">
      <summary>Returns a text input element.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
      <param name="value">The value of the text input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="format">A string that is used to format the input.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a text input element.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the text input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="format">A string that is used to format the input.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.String,System.Object)">
      <summary>Returns a text input element.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the text input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="format">A string that is used to format the input.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns a text input element for each property in the object that is represented by the specified expression.</summary>
      <returns>An HTML input element whose type attribute is set to "text" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a text input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element type attribute is set to "text" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns a text input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "text" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>Returns a text input element.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="format">A string that is used to format the input.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a text input element.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="format">A string that is used to format the input.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>Returns a text input element.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="format">A string that is used to format the input.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
    </member>
    <member name="T:System.Web.Mvc.Html.LabelExtensions">
      <summary>Represents support for the HTML label element in an ASP.NET MVC view.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.Label(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the property to display.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.Label(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression.</summary>
      <returns>Returns <see cref="T:System.Web.Mvc.MvcHtmlString" />.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the property to display.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.Label(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the property to display.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.Label(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression using the label text.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the property to display.</param>
      <param name="labelText">The label text to display.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.Label(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the property to display.</param>
      <param name="labelText">The label text.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.Label(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the property to display.</param>
      <param name="labelText">The label text.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the property to display.</param>
      <typeparam name="TModel">The  type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the property to display.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The  type of the model.</typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the property to display.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The  type of the model.</typeparam>
      <typeparam name="TValue">The value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression using the label text.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the property to display.</param>
      <param name="labelText">The label text to display.</param>
      <typeparam name="TModel">The  type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the property to display.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The  type of the model.</typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the property to display.</param>
      <param name="labelText">The label text.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The  type of the model.</typeparam>
      <typeparam name="TValue">The Value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelForModel(System.Web.Mvc.HtmlHelper)">
      <summary>Returns an HTML label element and the property name of the property that is represented by the model.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelForModel(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelForModel(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelForModel(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression using the label text.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="labelText">The label text to display.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelForModel(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="labelText">The label Text.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelForModel(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="labelText">The label text.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.LinkExtensions">
      <summary>Represents support for HTML links in an application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element. The attributes are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="routeValues">An object that contains the parameters for a route. </param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.MvcForm">
      <summary>Represents an HTML form element in an MVC view.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.#ctor(System.Web.HttpResponseBase)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Html.MvcForm" /> class using the specified HTTP response object.</summary>
      <param name="httpResponse">The HTTP response object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="httpResponse " />parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.#ctor(System.Web.Mvc.ViewContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Html.MvcForm" /> class using the specified view context.</summary>
      <param name="viewContext">An object that encapsulates the information that is required in order to render a view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="viewContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.Dispose">
      <summary>Releases all resources that are used by the current instance of the <see cref="T:System.Web.Mvc.Html.MvcForm" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.Dispose(System.Boolean)">
      <summary>Releases unmanaged and, optionally, managed resources used by the current instance of the <see cref="T:System.Web.Mvc.Html.MvcForm" /> class.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.EndForm">
      <summary>Ends the form and disposes of all form resources.</summary>
    </member>
    <member name="T:System.Web.Mvc.Html.NameExtensions">
      <summary>Gets the HTML ID and name attributes of the <see cref="T:System.Web.Mvc.HtmlHelper" /> string.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.NameExtensions.Id(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Gets the ID of the <see cref="T:System.Web.Mvc.HtmlHelper" /> string.</summary>
      <returns>The HTML ID attribute value for the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="name">An expression that identifies the object that contains the ID.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.NameExtensions.IdFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary> Gets the ID of the <see cref="T:System.Web.Mvc.HtmlHelper`1" /> string</summary>
      <returns>The HTML ID attribute value for the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the ID.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.NameExtensions.IdForModel(System.Web.Mvc.HtmlHelper)">
      <summary>Gets the ID of the <see cref="T:System.Web.Mvc.HtmlHelper" /> string.</summary>
      <returns>The HTML ID attribute value for the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.NameExtensions.Name(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Gets the full HTML field name for the object that is represented by the expression.</summary>
      <returns>The full HTML field name for the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="name">An expression that identifies the object that contains the name.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.NameExtensions.NameFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Gets the full HTML field name for the object that is represented by the expression.</summary>
      <returns>The full HTML field name for the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the name.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.NameExtensions.NameForModel(System.Web.Mvc.HtmlHelper)">
      <summary>Gets the full HTML field name for the object that is represented by the expression.</summary>
      <returns>The full HTML field name for the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.PartialExtensions">
      <summary>Represents the functionality to render a partial view as an HTML-encoded string.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Renders the specified partial view as an HTML-encoded string.</summary>
      <returns>The partial view that is rendered as an HTML-encoded string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="partialViewName">The name of the partial view to render.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Renders the specified partial view as an HTML-encoded string.</summary>
      <returns>The partial view that is rendered as an HTML-encoded string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="partialViewName">The name of the partial view to render.</param>
      <param name="model">The model for the partial view.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.ViewDataDictionary)">
      <summary>Renders the specified partial view as an HTML-encoded string.</summary>
      <returns>The partial view that is rendered as an HTML-encoded string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="model">The model for the partial view.</param>
      <param name="viewData">The view data dictionary for the partial view.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.ViewDataDictionary)">
      <summary>Renders the specified partial view as an HTML-encoded string.</summary>
      <returns>The partial view that is rendered as an HTML-encoded string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="partialViewName">The name of the partial view to render.</param>
      <param name="viewData">The view data dictionary for the partial view.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.RenderPartialExtensions">
      <summary>Provides support for rendering a partial view.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Renders the specified partial view by using the specified HTML helper.</summary>
      <param name="htmlHelper">The HTML helper.</param>
      <param name="partialViewName">The name of the partial view</param>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Renders the specified partial view, passing it a copy of the current <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object, but with the Model property set to the specified model.</summary>
      <param name="htmlHelper">The HTML helper.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="model">The model.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.ViewDataDictionary)">
      <summary>Renders the specified partial view, replacing the partial view's ViewData property with the specified <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object and setting the Model property of the view data to the specified model.</summary>
      <param name="htmlHelper">The HTML helper.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="model">The model for the partial view.</param>
      <param name="viewData">The view data for the partial view.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.ViewDataDictionary)">
      <summary>Renders the specified partial view, replacing its ViewData property with the specified <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object.</summary>
      <param name="htmlHelper">The HTML helper.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="viewData">The view data.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.SelectExtensions">
      <summary>Represents support for making selections in a list.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a single-selection select element using the specified HTML helper and the name of the form field.</summary>
      <returns>An HTML select element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, and the specified list items.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, and the specified HTML attributes.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, and the specified HTML attributes.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String)">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, and an option label.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, an option label, and the specified HTML attributes.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Object)">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, an option label, and the specified HTML attributes.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, and an option label.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String)">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and option label.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items, option label, and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Object)">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items, option label, and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a multi-select select element using the specified HTML helper and the name of the form field.</summary>
      <returns>An HTML select element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>Returns a multi-select select element using the specified HTML helper, the name of the form field, and the specified list items.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a multi-select select element using the specified HTML helper, the name of the form field, the specified list items, and the specified HMTL attributes.</summary>
      <returns>An HTML select element with an option subelement for each item in the list..</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>Returns a multi-select select element using the specified HTML helper, the name of the form field, and the specified list items.</summary>
      <returns>An HTML select element with an option subelement for each item in the list..</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression and using the specified list items.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.TextAreaExtensions">
      <summary>Represents support for HTML textarea controls.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns the specified textarea element by using the specified HTML helper and the name of the form field.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, and the specified HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns the specified textarea element by using the specified HTML helper and HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, and the text content.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="value">The text content.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, and the specified HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="value">The text content.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, the number of rows and columns, and the specified HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="value">The text content.</param>
      <param name="rows">The number of rows.</param>
      <param name="columns">The number of columns.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Int32,System.Int32,System.Object)">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, the number of rows and columns, and the specified HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="value">The text content.</param>
      <param name="rows">The number of rows.</param>
      <param name="columns">The number of columns.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, and the specified HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="value">The text content.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns an HTML textarea element for each property in the object that is represented by the specified expression.</summary>
      <returns>An HTML textarea element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML textarea element for each property in the object that is represented by the specified expression using the specified HTML attributes.</summary>
      <returns>An HTML textarea element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML textarea element for each property in the object that is represented by the specified expression using the specified HTML attributes and the number of rows and columns.</summary>
      <returns>An HTML textarea element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="rows">The number of rows.</param>
      <param name="columns">The number of columns.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Object)">
      <summary>Returns an HTML textarea element for each property in the object that is represented by the specified expression using the specified HTML attributes and the number of rows and columns.</summary>
      <returns>An HTML textarea element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="rows">The number of rows.</param>
      <param name="columns">The number of columns.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns an HTML textarea element for each property in the object that is represented by the specified expression using the specified HTML attributes.</summary>
      <returns>An HTML textarea element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.ValidationExtensions">
      <summary>Provides support for validating the input from an HTML form.</summary>
    </member>
    <member name="P:System.Web.Mvc.Html.ValidationExtensions.ResourceClassKey">
      <summary>Gets or sets the name of the resource file (class key) that contains localized string values.</summary>
      <returns>The name of the resource file (class key).</returns>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.Validate(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Retrieves the validation metadata for the specified model and applies each rule to the data field.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="modelName" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidateFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Retrieves the validation metadata for the specified model and applies each rule to the data field.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element. </param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element. </param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns the HTML markup for a validation-error message for each data field that is represented by the specified expression.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>Returns the HTML markup for a validation-error message for each data field that is represented by the specified expression, using the specified message.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns the HTML markup for a validation-error message for each data field that is represented by the specified expression, using the specified message and HTML attributes.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>Returns the HTML markup for a validation-error message for each data field that is represented by the specified expression, using the specified message and HTML attributes.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper)">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean)">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object and optionally displays only model-level errors.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="excludePropertyErrors">true to have the summary display model-level errors only, or false to have the summary display all errors.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String)">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object and optionally displays only model-level errors.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="excludePropertyErrors">true to have the summary display model-level errors only, or false to have the summary display all errors.</param>
      <param name="message">The message to display with the validation summary.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object and optionally displays only model-level errors.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="excludePropertyErrors">true to have the summary display model-level errors only, or false to have the summary display all errors.</param>
      <param name="message">The message to display with the validation summary.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String,System.Object)">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object and optionally displays only model-level errors.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="excludePropertyErrors">true to have the summary display model-level errors only, or false to have the summary display all errors.</param>
      <param name="message">The message to display with the validation summary.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HMTL helper instance that this method extends.</param>
      <param name="message">The message to display if the specified field contains an error.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="message">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns an unordered list (ul element) of validation messages in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="message">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element. </param>
    </member>
    <member name="T:System.Web.Mvc.Html.ValueExtensions">
      <summary>Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.ValueExtensions.Value(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates.</summary>
      <returns>The HTML markup for the value.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the model.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValueExtensions.Value(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates.</summary>
      <returns>The HTML markup for the value.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the model.</param>
      <param name="format">The format string.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValueExtensions.ValueFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates.</summary>
      <returns>The HTML markup for the value.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to expose.</param>
      <typeparam name="TModel">The model.</typeparam>
      <typeparam name="TProperty">The property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValueExtensions.ValueFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates.</summary>
      <returns>The HTML markup for the value.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to expose.</param>
      <param name="format">The format string.</param>
      <typeparam name="TModel">The model.</typeparam>
      <typeparam name="TProperty">The property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValueExtensions.ValueForModel(System.Web.Mvc.HtmlHelper)">
      <summary>Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates.</summary>
      <returns>The HTML markup for the value.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValueExtensions.ValueForModel(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates.</summary>
      <returns>The HTML markup for the value.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="format">The format string.</param>
    </member>
    <member name="T:System.Web.Mvc.Razor.MvcCSharpRazorCodeParser">
      <summary>Compiles ASP.NET Razor views into classes.</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcCSharpRazorCodeParser.#ctor">
      <summary>Initializes a new instance of the <see cref="M:System.Web.Mvc.Razor.MvcCSharpRazorCodeParser.#ctor" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcCSharpRazorCodeParser.InheritsDirective">
      <summary>The inherits directive.</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcCSharpRazorCodeParser.ModelDirective">
      <summary>The model directive.</summary>
    </member>
    <member name="T:System.Web.Mvc.Razor.MvcVBRazorCodeParser">
      <summary>Extends the VBCodeParser class by adding support for the @model keyword.</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcVBRazorCodeParser.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Razor.MvcVBRazorCodeParser" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcVBRazorCodeParser.InheritsStatement">
      <summary>Sets a value that indicates whether the current code block and model should be inherited.</summary>
      <returns>true if the code block and model is inherited; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcVBRazorCodeParser.ModelTypeDirective">
      <summary>The Model Type Directive.</summary>
      <returns>Returns void.</returns>
    </member>
    <member name="T:System.Web.Mvc.Razor.MvcWebPageRazorHost">
      <summary>Configures the ASP.NET Razor parser and code generator for a specified file.</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcWebPageRazorHost.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Razor.MvcWebPageRazorHost" /> class. </summary>
      <param name="virtualPath">The virtual path of the ASP.NET Razor file.</param>
      <param name="physicalPath">The physical path of the ASP.NET Razor file.</param>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcWebPageRazorHost.DecorateCodeGenerator(System.Web.Razor.Generator.RazorCodeGenerator)">
      <summary>Returns the ASP.NET MVC language-specific Razor code generator.</summary>
      <returns>The ASP.NET MVC language-specific Razor code generator.</returns>
      <param name="incomingCodeGenerator">The C# or Visual Basic code generator.</param>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcWebPageRazorHost.DecorateCodeParser(System.Web.Razor.Parser.ParserBase)">
      <summary>Returns the ASP.NET MVC language-specific Razor code parser using the specified language parser.</summary>
      <returns>The ASP.NET MVC language-specific Razor code parser.</returns>
      <param name="incomingCodeParser">The C# or Visual Basic code parser.</param>
    </member>
  </members>
</doc>